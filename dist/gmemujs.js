!function (name, definition) {
    if (typeof module != 'undefined') module.exports = definition()
    else if (typeof define == 'function' && define.amd) define(name, definition)
    else this[name] = definition()
}('gmemujs', function () {
  var AudioContext = window.AudioContext || window.webkitAudioContext || window.mozAudioContext;
  var INT16_MAX = Math.pow(2, 32) - 1;
  var Module = function () {
    var _Module = function () {
      // The Module object: Our interface to the outside world. We import
      // and export values on it, and do the work to get that through
      // closure compiler if necessary. There are various ways Module can be used:
      // 1. Not defined. We create it here
      // 2. A function parameter, function(Module) { ..generated code.. }
      // 3. pre-run appended it, var Module = {}; ..generated code..
      // 4. External script tag defines var Module.
      // We need to do an eval in order to handle the closure compiler
      // case, where this code here is minified but Module was defined
      // elsewhere (e.g. case 4 above). We also need to check if Module
      // already exists (e.g. case 3 above).
      // Note that if you want to run closure, and also to use Module
      // after the generated code, you will need to define   var Module = {};
      // before the code. Then that object will be used in the code, and you
      // can continue to use Module afterwards as well.
      var Module;
      if (!Module) Module = eval('(function() { try { return Module || {} } catch(e) { return {} } })()');

      // Sometimes an existing Module object exists with properties
      // meant to overwrite the default module functionality. Here
      // we collect those properties and reapply _after_ we configure
      // the current environment's defaults to avoid having to be so
      // defensive during initialization.
      var moduleOverrides = {};
      for (var key in Module) {
        if (Module.hasOwnProperty(key)) {
          moduleOverrides[key] = Module[key];
        }
      }

      // The environment setup code below is customized to use Module.
      // *** Environment setup code ***
      var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
      var ENVIRONMENT_IS_WEB = typeof window === 'object';
      var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
      var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

      if (ENVIRONMENT_IS_NODE) {
        // Expose functionality in the same simple way that the shells work
        // Note that we pollute the global namespace here, otherwise we break in node
        if (!Module['print']) Module['print'] = function print(x) {
          process['stdout'].write(x + '\n');
        };
        if (!Module['printErr']) Module['printErr'] = function printErr(x) {
          process['stderr'].write(x + '\n');
        };

        var nodeFS = require('fs');
        var nodePath = require('path');

        Module['read'] = function read(filename, binary) {
          filename = nodePath['normalize'](filename);
          var ret = nodeFS['readFileSync'](filename);
          // The path is absolute if the normalized version is the same as the resolved.
          if (!ret && filename != nodePath['resolve'](filename)) {
            filename = path.join(__dirname, '..', 'src', filename);
            ret = nodeFS['readFileSync'](filename);
          }
          if (ret && !binary) ret = ret.toString();
          return ret;
        };

        Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

        Module['load'] = function load(f) {
          globalEval(read(f));
        };

        Module['arguments'] = process['argv'].slice(2);

        module['exports'] = Module;
      }
      else if (ENVIRONMENT_IS_SHELL) {
        if (!Module['print']) Module['print'] = print;
        if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

        if (typeof read != 'undefined') {
          Module['read'] = read;
        } else {
          Module['read'] = function read() { throw 'no read() available (jsc?)' };
        }

        Module['readBinary'] = function readBinary(f) {
          return read(f, 'binary');
        };

        if (typeof scriptArgs != 'undefined') {
          Module['arguments'] = scriptArgs;
        } else if (typeof arguments != 'undefined') {
          Module['arguments'] = arguments;
        }

        this['Module'] = Module;

        eval("if (typeof gc === 'function' && gc.toString().indexOf('[native code]') > 0) var gc = undefined"); // wipe out the SpiderMonkey shell 'gc' function, which can confuse closure (uses it as a minified name, and it is then initted to a non-falsey value unexpectedly)
      }
      else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
        Module['read'] = function read(url) {
          var xhr = new XMLHttpRequest();
          xhr.open('GET', url, false);
          xhr.send(null);
          return xhr.responseText;
        };

        if (typeof arguments != 'undefined') {
          Module['arguments'] = arguments;
        }

        if (typeof console !== 'undefined') {
          if (!Module['print']) Module['print'] = function print(x) {
            console.log(x);
          };
          if (!Module['printErr']) Module['printErr'] = function printErr(x) {
            console.log(x);
          };
        } else {
          // Probably a worker, and without console.log. We can do very little here...
          var TRY_USE_DUMP = false;
          if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
            dump(x);
          }) : (function(x) {
            // self.postMessage(x); // enable this if you want stdout to be sent as messages
          }));
        }

        if (ENVIRONMENT_IS_WEB) {
          this['Module'] = Module;
        } else {
          Module['load'] = importScripts;
        }
      }
      else {
        // Unreachable because SHELL is dependant on the others
        throw 'Unknown runtime environment. Where are we?';
      }

      function globalEval(x) {
        eval.call(null, x);
      }
      if (!Module['load'] == 'undefined' && Module['read']) {
        Module['load'] = function load(f) {
          globalEval(Module['read'](f));
        };
      }
      if (!Module['print']) {
        Module['print'] = function(){};
      }
      if (!Module['printErr']) {
        Module['printErr'] = Module['print'];
      }
      if (!Module['arguments']) {
        Module['arguments'] = [];
      }
      // *** Environment setup code ***

      // Closure helpers
      Module.print = Module['print'];
      Module.printErr = Module['printErr'];

      // Callbacks
      Module['preRun'] = [];
      Module['postRun'] = [];

      // Merge back in the overrides
      for (var key in moduleOverrides) {
        if (moduleOverrides.hasOwnProperty(key)) {
          Module[key] = moduleOverrides[key];
        }
      }



      // === Auto-generated preamble library stuff ===

      //========================================
      // Runtime code shared with compiler
      //========================================

      var Runtime = {
        stackSave: function () {
          return STACKTOP;
        },
        stackRestore: function (stackTop) {
          STACKTOP = stackTop;
        },
        forceAlign: function (target, quantum) {
          quantum = quantum || 4;
          if (quantum == 1) return target;
          if (isNumber(target) && isNumber(quantum)) {
            return Math.ceil(target/quantum)*quantum;
          } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
            return '(((' +target + ')+' + (quantum-1) + ')&' + -quantum + ')';
          }
          return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
        },
        isNumberType: function (type) {
          return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
        },
        isPointerType: function isPointerType(type) {
        return type[type.length-1] == '*';
      },
        isStructType: function isStructType(type) {
        if (isPointerType(type)) return false;
        if (isArrayType(type)) return true;
        if (/<?\{ ?[^}]* ?\}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
        // See comment in isStructPointerType()
        return type[0] == '%';
      },
        INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
        FLOAT_TYPES: {"float":0,"double":0},
        or64: function (x, y) {
          var l = (x | 0) | (y | 0);
          var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
          return l + h;
        },
        and64: function (x, y) {
          var l = (x | 0) & (y | 0);
          var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
          return l + h;
        },
        xor64: function (x, y) {
          var l = (x | 0) ^ (y | 0);
          var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
          return l + h;
        },
        getNativeTypeSize: function (type) {
          switch (type) {
            case 'i1': case 'i8': return 1;
            case 'i16': return 2;
            case 'i32': return 4;
            case 'i64': return 8;
            case 'float': return 4;
            case 'double': return 8;
            default: {
              if (type[type.length-1] === '*') {
                return Runtime.QUANTUM_SIZE; // A pointer
              } else if (type[0] === 'i') {
                var bits = parseInt(type.substr(1));
                assert(bits % 8 === 0);
                return bits/8;
              } else {
                return 0;
              }
            }
          }
        },
        getNativeFieldSize: function (type) {
          return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
        },
        dedup: function dedup(items, ident) {
        var seen = {};
        if (ident) {
          return items.filter(function(item) {
            if (seen[item[ident]]) return false;
            seen[item[ident]] = true;
            return true;
          });
        } else {
          return items.filter(function(item) {
            if (seen[item]) return false;
            seen[item] = true;
            return true;
          });
        }
      },
        set: function set() {
        var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
        var ret = {};
        for (var i = 0; i < args.length; i++) {
          ret[args[i]] = 0;
        }
        return ret;
      },
        STACK_ALIGN: 8,
        getAlignSize: function (type, size, vararg) {
          // we align i64s and doubles on 64-bit boundaries, unlike x86
          if (!vararg && (type == 'i64' || type == 'double')) return 8;
          if (!type) return Math.min(size, 8); // align structures internally to 64 bits
          return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
        },
        calculateStructAlignment: function calculateStructAlignment(type) {
          type.flatSize = 0;
          type.alignSize = 0;
          var diffs = [];
          var prev = -1;
          var index = 0;
          type.flatIndexes = type.fields.map(function(field) {
            index++;
            var size, alignSize;
            if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
              size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
              alignSize = Runtime.getAlignSize(field, size);
            } else if (Runtime.isStructType(field)) {
              if (field[1] === '0') {
                // this is [0 x something]. When inside another structure like here, it must be at the end,
                // and it adds no size
                // XXX this happens in java-nbody for example... assert(index === type.fields.length, 'zero-length in the middle!');
                size = 0;
                if (Types.types[field]) {
                  alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
                } else {
                  alignSize = type.alignSize || QUANTUM_SIZE;
                }
              } else {
                size = Types.types[field].flatSize;
                alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
              }
            } else if (field[0] == 'b') {
              // bN, large number field, like a [N x i8]
              size = field.substr(1)|0;
              alignSize = 1;
            } else if (field[0] === '<') {
              // vector type
              size = alignSize = Types.types[field].flatSize; // fully aligned
            } else if (field[0] === 'i') {
              // illegal integer field, that could not be legalized because it is an internal structure field
              // it is ok to have such fields, if we just use them as markers of field size and nothing more complex
              size = alignSize = parseInt(field.substr(1))/8;
              assert(size % 1 === 0, 'cannot handle non-byte-size field ' + field);
            } else {
              assert(false, 'invalid type for calculateStructAlignment');
            }
            if (type.packed) alignSize = 1;
            type.alignSize = Math.max(type.alignSize, alignSize);
            var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
            type.flatSize = curr + size;
            if (prev >= 0) {
              diffs.push(curr-prev);
            }
            prev = curr;
            return curr;
          });
          if (type.name_ && type.name_[0] === '[') {
            // arrays have 2 elements, so we get the proper difference. then we scale here. that way we avoid
            // allocating a potentially huge array for [999999 x i8] etc.
            type.flatSize = parseInt(type.name_.substr(1))*type.flatSize/2;
          }
          type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
          if (diffs.length == 0) {
            type.flatFactor = type.flatSize;
          } else if (Runtime.dedup(diffs).length == 1) {
            type.flatFactor = diffs[0];
          }
          type.needsFlattening = (type.flatFactor != 1);
          return type.flatIndexes;
        },
        generateStructInfo: function (struct, typeName, offset) {
          var type, alignment;
          if (typeName) {
            offset = offset || 0;
            type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
            if (!type) return null;
            if (type.fields.length != struct.length) {
              printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
              return null;
            }
            alignment = type.flatIndexes;
          } else {
            var type = { fields: struct.map(function(item) { return item[0] }) };
            alignment = Runtime.calculateStructAlignment(type);
          }
          var ret = {
            __size__: type.flatSize
          };
          if (typeName) {
            struct.forEach(function(item, i) {
              if (typeof item === 'string') {
                ret[item] = alignment[i] + offset;
              } else {
                // embedded struct
                var key;
                for (var k in item) key = k;
                ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
              }
            });
          } else {
            struct.forEach(function(item, i) {
              ret[item[1]] = alignment[i];
            });
          }
          return ret;
        },
        dynCall: function (sig, ptr, args) {
          if (args && args.length) {
            if (!args.splice) args = Array.prototype.slice.call(args);
            args.splice(0, 0, ptr);
            return Module['dynCall_' + sig].apply(null, args);
          } else {
            return Module['dynCall_' + sig].call(null, ptr);
          }
        },
        functionPointers: [],
        addFunction: function (func) {
          for (var i = 0; i < Runtime.functionPointers.length; i++) {
            if (!Runtime.functionPointers[i]) {
              Runtime.functionPointers[i] = func;
              return 2*(1 + i);
            }
          }
          throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
        },
        removeFunction: function (index) {
          Runtime.functionPointers[(index-2)/2] = null;
        },
        getAsmConst: function (code, numArgs) {
          // code is a constant string on the heap, so we can cache these
          if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
          var func = Runtime.asmConstCache[code];
          if (func) return func;
          var args = [];
          for (var i = 0; i < numArgs; i++) {
            args.push(String.fromCharCode(36) + i); // $0, $1 etc
          }
          code = Pointer_stringify(code);
          if (code[0] === '"') {
            // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
            if (code.indexOf('"', 1) === code.length-1) {
              code = code.substr(1, code.length-2);
            } else {
              // something invalid happened, e.g. EM_ASM("..code($0)..", input)
              abort('invalid EM_ASM input |' + code + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
            }
          }
          return Runtime.asmConstCache[code] = eval('(function(' + args.join(',') + '){ ' + code + ' })'); // new Function does not allow upvars in node
        },
        warnOnce: function (text) {
          if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
          if (!Runtime.warnOnce.shown[text]) {
            Runtime.warnOnce.shown[text] = 1;
            Module.printErr(text);
          }
        },
        funcWrappers: {},
        getFuncWrapper: function (func, sig) {
          assert(sig);
          if (!Runtime.funcWrappers[func]) {
            Runtime.funcWrappers[func] = function dynCall_wrapper() {
              return Runtime.dynCall(sig, func, arguments);
            };
          }
          return Runtime.funcWrappers[func];
        },
        UTF8Processor: function () {
          var buffer = [];
          var needed = 0;
          this.processCChar = function (code) {
            code = code & 0xFF;

            if (buffer.length == 0) {
              if ((code & 0x80) == 0x00) {        // 0xxxxxxx
                return String.fromCharCode(code);
              }
              buffer.push(code);
              if ((code & 0xE0) == 0xC0) {        // 110xxxxx
                needed = 1;
              } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
                needed = 2;
              } else {                            // 11110xxx
                needed = 3;
              }
              return '';
            }

            if (needed) {
              buffer.push(code);
              needed--;
              if (needed > 0) return '';
            }

            var c1 = buffer[0];
            var c2 = buffer[1];
            var c3 = buffer[2];
            var c4 = buffer[3];
            var ret;
            if (buffer.length == 2) {
              ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
            } else if (buffer.length == 3) {
              ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
            } else {
              // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
              var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                              ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
              ret = String.fromCharCode(
                Math.floor((codePoint - 0x10000) / 0x400) + 0xD800,
                (codePoint - 0x10000) % 0x400 + 0xDC00);
            }
            buffer.length = 0;
            return ret;
          }
          this.processJSString = function processJSString(string) {
            string = unescape(encodeURIComponent(string));
            var ret = [];
            for (var i = 0; i < string.length; i++) {
              ret.push(string.charCodeAt(i));
            }
            return ret;
          }
        },
        getCompilerSetting: function (name) {
          throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
        },
        stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+7)&-8); return ret; },
        staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+7)&-8); return ret; },
        dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + size)|0;DYNAMICTOP = (((DYNAMICTOP)+7)&-8); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
        alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 8))*(quantum ? quantum : 8); return ret; },
        makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
        GLOBAL_BASE: 8,
        QUANTUM_SIZE: 4,
        __dummy__: 0
      }


      Module['Runtime'] = Runtime;









      //========================================
      // Runtime essentials
      //========================================

      var __THREW__ = 0; // Used in checking for thrown exceptions.

      var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
      var EXITSTATUS = 0;

      var undef = 0;
      // tempInt is used for 32-bit signed values or smaller. tempBigInt is used
      // for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
      var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
      var tempI64, tempI64b;
      var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

      function assert(condition, text) {
        if (!condition) {
          abort('Assertion failed: ' + text);
        }
      }

      var globalScope = this;

      // C calling interface. A convenient way to call C functions (in C files, or
      // defined with extern "C").
      //
      // Note: LLVM optimizations can inline and remove functions, after which you will not be
      //       able to call them. Closure can also do so. To avoid that, add your function to
      //       the exports using something like
      //
      //         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
      //
      // @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
      // @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
      //                   'array' for JavaScript arrays and typed arrays; note that arrays are 8-bit).
      // @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
      //                   except that 'array' is not possible (there is no way for us to know the length of the array)
      // @param args       An array of the arguments to the function, as native JS values (as in returnType)
      //                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
      // @return           The return value, as a native JS value (as in returnType)
      function ccall(ident, returnType, argTypes, args) {
        return ccallFunc(getCFunc(ident), returnType, argTypes, args);
      }
      Module["ccall"] = ccall;

      // Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
      function getCFunc(ident) {
        try {
          var func = Module['_' + ident]; // closure exported function
          if (!func) func = eval('_' + ident); // explicit lookup
        } catch(e) {
        }
        assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
        return func;
      }

      // Internal function that does a C call using a function, not an identifier
      function ccallFunc(func, returnType, argTypes, args) {
        var stack = 0;
        function toC(value, type) {
          if (type == 'string') {
            if (value === null || value === undefined || value === 0) return 0; // null string
            value = intArrayFromString(value);
            type = 'array';
          }
          if (type == 'array') {
            if (!stack) stack = Runtime.stackSave();
            var ret = Runtime.stackAlloc(value.length);
            writeArrayToMemory(value, ret);
            return ret;
          }
          return value;
        }
        function fromC(value, type) {
          if (type == 'string') {
            return Pointer_stringify(value);
          }
          assert(type != 'array');
          return value;
        }
        var i = 0;
        var cArgs = args ? args.map(function(arg) {
          return toC(arg, argTypes[i++]);
        }) : [];
        var ret = fromC(func.apply(null, cArgs), returnType);
        if (stack) Runtime.stackRestore(stack);
        return ret;
      }

      // Returns a native JS wrapper for a C function. This is similar to ccall, but
      // returns a function you can call repeatedly in a normal way. For example:
      //
      //   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
      //   alert(my_function(5, 22));
      //   alert(my_function(99, 12));
      //
      function cwrap(ident, returnType, argTypes) {
        var func = getCFunc(ident);
        return function() {
          return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
        }
      }
      Module["cwrap"] = cwrap;

      // Sets a value in memory in a dynamic way at run-time. Uses the
      // type data. This is the same as makeSetValue, except that
      // makeSetValue is done at compile-time and generates the needed
      // code then, whereas this function picks the right code at
      // run-time.
      // Note that setValue and getValue only do *aligned* writes and reads!
      // Note that ccall uses JS types as for defining types, while setValue and
      // getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
      function setValue(ptr, value, type, noSafe) {
        type = type || 'i8';
        if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
          switch(type) {
            case 'i1': HEAP8[(ptr)]=value; break;
            case 'i8': HEAP8[(ptr)]=value; break;
            case 'i16': HEAP16[((ptr)>>1)]=value; break;
            case 'i32': HEAP32[((ptr)>>2)]=value; break;
            case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
            case 'float': HEAPF32[((ptr)>>2)]=value; break;
            case 'double': HEAPF64[((ptr)>>3)]=value; break;
            default: abort('invalid type for setValue: ' + type);
          }
      }
      Module['setValue'] = setValue;

      // Parallel to setValue.
      function getValue(ptr, type, noSafe) {
        type = type || 'i8';
        if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
          switch(type) {
            case 'i1': return HEAP8[(ptr)];
            case 'i8': return HEAP8[(ptr)];
            case 'i16': return HEAP16[((ptr)>>1)];
            case 'i32': return HEAP32[((ptr)>>2)];
            case 'i64': return HEAP32[((ptr)>>2)];
            case 'float': return HEAPF32[((ptr)>>2)];
            case 'double': return HEAPF64[((ptr)>>3)];
            default: abort('invalid type for setValue: ' + type);
          }
        return null;
      }
      Module['getValue'] = getValue;

      var ALLOC_NORMAL = 0; // Tries to use _malloc()
      var ALLOC_STACK = 1; // Lives for the duration of the current function call
      var ALLOC_STATIC = 2; // Cannot be freed
      var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
      var ALLOC_NONE = 4; // Do not allocate
      Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
      Module['ALLOC_STACK'] = ALLOC_STACK;
      Module['ALLOC_STATIC'] = ALLOC_STATIC;
      Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
      Module['ALLOC_NONE'] = ALLOC_NONE;

      // allocate(): This is for internal use. You can use it yourself as well, but the interface
      //             is a little tricky (see docs right below). The reason is that it is optimized
      //             for multiple syntaxes to save space in generated code. So you should
      //             normally not use allocate(), and instead allocate memory using _malloc(),
      //             initialize it with setValue(), and so forth.
      // @slab: An array of data, or a number. If a number, then the size of the block to allocate,
      //        in *bytes* (note that this is sometimes confusing: the next parameter does not
      //        affect this!)
      // @types: Either an array of types, one for each byte (or 0 if no type at that position),
      //         or a single type which is used for the entire block. This only matters if there
      //         is initial data - if @slab is a number, then this does not matter at all and is
      //         ignored.
      // @allocator: How to allocate memory, see ALLOC_*
      function allocate(slab, types, allocator, ptr) {
        var zeroinit, size;
        if (typeof slab === 'number') {
          zeroinit = true;
          size = slab;
        } else {
          zeroinit = false;
          size = slab.length;
        }

        var singleType = typeof types === 'string' ? types : null;

        var ret;
        if (allocator == ALLOC_NONE) {
          ret = ptr;
        } else {
          ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
        }

        if (zeroinit) {
          var ptr = ret, stop;
          assert((ret & 3) == 0);
          stop = ret + (size & ~3);
          for (; ptr < stop; ptr += 4) {
            HEAP32[((ptr)>>2)]=0;
          }
          stop = ret + size;
          while (ptr < stop) {
            HEAP8[((ptr++)|0)]=0;
          }
          return ret;
        }

        if (singleType === 'i8') {
          if (slab.subarray || slab.slice) {
            HEAPU8.set(slab, ret);
          } else {
            HEAPU8.set(new Uint8Array(slab), ret);
          }
          return ret;
        }

        var i = 0, type, typeSize, previousType;
        while (i < size) {
          var curr = slab[i];

          if (typeof curr === 'function') {
            curr = Runtime.getFunctionIndex(curr);
          }

          type = singleType || types[i];
          if (type === 0) {
            i++;
            continue;
          }

          if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

          setValue(ret+i, curr, type);

          // no need to look up size unless type changes, so cache it
          if (previousType !== type) {
            typeSize = Runtime.getNativeTypeSize(type);
            previousType = type;
          }
          i += typeSize;
        }

        return ret;
      }
      Module['allocate'] = allocate;

      function Pointer_stringify(ptr, /* optional */ length) {
        // TODO: use TextDecoder
        // Find the length, and check for UTF while doing so
        var hasUtf = false;
        var t;
        var i = 0;
        while (1) {
          t = HEAPU8[(((ptr)+(i))|0)];
          if (t >= 128) hasUtf = true;
          else if (t == 0 && !length) break;
          i++;
          if (length && i == length) break;
        }
        if (!length) length = i;

        var ret = '';

        if (!hasUtf) {
          var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
          var curr;
          while (length > 0) {
            curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
            ret = ret ? ret + curr : curr;
            ptr += MAX_CHUNK;
            length -= MAX_CHUNK;
          }
          return ret;
        }

        var utf8 = new Runtime.UTF8Processor();
        for (i = 0; i < length; i++) {
          t = HEAPU8[(((ptr)+(i))|0)];
          ret += utf8.processCChar(t);
        }
        return ret;
      }
      Module['Pointer_stringify'] = Pointer_stringify;

      // Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
      // a copy of that string as a Javascript String object.
      function UTF16ToString(ptr) {
        var i = 0;

        var str = '';
        while (1) {
          var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
          if (codeUnit == 0)
            return str;
          ++i;
          // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
          str += String.fromCharCode(codeUnit);
        }
      }
      Module['UTF16ToString'] = UTF16ToString;

      // Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
      // null-terminated and encoded in UTF16LE form. The copy will require at most (str.length*2+1)*2 bytes of space in the HEAP.
      function stringToUTF16(str, outPtr) {
        for(var i = 0; i < str.length; ++i) {
          // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
          var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
          HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
        }
        // Null-terminate the pointer to the HEAP.
        HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
      }
      Module['stringToUTF16'] = stringToUTF16;

      // Given a pointer 'ptr' to a null-terminated UTF32LE-encoded string in the emscripten HEAP, returns
      // a copy of that string as a Javascript String object.
      function UTF32ToString(ptr) {
        var i = 0;

        var str = '';
        while (1) {
          var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
          if (utf32 == 0)
            return str;
          ++i;
          // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
          if (utf32 >= 0x10000) {
            var ch = utf32 - 0x10000;
            str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
          } else {
            str += String.fromCharCode(utf32);
          }
        }
      }
      Module['UTF32ToString'] = UTF32ToString;

      // Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
      // null-terminated and encoded in UTF32LE form. The copy will require at most (str.length+1)*4 bytes of space in the HEAP,
      // but can use less, since str.length does not return the number of characters in the string, but the number of UTF-16 code units in the string.
      function stringToUTF32(str, outPtr) {
        var iChar = 0;
        for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
          // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
          var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
          if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
            var trailSurrogate = str.charCodeAt(++iCodeUnit);
            codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
          }
          HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
          ++iChar;
        }
        // Null-terminate the pointer to the HEAP.
        HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
      }
      Module['stringToUTF32'] = stringToUTF32;

      function demangle(func) {
        var i = 3;
        // params, etc.
        var basicTypes = {
          'v': 'void',
          'b': 'bool',
          'c': 'char',
          's': 'short',
          'i': 'int',
          'l': 'long',
          'f': 'float',
          'd': 'double',
          'w': 'wchar_t',
          'a': 'signed char',
          'h': 'unsigned char',
          't': 'unsigned short',
          'j': 'unsigned int',
          'm': 'unsigned long',
          'x': 'long long',
          'y': 'unsigned long long',
          'z': '...'
        };
        var subs = [];
        var first = true;
        function dump(x) {
          //return;
          if (x) Module.print(x);
          Module.print(func);
          var pre = '';
          for (var a = 0; a < i; a++) pre += ' ';
          Module.print (pre + '^');
        }
        function parseNested() {
          i++;
          if (func[i] === 'K') i++; // ignore const
          var parts = [];
          while (func[i] !== 'E') {
            if (func[i] === 'S') { // substitution
              i++;
              var next = func.indexOf('_', i);
              var num = func.substring(i, next) || 0;
              parts.push(subs[num] || '?');
              i = next+1;
              continue;
            }
            if (func[i] === 'C') { // constructor
              parts.push(parts[parts.length-1]);
              i += 2;
              continue;
            }
            var size = parseInt(func.substr(i));
            var pre = size.toString().length;
            if (!size || !pre) { i--; break; } // counter i++ below us
            var curr = func.substr(i + pre, size);
            parts.push(curr);
            subs.push(curr);
            i += pre + size;
          }
          i++; // skip E
          return parts;
        }
        function parse(rawList, limit, allowVoid) { // main parser
          limit = limit || Infinity;
          var ret = '', list = [];
          function flushList() {
            return '(' + list.join(', ') + ')';
          }
          var name;
          if (func[i] === 'N') {
            // namespaced N-E
            name = parseNested().join('::');
            limit--;
            if (limit === 0) return rawList ? [name] : name;
          } else {
            // not namespaced
            if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
            var size = parseInt(func.substr(i));
            if (size) {
              var pre = size.toString().length;
              name = func.substr(i + pre, size);
              i += pre + size;
            }
          }
          first = false;
          if (func[i] === 'I') {
            i++;
            var iList = parse(true);
            var iRet = parse(true, 1, true);
            ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
          } else {
            ret = name;
          }
          paramLoop: while (i < func.length && limit-- > 0) {
            //dump('paramLoop');
            var c = func[i++];
            if (c in basicTypes) {
              list.push(basicTypes[c]);
            } else {
              switch (c) {
                case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
                case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
                case 'L': { // literal
                  i++; // skip basic type
                  var end = func.indexOf('E', i);
                  var size = end - i;
                  list.push(func.substr(i, size));
                  i += size + 2; // size + 'EE'
                  break;
                }
                case 'A': { // array
                  var size = parseInt(func.substr(i));
                  i += size.toString().length;
                  if (func[i] !== '_') throw '?';
                  i++; // skip _
                  list.push(parse(true, 1, true)[0] + ' [' + size + ']');
                  break;
                }
                case 'E': break paramLoop;
                default: ret += '?' + c; break paramLoop;
              }
            }
          }
          if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
          return rawList ? list : ret + flushList();
        }
        try {
          // Special-case the entry point, since its name differs from other name mangling.
          if (func == 'Object._main' || func == '_main') {
            return 'main()';
          }
          if (typeof func === 'number') func = Pointer_stringify(func);
          if (func[0] !== '_') return func;
          if (func[1] !== '_') return func; // C function
          if (func[2] !== 'Z') return func;
          switch (func[3]) {
            case 'n': return 'operator new()';
            case 'd': return 'operator delete()';
          }
          return parse();
        } catch(e) {
          return func;
        }
      }

      function demangleAll(text) {
        return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
      }

      function stackTrace() {
        var stack = new Error().stack;
        return stack ? demangleAll(stack) : '(no stack trace available)'; // Stack trace is not available at least on IE10 and Safari 6.
      }

      // Memory management

      var PAGE_SIZE = 4096;
      function alignMemoryPage(x) {
        return (x+4095)&-4096;
      }

      var HEAP;
      var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

      var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
      var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
      var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

      function enlargeMemory() {
        abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
      }

      var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
      var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
      var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

      var totalMemory = 4096;
      while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
        if (totalMemory < 16*1024*1024) {
          totalMemory *= 2;
        } else {
          totalMemory += 16*1024*1024
        }
      }
      if (totalMemory !== TOTAL_MEMORY) {
        Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be more reasonable');
        TOTAL_MEMORY = totalMemory;
      }

      // Initialize the runtime's memory
      // check for full engine support (use string 'subarray' to avoid closure compiler confusion)
      assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
             'JS engine does not provide full typed array support');

      var buffer = new ArrayBuffer(TOTAL_MEMORY);
      HEAP8 = new Int8Array(buffer);
      HEAP16 = new Int16Array(buffer);
      HEAP32 = new Int32Array(buffer);
      HEAPU8 = new Uint8Array(buffer);
      HEAPU16 = new Uint16Array(buffer);
      HEAPU32 = new Uint32Array(buffer);
      HEAPF32 = new Float32Array(buffer);
      HEAPF64 = new Float64Array(buffer);

      // Endianness check (note: assumes compiler arch was little-endian)
      HEAP32[0] = 255;
      assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

      Module['HEAP'] = HEAP;
      Module['HEAP8'] = HEAP8;
      Module['HEAP16'] = HEAP16;
      Module['HEAP32'] = HEAP32;
      Module['HEAPU8'] = HEAPU8;
      Module['HEAPU16'] = HEAPU16;
      Module['HEAPU32'] = HEAPU32;
      Module['HEAPF32'] = HEAPF32;
      Module['HEAPF64'] = HEAPF64;

      function callRuntimeCallbacks(callbacks) {
        while(callbacks.length > 0) {
          var callback = callbacks.shift();
          if (typeof callback == 'function') {
            callback();
            continue;
          }
          var func = callback.func;
          if (typeof func === 'number') {
            if (callback.arg === undefined) {
              Runtime.dynCall('v', func);
            } else {
              Runtime.dynCall('vi', func, [callback.arg]);
            }
          } else {
            func(callback.arg === undefined ? null : callback.arg);
          }
        }
      }

      var __ATPRERUN__  = []; // functions called before the runtime is initialized
      var __ATINIT__    = []; // functions called during startup
      var __ATMAIN__    = []; // functions called when main() is to be run
      var __ATEXIT__    = []; // functions called during shutdown
      var __ATPOSTRUN__ = []; // functions called after the runtime has exited

      var runtimeInitialized = false;

      function preRun() {
        // compatibility - merge in anything from Module['preRun'] at this time
        if (Module['preRun']) {
          if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
          while (Module['preRun'].length) {
            addOnPreRun(Module['preRun'].shift());
          }
        }
        callRuntimeCallbacks(__ATPRERUN__);
      }

      function ensureInitRuntime() {
        if (runtimeInitialized) return;
        runtimeInitialized = true;
        callRuntimeCallbacks(__ATINIT__);
      }

      function preMain() {
        callRuntimeCallbacks(__ATMAIN__);
      }

      function exitRuntime() {
        callRuntimeCallbacks(__ATEXIT__);
      }

      function postRun() {
        // compatibility - merge in anything from Module['postRun'] at this time
        if (Module['postRun']) {
          if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
          while (Module['postRun'].length) {
            addOnPostRun(Module['postRun'].shift());
          }
        }
        callRuntimeCallbacks(__ATPOSTRUN__);
      }

      function addOnPreRun(cb) {
        __ATPRERUN__.unshift(cb);
      }
      Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

      function addOnInit(cb) {
        __ATINIT__.unshift(cb);
      }
      Module['addOnInit'] = Module.addOnInit = addOnInit;

      function addOnPreMain(cb) {
        __ATMAIN__.unshift(cb);
      }
      Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

      function addOnExit(cb) {
        __ATEXIT__.unshift(cb);
      }
      Module['addOnExit'] = Module.addOnExit = addOnExit;

      function addOnPostRun(cb) {
        __ATPOSTRUN__.unshift(cb);
      }
      Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

      // Tools

      // This processes a JS string into a C-line array of numbers, 0-terminated.
      // For LLVM-originating strings, see parser.js:parseLLVMString function
      function intArrayFromString(stringy, dontAddNull, length /* optional */) {
        var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
        if (length) {
          ret.length = length;
        }
        if (!dontAddNull) {
          ret.push(0);
        }
        return ret;
      }
      Module['intArrayFromString'] = intArrayFromString;

      function intArrayToString(array) {
        var ret = [];
        for (var i = 0; i < array.length; i++) {
          var chr = array[i];
          if (chr > 0xFF) {
            chr &= 0xFF;
          }
          ret.push(String.fromCharCode(chr));
        }
        return ret.join('');
      }
      Module['intArrayToString'] = intArrayToString;

      // Write a Javascript array to somewhere in the heap
      function writeStringToMemory(string, buffer, dontAddNull) {
        var array = intArrayFromString(string, dontAddNull);
        var i = 0;
        while (i < array.length) {
          var chr = array[i];
          HEAP8[(((buffer)+(i))|0)]=chr;
          i = i + 1;
        }
      }
      Module['writeStringToMemory'] = writeStringToMemory;

      function writeArrayToMemory(array, buffer) {
        for (var i = 0; i < array.length; i++) {
          HEAP8[(((buffer)+(i))|0)]=array[i];
        }
      }
      Module['writeArrayToMemory'] = writeArrayToMemory;

      function writeAsciiToMemory(str, buffer, dontAddNull) {
        for (var i = 0; i < str.length; i++) {
          HEAP8[(((buffer)+(i))|0)]=str.charCodeAt(i);
        }
        if (!dontAddNull) HEAP8[(((buffer)+(str.length))|0)]=0;
      }
      Module['writeAsciiToMemory'] = writeAsciiToMemory;

      function unSign(value, bits, ignore) {
        if (value >= 0) {
          return value;
        }
        return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                          : Math.pow(2, bits)         + value;
      }
      function reSign(value, bits, ignore) {
        if (value <= 0) {
          return value;
        }
        var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                              : Math.pow(2, bits-1);
        if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                             // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                             // TODO: In i64 mode 1, resign the two parts separately and safely
          value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
        }
        return value;
      }

      // check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
      if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
        var ah  = a >>> 16;
        var al = a & 0xffff;
        var bh  = b >>> 16;
        var bl = b & 0xffff;
        return (al*bl + ((ah*bl + al*bh) << 16))|0;
      };
      Math.imul = Math['imul'];


      var Math_abs = Math.abs;
      var Math_cos = Math.cos;
      var Math_sin = Math.sin;
      var Math_tan = Math.tan;
      var Math_acos = Math.acos;
      var Math_asin = Math.asin;
      var Math_atan = Math.atan;
      var Math_atan2 = Math.atan2;
      var Math_exp = Math.exp;
      var Math_log = Math.log;
      var Math_sqrt = Math.sqrt;
      var Math_ceil = Math.ceil;
      var Math_floor = Math.floor;
      var Math_pow = Math.pow;
      var Math_imul = Math.imul;
      var Math_fround = Math.fround;
      var Math_min = Math.min;

      // A counter of dependencies for calling run(). If we need to
      // do asynchronous work before running, increment this and
      // decrement it. Incrementing must happen in a place like
      // PRE_RUN_ADDITIONS (used by emcc to add file preloading).
      // Note that you can add dependencies in preRun, even though
      // it happens right before run - run will be postponed until
      // the dependencies are met.
      var runDependencies = 0;
      var runDependencyWatcher = null;
      var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

      function addRunDependency(id) {
        runDependencies++;
        if (Module['monitorRunDependencies']) {
          Module['monitorRunDependencies'](runDependencies);
        }
      }
      Module['addRunDependency'] = addRunDependency;
      function removeRunDependency(id) {
        runDependencies--;
        if (Module['monitorRunDependencies']) {
          Module['monitorRunDependencies'](runDependencies);
        }
        if (runDependencies == 0) {
          if (runDependencyWatcher !== null) {
            clearInterval(runDependencyWatcher);
            runDependencyWatcher = null;
          }
          if (dependenciesFulfilled) {
            var callback = dependenciesFulfilled;
            dependenciesFulfilled = null;
            callback(); // can add another dependenciesFulfilled
          }
        }
      }
      Module['removeRunDependency'] = removeRunDependency;

      Module["preloadedImages"] = {}; // maps url to image data
      Module["preloadedAudios"] = {}; // maps url to audio data


      var memoryInitializer = null;

      // === Body ===
      var __ZTVN10__cxxabiv117__class_type_infoE = 54264;
      var __ZTVN10__cxxabiv120__si_class_type_infoE = 54304;




      STATIC_BASE = 8;

      STATICTOP = STATIC_BASE + Runtime.alignMemory(55067);
      /* global initializers */ __ATINIT__.push();


      /* memory initializer */ allocate([123,34,108,101,110,103,116,104,34,58,32,37,100,44,32,34,115,121,115,116,101,109,34,58,32,34,37,115,34,44,32,34,103,97,109,101,34,58,32,34,37,115,34,44,32,34,115,111,110,103,34,58,32,34,37,115,34,44,32,34,97,117,116,104,111,114,34,58,32,34,37,115,34,44,32,34,99,111,112,121,114,105,103,104,116,34,58,32,34,37,115,34,44,32,34,99,111,109,109,101,110,116,34,58,32,34,37,115,34,44,32,34,100,117,109,112,101,114,34,58,32,34,37,115,34,125,0,0,8,0,0,0,0,0,0,0,104,101,108,108,111,32,119,111,114,108,100,33], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
      /* memory initializer */ allocate([21,1,25,61,42,62,38,2,0,2,3,4,6,8,11,16,23,32,45,64,90,128,180,255,40,117,110,115,105,103,110,101,100,41,32,97,100,100,114,32,60,32,114,101,103,95,99,111,117,110,116,0,0,0,0,0,115,114,99,47,103,97,109,101,45,109,117,115,105,99,45,101,109,117,47,103,109,101,47,65,121,95,65,112,117,46,99,112,112,0,0,0,0,0,0,0,119,114,105,116,101,95,100,97,116,97,95,0,0,0,0,0,102,105,110,97,108,95,101,110,100,95,116,105,109,101,32,62,61,32,108,97,115,116,95,116,105,109,101,0,0,0,0,0,114,117,110,95,117,110,116,105,108,0,0,0,0,0,0,0,45,114,101,109,97,105,110,32,60,61,32,101,110,118,95,112,101,114,105,111,100,0,0,0,101,110,118,46,100,101,108,97,121,32,62,32,48,0,0,0,101,110,118,46,112,111,115,32,60,32,48,0,0,0,0,0,40,98,108,105,112,95,108,111,110,103,41,32,40,116,105,109,101,32,62,62,32,66,76,73,80,95,66,85,70,70,69,82,95,65,67,67,85,82,65,67,89,41,32,60,32,98,108,105,112,95,98,117,102,45,62,98,117,102,102,101,114,95,115,105,122,101,95,0,0,0,0,0,115,114,99,47,103,97,109,101,45,109,117,115,105,99,45,101,109,117,47,103,109,101,47,66,108,105,112,95,66,117,102,102,101,114,46,104,0,0,0,0,111,102,102,115,101,116,95,114,101,115,97,109,112,108,101,100,0,0,0,0,0,0,0,0,40,117,110,115,105,103,110,101,100,41,32,105,32,60,32,111,115,99,95,99,111,117,110,116,0,0,0,0,0,0,0,0,115,114,99,47,103,97,109,101,45,109,117,115,105,99,45,101,109,117,47,103,109,101,47,65,121,95,65,112,117,46,104,0,111,115,99,95,111,117,116,112,117,116,0,0,0,0,0,0,4,10,7,6,4,4,7,4,4,11,7,6,4,4,7,4,13,10,7,6,4,4,7,4,12,11,7,6,4,4,7,4,12,10,16,6,4,4,7,4,12,11,16,6,4,4,7,4,12,10,13,6,11,11,10,4,12,11,13,6,4,4,7,4,4,4,4,4,4,4,7,4,4,4,4,4,4,4,7,4,4,4,4,4,4,4,7,4,4,4,4,4,4,4,7,4,4,4,4,4,4,4,7,4,4,4,4,4,4,4,7,4,7,7,7,7,7,7,4,7,4,4,4,4,4,4,7,4,4,4,4,4,4,4,7,4,4,4,4,4,4,4,7,4,4,4,4,4,4,4,7,4,4,4,4,4,4,4,7,4,4,4,4,4,4,4,7,4,4,4,4,4,4,4,7,4,4,4,4,4,4,4,7,4,4,4,4,4,4,4,7,4,11,10,10,10,17,11,7,11,11,10,10,8,17,17,7,11,11,10,10,11,17,11,7,11,11,4,10,11,17,8,7,11,11,10,10,19,17,11,7,11,11,4,10,4,17,8,7,11,11,10,10,4,17,11,7,11,11,6,10,4,17,8,7,11,102,97,108,115,101,0,0,0,115,114,99,47,103,97,109,101,45,109,117,115,105,99,45,101,109,117,47,103,109,101,47,65,121,95,67,112,117,46,99,112,112,0,0,0,0,0,0,0,114,117,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,6,12,2,0,0,3,0,0,7,12,2,0,0,3,0,0,0,0,0,15,15,11,0,0,7,0,0,0,0,0,0,64,64,112,192,0,96,11,16,64,64,112,192,0,96,11,16,64,64,112,192,0,96,11,16,64,64,112,192,0,96,11,16,64,64,112,192,0,96,11,160,64,64,112,192,0,96,11,160,75,75,123,203,11,107,0,11,64,64,112,192,0,96,11,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,11,0,128,128,128,128,0,0,11,0,128,128,128,128,0,0,11,0,208,208,208,208,0,0,11,0,208,208,208,208,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,15,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,232,141,0,0,1,0,0,0,2,0,0,0,3,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,1,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,1,0,0,0,5,0,0,0,4,0,0,0,0,0,0,0,56,141,0,0,0,0,0,0,8,141,0,0,16,141,0,0,24,141,0,0,32,141,0,0,87,97,118,101,32,49,0,0,87,97,118,101,32,50,0,0,87,97,118,101,32,51,0,0,66,101,101,112,101,114,0,0,0,1,0,0,1,1,0,0,2,1,0,0,0,3,0,0,48,143,0,0,0,0,0,0,1,0,0,0,2,0,0,0,64,143,0,0,1,0,0,0,85,110,107,110,111,119,110,32,102,105,108,101,32,118,101,114,115,105,111,110,0,0,0,0,70,105,108,101,32,100,97,116,97,32,109,105,115,115,105,110,103,0,0,0,0,0,0,0,66,97,100,32,100,97,116,97,32,98,108,111,99,107,32,115,105,122,101,0,0,0,0,0,77,105,115,115,105,110,103,32,102,105,108,101,32,100,97,116,97,0,0,0,0,0,0,0,243,205,0,0,237,94,251,118,24,250,0,0,0,0,0,0,243,205,0,0,237,86,251,118,205,0,0,24,247,0,0,0,54,65,121,95,69,109,117,0,54,65,121,95,67,112,117,0,0,212,0,0,216,141,0,0,136,212,0,0,208,141,0,0,0,0,0,0,2,0,0,0,224,141,0,0,0,80,1,0,40,146,0,0,2,0,0,0,33,98,117,102,32,38,38,32,110,101,119,95,98,117,102,0,115,114,99,47,103,97,109,101,45,109,117,115,105,99,45,101,109,117,47,103,109,101,47,67,108,97,115,115,105,99,95,69,109,117,46,104,0,0,0,0,115,101,116,95,98,117,102,102,101,114,0,0,0,0,0,0,108,97,115,116,95,116,105,109,101,32,62,61,32,116,105,109,101,0,0,0,0,0,0,0,115,114,99,47,103,97,109,101,45,109,117,115,105,99,45,101,109,117,47,103,109,101,47,65,121,95,65,112,117,46,104,0,101,110,100,95,102,114,97,109,101,0,0,0,0,0,0,0,40,117,110,115,105,103,110,101,100,32,108,111,110,103,41,32,112,111,115,32,60,61,32,40,117,110,115,105,103,110,101,100,32,108,111,110,103,41,32,102,105,108,101,95,115,105,122,101,32,45,32,50,0,0,0,0,115,114,99,47,103,97,109,101,45,109,117,115,105,99,45,101,109,117,47,103,109,101,47,65,121,95,69,109,117,46,99,112,112,0,0,0,0,0,0,0,103,101,116,95,100,97,116,97,0,0,0,0,0,0,0,0,90,88,65,89,69,77,85,76,0,0,0,0,0,0,0,0,77,105,115,115,105,110,103,32,116,114,97,99,107,32,100,97,116,97,0,0,0,0,0,0,90,88,32,83,112,101,99,116,114,117,109,0,0,0,0,0,65,89,0,0,0,0,0,0,0,0,0,0,168,143,0,0,7,0,0,0,8,0,0,0,3,0,0,0,1,0,0,0,5,0,0,0,6,0,0,0,9,0,0,0,10,0,0,0,6,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,2,0,0,0,6,0,0,0,7,0,0,0,4,0,0,0,55,65,121,95,70,105,108,101,0,0,0,0,0,0,0,0,40,212,0,0,152,143,0,0,24,174,0,0,0,0,0,0,115,114,99,47,103,97,109,101,45,109,117,115,105,99,45,101,109,117,47,103,109,101,47,66,108,105,112,95,66,117,102,102,101,114,46,99,112,112,0,0,48,0,0,0,0,0,0,0,115,101,116,95,115,97,109,112,108,101,95,114,97,116,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,0,0,98,117,102,102,101,114,95,115,105,122,101,95,32,33,61,32,115,105,108,101,110,116,95,98,117,102,95,115,105,122,101,0,108,101,110,103,116,104,95,32,61,61,32,109,115,101,99,0,102,97,99,116,111,114,32,62,32,48,32,124,124,32,33,115,97,109,112,108,101,95,114,97,116,101,95,0,0,0,0,0,99,108,111,99,107,95,114,97,116,101,95,102,97,99,116,111,114,0,0,0,0,0,0,0,115,97,109,112,108,101,115,95,97,118,97,105,108,40,41,32,60,61,32,40,108,111,110,103,41,32,98,117,102,102,101,114,95,115,105,122,101,95,0,0,101,110,100,95,102,114,97,109,101,0,0,0,0,0,0,0,99,111,117,110,116,32,60,61,32,115,97,109,112,108,101,115,95,97,118,97,105,108,40,41,0,0,0,0,0,0,0,0,114,101,109,111,118,101,95,115,105,108,101,110,99,101,0,0,99,111,117,110,116,95,99,108,111,99,107,115,0,0,0,0,107,101,114,110,101,108,95,117,110,105,116,32,62,32,48,0,118,111,108,117,109,101,95,117,110,105,116,0,0,0,0,0,0,0,0,0,40,146,0,0,11,0,0,0,12,0,0,0,3,0,0,0,1,0,0,0,8,0,0,0,1,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,1,0,0,0,1,0,0,0,3,0,0,0,4,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,0,0,40,99,104,46,99,101,110,116,101,114,32,38,38,32,99,104,46,108,101,102,116,32,38,38,32,99,104,46,114,105,103,104,116,41,32,124,124,32,40,33,99,104,46,99,101,110,116,101,114,32,38,38,32,33,99,104,46,108,101,102,116,32,38,38,32,33,99,104,46,114,105,103,104,116,41,0,0,0,0,0,115,114,99,47,103,97,109,101,45,109,117,115,105,99,45,101,109,117,47,103,109,101,47,67,108,97,115,115,105,99,95,69,109,117,46,99,112,112,0,0,109,117,116,101,95,118,111,105,99,101,115,95,0,0,0,0,99,108,111,99,107,115,95,101,109,117,108,97,116,101,100,0,112,108,97,121,95,0,0,0,49,49,67,108,97,115,115,105,99,95,69,109,117,0,0,0,40,212,0,0,24,146,0,0,168,173,0,0,0,0,0,0,110,32,60,61,32,115,105,122,101,95,0,0,0,0,0,0,115,114,99,47,103,97,109,101,45,109,117,115,105,99,45,101,109,117,47,103,109,101,47,98,108,97,114,103,103,95,99,111,109,109,111,110,46,104,0,0,111,112,101,114,97,116,111,114,91,93,0,0,0,0,0,0,85,110,101,120,112,101,99,116,101,100,32,101,110,100,32,111,102,32,102,105,108,101,0,0,82,101,97,100,32,101,114,114,111,114,0,0,0,0,0,0,110,32,62,61,32,48,0,0,115,114,99,47,103,97,109,101,45,109,117,115,105,99,45,101,109,117,47,103,109,101,47,68,97,116,97,95,82,101,97,100,101,114,46,99,112,112,0,0,115,107,105,112,0,0,0,0,0,0,0,0,152,147,0,0,13,0,0,0,14,0,0,0,9,0,0,0,10,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,192,147,0,0,15,0,0,0,16,0,0,0,11,0,0,0,12,0,0,0,2,0,0,0,7,0,0,0,0,0,0,0,56,148,0,0,17,0,0,0,18,0,0,0,13,0,0,0,10,0,0,0,3,0,0,0,8,0,0,0,4,0,0,0,5,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,128,147,0,0,19,0,0,0,20,0,0,0,1,0,0,0,10,0,0,0,1,0,0,0,7,0,0,0,49,49,68,97,116,97,95,82,101,97,100,101,114,0,0,0,0,212,0,0,112,147,0,0,49,51,83,117,98,115,101,116,95,82,101,97,100,101,114,0,40,212,0,0,136,147,0,0,128,147,0,0,0,0,0,0,49,54,82,101,109,97,105,110,105,110,103,95,82,101,97,100,101,114,0,0,0,0,0,0,40,212,0,0,168,147,0,0,128,147,0,0,0,0,0,0,0,0,0,0,16,148,0,0,21,0,0,0,22,0,0,0,1,0,0,0,10,0,0,0,3,0,0,0,8,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,49,49,70,105,108,101,95,82,101,97,100,101,114,0,0,0,40,212,0,0,0,148,0,0,128,147,0,0,0,0,0,0,49,53,77,101,109,95,70,105,108,101,95,82,101,97,100,101,114,0,0,0,0,0,0,0,40,212,0,0,32,148,0,0,16,148,0,0,0,0,0,0,0,0,0,0,32,149,0,0,23,0,0,0,24,0,0,0,1,0,0,0,0,0,0,0,110,101,119,95,99,111,117,110,116,32,60,32,114,101,115,97,109,112,108,101,114,95,115,105,122,101,0,0,0,0,0,0,115,114,99,47,103,97,109,101,45,109,117,115,105,99,45,101,109,117,47,103,109,101,47,68,117,97,108,95,82,101,115,97,109,112,108,101,114,46,99,112,112,0,0,0,0,0,0,0,112,108,97,121,95,102,114,97,109,101,95,0,0,0,0,0,98,108,105,112,95,98,117,102,46,115,97,109,112,108,101,115,95,97,118,97,105,108,40,41,32,61,61,32,112,97,105,114,95,99,111,117,110,116,0,0,99,111,117,110,116,32,61,61,32,40,108,111,110,103,41,32,115,97,109,112,108,101,95,98,117,102,95,115,105,122,101,0,49,52,68,117,97,108,95,82,101,115,97,109,112,108,101,114,0,0,0,0,0,0,0,0,0,212,0,0,8,149,0,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,0,0,110,32,60,61,32,115,105,122,101,95,0,0,0,0,0,0,115,114,99,47,103,97,109,101,45,109,117,115,105,99,45,101,109,117,47,103,109,101,47,98,108,97,114,103,103,95,99,111,109,109,111,110,46,104,0,0,111,112,101,114,97,116,111,114,91,93,0,0,0,0,0,0,119,114,105,116,101,95,112,111,115,32,60,61,32,98,117,102,46,101,110,100,40,41,0,0,115,114,99,47,103,97,109,101,45,109,117,115,105,99,45,101,109,117,47,103,109,101,47,70,105,114,95,82,101,115,97,109,112,108,101,114,46,104,0,0,119,114,105,116,101,0,0,0,0,0,0,0,112,150,0,0,25,0,0,0,26,0,0,0,10,0,0,0,1,0,0,0,14,0,0,0,10,0,0,0,11,0,0,0,27,0,0,0,12,0,0,0,15,0,0,0,6,0,0,0,13,0,0,0,116,111,116,97,108,95,115,97,109,112,108,101,115,32,37,32,50,32,61,61,32,48,0,0,115,114,99,47,103,97,109,101,45,109,117,115,105,99,45,101,109,117,47,103,109,101,47,69,102,102,101,99,116,115,95,66,117,102,102,101,114,46,99,112,112,0,0,0,0,0,0,0,114,101,97,100,95,115,97,109,112,108,101,115,0,0,0,0,49,52,69,102,102,101,99,116,115,95,66,117,102,102,101,114,0,0,0,0,0,0,0,0,40,212,0,0,88,150,0,0,168,171,0,0,0,0,0,0,40,117,110,115,105,103,110,101,100,41,32,105,110,100,101,120,32,60,32,111,115,99,95,99,111,117,110,116,0,0,0,0,115,114,99,47,103,97,109,101,45,109,117,115,105,99,45,101,109,117,47,103,109,101,47,71,98,95,65,112,117,46,99,112,112,0,0,0,0,0,0,0,111,115,99,95,111,117,116,112,117,116,0,0,0,0,0,0,40,99,101,110,116,101,114,32,38,38,32,108,101,102,116,32,38,38,32,114,105,103,104,116,41,32,124,124,32,40,33,99,101,110,116,101,114,32,38,38,32,33,108,101,102,116,32,38,38,32,33,114,105,103,104,116,41,0,0,0,0,0,0,0,132,64,67,170,45,120,146,60,96,89,89,176,52,184,46,218,101,110,100,95,116,105,109,101,32,62,61,32,108,97,115,116,95,116,105,109,101,0,0,0,114,117,110,95,117,110,116,105,108,0,0,0,0,0,0,0,110,101,120,116,95,102,114,97,109,101,95,116,105,109,101,32,62,61,32,101,110,100,95,116,105,109,101,0,0,0,0,0,101,110,100,95,102,114,97,109,101,0,0,0,0,0,0,0,108,97,115,116,95,116,105,109,101,32,62,61,32,101,110,100,95,116,105,109,101,0,0,0,40,117,110,115,105,103,110,101,100,41,32,100,97,116,97,32,60,32,48,120,49,48,48,0,119,114,105,116,101,95,114,101,103,105,115,116,101,114,0,0,128,63,0,255,191,255,63,0,255,191,127,255,159,255,191,255,255,0,0,191,0,119,128,255,255,255,255,255,255,255,255,255,40,117,110,115,105,103,110,101,100,41,32,105,110,100,101,120,32,60,32,114,101,103,105,115,116,101,114,95,99,111,117,110,116,0,0,0,0,0,0,0,114,101,97,100,95,114,101,103,105,115,116,101,114,0,0,0,40,98,108,105,112,95,108,111,110,103,41,32,40,116,105,109,101,32,62,62,32,66,76,73,80,95,66,85,70,70,69,82,95,65,67,67,85,82,65,67,89,41,32,60,32,98,108,105,112,95,98,117,102,45,62,98,117,102,102,101,114,95,115,105,122,101,95,0,0,0,0,0,115,114,99,47,103,97,109,101,45,109,117,115,105,99,45,101,109,117,47,103,109,101,47,66,108,105,112,95,66,117,102,102,101,114,46,104,0,0,0,0,111,102,102,115,101,116,95,114,101,115,97,109,112,108,101,100,0,0,0,0,0,0,0,0,115,116,97,114,116,32,37,32,112,97,103,101,95,115,105,122,101,32,61,61,32,48,0,0,115,114,99,47,103,97,109,101,45,109,117,115,105,99,45,101,109,117,47,103,109,101,47,71,98,95,67,112,117,46,99,112,112,0,0,0,0,0,0,0,109,97,112,95,99,111,100,101,0,0,0,0,0,0,0,0,115,105,122,101,32,37,32,112,97,103,101,95,115,105,122,101,32,61,61,32,48,0,0,0,102,97,108,115,101,0,0,0,114,117,110,0,0,0,0,0,42,40,118,111,108,97,116,105,108,101,32,99,104,97,114,42,41,32,38,105,32,33,61,32,48,0,0,0,0,0,0,0,115,114,99,47,103,97,109,101,45,109,117,115,105,99,45,101,109,117,47,103,109,101,47,98,108,97,114,103,103,95,101,110,100,105,97,110,46,104,0,0,98,108,97,114,103,103,95,118,101,114,105,102,121,95,98,121,116,101,95,111,114,100,101,114,0,0,0,0,0,0,0,0,1,2,4,6,0,0,0,0,8,16,32,48,64,80,96,112,0,0,0,0,64,155,0,0,28,0,0,0,29,0,0,0,30,0,0,0,11,0,0,0,8,0,0,0,16,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,3,0,0,0,12,0,0,0,3,0,0,0,4,0,0,0,2,0,0,0,14,0,0,0,17,0,0,0,0,0,0,0,72,154,0,0,0,0,0,0,8,154,0,0,24,154,0,0,40,154,0,0,48,154,0,0,83,113,117,97,114,101,32,49,0,0,0,0,0,0,0,0,83,113,117,97,114,101,32,50,0,0,0,0,0,0,0,0,87,97,118,101,0,0,0,0,78,111,105,115,101,0,0,0,1,1,0,0,2,1,0,0,0,1,0,0,0,3,0,0,104,155,0,0,0,0,0,0,3,0,0,0,4,0,0,0,96,155,0,0,1,0,0,0,85,110,107,110,111,119,110,32,102,105,108,101,32,118,101,114,115,105,111,110,0,0,0,0,73,110,118,97,108,105,100,32,116,105,109,101,114,32,109,111,100,101,0,0,0,0,0,0,73,110,118,97,108,105,100,32,108,111,97,100,47,105,110,105,116,47,112,108,97,121,32,97,100,100,114,101,115,115,0,0,10,4,6,8,0,0,0,0,128,191,0,0,191,0,63,0,0,191,127,255,159,0,191,0,255,0,0,191,119,243,241,0,0,0,0,0,0,0,0,0,172,221,218,72,54,2,207,22,44,4,229,44,172,221,218,72,69,109,117,108,97,116,105,111,110,32,101,114,114,111,114,32,40,105,108,108,101,103,97,108,47,117,110,115,117,112,112,111,114,116,101,100,32,105,110,115,116,114,117,99,116,105,111,110,41,0,0,0,0,0,0,0,55,71,98,115,95,69,109,117,0,0,0,0,0,0,0,0,54,71,98,95,67,112,117,0,0,212,0,0,48,155,0,0,136,212,0,0,32,155,0,0,0,0,0,0,2,0,0,0,56,155,0,0,0,80,1,0,40,146,0,0,2,0,0,0,71,66,83,0,0,0,0,0,71,97,109,101,32,66,111,121,0,0,0,0,0,0,0,0,0,0,0,0,216,155,0,0,31,0,0,0,32,0,0,0,3,0,0,0,13,0,0,0,8,0,0,0,18,0,0,0,9,0,0,0,10,0,0,0,6,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,2,0,0,0,6,0,0,0,7,0,0,0,4,0,0,0,56,71,98,115,95,70,105,108,101,0,0,0,0,0,0,0,40,212,0,0,200,155,0,0,24,174,0,0,0,0,0,0,33,115,97,109,112,108,101,95,114,97,116,101,40,41,0,0,115,114,99,47,103,97,109,101,45,109,117,115,105,99,45,101,109,117,47,103,109,101,47,77,117,115,105,99,95,69,109,117,46,104,0,0,0,0,0,0,115,101,116,95,103,97,105,110,0,0,0,0,0,0,0,0,87,114,111,110,103,32,102,105,108,101,32,116,121,112,101,32,102,111,114,32,116,104,105,115,32,101,109,117,108,97,116,111,114,0,0,0,0,0,0,0,48,156,0,0,0,0,0,0,0,0,0,0,64,157,0,0,33,0,0,0,34,0,0,0,35,0,0,0,1,0,0,0,8,0,0,0,1,0,0,0,36,0,0,0,37,0,0,0,6,0,0,0,0,0,0,0,100,97,116,97,32,33,61,32,102,105,108,101,95,100,97,116,97,46,98,101,103,105,110,40,41,0,0,0,0,0,0,0,115,114,99,47,103,97,109,101,45,109,117,115,105,99,45,101,109,117,47,103,109,101,47,71,109,101,95,70,105,108,101,46,99,112,112,0,0,0,0,0,108,111,97,100,95,109,101,109,95,0,0,0,0,0,0,0,63,0,0,0,0,0,0,0,60,63,62,0,0,0,0,0,60,32,63,32,62,0,0,0,73,110,118,97,108,105,100,32,116,114,97,99,107,0,0,0,73,110,118,97,108,105,100,32,116,114,97,99,107,32,105,110,32,109,51,117,32,112,108,97,121,108,105,115,116,0,0,0,56,71,109,101,95,70,105,108,101,0,0,0,0,0,0,0,0,212,0,0,48,157,0,0,110,32,60,61,32,115,105,122,101,95,0,0,0,0,0,0,115,114,99,47,103,97,109,101,45,109,117,115,105,99,45,101,109,117,47,103,109,101,47,98,108,97,114,103,103,95,99,111,109,109,111,110,46,104,0,0,111,112,101,114,97,116,111,114,91,93,0,0,0,0,0,0,0,0,0,0,136,158,0,0,38,0,0,0,39,0,0,0,3,0,0,0,1,0,0,0,19,0,0,0,20,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,6,0,0,0,14,0,0,0,15,0,0,0,3,0,0,0,16,0,0,0,4,0,0,0,15,0,0,0,21,0,0,0,4,0,0,0,1,0,0,0,192,254,255,255,136,158,0,0,40,0,0,0,41,0,0,0,2,0,0,0,96,158,0,0,0,0,0,0,32,158,0,0,40,158,0,0,48,158,0,0,56,158,0,0,64,158,0,0,72,158,0,0,80,158,0,0,88,158,0,0,70,77,32,49,0,0,0,0,70,77,32,50,0,0,0,0,70,77,32,51,0,0,0,0,70,77,32,52,0,0,0,0,70,77,32,53,0,0,0,0,70,77,32,54,0,0,0,0,80,67,77,0,0,0,0,0,80,83,71,0,0,0,0,0,216,158,0,0,1,0,0,0,5,0,0,0,6,0,0,0,232,158,0,0,0,0,0,0,55,71,121,109,95,69,109,117,0,0,0,0,0,0,0,0,136,212,0,0,120,158,0,0,0,0,0,0,2,0,0,0,168,173,0,0,2,0,0,0,32,149,0,0,0,64,1,0,71,89,77,88,0,0,0,0,0,0,0,0,0,0,0,0,80,97,99,107,101,100,32,71,89,77,32,102,105,108,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,83,101,103,97,32,71,101,110,101,115,105,115,0,0,0,0,71,89,77,0,0,0,0,0,0,0,0,0,80,159,0,0,42,0,0,0,43,0,0,0,3,0,0,0,1,0,0,0,22,0,0,0,23,0,0,0,9,0,0,0,10,0,0,0,6,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,2,0,0,0,6,0,0,0,7,0,0,0,4,0,0,0,56,71,121,109,95,70,105,108,101,0,0,0,0,0,0,0,40,212,0,0,64,159,0,0,24,174,0,0,0,0,0,0,85,110,107,110,111,119,110,32,83,111,110,103,0,0,0,0,85,110,107,110,111,119,110,32,71,97,109,101,0,0,0,0,85,110,107,110,111,119,110,32,80,117,98,108,105,115,104,101,114,0,0,0,0,0,0,0,85,110,107,110,111,119,110,32,80,101,114,115,111,110,0,0,72,101,97,100,101,114,32,97,100,100,101,100,32,98,121,32,89,77,65,77,80,0,0,0,40,117,110,115,105,103,110,101,100,41,32,105,110,100,101,120,32,60,32,111,115,99,95,99,111,117,110,116,0,0,0,0,115,114,99,47,103,97,109,101,45,109,117,115,105,99,45,101,109,117,47,103,109,101,47,72,101,115,95,65,112,117,46,99,112,112,0,0,0,0,0,0,111,115,99,95,111,117,116,112,117,116,0,0,0,0,0,0,110,111,105,115,101,95,108,102,115,114,0,0,0,0,0,0,114,117,110,95,117,110,116,105,108,0,0,0,0,0,0,0,0,0,6,0,7,0,8,0,10,0,12,0,14,0,17,0,20,0,23,0,28,0,33,0,39,0,47,0,56,0,66,0,79,0,93,0,111,0,132,0,157,0,187,0,222,0,8,1,58,1,118,1,188,1,17,2,117,2,235,2,121,3,33,4,111,115,99,45,62,108,97,115,116,95,116,105,109,101,32,62,61,32,101,110,100,95,116,105,109,101,0,0,0,0,0,0,101,110,100,95,102,114,97,109,101,0,0,0,0,0,0,0,40,117,110,115,105,103,110,101,100,41,32,114,101,103,32,60,61,32,112,97,103,101,95,99,111,117,110,116,0,0,0,0,115,114,99,47,103,97,109,101,45,109,117,115,105,99,45,101,109,117,47,103,109,101,47,72,101,115,95,67,112,117,46,99,112,112,0,0,0,0,0,0,115,101,116,95,109,109,114,0,40,117,110,115,105,103,110,101,100,41,32,98,97,110,107,32,60,32,48,120,49,48,48,0,1,7,3,4,6,4,6,7,3,2,2,2,7,5,7,6,4,7,7,4,6,4,6,7,2,5,2,2,7,5,7,6,7,7,3,4,4,4,6,7,4,2,2,2,5,5,7,6,4,7,7,2,4,4,6,7,2,5,2,2,5,5,7,6,7,7,3,4,8,4,6,7,3,2,2,2,4,5,7,6,4,7,7,5,2,4,6,7,2,5,3,2,2,5,7,6,7,7,2,2,4,4,6,7,4,2,2,2,7,5,7,6,4,7,7,17,4,4,6,7,2,5,4,2,7,5,7,6,4,7,2,7,4,4,4,7,2,2,2,2,5,5,5,6,4,7,7,8,4,4,4,7,2,5,2,2,5,5,5,6,2,7,2,7,4,4,4,7,2,2,2,2,5,5,5,6,4,7,7,8,4,4,4,7,2,5,2,2,5,5,5,6,2,7,2,17,4,4,6,7,2,2,2,2,5,5,7,6,4,7,7,17,2,4,6,7,2,5,3,2,2,5,7,6,2,7,2,17,4,4,6,7,2,2,2,2,5,5,7,6,4,7,7,17,2,4,6,7,2,5,4,2,2,5,7,6,0,0,0,0,32,164,0,0,44,0,0,0,45,0,0,0,46,0,0,0,16,0,0,0,8,0,0,0,24,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,17,0,0,0,3,0,0,0,4,0,0,0,3,0,0,0,17,0,0,0,25,0,0,0,0,0,0,0,216,162,0,0,0,0,0,0,144,162,0,0,152,162,0,0,160,162,0,0,168,162,0,0,176,162,0,0,184,162,0,0,87,97,118,101,32,49,0,0,87,97,118,101,32,50,0,0,87,97,118,101,32,51,0,0,87,97,118,101,32,52,0,0,77,117,108,116,105,32,49,0,77,117,108,116,105,32,50,0,0,1,0,0,1,1,0,0,2,1,0,0,3,1,0,0,0,3,0,0,1,3,0,0,152,164,0,0,0,1,0,0,7,0,0,0,8,0,0,0,168,164,0,0,1,0,0,0,85,110,107,110,111,119,110,32,102,105,108,101,32,118,101,114,115,105,111,110,0,0,0,0,68,65,84,65,0,0,0,0,68,97,116,97,32,104,101,97,100,101,114,32,109,105,115,115,105,110,103,0,0,0,0,0,0,0,0,0,0,0,0,0,85,110,107,110,111,119,110,32,104,101,97,100,101,114,32,100,97,116,97,0,0,0,0,0,73,110,118,97,108,105,100,32,97,100,100,114,101,115,115,0,73,110,118,97,108,105,100,32,115,105,122,101,0,0,0,0,77,117,108,116,105,112,108,101,32,68,65,84,65,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,0,0,69,120,116,114,97,32,102,105,108,101,32,100,97,116,97,0,77,105,115,115,105,110,103,32,102,105,108,101,32,100,97,116,97,0,0,0,0,0,0,0,83,99,97,110,108,105,110,101,32,105,110,116,101,114,114,117,112,116,32,117,110,115,117,112,112,111,114,116,101,100,0,0,69,109,117,108,97,116,105,111,110,32,101,114,114,111,114,32,40,105,108,108,101,103,97,108,32,105,110,115,116,114,117,99,116,105,111,110,41,0,0,0,55,72,101,115,95,69,109,117,0,0,0,0,0,0,0,0,55,72,101,115,95,67,112,117,0,0,0,0,0,0,0,0,0,212,0,0,8,164,0,0,136,212,0,0,248,163,0,0,0,0,0,0,2,0,0,0,24,164,0,0,0,80,1,0,40,146,0,0,2,0,0,0,115,116,97,116,101,32,61,61,32,38,115,116,97,116,101,95,0,0,0,0,0,0,0,0,115,114,99,47,103,97,109,101,45,109,117,115,105,99,45,101,109,117,47,103,109,101,47,72,101,115,95,67,112,117,46,104,0,0,0,0,0,0,0,0,101,110,100,95,102,114,97,109,101,0,0,0,0,0,0,0,72,69,83,77,0,0,0,0,80,67,32,69,110,103,105,110,101,0,0,0,0,0,0,0,72,69,83,0,0,0,0,0,0,0,0,0,16,165,0,0,47,0,0,0,48,0,0,0,3,0,0,0,18,0,0,0,8,0,0,0,26,0,0,0,9,0,0,0,10,0,0,0,6,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,2,0,0,0,6,0,0,0,7,0,0,0,4,0,0,0,56,72,101,115,95,70,105,108,101,0,0,0,0,0,0,0,40,212,0,0,0,165,0,0,24,174,0,0,0,0,0,0,97,100,100,114,32,37,32,112,97,103,101,95,115,105,122,101,32,61,61,32,48,0,0,0,115,114,99,47,103,97,109,101,45,109,117,115,105,99,45,101,109,117,47,103,109,101,47,75,115,115,95,67,112,117,46,99,112,112,0,0,0,0,0,0,109,97,112,95,109,101,109,0,115,105,122,101,32,37,32,112,97,103,101,95,115,105,122,101,32,61,61,32,48,0,0,0,4,10,7,6,4,4,7,4,4,11,7,6,4,4,7,4,13,10,7,6,4,4,7,4,12,11,7,6,4,4,7,4,12,10,16,6,4,4,7,4,12,11,16,6,4,4,7,4,12,10,13,6,11,11,10,4,12,11,13,6,4,4,7,4,4,4,4,4,4,4,7,4,4,4,4,4,4,4,7,4,4,4,4,4,4,4,7,4,4,4,4,4,4,4,7,4,4,4,4,4,4,4,7,4,4,4,4,4,4,4,7,4,7,7,7,7,7,7,4,7,4,4,4,4,4,4,7,4,4,4,4,4,4,4,7,4,4,4,4,4,4,4,7,4,4,4,4,4,4,4,7,4,4,4,4,4,4,4,7,4,4,4,4,4,4,4,7,4,4,4,4,4,4,4,7,4,4,4,4,4,4,4,7,4,4,4,4,4,4,4,7,4,11,10,10,10,17,11,7,11,11,10,10,8,17,17,7,11,11,10,10,11,17,11,7,11,11,4,10,11,17,8,7,11,11,10,10,19,17,11,7,11,11,4,10,4,17,8,7,11,11,10,10,4,17,11,7,11,11,6,10,4,17,8,7,11,102,97,108,115,101,0,0,0,114,117,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,6,12,2,0,0,3,0,0,7,12,2,0,0,3,0,0,0,0,0,15,15,11,0,0,7,0,0,0,0,0,0,64,64,112,192,0,96,11,16,64,64,112,192,0,96,11,16,64,64,112,192,0,96,11,16,64,64,112,192,0,96,11,16,64,64,112,192,0,96,11,160,64,64,112,192,0,96,11,160,75,75,123,203,11,107,0,11,64,64,112,192,0,96,11,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,11,0,128,128,128,128,0,0,11,0,128,128,128,128,0,0,11,0,208,208,208,208,0,0,11,0,208,208,208,208,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,15,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,88,169,0,0,49,0,0,0,50,0,0,0,51,0,0,0,19,0,0,0,8,0,0,0,27,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,6,0,0,0,20,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,18,0,0,0,28,0,0,0,0,0,0,0,144,168,0,0,0,0,0,0,24,168,0,0,40,168,0,0,56,168,0,0,72,168,0,0,80,168,0,0,88,168,0,0,96,168,0,0,104,168,0,0,83,113,117,97,114,101,32,49,0,0,0,0,0,0,0,0,83,113,117,97,114,101,32,50,0,0,0,0,0,0,0,0,83,113,117,97,114,101,32,51,0,0,0,0,0,0,0,0,87,97,118,101,32,49,0,0,87,97,118,101,32,50,0,0,87,97,118,101,32,51,0,0,87,97,118,101,32,52,0,0,87,97,118,101,32,53,0,0,0,1,0,0,1,1,0,0,2,1,0,0,3,1,0,0,4,1,0,0,5,1,0,0,6,1,0,0,7,1,0,0,40,170,0,0,0,1,0,0,9,0,0,0,10,0,0,0,48,170,0,0,3,0,0,0,85,110,107,110,111,119,110,32,100,97,116,97,32,105,110,32,104,101,97,100,101,114,0,0,70,77,32,115,111,117,110,100,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,0,0,211,160,245,123,211,161,241,201,211,160,219,162,201,0,0,0,195,1,0,195,9,0,0,0,69,120,99,101,115,115,105,118,101,32,100,97,116,97,32,115,105,122,101,0,0,0,0,0,66,97,110,107,32,100,97,116,97,32,109,105,115,115,105,110,103,0,0,0,0,0,0,0,55,75,115,115,95,69,109,117,0,0,0,0,0,0,0,0,55,75,115,115,95,67,112,117,0,0,0,0,0,0,0,0,0,212,0,0,64,169,0,0,136,212,0,0,48,169,0,0,0,0,0,0,2,0,0,0,80,169,0,0,0,80,1,0,40,146,0,0,2,0,0,0,108,97,115,116,95,116,105,109,101,32,62,61,32,48,0,0,115,114,99,47,103,97,109,101,45,109,117,115,105,99,45,101,109,117,47,103,109,101,47,75,115,115,95,83,99,99,95,65,112,117,46,104,0,0,0,0,101,110,100,95,102,114,97,109,101,0,0,0,0,0,0,0,40,117,110,115,105,103,110,101,100,41,32,97,100,100,114,32,60,32,114,101,103,95,99,111,117,110,116,0,0,0,0,0,119,114,105,116,101,0,0,0,111,115,99,95,111,117,116,112,117,116,0,0,0,0,0,0,40,117,110,115,105,103,110,101,100,41,32,105,110,100,101,120,32,60,32,111,115,99,95,99,111,117,110,116,0,0,0,0,75,83,67,67,0,0,0,0,75,83,83,88,0,0,0,0,77,83,88,0,0,0,0,0,75,83,83,0,0,0,0,0,0,0,0,0,152,170,0,0,52,0,0,0,53,0,0,0,3,0,0,0,21,0,0,0,8,0,0,0,29,0,0,0,9,0,0,0,10,0,0,0,6,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,2,0,0,0,6,0,0,0,7,0,0,0,4,0,0,0,56,75,115,115,95,70,105,108,101,0,0,0,0,0,0,0,40,212,0,0,136,170,0,0,24,174,0,0,0,0,0,0,83,101,103,97,32,77,97,115,116,101,114,32,83,121,115,116,101,109,0,0,0,0,0,0,71,97,109,101,32,71,101,97,114,0,0,0,0,0,0,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,0,0,0,0,0,0,168,171,0,0,54,0,0,0,55,0,0,0,10,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,192,171,0,0,56,0,0,0,57,0,0,0,10,0,0,0,2,0,0,0,30,0,0,0,19,0,0,0,20,0,0,0,58,0,0,0,21,0,0,0,31,0,0,0,7,0,0,0,0,0,0,0,33,40,99,111,117,110,116,32,38,32,49,41,0,0,0,0,115,114,99,47,103,97,109,101,45,109,117,115,105,99,45,101,109,117,47,103,109,101,47,77,117,108,116,105,95,66,117,102,102,101,114,46,99,112,112,0,114,101,97,100,95,115,97,109,112,108,101,115,0,0,0,0,49,50,77,117,108,116,105,95,66,117,102,102,101,114,0,0,0,212,0,0,152,171,0,0,49,51,83,116,101,114,101,111,95,66,117,102,102,101,114,0,40,212,0,0,176,171,0,0,168,171,0,0,0,0,0,0,0,0,0,0,168,173,0,0,59,0,0,0,60,0,0,0,3,0,0,0,1,0,0,0,8,0,0,0,1,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,6,0,0,0,1,0,0,0,15,0,0,0,3,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,4,0,0,0,64,172,0,0,72,172,0,0,80,172,0,0,88,172,0,0,96,172,0,0,104,172,0,0,112,172,0,0,120,172,0,0,86,111,105,99,101,32,49,0,86,111,105,99,101,32,50,0,86,111,105,99,101,32,51,0,86,111,105,99,101,32,52,0,86,111,105,99,101,32,53,0,86,111,105,99,101,32,54,0,86,111,105,99,101,32,55,0,86,111,105,99,101,32,56,0,33,115,97,109,112,108,101,95,114,97,116,101,40,41,0,0,115,114,99,47,103,97,109,101,45,109,117,115,105,99,45,101,109,117,47,103,109,101,47,77,117,115,105,99,95,69,109,117,46,99,112,112,0,0,0,0,115,101,116,95,115,97,109,112,108,101,95,114,97,116,101,0,115,97,109,112,108,101,95,114,97,116,101,40,41,0,0,0,112,114,101,95,108,111,97,100,0,0,0,0,0,0,0,0,109,117,116,101,95,118,111,105,99,101,115,0,0,0,0,0,115,101,116,95,116,101,109,112,111,0,0,0,0,0,0,0,99,117,114,114,101,110,116,95,116,114,97,99,107,40,41,32,62,61,32,48,0,0,0,0,33,98,117,102,95,114,101,109,97,105,110,0,0,0,0,0,102,105,108,108,95,98,117,102,0,0,0,0,0,0,0,0,112,108,97,121,0,0,0,0,111,117,116,95,99,111,117,110,116,32,37,32,115,116,101,114,101,111,32,61,61,32,48,0,101,109,117,95,116,105,109,101,32,62,61,32,111,117,116,95,116,105,109,101,0,0,0,0,85,115,101,32,102,117,108,108,32,101,109,117,108,97,116,111,114,32,102,111,114,32,112,108,97,121,98,97,99,107,0,0,57,77,117,115,105,99,95,69,109,117,0,0,0,0,0,0,40,212,0,0,152,173,0,0,64,157,0,0,0,0,0,0,0,0,0,0,24,174,0,0,61,0,0,0,62,0,0,0,3,0,0,0,1,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,10,0,0,0,6,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,2,0,0,0,6,0,0,0,7,0,0,0,4,0,0,0,57,71,109,101,95,73,110,102,111,95,0,0,0,0,0,0,40,212,0,0,8,174,0,0,168,173,0,0,0,0,0,0,115,114,99,47,103,97,109,101,45,109,117,115,105,99,45,101,109,117,47,103,109,101,47,78,101,115,95,65,112,117,46,99,112,112,0,0,0,0,0,0,101,110,100,95,116,105,109,101,32,62,61,32,108,97,115,116,95,116,105,109,101,0,0,0,114,117,110,95,117,110,116,105,108,95,0,0,0,0,0,0,108,97,115,116,95,116,105,109,101,32,62,61,32,48,0,0,101,110,100,95,102,114,97,109,101,0,0,0,0,0,0,0,108,97,115,116,95,100,109,99,95,116,105,109,101,32,62,61,32,48,0,0,0,0,0,0,97,100,100,114,32,62,32,48,120,50,48,0,0,0,0,0,119,114,105,116,101,95,114,101,103,105,115,116,101,114,0,0,40,117,110,115,105,103,110,101,100,41,32,100,97,116,97,32,60,61,32,48,120,70,70,0,10,254,20,2,40,4,80,6,160,8,60,10,14,12,26,14,12,16,24,18,48,20,96,22,192,24,72,26,16,28,32,30,40,117,110,115,105,103,110,101,100,41,32,111,115,99,32,60,32,111,115,99,95,99,111,117,110,116,0,0,0,0,0,0,115,114,99,47,103,97,109,101,45,109,117,115,105,99,45,101,109,117,47,103,109,101,47,78,101,115,95,65,112,117,46,104,0,0,0,0,0,0,0,0,111,115,99,95,111,117,116,112,117,116,0,0,0,0,0,0,73,110,118,97,108,105,100,32,98,97,110,107,0,0,0,0,115,116,97,114,116,32,37,32,112,97,103,101,95,115,105,122,101,32,61,61,32,48,0,0,115,114,99,47,103,97,109,101,45,109,117,115,105,99,45,101,109,117,47,103,109,101,47,78,101,115,95,67,112,117,46,99,112,112,0,0,0,0,0,0,109,97,112,95,99,111,100,101,0,0,0,0,0,0,0,0,115,105,122,101,32,37,32,112,97,103,101,95,115,105,122,101,32,61,61,32,48,0,0,0,115,116,97,114,116,32,43,32,115,105,122,101,32,60,61,32,48,120,49,48,48,48,48,0,0,6,2,8,3,3,5,5,3,2,2,2,4,4,6,6,3,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,6,6,2,8,3,3,5,5,4,2,2,2,4,4,6,6,3,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,6,6,2,8,3,3,5,5,3,2,2,2,3,4,6,6,3,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,6,6,2,8,3,3,5,5,4,2,2,2,5,4,6,6,3,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,2,6,2,6,3,3,3,3,2,2,2,2,4,4,4,4,3,6,2,6,4,4,4,4,2,5,2,5,5,5,5,5,2,6,2,6,3,3,3,3,2,2,2,2,4,4,4,4,3,5,2,5,4,4,4,4], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+34976);
      /* memory initializer */ allocate([2,4,2,4,4,4,4,4,2,6,2,8,3,3,5,5,2,2,2,2,4,4,6,6,3,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,2,6,2,8,3,3,5,5,2,2,2,2,4,4,6,6,3,5,0,8,4,4,6,6,2,4,2,7,4,4,7,7,64,64,64,128,64,64,128,160,0,1,2,3,4,6,8,12,17,24,34,48,68,96,136,192,101,110,100,95,116,105,109,101,32,62,61,32,108,97,115,116,95,116,105,109,101,0,0,0,115,114,99,47,103,97,109,101,45,109,117,115,105,99,45,101,109,117,47,103,109,101,47,78,101,115,95,70,109,101,55,95,65,112,117,46,99,112,112,0,114,117,110,95,117,110,116,105,108,0,0,0,0,0,0,0,108,97,115,116,95,116,105,109,101,32,62,61,32,116,105,109,101,0,0,0,0,0,0,0,115,114,99,47,103,97,109,101,45,109,117,115,105,99,45,101,109,117,47,103,109,101,47,78,101,115,95,78,97,109,99,111,95,65,112,117,46,99,112,112,0,0,0,0,0,0,0,0,101,110,100,95,102,114,97,109,101,0,0,0,0,0,0,0,40,98,108,105,112,95,108,111,110,103,41,32,40,116,105,109,101,32,62,62,32,66,76,73,80,95,66,85,70,70,69,82,95,65,67,67,85,82,65,67,89,41,32,60,32,98,108,105,112,95,98,117,102,45,62,98,117,102,102,101,114,95,115,105,122,101,95,0,0,0,0,0,115,114,99,47,103,97,109,101,45,109,117,115,105,99,45,101,109,117,47,103,109,101,47,66,108,105,112,95,66,117,102,102,101,114,46,104,0,0,0,0,111,102,102,115,101,116,95,114,101,115,97,109,112,108,101,100,0,0,0,0,0,0,0,0,40,117,110,115,105,103,110,101,100,41,32,105,32,60,32,111,115,99,95,99,111,117,110,116,0,0,0,0,0,0,0,0,115,114,99,47,103,97,109,101,45,109,117,115,105,99,45,101,109,117,47,103,109,101,47,78,101,115,95,78,97,109,99,111,95,65,112,117,46,104,0,0,111,115,99,95,111,117,116,112,117,116,0,0,0,0,0,0,172,1,124,1,84,1,64,1,30,1,254,0,226,0,214,0,190,0,160,0,142,0,128,0,106,0,84,0,72,0,54,0,142,1,98,1,60,1,42,1,20,1,236,0,210,0,198,0,176,0,148,0,132,0,118,0,98,0,78,0,66,0,50,0,0,1,2,3,4,5,6,7,7,8,9,10,11,12,13,14,15,15,16,17,18,19,20,20,21,22,23,24,24,25,26,27,27,28,29,30,31,31,32,33,33,34,35,36,36,37,38,38,39,40,41,41,42,43,43,44,45,45,46,47,47,48,48,49,50,50,51,52,52,53,53,54,55,55,56,56,57,58,58,59,59,60,60,61,61,62,63,63,64,64,65,65,66,66,67,67,68,68,69,70,70,71,71,72,72,73,73,74,74,75,75,75,76,76,77,77,78,78,79,79,80,80,81,81,82,82,82,83,112,114,103,95,114,101,97,100,101,114,0,0,0,0,0,0,115,114,99,47,103,97,109,101,45,109,117,115,105,99,45,101,109,117,47,103,109,101,47,78,101,115,95,79,115,99,115,46,99,112,112,0,0,0,0,0,102,105,108,108,95,98,117,102,102,101,114,0,0,0,0,0,4,0,8,0,16,0,32,0,64,0,96,0,128,0,160,0,202,0,254,0,124,1,252,1,250,2,248,3,242,7,228,15,116,105,109,101,32,62,61,32,108,97,115,116,95,116,105,109,101,0,0,0,0,0,0,0,115,114,99,47,103,97,109,101,45,109,117,115,105,99,45,101,109,117,47,103,109,101,47,78,101,115,95,86,114,99,54,95,65,112,117,46,99,112,112,0,114,117,110,95,117,110,116,105,108,0,0,0,0,0,0,0,40,117,110,115,105,103,110,101,100,41,32,111,115,99,95,105,110,100,101,120,32,60,32,111,115,99,95,99,111,117,110,116,0,0,0,0,0,0,0,0,119,114,105,116,101,95,111,115,99,0,0,0,0,0,0,0,40,117,110,115,105,103,110,101,100,41,32,114,101,103,32,60,32,114,101,103,95,99,111,117,110,116,0,0,0,0,0,0,108,97,115,116,95,116,105,109,101,32,62,61,32,116,105,109,101,0,0,0,0,0,0,0,101,110,100,95,102,114,97,109,101,0,0,0,0,0,0,0,40,117,110,115,105,103,110,101,100,41,32,105,32,60,32,111,115,99,95,99,111,117,110,116,0,0,0,0,0,0,0,0,115,114,99,47,103,97,109,101,45,109,117,115,105,99,45,101,109,117,47,103,109,101,47,78,101,115,95,86,114,99,54,95,65,112,117,46,104,0,0,0,111,115,99,95,111,117,116,112,117,116,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,84,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,184,0,0,63,0,0,0,64,0,0,0,65,0,0,0,22,0,0,0,8,0,0,0,32,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,7,0,0,0,23,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,22,0,0,0,33,0,0,0,0,0,0,0,152,181,0,0,0,0,0,0,0,185,0,0,0,0,0,0,11,0,0,0,12,0,0,0,16,185,0,0,1,0,0,0,85,115,101,115,32,117,110,115,117,112,112,111,114,116,101,100,32,97,117,100,105,111,32,101,120,112,97,110,115,105,111,110,32,104,97,114,100,119,97,114,101,0,0,0,0,0,0,0,248,181,0,0,8,182,0,0,24,182,0,0,40,182,0,0,48,182,0,0,0,0,0,0,83,113,117,97,114,101,32,49,0,0,0,0,0,0,0,0,83,113,117,97,114,101,32,50,0,0,0,0,0,0,0,0,84,114,105,97,110,103,108,101,0,0,0,0,0,0,0,0,78,111,105,115,101,0,0,0,68,77,67,0,0,0,0,0,1,1,0,0,2,1,0,0,0,1,0,0,0,2,0,0,1,3,0,0,3,1,0,0,4,1,0,0,5,1,0,0,6,1,0,0,7,1,0,0,8,1,0,0,9,1,0,0,10,1,0,0,11,1,0,0,12,1,0,0,13,1,0,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,0,0,248,181,0,0,8,182,0,0,24,182,0,0,40,182,0,0,48,182,0,0,192,182,0,0,200,182,0,0,208,182,0,0,216,182,0,0,224,182,0,0,232,182,0,0,240,182,0,0,248,182,0,0,0,0,0,0,87,97,118,101,32,49,0,0,87,97,118,101,32,50,0,0,87,97,118,101,32,51,0,0,87,97,118,101,32,52,0,0,87,97,118,101,32,53,0,0,87,97,118,101,32,54,0,0,87,97,118,101,32,55,0,0,87,97,118,101,32,56,0,0,248,181,0,0,8,182,0,0,24,182,0,0,40,182,0,0,48,182,0,0,32,183,0,0,48,183,0,0,64,183,0,0,83,97,119,32,87,97,118,101,0,0,0,0,0,0,0,0,83,113,117,97,114,101,32,51,0,0,0,0,0,0,0,0,83,113,117,97,114,101,32,52,0,0,0,0,0,0,0,0,248,181,0,0,8,182,0,0,24,182,0,0,40,182,0,0,48,182,0,0,32,183,0,0,48,183,0,0,64,183,0,0,192,182,0,0,200,182,0,0,208,182,0,0,216,182,0,0,224,182,0,0,232,182,0,0,240,182,0,0,248,182,0,0,248,181,0,0,8,182,0,0,24,182,0,0,40,182,0,0,48,182,0,0,48,183,0,0,64,183,0,0,176,183,0,0,83,113,117,97,114,101,32,53,0,0,0,0,0,0,0,0,85,110,107,110,111,119,110,32,102,105,108,101,32,118,101,114,115,105,111,110,0,0,0,0,67,111,114,114,117,112,116,32,102,105,108,101,32,40,105,110,118,97,108,105,100,32,108,111,97,100,47,105,110,105,116,47,112,108,97,121,32,97,100,100,114,101,115,115,41,0,0,0,69,109,117,108,97,116,105,111,110,32,101,114,114,111,114,32,40,105,108,108,101,103,97,108,32,105,110,115,116,114,117,99,116,105,111,110,41,0,0,0,55,78,115,102,95,69,109,117,0,0,0,0,0,0,0,0,55,78,101,115,95,67,112,117,0,0,0,0,0,0,0,0,0,212,0,0,64,184,0,0,136,212,0,0,48,184,0,0,0,0,0,0,2,0,0,0,80,184,0,0,0,80,1,0,40,146,0,0,2,0,0,0,108,97,115,116,95,116,105,109,101,32,62,61,32,116,105,109,101,0,0,0,0,0,0,0,115,114,99,47,103,97,109,101,45,109,117,115,105,99,45,101,109,117,47,103,109,101,47,78,101,115,95,70,109,101,55,95,65,112,117,46,104,0,0,0,101,110,100,95,102,114,97,109,101,0,0,0,0,0,0,0,40,117,110,115,105,103,110,101,100,41,32,105,32,60,32,111,115,99,95,99,111,117,110,116,0,0,0,0,0,0,0,0,111,115,99,95,111,117,116,112,117,116,0,0,0,0,0,0,78,69,83,77,26,0,0,0,78,105,110,116,101,110,100,111,32,78,69,83,0,0,0,0,78,83,70,0,0,0,0,0,0,0,0,0,120,185,0,0,66,0,0,0,67,0,0,0,3,0,0,0,24,0,0,0,8,0,0,0,34,0,0,0,9,0,0,0,10,0,0,0,6,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,2,0,0,0,6,0,0,0,7,0,0,0,4,0,0,0,56,78,115,102,95,70,105,108,101,0,0,0,0,0,0,0,40,212,0,0,104,185,0,0,24,174,0,0,0,0,0,0,70,97,109,105,99,111,109,0,78,83,70,69,0,0,0,0,78,69,83,77,26,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,65,0,0,0,0,0,0,0,0,32,78,0,0,0,0,0,0,67,111,114,114,117,112,116,32,102,105,108,101,0,0,0,0,0,0,0,0,184,186,0,0,68,0,0,0,69,0,0,0,70,0,0,0,25,0,0,0,8,0,0,0,35,0,0,0,4,0,0,0,5,0,0,0,71,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,7,0,0,0,26,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,22,0,0,0,33,0,0,0,0,0,0,0,144,186,0,0,0,0,0,0,32,187,0,0,0,0,0,0,13,0,0,0,14,0,0,0,144,185,0,0,1,0,0,0,56,78,115,102,101,95,69,109,117,0,0,0,0,0,0,0,40,212,0,0,168,186,0,0,88,184,0,0,0,0,0,0,110,32,60,61,32,115,105,122,101,95,0,0,0,0,0,0,115,114,99,47,103,97,109,101,45,109,117,115,105,99,45,101,109,117,47,103,109,101,47,98,108,97,114,103,103,95,99,111,109,109,111,110,46,104,0,0,111,112,101,114,97,116,111,114,91,93,0,0,0,0,0,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,0,0,78,105,110,116,101,110,100,111,32,78,69,83,0,0,0,0,0,0,0,0,144,187,0,0,72,0,0,0,73,0,0,0,3,0,0,0,27,0,0,0,8,0,0,0,36,0,0,0,9,0,0,0,10,0,0,0,6,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,2,0,0,0,6,0,0,0,7,0,0,0,4,0,0,0,57,78,115,102,101,95,70,105,108,101,0,0,0,0,0,0,40,212,0,0,128,187,0,0,24,174,0,0,0,0,0,0,4,2,0,0,0,0,0,0,85,85,0,0,0,0,0,0,64,16,32,8,0,0,0,0,40,117,110,115,105,103,110,101,100,41,32,105,32,60,32,111,115,99,95,99,111,117,110,116,0,0,0,0,0,0,0,0,115,114,99,47,103,97,109,101,45,109,117,115,105,99,45,101,109,117,47,103,109,101,47,83,97,112,95,65,112,117,46,104,0,0,0,0,0,0,0,0,111,115,99,95,111,117,116,112,117,116,0,0,0,0,0,0,0,6,2,8,3,3,5,5,3,2,2,2,4,4,6,6,3,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,6,6,2,8,3,3,5,5,4,2,2,2,4,4,6,6,3,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,6,6,2,8,3,3,5,5,3,2,2,2,3,4,6,6,3,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,6,6,2,8,3,3,5,5,4,2,2,2,5,4,6,6,3,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,2,6,2,6,3,3,3,3,2,2,2,2,4,4,4,4,3,6,2,6,4,4,4,4,2,5,2,5,5,5,5,5,2,6,2,6,3,3,3,3,2,2,2,2,4,4,4,4,3,5,2,5,4,4,4,4,2,4,2,4,4,4,4,4,2,6,2,8,3,3,5,5,2,2,2,2,4,4,6,6,3,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,2,6,2,8,3,3,5,5,2,2,2,2,4,4,6,6,3,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,0,0,0,0,120,190,0,0,74,0,0,0,75,0,0,0,3,0,0,0,1,0,0,0,37,0,0,0,38,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,8,0,0,0,28,0,0,0,3,0,0,0,4,0,0,0,6,0,0,0,23,0,0,0,39,0,0,0,0,0,0,0,248,189,0,0,0,0,0,0,152,189,0,0,160,189,0,0,168,189,0,0,176,189,0,0,184,189,0,0,192,189,0,0,200,189,0,0,208,189,0,0,87,97,118,101,32,49,0,0,87,97,118,101,32,50,0,0,87,97,118,101,32,51,0,0,87,97,118,101,32,52,0,0,87,97,118,101,32,53,0,0,87,97,118,101,32,54,0,0,87,97,118,101,32,55,0,0,87,97,118,101,32,56,0,0,1,1,0,0,2,1,0,0,3,1,0,0,0,1,0,0,5,1,0,0,6,1,0,0,7,1,0,0,4,1,0,0,184,191,0,0,0,0,0,0,15,0,0,0,16,0,0,0,200,191,0,0,1,0,0,0,73,110,118,97,108,105,100,32,102,105,108,101,32,100,97,116,97,32,98,108,111,99,107,0,69,109,117,108,97,116,105,111,110,32,101,114,114,111,114,32,40,105,108,108,101,103,97,108,32,105,110,115,116,114,117,99,116,105,111,110,41,0,0,0,55,83,97,112,95,69,109,117,0,0,0,0,0,0,0,0,55,83,97,112,95,67,112,117,0,0,0,0,0,0,0,0,0,212,0,0,96,190,0,0,136,212,0,0,80,190,0,0,0,0,0,0,2,0,0,0,112,190,0,0,0,80,1,0,40,146,0,0,2,0,0,0,83,65,80,13,10,0,0,0,73,78,73,84,0,0,0,0,73,110,118,97,108,105,100,32,105,110,105,116,32,97,100,100,114,101,115,115,0,0,0,0,80,76,65,89,69,82,0,0,73,110,118,97,108,105,100,32,112,108,97,121,32,97,100,100,114,101,115,115,0,0,0,0,77,85,83,73,67,0,0,0,73,110,118,97,108,105,100,32,109,117,115,105,99,32,97,100,100,114,101,115,115,0,0,0,83,79,78,71,83,0,0,0,73,110,118,97,108,105,100,32,116,114,97,99,107,32,99,111,117,110,116,0,0,0,0,0,84,89,80,69,0,0,0,0,68,105,103,105,109,117,115,105,99,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,85,110,115,117,112,112,111,114,116,101,100,32,112,108,97,121,101,114,32,116,121,112,101,0,83,84,69,82,69,79,0,0,70,65,83,84,80,76,65,89,0,0,0,0,0,0,0,0,73,110,118,97,108,105,100,32,102,97,115,116,112,108,97,121,32,118,97,108,117,101,0,0,65,85,84,72,79,82,0,0,78,65,77,69,0,0,0,0,68,65,84,69,0,0,0,0,82,79,77,32,100,97,116,97,32,109,105,115,115,105,110,103,0,0,0,0,0,0,0,0,65,116,97,114,105,32,88,76,0,0,0,0,0,0,0,0,83,65,80,0,0,0,0,0,0,0,0,0,48,192,0,0,76,0,0,0,77,0,0,0,3,0,0,0,1,0,0,0,40,0,0,0,41,0,0,0,9,0,0,0,10,0,0,0,6,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,2,0,0,0,6,0,0,0,7,0,0,0,4,0,0,0,56,83,97,112,95,70,105,108,101,0,0,0,0,0,0,0,40,212,0,0,32,192,0,0,24,174,0,0,0,0,0,0,40,117,110,115,105,103,110,101,100,41,32,105,110,100,101,120,32,60,32,111,115,99,95,99,111,117,110,116,0,0,0,0,115,114,99,47,103,97,109,101,45,109,117,115,105,99,45,101,109,117,47,103,109,101,47,83,109,115,95,65,112,117,46,99,112,112,0,0,0,0,0,0,111,115,99,95,111,117,116,112,117,116,0,0,0,0,0,0,40,99,101,110,116,101,114,32,38,38,32,108,101,102,116,32,38,38,32,114,105,103,104,116,41,32,124,124,32,40,33,99,101,110,116,101,114,32,38,38,32,33,108,101,102,116,32,38,38,32,33,114,105,103,104,116,41,0,0,0,0,0,0,0,101,110,100,95,116,105,109,101,32,62,61,32,108,97,115,116,95,116,105,109,101,0,0,0,114,117,110,95,117,110,116,105,108,0,0,0,0,0,0,0,108,97,115,116,95,116,105,109,101,32,62,61,32,101,110,100,95,116,105,109,101,0,0,0,101,110,100,95,102,114,97,109,101,0,0,0,0,0,0,0,40,117,110,115,105,103,110,101,100,41,32,100,97,116,97,32,60,61,32,48,120,70,70,0,119,114,105,116,101,95,103,103,115,116,101,114,101,111,0,0,119,114,105,116,101,95,100,97,116,97,0,0,0,0,0,0,64,50,39,31,24,19,15,12,9,7,5,4,3,2,1,0,0,1,0,0,0,2,0,0,0,4,0,0,0,0,0,0,40,71,52,54,38,84,84,104,72,71,69,86,85,101,34,70,40,71,52,54,38,84,84,116,72,71,69,86,85,101,34,56,40,71,52,54,38,68,84,102,72,71,69,86,85,69,34,67,40,71,52,54,38,68,84,117,72,71,69,86,85,85,34,54,40,71,52,54,38,84,82,69,72,71,69,86,85,85,34,197,56,71,52,54,38,68,82,68,72,71,69,86,85,85,34,52,56,71,69,71,37,100,82,73,72,71,86,103,69,85,34,131,40,71,52,54,36,83,67,64,72,71,69,86,52,84,34,96,83,78,69,83,45,83,80,67,55,48,48,32,83,111,117,110,100,32,70,105,108,101,32,68,97,116,97,32,118,48,46,51,48,26,26,0,0,0,0,0,78,111,116,32,97,110,32,83,80,67,32,102,105,108,101,0,67,111,114,114,117,112,116,32,83,80,67,32,102,105,108,101,0,0,0,0,0,0,0,0,40,115,105,122,101,32,38,32,49,41,32,61,61,32,48,0,115,114,99,47,103,97,109,101,45,109,117,115,105,99,45,101,109,117,47,103,109,101,47,83,110,101,115,95,83,112,99,46,99,112,112,0,0,0,0,0,115,101,116,95,111,117,116,112,117,116,0,0,0,0,0,0,111,117,116,32,60,61,32,111,117,116,95,101,110,100,0,0,111,117,116,32,60,61,32,38,109,46,101,120,116,114,97,95,98,117,102,32,91,101,120,116,114,97,95,115,105,122,101,93,0,0,0,0,0,0,0,0,115,97,118,101,95,101,120,116,114,97,0,0,0,0,0,0,40,99,111,117,110,116,32,38,32,49,41,32,61,61,32,48,0,0,0,0,0,0,0,0,112,108,97,121,0,0,0,0,40,117,110,115,105,103,110,101,100,41,32,97,100,100,114,32,60,32,114,101,103,105,115,116,101,114,95,99,111,117,110,116,0,0,0,0,0,0,0,0,115,114,99,47,103,97,109,101,45,109,117,115,105,99,45,101,109,117,47,103,109,101,47,83,112,99,95,68,115,112,46,104,0,0,0,0,0,0,0,0,119,114,105,116,101,0,0,0,114,101,97,100,0,0,0,0,255,0,245,246,241,245,254,254,4,3,14,14,26,26,14,22,2,3,0,1,244,0,1,1,7,6,14,14,27,14,14,23,5,6,3,4,255,3,4,4,10,9,14,14,26,251,14,23,8,9,6,7,2,6,7,7,13,12,14,14,27,252,14,24,11,12,9,10,5,9,10,10,16,15,14,14,254,252,14,24,14,15,12,13,8,12,13,13,19,18,14,14,254,220,14,24,17,18,15,16,11,15,16,16,22,21,14,14,28,253,14,25,20,21,18,19,14,18,19,19,25,24,14,14,14,29,14,25,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,82,65,77,32,91,105,32,43,32,114,111,109,95,97,100,100,114,93,32,61,61,32,40,117,105,110,116,56,95,116,41,32,100,97,116,97,0,0,0,0,115,114,99,47,103,97,109,101,45,109,117,115,105,99,45,101,109,117,47,103,109,101,47,83,112,99,95,67,112,117,46,99,112,112,0,0,0,0,0,0,99,112,117,95,119,114,105,116,101,95,104,105,103,104,0,0,114,101,103,32,43,32,40,114,95,116,48,111,117,116,32,43,32,48,120,70,48,32,45,32,48,120,49,48,48,48,48,41,32,60,32,48,120,49,48,48,0,0,0,0,0,0,0,0,99,112,117,95,114,101,97,100,0,0,0,0,0,0,0,0,45,99,112,117,95,108,97,103,95,109,97,120,32,60,61,32,109,46,115,112,99,95,116,105,109,101,32,38,38,32,109,46,115,112,99,95,116,105,109,101,32,60,61,32,48,0,0,0,101,110,100,95,102,114,97,109,101,0,0,0,0,0,0,0,114,101,108,95,116,105,109,101,32,60,61,32,48,0,0,0,115,114,99,47,103,97,109,101,45,109,117,115,105,99,45,101,109,117,47,103,109,101,47,83,112,99,95,67,112,117,46,104,0,0,0,0,0,0,0,0,114,117,110,95,117,110,116,105,108,95,0,0,0,0,0,0,83,80,67,32,101,109,117,108,97,116,105,111,110,32,101,114,114,111,114,0,0,0,0,0,48,0,0,0,0,0,0,0,109,46,115,112,99,95,116,105,109,101,32,60,61,32,101,110,100,95,116,105,109,101,0,0,40,115,105,122,101,32,38,32,49,41,32,61,61,32,48,0,115,114,99,47,103,97,109,101,45,109,117,115,105,99,45,101,109,117,47,103,109,101,47,83,112,99,95,68,115,112,46,99,112,112,0,0,0,0,0,0,115,101,116,95,111,117,116,112,117,116,0,0,0,0,0,0,7,0,0,0,255,15,0,0,255,15,0,0,255,7,0,0,255,7,0,0,255,7,0,0,255,3,0,0,255,3,0,0,255,3,0,0,255,1,0,0,255,1,0,0,255,1,0,0,255,0,0,0,255,0,0,0,255,0,0,0,127,0,0,0,127,0,0,0,127,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,31,0,0,0,31,0,0,0,31,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,7,0,0,0,7,0,0,0,7,0,0,0,1,0,0,0,0,0,0,0,114,1,25,5,110,1,25,5,106,1,24,5,102,1,24,5,98,1,24,5,95,1,24,5,91,1,24,5,87,1,23,5,83,1,23,5,80,1,23,5,76,1,22,5,72,1,22,5,69,1,21,5,65,1,20,5,62,1,20,5,58,1,19,5,55,1,18,5,51,1,17,5,48,1,17,5,44,1,16,5,41,1,15,5,37,1,14,5,34,1,13,5,30,1,12,5,27,1,11,5,24,1,10,5,20,1,8,5,17,1,7,5,14,1,6,5,11,1,4,5,7,1,3,5,4,1,2,5,1,1,0,5,254,0,255,4,251,0,253,4,248,0,251,4,245,0,250,4,242,0,248,4,239,0,246,4,236,0,245,4,233,0,243,4,230,0,241,4,227,0,239,4,224,0,237,4,221,0,235,4,218,0,233,4,215,0,231,4,212,0,229,4,210,0,227,4,207,0,224,4,204,0,222,4,201,0,220,4,199,0,217,4,196,0,215,4,193,0,213,4,191,0,210,4,188,0,208,4,186,0,205,4,183,0,203,4,180,0,200,4,178,0,197,4,175,0,195,4,173,0,192,4,171,0,189,4,168,0,186,4,166,0,183,4,163,0,181,4,161,0,178,4,159,0,175,4,156,0,172,4,154,0,169,4,152,0,166,4,150,0,162,4,147,0,159,4,145,0,156,4,143,0,153,4,141,0,150,4,139,0,146,4,137,0,143,4,134,0,140,4,132,0,136,4,130,0,133,4,128,0,129,4,126,0,126,4,124,0,122,4,122,0,119,4,120,0,115,4,118,0,112,4,117,0,108,4,115,0,104,4,113,0,101,4,111,0,97,4,109,0,93,4,107,0,89,4,106,0,85,4,104,0,82,4,102,0,78,4,100,0,74,4,99,0,70,4,97,0,66,4,95,0,62,4,94,0,58,4,92,0,54,4,90,0,50,4,89,0,46,4,87,0,42,4,86,0,37,4,84,0,33,4,83,0,29,4,81,0,25,4,80,0,21,4,78,0,16,4,77,0,12,4,76,0,8,4,74,0,3,4,73,0,255,3,71,0,251,3,70,0,246,3,69,0,242,3,67,0,237,3,66,0,233,3,65,0,229,3,64,0,224,3,62,0,220,3,61,0,215,3,60,0,210,3,59,0,206,3,58,0,201,3,56,0,197,3,55,0,192,3,54,0,187,3,53,0,183,3,52,0,178,3,51,0,173,3,50,0,169,3,49,0,164,3,48,0,159,3,47,0,155,3,46,0,150,3,45,0,145,3,44,0,140,3,43,0,136,3,42,0,131,3,41,0,126,3,40,0,121,3,39,0,116,3,38,0,112,3,37,0,107,3,36,0,102,3,36,0,97,3,35,0,92,3,34,0,87,3,33,0,83,3,32,0,78,3,32,0,73,3,31,0,68,3,30,0,63,3,29,0,58,3,29,0,53,3,28,0,48,3,27,0,43,3,27,0,38,3,26,0,34,3,25,0,29,3,24,0,24,3,24,0,19,3,23,0,14,3,23,0,9,3,22,0,4,3,21,0,255,2,21,0,250,2,20,0,245,2,20,0,240,2,19,0,235,2,19,0,230,2,18,0,225,2,17,0,220,2,17,0,216,2,16,0,211,2,16,0,206,2,15,0,201,2,15,0,196,2,15,0,191,2,14,0,186,2,14,0,181,2,13,0,176,2,13,0,171,2,12,0,166,2,12,0,162,2,11,0,157,2,11,0,152,2,11,0,147,2,10,0,142,2,10,0,137,2,10,0,132,2,9,0,128,2,9,0,123,2,9,0,118,2,8,0,113,2,8,0,108,2,8,0,103,2,7,0,99,2,7,0,94,2,7,0,89,2,6,0,84,2,6,0,80,2,6,0,75,2,6,0,70,2,5,0,65,2,5,0,61,2,5,0,56,2,5,0,51,2,4,0,47,2,4,0,42,2,4,0,38,2,4,0,33,2,4,0,28,2,3,0,24,2,3,0,19,2,3,0,15,2,3,0,10,2,3,0,5,2,2,0,1,2,2,0,252,1,2,0,248,1,2,0,243,1,2,0,239,1,2,0,235,1,2,0,230,1,1,0,226,1,1,0,221,1,1,0,217,1,1,0,213,1,1,0,208,1,1,0,204,1,1,0,200,1,1,0,195,1,1,0,191,1,1,0,187,1,1,0,183,1,0,0,178,1,0,0,174,1,0,0,170,1,0,0,166,1,0,0,162,1,0,0,158,1,0,0,154,1,0,0,149,1,0,0,145,1,0,0,141,1,0,0,137,1,0,0,133,1,0,0,129,1,0,0,125,1,0,0,122,1,0,0,118,1,98,114,114,95,111,102,102,115,101,116,32,61,61,32,98,114,114,95,98,108,111,99,107,95,115,105,122,101,0,0,0,0,114,117,110,0,0,0,0,0,13,12,12,12,12,12,12,12,12,12,12,12,12,16,16,16,0,0,1,2,3,4,5,6,7,8,9,10,11,11,11,11,109,46,114,97,109,0,0,0,115,111,102,116,95,114,101,115,101,116,95,99,111,109,109,111,110,0,0,0,0,0,0,0,69,139,90,154,228,130,27,120,0,0,170,150,137,14,224,128,42,73,61,186,20,160,172,197,0,0,81,187,156,78,123,255,244,253,87,50,55,217,66,34,0,0,91,60,159,27,135,154,111,39,175,123,229,104,10,217,0,0,154,197,156,78,123,255,234,33,120,79,221,237,36,20,0,0,119,177,209,54,193,103,82,87,70,61,89,244,135,164,0,0,126,68,156,78,123,255,117,245,6,151,16,195,36,187,0,0,123,122,224,96,18,15,247,116,28,229,57,61,115,193,0,0,122,179,255,78,123,255,0,0,0,0,80,204,0,0,78,0,0,0,79,0,0,0,3,0,0,0,1,0,0,0,42,0,0,0,43,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,6,0,0,0,29,0,0,0,15,0,0,0,24,0,0,0,25,0,0,0,9,0,0,0,30,0,0,0,44,0,0,0,31,0,0,0,40,204,0,0,0,0,0,0,232,203,0,0,240,203,0,0,248,203,0,0,0,204,0,0,8,204,0,0,16,204,0,0,24,204,0,0,32,204,0,0,68,83,80,32,49,0,0,0,68,83,80,32,50,0,0,0,68,83,80,32,51,0,0,0,68,83,80,32,52,0,0,0,68,83,80,32,53,0,0,0,68,83,80,32,54,0,0,0,68,83,80,32,55,0,0,0,68,83,80,32,56,0,0,0,128,204,0,0,1,0,0,0,17,0,0,0,18,0,0,0,144,204,0,0,0,0,0,0,55,83,112,99,95,69,109,117,0,0,0,0,0,0,0,0,40,212,0,0,64,204,0,0,168,173,0,0,0,0,0,0,83,78,69,83,45,83,80,67,55,48,48,32,83,111,117,110,100,32,70,105,108,101,32,68,97,116,97,0,0,0,0,0,83,117,112,101,114,32,78,105,110,116,101,110,100,111,0,0,83,80,67,0,0,0,0,0,0,0,0,0,248,204,0,0,80,0,0,0,81,0,0,0,3,0,0,0,32,0,0,0,8,0,0,0,45,0,0,0,9,0,0,0,10,0,0,0,6,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,2,0,0,0,6,0,0,0,7,0,0,0,4,0,0,0,56,83,112,99,95,70,105,108,101,0,0,0,0,0,0,0,40,212,0,0,232,204,0,0,24,174,0,0,0,0,0,0,120,105,100,54,0,0,0,0,40,99,111,117,110,116,32,38,32,49,41,32,61,61,32,48,0,0,0,0,0,0,0,0,115,114,99,47,103,97,109,101,45,109,117,115,105,99,45,101,109,117,47,103,109,101,47,83,112,99,95,70,105,108,116,101,114,46,99,112,112,0,0,0,114,117,110,0,0,0,0,0,0,0,0,0,24,207,0,0,82,0,0,0,83,0,0,0,3,0,0,0,1,0,0,0,46,0,0,0,47,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,1,0,0,0,33,0,0,0,2,0,0,0,3,0,0,0,26,0,0,0,10,0,0,0,34,0,0,0,48,0,0,0,4,0,0,0,7,0,0,0,27,0,0,0,49,0,0,0,3,0,0,0,176,254,255,255,24,207,0,0,84,0,0,0,85,0,0,0,4,0,0,0,0,0,0,0,248,205,0,0,0,0,0,0,1,1,0,0,0,1,0,0,2,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,207,0,0,1,0,0,0,19,0,0,0,20,0,0,0,192,207,0,0,1,0,0,0,48,207,0,0,1,0,0,0,19,0,0,0,20,0,0,0,72,207,0,0,1,0,0,0,16,206,0,0,0,0,0,0,80,206,0,0,88,206,0,0,96,206,0,0,104,206,0,0,112,206,0,0,120,206,0,0,128,206,0,0,136,206,0,0,70,77,32,49,0,0,0,0,70,77,32,50,0,0,0,0,70,77,32,51,0,0,0,0,70,77,32,52,0,0,0,0,70,77,32,53,0,0,0,0,70,77,32,54,0,0,0,0,80,67,77,0,0,0,0,0,80,83,71,0,0,0,0,0,160,206,0,0,176,206,0,0,192,206,0,0,208,206,0,0,83,113,117,97,114,101,32,49,0,0,0,0,0,0,0,0,83,113,117,97,114,101,32,50,0,0,0,0,0,0,0,0,83,113,117,97,114,101,32,51,0,0,0,0,0,0,0,0,78,111,105,115,101,0,0,0,89,77,50,52,49,51,32,70,77,32,115,111,117,110,100,32,105,115,110,39,116,32,115,117,112,112,111,114,116,101,100,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,0,0,55,86,103,109,95,69,109,117,0,0,0,0,0,0,0,0,40,212,0,0,8,207,0,0,232,208,0,0,0,0,0,0,86,103,109,32,0,0,0,0,83,101,103,97,32,83,77,83,47,71,101,110,101,115,105,115,0,0,0,0,0,0,0,0,86,71,90,0,0,0,0,0,0,0,0,0,176,207,0,0,86,0,0,0,87,0,0,0,3,0,0,0,35,0,0,0,8,0,0,0,50,0,0,0,9,0,0,0,10,0,0,0,6,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,2,0,0,0,6,0,0,0,7,0,0,0,4,0,0,0,56,86,103,109,95,70,105,108,101,0,0,0,0,0,0,0,40,212,0,0,160,207,0,0,24,174,0,0,0,0,0,0,86,71,77,0,0,0,0,0,71,100,51,32,0,0,0,0,83,116,114,101,97,109,32,108,97,99,107,101,100,32,101,110,100,32,101,118,101,110,116,0,85,110,107,110,111,119,110,32,115,116,114,101,97,109,32,101,118,101,110,116,0,0,0,0,116,111,95,102,109,95,116,105,109,101,40,32,118,103,109,95,116,105,109,101,32,41,32,60,61,32,109,105,110,95,112,97,105,114,115,0,0,0,0,0,115,114,99,47,103,97,109,101,45,109,117,115,105,99,45,101,109,117,47,103,109,101,47,86,103,109,95,69,109,117,95,73,109,112,108,46,99,112,112,0,112,108,97,121,95,102,114,97,109,101,0,0,0,0,0,0,0,0,0,0,232,208,0,0,88,0,0,0,89,0,0,0,3,0,0,0,1,0,0,0,8,0,0,0,1,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,1,0,0,0,1,0,0,0,3,0,0,0,4,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,3,0,0,0,176,254,255,255,232,208,0,0,90,0,0,0,91,0,0,0,4,0,0,0,0,0,0,0,49,50,86,103,109,95,69,109,117,95,73,109,112,108,0,0,136,212,0,0,216,208,0,0,0,0,0,0,2,0,0,0,40,146,0,0,2,0,0,0,32,149,0,0,0,80,1,0,101,110,97,98,108,101,100,40,41,0,0,0,0,0,0,0,98,101,103,105,110,95,102,114,97,109,101,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,3,3,3,3,31,4,1,0,0,0,0,0,0,1,2,3,4,6,12,24,115,97,109,112,108,101,95,114,97,116,101,0,0,0,0,0,115,114,99,47,103,97,109,101,45,109,117,115,105,99,45,101,109,117,47,103,109,101,47,89,109,50,54,49,50,95,69,109,117,46,99,112,112,0,0,0,115,101,116,95,114,97,116,101,0,0,0,0,0,0,0,0,99,108,111,99,107,95,114,97,116,101,32,62,32,115,97,109,112,108,101,95,114,97,116,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2,2,3,3,3,4,4,4,5,5,6,6,7,8,8,8,8,1,1,1,1,2,2,2,2,2,3,3,3,4,4,4,5,5,6,6,7,8,8,9,10,11,12,13,14,16,16,16,16,2,2,2,2,2,3,3,3,4,4,4,5,5,6,6,7,8,8,9,10,11,12,13,14,16,17,19,20,22,22,22,22,79,117,116,32,111,102,32,109,101,109,111,114,121,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,40,117,110,115,105,103,110,101,100,41,32,100,97,116,97,32,60,61,32,48,120,70,70,0,119,114,105,116,101,49,0,0,119,114,105,116,101,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,89,0,0,0,0,0,0,71,66,83,0,0,0,0,0,71,89,77,0,0,0,0,0,72,69,83,0,0,0,0,0,75,83,83,0,0,0,0,0,78,83,70,0,0,0,0,0,78,83,70,69,0,0,0,0,83,65,80,0,0,0,0,0,83,80,67,0,0,0,0,0,86,71,77,0,0,0,0,0,0,0,0,0,0,0,0,0,40,100,97,116,97,32,124,124,32,33,115,105,122,101,41,32,38,38,32,111,117,116,0,0,115,114,99,47,103,97,109,101,45,109,117,115,105,99,45,101,109,117,47,103,109,101,47,103,109,101,46,99,112,112,0,0,103,109,101,95,111,112,101,110,95,100,97,116,97,0,0,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,0,0,83,116,57,116,121,112,101,95,105,110,102,111,0,0,0,0,0,212,0,0,112,211,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,0,40,212,0,0,136,211,0,0,128,211,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,40,212,0,0,192,211,0,0,176,211,0,0,0,0,0,0,0,0,0,0,232,211,0,0,92,0,0,0,93,0,0,0,94,0,0,0,95,0,0,0,51,0,0,0,1,0,0,0,8,0,0,0,11,0,0,0,0,0,0,0,112,212,0,0,92,0,0,0,96,0,0,0,94,0,0,0,95,0,0,0,51,0,0,0,2,0,0,0,9,0,0,0,12,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,40,212,0,0,72,212,0,0,232,211,0,0,0,0,0,0,0,0,0,0,208,212,0,0,92,0,0,0,97,0,0,0,94,0,0,0,95,0,0,0,51,0,0,0,3,0,0,0,10,0,0,0,13,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,40,212,0,0,168,212,0,0,232,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,215,0,0,98,0,0,0,99,0,0,0,8,0,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,0,83,116,57,98,97,100,95,97,108,108,111,99,0,0,0,0,40,212,0,0,0,215,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+45216);




      var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

      assert(tempDoublePtr % 8 == 0);

      function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

        HEAP8[tempDoublePtr] = HEAP8[ptr];

        HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

        HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

        HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

      }

      function copyTempDouble(ptr) {

        HEAP8[tempDoublePtr] = HEAP8[ptr];

        HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

        HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

        HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

        HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

        HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

        HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

        HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

      }


        function _llvm_lifetime_end() {}

        function ___assert_fail(condition, filename, line, func) {
            ABORT = true;
            throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
          }

        
        function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
            return !!__ZSt18uncaught_exceptionv.uncaught_exception;
          }
        
        
        
        function ___cxa_is_number_type(type) {
            var isNumber = false;
            try { if (type == __ZTIi) isNumber = true } catch(e){}
            try { if (type == __ZTIj) isNumber = true } catch(e){}
            try { if (type == __ZTIl) isNumber = true } catch(e){}
            try { if (type == __ZTIm) isNumber = true } catch(e){}
            try { if (type == __ZTIx) isNumber = true } catch(e){}
            try { if (type == __ZTIy) isNumber = true } catch(e){}
            try { if (type == __ZTIf) isNumber = true } catch(e){}
            try { if (type == __ZTId) isNumber = true } catch(e){}
            try { if (type == __ZTIe) isNumber = true } catch(e){}
            try { if (type == __ZTIc) isNumber = true } catch(e){}
            try { if (type == __ZTIa) isNumber = true } catch(e){}
            try { if (type == __ZTIh) isNumber = true } catch(e){}
            try { if (type == __ZTIs) isNumber = true } catch(e){}
            try { if (type == __ZTIt) isNumber = true } catch(e){}
            return isNumber;
          }function ___cxa_does_inherit(definiteType, possibilityType, possibility) {
            if (possibility == 0) return false;
            if (possibilityType == 0 || possibilityType == definiteType)
              return true;
            var possibility_type_info;
            if (___cxa_is_number_type(possibilityType)) {
              possibility_type_info = possibilityType;
            } else {
              var possibility_type_infoAddr = HEAP32[((possibilityType)>>2)] - 8;
              possibility_type_info = HEAP32[((possibility_type_infoAddr)>>2)];
            }
            switch (possibility_type_info) {
            case 0: // possibility is a pointer
              // See if definite type is a pointer
              var definite_type_infoAddr = HEAP32[((definiteType)>>2)] - 8;
              var definite_type_info = HEAP32[((definite_type_infoAddr)>>2)];
              if (definite_type_info == 0) {
                // Also a pointer; compare base types of pointers
                var defPointerBaseAddr = definiteType+8;
                var defPointerBaseType = HEAP32[((defPointerBaseAddr)>>2)];
                var possPointerBaseAddr = possibilityType+8;
                var possPointerBaseType = HEAP32[((possPointerBaseAddr)>>2)];
                return ___cxa_does_inherit(defPointerBaseType, possPointerBaseType, possibility);
              } else
                return false; // one pointer and one non-pointer
            case 1: // class with no base class
              return false;
            case 2: // class with base class
              var parentTypeAddr = possibilityType + 8;
              var parentType = HEAP32[((parentTypeAddr)>>2)];
              return ___cxa_does_inherit(definiteType, parentType, possibility);
            default:
              return false; // some unencountered type
            }
          }
        
        
        
        var ___cxa_last_thrown_exception=0;function ___resumeException(ptr) {
            if (!___cxa_last_thrown_exception) { ___cxa_last_thrown_exception = ptr; }
            throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
          }
        
        var ___cxa_exception_header_size=8;function ___cxa_find_matching_catch(thrown, throwntype) {
            if (thrown == -1) thrown = ___cxa_last_thrown_exception;
            header = thrown - ___cxa_exception_header_size;
            if (throwntype == -1) throwntype = HEAP32[((header)>>2)];
            var typeArray = Array.prototype.slice.call(arguments, 2);
        
            // If throwntype is a pointer, this means a pointer has been
            // thrown. When a pointer is thrown, actually what's thrown
            // is a pointer to the pointer. We'll dereference it.
            if (throwntype != 0 && !___cxa_is_number_type(throwntype)) {
              var throwntypeInfoAddr= HEAP32[((throwntype)>>2)] - 8;
              var throwntypeInfo= HEAP32[((throwntypeInfoAddr)>>2)];
              if (throwntypeInfo == 0)
                thrown = HEAP32[((thrown)>>2)];
            }
            // The different catch blocks are denoted by different types.
            // Due to inheritance, those types may not precisely match the
            // type of the thrown object. Find one which matches, and
            // return the type of the catch block which should be called.
            for (var i = 0; i < typeArray.length; i++) {
              if (___cxa_does_inherit(typeArray[i], throwntype, thrown))
                return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
            }
            // Shouldn't happen unless we have bogus data in typeArray
            // or encounter a type for which emscripten doesn't have suitable
            // typeinfo defined. Best-efforts match just in case.
            return ((asm["setTempRet0"](throwntype),thrown)|0);
          }function ___cxa_throw(ptr, type, destructor) {
            if (!___cxa_throw.initialized) {
              try {
                HEAP32[((__ZTVN10__cxxabiv119__pointer_type_infoE)>>2)]=0; // Workaround for libcxxabi integration bug
              } catch(e){}
              try {
                HEAP32[((__ZTVN10__cxxabiv117__class_type_infoE)>>2)]=1; // Workaround for libcxxabi integration bug
              } catch(e){}
              try {
                HEAP32[((__ZTVN10__cxxabiv120__si_class_type_infoE)>>2)]=2; // Workaround for libcxxabi integration bug
              } catch(e){}
              ___cxa_throw.initialized = true;
            }
            var header = ptr - ___cxa_exception_header_size;
            HEAP32[((header)>>2)]=type;
            HEAP32[(((header)+(4))>>2)]=destructor;
            ___cxa_last_thrown_exception = ptr;
            if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
              __ZSt18uncaught_exceptionv.uncaught_exception = 1;
            } else {
              __ZSt18uncaught_exceptionv.uncaught_exception++;
            }
            throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
          }

        
        
        
        function _emscripten_memcpy_big(dest, src, num) {
            HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
            return dest;
          } 
        Module["_memcpy"] = _memcpy; 
        Module["_memmove"] = _memmove;var _llvm_memmove_p0i8_p0i8_i32=_memmove;

        
         
        Module["_memset"] = _memset;var _llvm_memset_p0i8_i32=_memset;

        var _llvm_memcpy_p0i8_p0i8_i32=_memcpy;

        function _toupper(chr) {
            if (chr >= 97 && chr <= 122) {
              return chr - 97 + 65;
            } else {
              return chr;
            }
          }

         
        Module["_strlen"] = _strlen;

         
        Module["_strncpy"] = _strncpy;

        
        
        var ___errno_state=0;function ___setErrNo(value) {
            // For convenient setting and returning of errno.
            HEAP32[((___errno_state)>>2)]=value;
            return value;
          }
        
        var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _sysconf(name) {
            // long sysconf(int name);
            // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
            switch(name) {
              case 30: return PAGE_SIZE;
              case 132:
              case 133:
              case 12:
              case 137:
              case 138:
              case 15:
              case 235:
              case 16:
              case 17:
              case 18:
              case 19:
              case 20:
              case 149:
              case 13:
              case 10:
              case 236:
              case 153:
              case 9:
              case 21:
              case 22:
              case 159:
              case 154:
              case 14:
              case 77:
              case 78:
              case 139:
              case 80:
              case 81:
              case 79:
              case 82:
              case 68:
              case 67:
              case 164:
              case 11:
              case 29:
              case 47:
              case 48:
              case 95:
              case 52:
              case 51:
              case 46:
                return 200809;
              case 27:
              case 246:
              case 127:
              case 128:
              case 23:
              case 24:
              case 160:
              case 161:
              case 181:
              case 182:
              case 242:
              case 183:
              case 184:
              case 243:
              case 244:
              case 245:
              case 165:
              case 178:
              case 179:
              case 49:
              case 50:
              case 168:
              case 169:
              case 175:
              case 170:
              case 171:
              case 172:
              case 97:
              case 76:
              case 32:
              case 173:
              case 35:
                return -1;
              case 176:
              case 177:
              case 7:
              case 155:
              case 8:
              case 157:
              case 125:
              case 126:
              case 92:
              case 93:
              case 129:
              case 130:
              case 131:
              case 94:
              case 91:
                return 1;
              case 74:
              case 60:
              case 69:
              case 70:
              case 4:
                return 1024;
              case 31:
              case 42:
              case 72:
                return 32;
              case 87:
              case 26:
              case 33:
                return 2147483647;
              case 34:
              case 1:
                return 47839;
              case 38:
              case 36:
                return 99;
              case 43:
              case 37:
                return 2048;
              case 0: return 2097152;
              case 3: return 65536;
              case 28: return 32768;
              case 44: return 32767;
              case 75: return 16384;
              case 39: return 1000;
              case 89: return 700;
              case 71: return 256;
              case 40: return 255;
              case 2: return 100;
              case 180: return 64;
              case 25: return 20;
              case 5: return 16;
              case 6: return 6;
              case 73: return 4;
              case 84: return 1;
            }
            ___setErrNo(ERRNO_CODES.EINVAL);
            return -1;
          }

        var _fabs=Math_abs;

        var _floor=Math_floor;

        
        
        
        var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
        
        var TTY={ttys:[],init:function () {
              // https://github.com/kripken/emscripten/pull/1555
              // if (ENVIRONMENT_IS_NODE) {
              //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
              //   // device, it always assumes it's a TTY device. because of this, we're forcing
              //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
              //   // with text files until FS.init can be refactored.
              //   process['stdin']['setEncoding']('utf8');
              // }
            },shutdown:function () {
              // https://github.com/kripken/emscripten/pull/1555
              // if (ENVIRONMENT_IS_NODE) {
              //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
              //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
              //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
              //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
              //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
              //   process['stdin']['pause']();
              // }
            },register:function (dev, ops) {
              TTY.ttys[dev] = { input: [], output: [], ops: ops };
              FS.registerDevice(dev, TTY.stream_ops);
            },stream_ops:{open:function (stream) {
                var tty = TTY.ttys[stream.node.rdev];
                if (!tty) {
                  throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
                }
                stream.tty = tty;
                stream.seekable = false;
              },close:function (stream) {
                // flush any pending line data
                if (stream.tty.output.length) {
                  stream.tty.ops.put_char(stream.tty, 10);
                }
              },read:function (stream, buffer, offset, length, pos /* ignored */) {
                if (!stream.tty || !stream.tty.ops.get_char) {
                  throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
                }
                var bytesRead = 0;
                for (var i = 0; i < length; i++) {
                  var result;
                  try {
                    result = stream.tty.ops.get_char(stream.tty);
                  } catch (e) {
                    throw new FS.ErrnoError(ERRNO_CODES.EIO);
                  }
                  if (result === undefined && bytesRead === 0) {
                    throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
                  }
                  if (result === null || result === undefined) break;
                  bytesRead++;
                  buffer[offset+i] = result;
                }
                if (bytesRead) {
                  stream.node.timestamp = Date.now();
                }
                return bytesRead;
              },write:function (stream, buffer, offset, length, pos) {
                if (!stream.tty || !stream.tty.ops.put_char) {
                  throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
                }
                for (var i = 0; i < length; i++) {
                  try {
                    stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
                  } catch (e) {
                    throw new FS.ErrnoError(ERRNO_CODES.EIO);
                  }
                }
                if (length) {
                  stream.node.timestamp = Date.now();
                }
                return i;
              }},default_tty_ops:{get_char:function (tty) {
                if (!tty.input.length) {
                  var result = null;
                  if (ENVIRONMENT_IS_NODE) {
                    result = process['stdin']['read']();
                    if (!result) {
                      if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                        return null;  // EOF
                      }
                      return undefined;  // no data available
                    }
                  } else if (typeof window != 'undefined' &&
                    typeof window.prompt == 'function') {
                    // Browser.
                    result = window.prompt('Input: ');  // returns null on cancel
                    if (result !== null) {
                      result += '\n';
                    }
                  } else if (typeof readline == 'function') {
                    // Command line.
                    result = readline();
                    if (result !== null) {
                      result += '\n';
                    }
                  }
                  if (!result) {
                    return null;
                  }
                  tty.input = intArrayFromString(result, true);
                }
                return tty.input.shift();
              },put_char:function (tty, val) {
                if (val === null || val === 10) {
                  Module['print'](tty.output.join(''));
                  tty.output = [];
                } else {
                  tty.output.push(TTY.utf8.processCChar(val));
                }
              }},default_tty1_ops:{put_char:function (tty, val) {
                if (val === null || val === 10) {
                  Module['printErr'](tty.output.join(''));
                  tty.output = [];
                } else {
                  tty.output.push(TTY.utf8.processCChar(val));
                }
              }}};
        
        var MEMFS={ops_table:null,CONTENT_OWNING:1,CONTENT_FLEXIBLE:2,CONTENT_FIXED:3,mount:function (mount) {
              return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
            },createNode:function (parent, name, mode, dev) {
              if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
                // no supported
                throw new FS.ErrnoError(ERRNO_CODES.EPERM);
              }
              if (!MEMFS.ops_table) {
                MEMFS.ops_table = {
                  dir: {
                    node: {
                      getattr: MEMFS.node_ops.getattr,
                      setattr: MEMFS.node_ops.setattr,
                      lookup: MEMFS.node_ops.lookup,
                      mknod: MEMFS.node_ops.mknod,
                      rename: MEMFS.node_ops.rename,
                      unlink: MEMFS.node_ops.unlink,
                      rmdir: MEMFS.node_ops.rmdir,
                      readdir: MEMFS.node_ops.readdir,
                      symlink: MEMFS.node_ops.symlink
                    },
                    stream: {
                      llseek: MEMFS.stream_ops.llseek
                    }
                  },
                  file: {
                    node: {
                      getattr: MEMFS.node_ops.getattr,
                      setattr: MEMFS.node_ops.setattr
                    },
                    stream: {
                      llseek: MEMFS.stream_ops.llseek,
                      read: MEMFS.stream_ops.read,
                      write: MEMFS.stream_ops.write,
                      allocate: MEMFS.stream_ops.allocate,
                      mmap: MEMFS.stream_ops.mmap
                    }
                  },
                  link: {
                    node: {
                      getattr: MEMFS.node_ops.getattr,
                      setattr: MEMFS.node_ops.setattr,
                      readlink: MEMFS.node_ops.readlink
                    },
                    stream: {}
                  },
                  chrdev: {
                    node: {
                      getattr: MEMFS.node_ops.getattr,
                      setattr: MEMFS.node_ops.setattr
                    },
                    stream: FS.chrdev_stream_ops
                  },
                };
              }
              var node = FS.createNode(parent, name, mode, dev);
              if (FS.isDir(node.mode)) {
                node.node_ops = MEMFS.ops_table.dir.node;
                node.stream_ops = MEMFS.ops_table.dir.stream;
                node.contents = {};
              } else if (FS.isFile(node.mode)) {
                node.node_ops = MEMFS.ops_table.file.node;
                node.stream_ops = MEMFS.ops_table.file.stream;
                node.contents = [];
                node.contentMode = MEMFS.CONTENT_FLEXIBLE;
              } else if (FS.isLink(node.mode)) {
                node.node_ops = MEMFS.ops_table.link.node;
                node.stream_ops = MEMFS.ops_table.link.stream;
              } else if (FS.isChrdev(node.mode)) {
                node.node_ops = MEMFS.ops_table.chrdev.node;
                node.stream_ops = MEMFS.ops_table.chrdev.stream;
              }
              node.timestamp = Date.now();
              // add the new node to the parent
              if (parent) {
                parent.contents[name] = node;
              }
              return node;
            },ensureFlexible:function (node) {
              if (node.contentMode !== MEMFS.CONTENT_FLEXIBLE) {
                var contents = node.contents;
                node.contents = Array.prototype.slice.call(contents);
                node.contentMode = MEMFS.CONTENT_FLEXIBLE;
              }
            },node_ops:{getattr:function (node) {
                var attr = {};
                // device numbers reuse inode numbers.
                attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
                attr.ino = node.id;
                attr.mode = node.mode;
                attr.nlink = 1;
                attr.uid = 0;
                attr.gid = 0;
                attr.rdev = node.rdev;
                if (FS.isDir(node.mode)) {
                  attr.size = 4096;
                } else if (FS.isFile(node.mode)) {
                  attr.size = node.contents.length;
                } else if (FS.isLink(node.mode)) {
                  attr.size = node.link.length;
                } else {
                  attr.size = 0;
                }
                attr.atime = new Date(node.timestamp);
                attr.mtime = new Date(node.timestamp);
                attr.ctime = new Date(node.timestamp);
                // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
                //       but this is not required by the standard.
                attr.blksize = 4096;
                attr.blocks = Math.ceil(attr.size / attr.blksize);
                return attr;
              },setattr:function (node, attr) {
                if (attr.mode !== undefined) {
                  node.mode = attr.mode;
                }
                if (attr.timestamp !== undefined) {
                  node.timestamp = attr.timestamp;
                }
                if (attr.size !== undefined) {
                  MEMFS.ensureFlexible(node);
                  var contents = node.contents;
                  if (attr.size < contents.length) contents.length = attr.size;
                  else while (attr.size > contents.length) contents.push(0);
                }
              },lookup:function (parent, name) {
                throw FS.genericErrors[ERRNO_CODES.ENOENT];
              },mknod:function (parent, name, mode, dev) {
                return MEMFS.createNode(parent, name, mode, dev);
              },rename:function (old_node, new_dir, new_name) {
                // if we're overwriting a directory at new_name, make sure it's empty.
                if (FS.isDir(old_node.mode)) {
                  var new_node;
                  try {
                    new_node = FS.lookupNode(new_dir, new_name);
                  } catch (e) {
                  }
                  if (new_node) {
                    for (var i in new_node.contents) {
                      throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
                    }
                  }
                }
                // do the internal rewiring
                delete old_node.parent.contents[old_node.name];
                old_node.name = new_name;
                new_dir.contents[new_name] = old_node;
                old_node.parent = new_dir;
              },unlink:function (parent, name) {
                delete parent.contents[name];
              },rmdir:function (parent, name) {
                var node = FS.lookupNode(parent, name);
                for (var i in node.contents) {
                  throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
                }
                delete parent.contents[name];
              },readdir:function (node) {
                var entries = ['.', '..']
                for (var key in node.contents) {
                  if (!node.contents.hasOwnProperty(key)) {
                    continue;
                  }
                  entries.push(key);
                }
                return entries;
              },symlink:function (parent, newname, oldpath) {
                var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
                node.link = oldpath;
                return node;
              },readlink:function (node) {
                if (!FS.isLink(node.mode)) {
                  throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
                }
                return node.link;
              }},stream_ops:{read:function (stream, buffer, offset, length, position) {
                var contents = stream.node.contents;
                if (position >= contents.length)
                  return 0;
                var size = Math.min(contents.length - position, length);
                assert(size >= 0);
                if (size > 8 && contents.subarray) { // non-trivial, and typed array
                  buffer.set(contents.subarray(position, position + size), offset);
                } else
                {
                  for (var i = 0; i < size; i++) {
                    buffer[offset + i] = contents[position + i];
                  }
                }
                return size;
              },write:function (stream, buffer, offset, length, position, canOwn) {
                var node = stream.node;
                node.timestamp = Date.now();
                var contents = node.contents;
                if (length && contents.length === 0 && position === 0 && buffer.subarray) {
                  // just replace it with the new data
                  if (canOwn && offset === 0) {
                    node.contents = buffer; // this could be a subarray of Emscripten HEAP, or allocated from some other source.
                    node.contentMode = (buffer.buffer === HEAP8.buffer) ? MEMFS.CONTENT_OWNING : MEMFS.CONTENT_FIXED;
                  } else {
                    node.contents = new Uint8Array(buffer.subarray(offset, offset+length));
                    node.contentMode = MEMFS.CONTENT_FIXED;
                  }
                  return length;
                }
                MEMFS.ensureFlexible(node);
                var contents = node.contents;
                while (contents.length < position) contents.push(0);
                for (var i = 0; i < length; i++) {
                  contents[position + i] = buffer[offset + i];
                }
                return length;
              },llseek:function (stream, offset, whence) {
                var position = offset;
                if (whence === 1) {  // SEEK_CUR.
                  position += stream.position;
                } else if (whence === 2) {  // SEEK_END.
                  if (FS.isFile(stream.node.mode)) {
                    position += stream.node.contents.length;
                  }
                }
                if (position < 0) {
                  throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
                }
                stream.ungotten = [];
                stream.position = position;
                return position;
              },allocate:function (stream, offset, length) {
                MEMFS.ensureFlexible(stream.node);
                var contents = stream.node.contents;
                var limit = offset + length;
                while (limit > contents.length) contents.push(0);
              },mmap:function (stream, buffer, offset, length, position, prot, flags) {
                if (!FS.isFile(stream.node.mode)) {
                  throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
                }
                var ptr;
                var allocated;
                var contents = stream.node.contents;
                // Only make a new copy when MAP_PRIVATE is specified.
                if ( !(flags & 2) &&
                      (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
                  // We can't emulate MAP_SHARED when the file is not backed by the buffer
                  // we're mapping to (e.g. the HEAP buffer).
                  allocated = false;
                  ptr = contents.byteOffset;
                } else {
                  // Try to avoid unnecessary slices.
                  if (position > 0 || position + length < contents.length) {
                    if (contents.subarray) {
                      contents = contents.subarray(position, position + length);
                    } else {
                      contents = Array.prototype.slice.call(contents, position, position + length);
                    }
                  }
                  allocated = true;
                  ptr = _malloc(length);
                  if (!ptr) {
                    throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
                  }
                  buffer.set(contents, ptr);
                }
                return { ptr: ptr, allocated: allocated };
              }}};
        
        var IDBFS={dbs:{},indexedDB:function () {
              return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
            },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
              // reuse all of the core MEMFS functionality
              return MEMFS.mount.apply(null, arguments);
            },syncfs:function (mount, populate, callback) {
              IDBFS.getLocalSet(mount, function(err, local) {
                if (err) return callback(err);
        
                IDBFS.getRemoteSet(mount, function(err, remote) {
                  if (err) return callback(err);
        
                  var src = populate ? remote : local;
                  var dst = populate ? local : remote;
        
                  IDBFS.reconcile(src, dst, callback);
                });
              });
            },getDB:function (name, callback) {
              // check the cache first
              var db = IDBFS.dbs[name];
              if (db) {
                return callback(null, db);
              }
        
              var req;
              try {
                req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
              } catch (e) {
                return callback(e);
              }
              req.onupgradeneeded = function(e) {
                var db = e.target.result;
                var transaction = e.target.transaction;
        
                var fileStore;
        
                if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
                  fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
                } else {
                  fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
                }
        
                fileStore.createIndex('timestamp', 'timestamp', { unique: false });
              };
              req.onsuccess = function() {
                db = req.result;
        
                // add to the cache
                IDBFS.dbs[name] = db;
                callback(null, db);
              };
              req.onerror = function() {
                callback(this.error);
              };
            },getLocalSet:function (mount, callback) {
              var entries = {};
        
              function isRealDir(p) {
                return p !== '.' && p !== '..';
              };
              function toAbsolute(root) {
                return function(p) {
                  return PATH.join2(root, p);
                }
              };
        
              var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
        
              while (check.length) {
                var path = check.pop();
                var stat;
        
                try {
                  stat = FS.stat(path);
                } catch (e) {
                  return callback(e);
                }
        
                if (FS.isDir(stat.mode)) {
                  check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
                }
        
                entries[path] = { timestamp: stat.mtime };
              }
        
              return callback(null, { type: 'local', entries: entries });
            },getRemoteSet:function (mount, callback) {
              var entries = {};
        
              IDBFS.getDB(mount.mountpoint, function(err, db) {
                if (err) return callback(err);
        
                var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
                transaction.onerror = function() { callback(this.error); };
        
                var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
                var index = store.index('timestamp');
        
                index.openKeyCursor().onsuccess = function(event) {
                  var cursor = event.target.result;
        
                  if (!cursor) {
                    return callback(null, { type: 'remote', db: db, entries: entries });
                  }
        
                  entries[cursor.primaryKey] = { timestamp: cursor.key };
        
                  cursor.continue();
                };
              });
            },loadLocalEntry:function (path, callback) {
              var stat, node;
        
              try {
                var lookup = FS.lookupPath(path);
                node = lookup.node;
                stat = FS.stat(path);
              } catch (e) {
                return callback(e);
              }
        
              if (FS.isDir(stat.mode)) {
                return callback(null, { timestamp: stat.mtime, mode: stat.mode });
              } else if (FS.isFile(stat.mode)) {
                return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
              } else {
                return callback(new Error('node type not supported'));
              }
            },storeLocalEntry:function (path, entry, callback) {
              try {
                if (FS.isDir(entry.mode)) {
                  FS.mkdir(path, entry.mode);
                } else if (FS.isFile(entry.mode)) {
                  FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
                } else {
                  return callback(new Error('node type not supported'));
                }
        
                FS.utime(path, entry.timestamp, entry.timestamp);
              } catch (e) {
                return callback(e);
              }
        
              callback(null);
            },removeLocalEntry:function (path, callback) {
              try {
                var lookup = FS.lookupPath(path);
                var stat = FS.stat(path);
        
                if (FS.isDir(stat.mode)) {
                  FS.rmdir(path);
                } else if (FS.isFile(stat.mode)) {
                  FS.unlink(path);
                }
              } catch (e) {
                return callback(e);
              }
        
              callback(null);
            },loadRemoteEntry:function (store, path, callback) {
              var req = store.get(path);
              req.onsuccess = function(event) { callback(null, event.target.result); };
              req.onerror = function() { callback(this.error); };
            },storeRemoteEntry:function (store, path, entry, callback) {
              var req = store.put(entry, path);
              req.onsuccess = function() { callback(null); };
              req.onerror = function() { callback(this.error); };
            },removeRemoteEntry:function (store, path, callback) {
              var req = store.delete(path);
              req.onsuccess = function() { callback(null); };
              req.onerror = function() { callback(this.error); };
            },reconcile:function (src, dst, callback) {
              var total = 0;
        
              var create = [];
              Object.keys(src.entries).forEach(function (key) {
                var e = src.entries[key];
                var e2 = dst.entries[key];
                if (!e2 || e.timestamp > e2.timestamp) {
                  create.push(key);
                  total++;
                }
              });
        
              var remove = [];
              Object.keys(dst.entries).forEach(function (key) {
                var e = dst.entries[key];
                var e2 = src.entries[key];
                if (!e2) {
                  remove.push(key);
                  total++;
                }
              });
        
              if (!total) {
                return callback(null);
              }
        
              var errored = false;
              var completed = 0;
              var db = src.type === 'remote' ? src.db : dst.db;
              var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
              var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
        
              function done(err) {
                if (err) {
                  if (!done.errored) {
                    done.errored = true;
                    return callback(err);
                  }
                  return;
                }
                if (++completed >= total) {
                  return callback(null);
                }
              };
        
              transaction.onerror = function() { done(this.error); };
        
              // sort paths in ascending order so directory entries are created
              // before the files inside them
              create.sort().forEach(function (path) {
                if (dst.type === 'local') {
                  IDBFS.loadRemoteEntry(store, path, function (err, entry) {
                    if (err) return done(err);
                    IDBFS.storeLocalEntry(path, entry, done);
                  });
                } else {
                  IDBFS.loadLocalEntry(path, function (err, entry) {
                    if (err) return done(err);
                    IDBFS.storeRemoteEntry(store, path, entry, done);
                  });
                }
              });
        
              // sort paths in descending order so files are deleted before their
              // parent directories
              remove.sort().reverse().forEach(function(path) {
                if (dst.type === 'local') {
                  IDBFS.removeLocalEntry(path, done);
                } else {
                  IDBFS.removeRemoteEntry(store, path, done);
                }
              });
            }};
        
        var NODEFS={isWindows:false,staticInit:function () {
              NODEFS.isWindows = !!process.platform.match(/^win/);
            },mount:function (mount) {
              assert(ENVIRONMENT_IS_NODE);
              return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
            },createNode:function (parent, name, mode, dev) {
              if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
                throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
              }
              var node = FS.createNode(parent, name, mode);
              node.node_ops = NODEFS.node_ops;
              node.stream_ops = NODEFS.stream_ops;
              return node;
            },getMode:function (path) {
              var stat;
              try {
                stat = fs.lstatSync(path);
                if (NODEFS.isWindows) {
                  // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
                  // propagate write bits to execute bits.
                  stat.mode = stat.mode | ((stat.mode & 146) >> 1);
                }
              } catch (e) {
                if (!e.code) throw e;
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
              return stat.mode;
            },realPath:function (node) {
              var parts = [];
              while (node.parent !== node) {
                parts.push(node.name);
                node = node.parent;
              }
              parts.push(node.mount.opts.root);
              parts.reverse();
              return PATH.join.apply(null, parts);
            },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
              if (flags in NODEFS.flagsToPermissionStringMap) {
                return NODEFS.flagsToPermissionStringMap[flags];
              } else {
                return flags;
              }
            },node_ops:{getattr:function (node) {
                var path = NODEFS.realPath(node);
                var stat;
                try {
                  stat = fs.lstatSync(path);
                } catch (e) {
                  if (!e.code) throw e;
                  throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                }
                // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
                // See http://support.microsoft.com/kb/140365
                if (NODEFS.isWindows && !stat.blksize) {
                  stat.blksize = 4096;
                }
                if (NODEFS.isWindows && !stat.blocks) {
                  stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
                }
                return {
                  dev: stat.dev,
                  ino: stat.ino,
                  mode: stat.mode,
                  nlink: stat.nlink,
                  uid: stat.uid,
                  gid: stat.gid,
                  rdev: stat.rdev,
                  size: stat.size,
                  atime: stat.atime,
                  mtime: stat.mtime,
                  ctime: stat.ctime,
                  blksize: stat.blksize,
                  blocks: stat.blocks
                };
              },setattr:function (node, attr) {
                var path = NODEFS.realPath(node);
                try {
                  if (attr.mode !== undefined) {
                    fs.chmodSync(path, attr.mode);
                    // update the common node structure mode as well
                    node.mode = attr.mode;
                  }
                  if (attr.timestamp !== undefined) {
                    var date = new Date(attr.timestamp);
                    fs.utimesSync(path, date, date);
                  }
                  if (attr.size !== undefined) {
                    fs.truncateSync(path, attr.size);
                  }
                } catch (e) {
                  if (!e.code) throw e;
                  throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                }
              },lookup:function (parent, name) {
                var path = PATH.join2(NODEFS.realPath(parent), name);
                var mode = NODEFS.getMode(path);
                return NODEFS.createNode(parent, name, mode);
              },mknod:function (parent, name, mode, dev) {
                var node = NODEFS.createNode(parent, name, mode, dev);
                // create the backing node for this in the fs root as well
                var path = NODEFS.realPath(node);
                try {
                  if (FS.isDir(node.mode)) {
                    fs.mkdirSync(path, node.mode);
                  } else {
                    fs.writeFileSync(path, '', { mode: node.mode });
                  }
                } catch (e) {
                  if (!e.code) throw e;
                  throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                }
                return node;
              },rename:function (oldNode, newDir, newName) {
                var oldPath = NODEFS.realPath(oldNode);
                var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
                try {
                  fs.renameSync(oldPath, newPath);
                } catch (e) {
                  if (!e.code) throw e;
                  throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                }
              },unlink:function (parent, name) {
                var path = PATH.join2(NODEFS.realPath(parent), name);
                try {
                  fs.unlinkSync(path);
                } catch (e) {
                  if (!e.code) throw e;
                  throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                }
              },rmdir:function (parent, name) {
                var path = PATH.join2(NODEFS.realPath(parent), name);
                try {
                  fs.rmdirSync(path);
                } catch (e) {
                  if (!e.code) throw e;
                  throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                }
              },readdir:function (node) {
                var path = NODEFS.realPath(node);
                try {
                  return fs.readdirSync(path);
                } catch (e) {
                  if (!e.code) throw e;
                  throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                }
              },symlink:function (parent, newName, oldPath) {
                var newPath = PATH.join2(NODEFS.realPath(parent), newName);
                try {
                  fs.symlinkSync(oldPath, newPath);
                } catch (e) {
                  if (!e.code) throw e;
                  throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                }
              },readlink:function (node) {
                var path = NODEFS.realPath(node);
                try {
                  return fs.readlinkSync(path);
                } catch (e) {
                  if (!e.code) throw e;
                  throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                }
              }},stream_ops:{open:function (stream) {
                var path = NODEFS.realPath(stream.node);
                try {
                  if (FS.isFile(stream.node.mode)) {
                    stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
                  }
                } catch (e) {
                  if (!e.code) throw e;
                  throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                }
              },close:function (stream) {
                try {
                  if (FS.isFile(stream.node.mode) && stream.nfd) {
                    fs.closeSync(stream.nfd);
                  }
                } catch (e) {
                  if (!e.code) throw e;
                  throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                }
              },read:function (stream, buffer, offset, length, position) {
                // FIXME this is terrible.
                var nbuffer = new Buffer(length);
                var res;
                try {
                  res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
                } catch (e) {
                  throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                }
                if (res > 0) {
                  for (var i = 0; i < res; i++) {
                    buffer[offset + i] = nbuffer[i];
                  }
                }
                return res;
              },write:function (stream, buffer, offset, length, position) {
                // FIXME this is terrible.
                var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
                var res;
                try {
                  res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
                } catch (e) {
                  throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                }
                return res;
              },llseek:function (stream, offset, whence) {
                var position = offset;
                if (whence === 1) {  // SEEK_CUR.
                  position += stream.position;
                } else if (whence === 2) {  // SEEK_END.
                  if (FS.isFile(stream.node.mode)) {
                    try {
                      var stat = fs.fstatSync(stream.nfd);
                      position += stat.size;
                    } catch (e) {
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  }
                }
        
                if (position < 0) {
                  throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
                }
        
                stream.position = position;
                return position;
              }}};
        
        var _stdin=allocate(1, "i32*", ALLOC_STATIC);
        
        var _stdout=allocate(1, "i32*", ALLOC_STATIC);
        
        var _stderr=allocate(1, "i32*", ALLOC_STATIC);
        
        function _fflush(stream) {
            // int fflush(FILE *stream);
            // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
            // we don't currently perform any user-space buffering of data
          }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,ErrnoError:null,genericErrors:{},handleFSError:function (e) {
              if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
              return ___setErrNo(e.errno);
            },lookupPath:function (path, opts) {
              path = PATH.resolve(FS.cwd(), path);
              opts = opts || {};
        
              var defaults = {
                follow_mount: true,
                recurse_count: 0
              };
              for (var key in defaults) {
                if (opts[key] === undefined) {
                  opts[key] = defaults[key];
                }
              }
        
              if (opts.recurse_count > 8) {  // max recursive lookup of 8
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
        
              // split the path
              var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
                return !!p;
              }), false);
        
              // start at the root
              var current = FS.root;
              var current_path = '/';
        
              for (var i = 0; i < parts.length; i++) {
                var islast = (i === parts.length-1);
                if (islast && opts.parent) {
                  // stop resolving
                  break;
                }
        
                current = FS.lookupNode(current, parts[i]);
                current_path = PATH.join2(current_path, parts[i]);
        
                // jump to the mount's root node if this is a mountpoint
                if (FS.isMountpoint(current)) {
                  if (!islast || (islast && opts.follow_mount)) {
                    current = current.mounted.root;
                  }
                }
        
                // by default, lookupPath will not follow a symlink if it is the final path component.
                // setting opts.follow = true will override this behavior.
                if (!islast || opts.follow) {
                  var count = 0;
                  while (FS.isLink(current.mode)) {
                    var link = FS.readlink(current_path);
                    current_path = PATH.resolve(PATH.dirname(current_path), link);
                    
                    var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
                    current = lookup.node;
        
                    if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                      throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
                    }
                  }
                }
              }
        
              return { path: current_path, node: current };
            },getPath:function (node) {
              var path;
              while (true) {
                if (FS.isRoot(node)) {
                  var mount = node.mount.mountpoint;
                  if (!path) return mount;
                  return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
                }
                path = path ? node.name + '/' + path : node.name;
                node = node.parent;
              }
            },hashName:function (parentid, name) {
              var hash = 0;
        
        
              for (var i = 0; i < name.length; i++) {
                hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
              }
              return ((parentid + hash) >>> 0) % FS.nameTable.length;
            },hashAddNode:function (node) {
              var hash = FS.hashName(node.parent.id, node.name);
              node.name_next = FS.nameTable[hash];
              FS.nameTable[hash] = node;
            },hashRemoveNode:function (node) {
              var hash = FS.hashName(node.parent.id, node.name);
              if (FS.nameTable[hash] === node) {
                FS.nameTable[hash] = node.name_next;
              } else {
                var current = FS.nameTable[hash];
                while (current) {
                  if (current.name_next === node) {
                    current.name_next = node.name_next;
                    break;
                  }
                  current = current.name_next;
                }
              }
            },lookupNode:function (parent, name) {
              var err = FS.mayLookup(parent);
              if (err) {
                throw new FS.ErrnoError(err);
              }
              var hash = FS.hashName(parent.id, name);
              for (var node = FS.nameTable[hash]; node; node = node.name_next) {
                var nodeName = node.name;
                if (node.parent.id === parent.id && nodeName === name) {
                  return node;
                }
              }
              // if we failed to find it in the cache, call into the VFS
              return FS.lookup(parent, name);
            },createNode:function (parent, name, mode, rdev) {
              if (!FS.FSNode) {
                FS.FSNode = function(parent, name, mode, rdev) {
                  if (!parent) {
                    parent = this;  // root node sets parent to itself
                  }
                  this.parent = parent;
                  this.mount = parent.mount;
                  this.mounted = null;
                  this.id = FS.nextInode++;
                  this.name = name;
                  this.mode = mode;
                  this.node_ops = {};
                  this.stream_ops = {};
                  this.rdev = rdev;
                };
        
                FS.FSNode.prototype = {};
        
                // compatibility
                var readMode = 292 | 73;
                var writeMode = 146;
        
                // NOTE we must use Object.defineProperties instead of individual calls to
                // Object.defineProperty in order to make closure compiler happy
                Object.defineProperties(FS.FSNode.prototype, {
                  read: {
                    get: function() { return (this.mode & readMode) === readMode; },
                    set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
                  },
                  write: {
                    get: function() { return (this.mode & writeMode) === writeMode; },
                    set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
                  },
                  isFolder: {
                    get: function() { return FS.isDir(this.mode); },
                  },
                  isDevice: {
                    get: function() { return FS.isChrdev(this.mode); },
                  },
                });
              }
        
              var node = new FS.FSNode(parent, name, mode, rdev);
        
              FS.hashAddNode(node);
        
              return node;
            },destroyNode:function (node) {
              FS.hashRemoveNode(node);
            },isRoot:function (node) {
              return node === node.parent;
            },isMountpoint:function (node) {
              return !!node.mounted;
            },isFile:function (mode) {
              return (mode & 61440) === 32768;
            },isDir:function (mode) {
              return (mode & 61440) === 16384;
            },isLink:function (mode) {
              return (mode & 61440) === 40960;
            },isChrdev:function (mode) {
              return (mode & 61440) === 8192;
            },isBlkdev:function (mode) {
              return (mode & 61440) === 24576;
            },isFIFO:function (mode) {
              return (mode & 61440) === 4096;
            },isSocket:function (mode) {
              return (mode & 49152) === 49152;
            },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
              var flags = FS.flagModes[str];
              if (typeof flags === 'undefined') {
                throw new Error('Unknown file open mode: ' + str);
              }
              return flags;
            },flagsToPermissionString:function (flag) {
              var accmode = flag & 2097155;
              var perms = ['r', 'w', 'rw'][accmode];
              if ((flag & 512)) {
                perms += 'w';
              }
              return perms;
            },nodePermissions:function (node, perms) {
              if (FS.ignorePermissions) {
                return 0;
              }
              // return 0 if any user, group or owner bits are set.
              if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
                return ERRNO_CODES.EACCES;
              } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
                return ERRNO_CODES.EACCES;
              } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
                return ERRNO_CODES.EACCES;
              }
              return 0;
            },mayLookup:function (dir) {
              return FS.nodePermissions(dir, 'x');
            },mayCreate:function (dir, name) {
              try {
                var node = FS.lookupNode(dir, name);
                return ERRNO_CODES.EEXIST;
              } catch (e) {
              }
              return FS.nodePermissions(dir, 'wx');
            },mayDelete:function (dir, name, isdir) {
              var node;
              try {
                node = FS.lookupNode(dir, name);
              } catch (e) {
                return e.errno;
              }
              var err = FS.nodePermissions(dir, 'wx');
              if (err) {
                return err;
              }
              if (isdir) {
                if (!FS.isDir(node.mode)) {
                  return ERRNO_CODES.ENOTDIR;
                }
                if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
                  return ERRNO_CODES.EBUSY;
                }
              } else {
                if (FS.isDir(node.mode)) {
                  return ERRNO_CODES.EISDIR;
                }
              }
              return 0;
            },mayOpen:function (node, flags) {
              if (!node) {
                return ERRNO_CODES.ENOENT;
              }
              if (FS.isLink(node.mode)) {
                return ERRNO_CODES.ELOOP;
              } else if (FS.isDir(node.mode)) {
                if ((flags & 2097155) !== 0 ||  // opening for write
                    (flags & 512)) {
                  return ERRNO_CODES.EISDIR;
                }
              }
              return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
            },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
              fd_start = fd_start || 0;
              fd_end = fd_end || FS.MAX_OPEN_FDS;
              for (var fd = fd_start; fd <= fd_end; fd++) {
                if (!FS.streams[fd]) {
                  return fd;
                }
              }
              throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
            },getStream:function (fd) {
              return FS.streams[fd];
            },createStream:function (stream, fd_start, fd_end) {
              if (!FS.FSStream) {
                FS.FSStream = function(){};
                FS.FSStream.prototype = {};
                // compatibility
                Object.defineProperties(FS.FSStream.prototype, {
                  object: {
                    get: function() { return this.node; },
                    set: function(val) { this.node = val; }
                  },
                  isRead: {
                    get: function() { return (this.flags & 2097155) !== 1; }
                  },
                  isWrite: {
                    get: function() { return (this.flags & 2097155) !== 0; }
                  },
                  isAppend: {
                    get: function() { return (this.flags & 1024); }
                  }
                });
              }
              if (stream.__proto__) {
                // reuse the object
                stream.__proto__ = FS.FSStream.prototype;
              } else {
                var newStream = new FS.FSStream();
                for (var p in stream) {
                  newStream[p] = stream[p];
                }
                stream = newStream;
              }
              var fd = FS.nextfd(fd_start, fd_end);
              stream.fd = fd;
              FS.streams[fd] = stream;
              return stream;
            },closeStream:function (fd) {
              FS.streams[fd] = null;
            },getStreamFromPtr:function (ptr) {
              return FS.streams[ptr - 1];
            },getPtrForStream:function (stream) {
              return stream ? stream.fd + 1 : 0;
            },chrdev_stream_ops:{open:function (stream) {
                var device = FS.getDevice(stream.node.rdev);
                // override node's stream ops with the device's
                stream.stream_ops = device.stream_ops;
                // forward the open call
                if (stream.stream_ops.open) {
                  stream.stream_ops.open(stream);
                }
              },llseek:function () {
                throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
              }},major:function (dev) {
              return ((dev) >> 8);
            },minor:function (dev) {
              return ((dev) & 0xff);
            },makedev:function (ma, mi) {
              return ((ma) << 8 | (mi));
            },registerDevice:function (dev, ops) {
              FS.devices[dev] = { stream_ops: ops };
            },getDevice:function (dev) {
              return FS.devices[dev];
            },getMounts:function (mount) {
              var mounts = [];
              var check = [mount];
        
              while (check.length) {
                var m = check.pop();
        
                mounts.push(m);
        
                check.push.apply(check, m.mounts);
              }
        
              return mounts;
            },syncfs:function (populate, callback) {
              if (typeof(populate) === 'function') {
                callback = populate;
                populate = false;
              }
        
              var mounts = FS.getMounts(FS.root.mount);
              var completed = 0;
        
              function done(err) {
                if (err) {
                  if (!done.errored) {
                    done.errored = true;
                    return callback(err);
                  }
                  return;
                }
                if (++completed >= mounts.length) {
                  callback(null);
                }
              };
        
              // sync all mounts
              mounts.forEach(function (mount) {
                if (!mount.type.syncfs) {
                  return done(null);
                }
                mount.type.syncfs(mount, populate, done);
              });
            },mount:function (type, opts, mountpoint) {
              var root = mountpoint === '/';
              var pseudo = !mountpoint;
              var node;
        
              if (root && FS.root) {
                throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
              } else if (!root && !pseudo) {
                var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
        
                mountpoint = lookup.path;  // use the absolute path
                node = lookup.node;
        
                if (FS.isMountpoint(node)) {
                  throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
                }
        
                if (!FS.isDir(node.mode)) {
                  throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
                }
              }
        
              var mount = {
                type: type,
                opts: opts,
                mountpoint: mountpoint,
                mounts: []
              };
        
              // create a root node for the fs
              var mountRoot = type.mount(mount);
              mountRoot.mount = mount;
              mount.root = mountRoot;
        
              if (root) {
                FS.root = mountRoot;
              } else if (node) {
                // set as a mountpoint
                node.mounted = mount;
        
                // add the new mount to the current mount's children
                if (node.mount) {
                  node.mount.mounts.push(mount);
                }
              }
        
              return mountRoot;
            },unmount:function (mountpoint) {
              var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
        
              if (!FS.isMountpoint(lookup.node)) {
                throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
              }
        
              // destroy the nodes for this mount, and all its child mounts
              var node = lookup.node;
              var mount = node.mounted;
              var mounts = FS.getMounts(mount);
        
              Object.keys(FS.nameTable).forEach(function (hash) {
                var current = FS.nameTable[hash];
        
                while (current) {
                  var next = current.name_next;
        
                  if (mounts.indexOf(current.mount) !== -1) {
                    FS.destroyNode(current);
                  }
        
                  current = next;
                }
              });
        
              // no longer a mountpoint
              node.mounted = null;
        
              // remove this mount from the child mounts
              var idx = node.mount.mounts.indexOf(mount);
              assert(idx !== -1);
              node.mount.mounts.splice(idx, 1);
            },lookup:function (parent, name) {
              return parent.node_ops.lookup(parent, name);
            },mknod:function (path, mode, dev) {
              var lookup = FS.lookupPath(path, { parent: true });
              var parent = lookup.node;
              var name = PATH.basename(path);
              var err = FS.mayCreate(parent, name);
              if (err) {
                throw new FS.ErrnoError(err);
              }
              if (!parent.node_ops.mknod) {
                throw new FS.ErrnoError(ERRNO_CODES.EPERM);
              }
              return parent.node_ops.mknod(parent, name, mode, dev);
            },create:function (path, mode) {
              mode = mode !== undefined ? mode : 438 /* 0666 */;
              mode &= 4095;
              mode |= 32768;
              return FS.mknod(path, mode, 0);
            },mkdir:function (path, mode) {
              mode = mode !== undefined ? mode : 511 /* 0777 */;
              mode &= 511 | 512;
              mode |= 16384;
              return FS.mknod(path, mode, 0);
            },mkdev:function (path, mode, dev) {
              if (typeof(dev) === 'undefined') {
                dev = mode;
                mode = 438 /* 0666 */;
              }
              mode |= 8192;
              return FS.mknod(path, mode, dev);
            },symlink:function (oldpath, newpath) {
              var lookup = FS.lookupPath(newpath, { parent: true });
              var parent = lookup.node;
              var newname = PATH.basename(newpath);
              var err = FS.mayCreate(parent, newname);
              if (err) {
                throw new FS.ErrnoError(err);
              }
              if (!parent.node_ops.symlink) {
                throw new FS.ErrnoError(ERRNO_CODES.EPERM);
              }
              return parent.node_ops.symlink(parent, newname, oldpath);
            },rename:function (old_path, new_path) {
              var old_dirname = PATH.dirname(old_path);
              var new_dirname = PATH.dirname(new_path);
              var old_name = PATH.basename(old_path);
              var new_name = PATH.basename(new_path);
              // parents must exist
              var lookup, old_dir, new_dir;
              try {
                lookup = FS.lookupPath(old_path, { parent: true });
                old_dir = lookup.node;
                lookup = FS.lookupPath(new_path, { parent: true });
                new_dir = lookup.node;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
              }
              // need to be part of the same mount
              if (old_dir.mount !== new_dir.mount) {
                throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
              }
              // source must exist
              var old_node = FS.lookupNode(old_dir, old_name);
              // old path should not be an ancestor of the new path
              var relative = PATH.relative(old_path, new_dirname);
              if (relative.charAt(0) !== '.') {
                throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
              }
              // new path should not be an ancestor of the old path
              relative = PATH.relative(new_path, old_dirname);
              if (relative.charAt(0) !== '.') {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
              // see if the new path already exists
              var new_node;
              try {
                new_node = FS.lookupNode(new_dir, new_name);
              } catch (e) {
                // not fatal
              }
              // early out if nothing needs to change
              if (old_node === new_node) {
                return;
              }
              // we'll need to delete the old entry
              var isdir = FS.isDir(old_node.mode);
              var err = FS.mayDelete(old_dir, old_name, isdir);
              if (err) {
                throw new FS.ErrnoError(err);
              }
              // need delete permissions if we'll be overwriting.
              // need create permissions if new doesn't already exist.
              err = new_node ?
                FS.mayDelete(new_dir, new_name, isdir) :
                FS.mayCreate(new_dir, new_name);
              if (err) {
                throw new FS.ErrnoError(err);
              }
              if (!old_dir.node_ops.rename) {
                throw new FS.ErrnoError(ERRNO_CODES.EPERM);
              }
              if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
                throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
              }
              // if we are going to change the parent, check write permissions
              if (new_dir !== old_dir) {
                err = FS.nodePermissions(old_dir, 'w');
                if (err) {
                  throw new FS.ErrnoError(err);
                }
              }
              // remove the node from the lookup hash
              FS.hashRemoveNode(old_node);
              // do the underlying fs rename
              try {
                old_dir.node_ops.rename(old_node, new_dir, new_name);
              } catch (e) {
                throw e;
              } finally {
                // add the node back to the hash (in case node_ops.rename
                // changed its name)
                FS.hashAddNode(old_node);
              }
            },rmdir:function (path) {
              var lookup = FS.lookupPath(path, { parent: true });
              var parent = lookup.node;
              var name = PATH.basename(path);
              var node = FS.lookupNode(parent, name);
              var err = FS.mayDelete(parent, name, true);
              if (err) {
                throw new FS.ErrnoError(err);
              }
              if (!parent.node_ops.rmdir) {
                throw new FS.ErrnoError(ERRNO_CODES.EPERM);
              }
              if (FS.isMountpoint(node)) {
                throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
              }
              parent.node_ops.rmdir(parent, name);
              FS.destroyNode(node);
            },readdir:function (path) {
              var lookup = FS.lookupPath(path, { follow: true });
              var node = lookup.node;
              if (!node.node_ops.readdir) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
              }
              return node.node_ops.readdir(node);
            },unlink:function (path) {
              var lookup = FS.lookupPath(path, { parent: true });
              var parent = lookup.node;
              var name = PATH.basename(path);
              var node = FS.lookupNode(parent, name);
              var err = FS.mayDelete(parent, name, false);
              if (err) {
                // POSIX says unlink should set EPERM, not EISDIR
                if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
                throw new FS.ErrnoError(err);
              }
              if (!parent.node_ops.unlink) {
                throw new FS.ErrnoError(ERRNO_CODES.EPERM);
              }
              if (FS.isMountpoint(node)) {
                throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
              }
              parent.node_ops.unlink(parent, name);
              FS.destroyNode(node);
            },readlink:function (path) {
              var lookup = FS.lookupPath(path);
              var link = lookup.node;
              if (!link.node_ops.readlink) {
                throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
              }
              return link.node_ops.readlink(link);
            },stat:function (path, dontFollow) {
              var lookup = FS.lookupPath(path, { follow: !dontFollow });
              var node = lookup.node;
              if (!node.node_ops.getattr) {
                throw new FS.ErrnoError(ERRNO_CODES.EPERM);
              }
              return node.node_ops.getattr(node);
            },lstat:function (path) {
              return FS.stat(path, true);
            },chmod:function (path, mode, dontFollow) {
              var node;
              if (typeof path === 'string') {
                var lookup = FS.lookupPath(path, { follow: !dontFollow });
                node = lookup.node;
              } else {
                node = path;
              }
              if (!node.node_ops.setattr) {
                throw new FS.ErrnoError(ERRNO_CODES.EPERM);
              }
              node.node_ops.setattr(node, {
                mode: (mode & 4095) | (node.mode & ~4095),
                timestamp: Date.now()
              });
            },lchmod:function (path, mode) {
              FS.chmod(path, mode, true);
            },fchmod:function (fd, mode) {
              var stream = FS.getStream(fd);
              if (!stream) {
                throw new FS.ErrnoError(ERRNO_CODES.EBADF);
              }
              FS.chmod(stream.node, mode);
            },chown:function (path, uid, gid, dontFollow) {
              var node;
              if (typeof path === 'string') {
                var lookup = FS.lookupPath(path, { follow: !dontFollow });
                node = lookup.node;
              } else {
                node = path;
              }
              if (!node.node_ops.setattr) {
                throw new FS.ErrnoError(ERRNO_CODES.EPERM);
              }
              node.node_ops.setattr(node, {
                timestamp: Date.now()
                // we ignore the uid / gid for now
              });
            },lchown:function (path, uid, gid) {
              FS.chown(path, uid, gid, true);
            },fchown:function (fd, uid, gid) {
              var stream = FS.getStream(fd);
              if (!stream) {
                throw new FS.ErrnoError(ERRNO_CODES.EBADF);
              }
              FS.chown(stream.node, uid, gid);
            },truncate:function (path, len) {
              if (len < 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
              }
              var node;
              if (typeof path === 'string') {
                var lookup = FS.lookupPath(path, { follow: true });
                node = lookup.node;
              } else {
                node = path;
              }
              if (!node.node_ops.setattr) {
                throw new FS.ErrnoError(ERRNO_CODES.EPERM);
              }
              if (FS.isDir(node.mode)) {
                throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
              }
              if (!FS.isFile(node.mode)) {
                throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
              }
              var err = FS.nodePermissions(node, 'w');
              if (err) {
                throw new FS.ErrnoError(err);
              }
              node.node_ops.setattr(node, {
                size: len,
                timestamp: Date.now()
              });
            },ftruncate:function (fd, len) {
              var stream = FS.getStream(fd);
              if (!stream) {
                throw new FS.ErrnoError(ERRNO_CODES.EBADF);
              }
              if ((stream.flags & 2097155) === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
              }
              FS.truncate(stream.node, len);
            },utime:function (path, atime, mtime) {
              var lookup = FS.lookupPath(path, { follow: true });
              var node = lookup.node;
              node.node_ops.setattr(node, {
                timestamp: Math.max(atime, mtime)
              });
            },open:function (path, flags, mode, fd_start, fd_end) {
              flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
              mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
              if ((flags & 64)) {
                mode = (mode & 4095) | 32768;
              } else {
                mode = 0;
              }
              var node;
              if (typeof path === 'object') {
                node = path;
              } else {
                path = PATH.normalize(path);
                try {
                  var lookup = FS.lookupPath(path, {
                    follow: !(flags & 131072)
                  });
                  node = lookup.node;
                } catch (e) {
                  // ignore
                }
              }
              // perhaps we need to create the node
              if ((flags & 64)) {
                if (node) {
                  // if O_CREAT and O_EXCL are set, error out if the node already exists
                  if ((flags & 128)) {
                    throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
                  }
                } else {
                  // node doesn't exist, try to create it
                  node = FS.mknod(path, mode, 0);
                }
              }
              if (!node) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
              }
              // can't truncate a device
              if (FS.isChrdev(node.mode)) {
                flags &= ~512;
              }
              // check permissions
              var err = FS.mayOpen(node, flags);
              if (err) {
                throw new FS.ErrnoError(err);
              }
              // do truncation if necessary
              if ((flags & 512)) {
                FS.truncate(node, 0);
              }
              // we've already handled these, don't pass down to the underlying vfs
              flags &= ~(128 | 512);
        
              // register the stream with the filesystem
              var stream = FS.createStream({
                node: node,
                path: FS.getPath(node),  // we want the absolute path to the node
                flags: flags,
                seekable: true,
                position: 0,
                stream_ops: node.stream_ops,
                // used by the file family libc calls (fopen, fwrite, ferror, etc.)
                ungotten: [],
                error: false
              }, fd_start, fd_end);
              // call the new stream's open function
              if (stream.stream_ops.open) {
                stream.stream_ops.open(stream);
              }
              if (Module['logReadFiles'] && !(flags & 1)) {
                if (!FS.readFiles) FS.readFiles = {};
                if (!(path in FS.readFiles)) {
                  FS.readFiles[path] = 1;
                  Module['printErr']('read file: ' + path);
                }
              }
              return stream;
            },close:function (stream) {
              try {
                if (stream.stream_ops.close) {
                  stream.stream_ops.close(stream);
                }
              } catch (e) {
                throw e;
              } finally {
                FS.closeStream(stream.fd);
              }
            },llseek:function (stream, offset, whence) {
              if (!stream.seekable || !stream.stream_ops.llseek) {
                throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
              }
              return stream.stream_ops.llseek(stream, offset, whence);
            },read:function (stream, buffer, offset, length, position) {
              if (length < 0 || position < 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
              }
              if ((stream.flags & 2097155) === 1) {
                throw new FS.ErrnoError(ERRNO_CODES.EBADF);
              }
              if (FS.isDir(stream.node.mode)) {
                throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
              }
              if (!stream.stream_ops.read) {
                throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
              }
              var seeking = true;
              if (typeof position === 'undefined') {
                position = stream.position;
                seeking = false;
              } else if (!stream.seekable) {
                throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
              }
              var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
              if (!seeking) stream.position += bytesRead;
              return bytesRead;
            },write:function (stream, buffer, offset, length, position, canOwn) {
              if (length < 0 || position < 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
              }
              if ((stream.flags & 2097155) === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EBADF);
              }
              if (FS.isDir(stream.node.mode)) {
                throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
              }
              if (!stream.stream_ops.write) {
                throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
              }
              var seeking = true;
              if (typeof position === 'undefined') {
                position = stream.position;
                seeking = false;
              } else if (!stream.seekable) {
                throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
              }
              if (stream.flags & 1024) {
                // seek to the end before writing in append mode
                FS.llseek(stream, 0, 2);
              }
              var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
              if (!seeking) stream.position += bytesWritten;
              return bytesWritten;
            },allocate:function (stream, offset, length) {
              if (offset < 0 || length <= 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
              }
              if ((stream.flags & 2097155) === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EBADF);
              }
              if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
                throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
              }
              if (!stream.stream_ops.allocate) {
                throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
              }
              stream.stream_ops.allocate(stream, offset, length);
            },mmap:function (stream, buffer, offset, length, position, prot, flags) {
              // TODO if PROT is PROT_WRITE, make sure we have write access
              if ((stream.flags & 2097155) === 1) {
                throw new FS.ErrnoError(ERRNO_CODES.EACCES);
              }
              if (!stream.stream_ops.mmap) {
                throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
              }
              return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
            },ioctl:function (stream, cmd, arg) {
              if (!stream.stream_ops.ioctl) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
              }
              return stream.stream_ops.ioctl(stream, cmd, arg);
            },readFile:function (path, opts) {
              opts = opts || {};
              opts.flags = opts.flags || 'r';
              opts.encoding = opts.encoding || 'binary';
              if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
                throw new Error('Invalid encoding type "' + opts.encoding + '"');
              }
              var ret;
              var stream = FS.open(path, opts.flags);
              var stat = FS.stat(path);
              var length = stat.size;
              var buf = new Uint8Array(length);
              FS.read(stream, buf, 0, length, 0);
              if (opts.encoding === 'utf8') {
                ret = '';
                var utf8 = new Runtime.UTF8Processor();
                for (var i = 0; i < length; i++) {
                  ret += utf8.processCChar(buf[i]);
                }
              } else if (opts.encoding === 'binary') {
                ret = buf;
              }
              FS.close(stream);
              return ret;
            },writeFile:function (path, data, opts) {
              opts = opts || {};
              opts.flags = opts.flags || 'w';
              opts.encoding = opts.encoding || 'utf8';
              if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
                throw new Error('Invalid encoding type "' + opts.encoding + '"');
              }
              var stream = FS.open(path, opts.flags, opts.mode);
              if (opts.encoding === 'utf8') {
                var utf8 = new Runtime.UTF8Processor();
                var buf = new Uint8Array(utf8.processJSString(data));
                FS.write(stream, buf, 0, buf.length, 0, opts.canOwn);
              } else if (opts.encoding === 'binary') {
                FS.write(stream, data, 0, data.length, 0, opts.canOwn);
              }
              FS.close(stream);
            },cwd:function () {
              return FS.currentPath;
            },chdir:function (path) {
              var lookup = FS.lookupPath(path, { follow: true });
              if (!FS.isDir(lookup.node.mode)) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
              }
              var err = FS.nodePermissions(lookup.node, 'x');
              if (err) {
                throw new FS.ErrnoError(err);
              }
              FS.currentPath = lookup.path;
            },createDefaultDirectories:function () {
              FS.mkdir('/tmp');
            },createDefaultDevices:function () {
              // create /dev
              FS.mkdir('/dev');
              // setup /dev/null
              FS.registerDevice(FS.makedev(1, 3), {
                read: function() { return 0; },
                write: function() { return 0; }
              });
              FS.mkdev('/dev/null', FS.makedev(1, 3));
              // setup /dev/tty and /dev/tty1
              // stderr needs to print output using Module['printErr']
              // so we register a second tty just for it.
              TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
              TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
              FS.mkdev('/dev/tty', FS.makedev(5, 0));
              FS.mkdev('/dev/tty1', FS.makedev(6, 0));
              // we're not going to emulate the actual shm device,
              // just create the tmp dirs that reside in it commonly
              FS.mkdir('/dev/shm');
              FS.mkdir('/dev/shm/tmp');
            },createStandardStreams:function () {
              // TODO deprecate the old functionality of a single
              // input / output callback and that utilizes FS.createDevice
              // and instead require a unique set of stream ops
        
              // by default, we symlink the standard streams to the
              // default tty devices. however, if the standard streams
              // have been overwritten we create a unique device for
              // them instead.
              if (Module['stdin']) {
                FS.createDevice('/dev', 'stdin', Module['stdin']);
              } else {
                FS.symlink('/dev/tty', '/dev/stdin');
              }
              if (Module['stdout']) {
                FS.createDevice('/dev', 'stdout', null, Module['stdout']);
              } else {
                FS.symlink('/dev/tty', '/dev/stdout');
              }
              if (Module['stderr']) {
                FS.createDevice('/dev', 'stderr', null, Module['stderr']);
              } else {
                FS.symlink('/dev/tty1', '/dev/stderr');
              }
        
              // open default streams for the stdin, stdout and stderr devices
              var stdin = FS.open('/dev/stdin', 'r');
              HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
              assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
        
              var stdout = FS.open('/dev/stdout', 'w');
              HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
              assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
        
              var stderr = FS.open('/dev/stderr', 'w');
              HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
              assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
            },ensureErrnoError:function () {
              if (FS.ErrnoError) return;
              FS.ErrnoError = function ErrnoError(errno) {
                this.errno = errno;
                for (var key in ERRNO_CODES) {
                  if (ERRNO_CODES[key] === errno) {
                    this.code = key;
                    break;
                  }
                }
                this.message = ERRNO_MESSAGES[errno];
              };
              FS.ErrnoError.prototype = new Error();
              FS.ErrnoError.prototype.constructor = FS.ErrnoError;
              // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
              [ERRNO_CODES.ENOENT].forEach(function(code) {
                FS.genericErrors[code] = new FS.ErrnoError(code);
                FS.genericErrors[code].stack = '<generic error, no stack>';
              });
            },staticInit:function () {
              FS.ensureErrnoError();
        
              FS.nameTable = new Array(4096);
        
              FS.mount(MEMFS, {}, '/');
        
              FS.createDefaultDirectories();
              FS.createDefaultDevices();
            },init:function (input, output, error) {
              assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
              FS.init.initialized = true;
        
              FS.ensureErrnoError();
        
              // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
              Module['stdin'] = input || Module['stdin'];
              Module['stdout'] = output || Module['stdout'];
              Module['stderr'] = error || Module['stderr'];
        
              FS.createStandardStreams();
            },quit:function () {
              FS.init.initialized = false;
              for (var i = 0; i < FS.streams.length; i++) {
                var stream = FS.streams[i];
                if (!stream) {
                  continue;
                }
                FS.close(stream);
              }
            },getMode:function (canRead, canWrite) {
              var mode = 0;
              if (canRead) mode |= 292 | 73;
              if (canWrite) mode |= 146;
              return mode;
            },joinPath:function (parts, forceRelative) {
              var path = PATH.join.apply(null, parts);
              if (forceRelative && path[0] == '/') path = path.substr(1);
              return path;
            },absolutePath:function (relative, base) {
              return PATH.resolve(base, relative);
            },standardizePath:function (path) {
              return PATH.normalize(path);
            },findObject:function (path, dontResolveLastLink) {
              var ret = FS.analyzePath(path, dontResolveLastLink);
              if (ret.exists) {
                return ret.object;
              } else {
                ___setErrNo(ret.error);
                return null;
              }
            },analyzePath:function (path, dontResolveLastLink) {
              // operate from within the context of the symlink's target
              try {
                var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
                path = lookup.path;
              } catch (e) {
              }
              var ret = {
                isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
                parentExists: false, parentPath: null, parentObject: null
              };
              try {
                var lookup = FS.lookupPath(path, { parent: true });
                ret.parentExists = true;
                ret.parentPath = lookup.path;
                ret.parentObject = lookup.node;
                ret.name = PATH.basename(path);
                lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
                ret.exists = true;
                ret.path = lookup.path;
                ret.object = lookup.node;
                ret.name = lookup.node.name;
                ret.isRoot = lookup.path === '/';
              } catch (e) {
                ret.error = e.errno;
              };
              return ret;
            },createFolder:function (parent, name, canRead, canWrite) {
              var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
              var mode = FS.getMode(canRead, canWrite);
              return FS.mkdir(path, mode);
            },createPath:function (parent, path, canRead, canWrite) {
              parent = typeof parent === 'string' ? parent : FS.getPath(parent);
              var parts = path.split('/').reverse();
              while (parts.length) {
                var part = parts.pop();
                if (!part) continue;
                var current = PATH.join2(parent, part);
                try {
                  FS.mkdir(current);
                } catch (e) {
                  // ignore EEXIST
                }
                parent = current;
              }
              return current;
            },createFile:function (parent, name, properties, canRead, canWrite) {
              var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
              var mode = FS.getMode(canRead, canWrite);
              return FS.create(path, mode);
            },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
              var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
              var mode = FS.getMode(canRead, canWrite);
              var node = FS.create(path, mode);
              if (data) {
                if (typeof data === 'string') {
                  var arr = new Array(data.length);
                  for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
                  data = arr;
                }
                // make sure we can write to the file
                FS.chmod(node, mode | 146);
                var stream = FS.open(node, 'w');
                FS.write(stream, data, 0, data.length, 0, canOwn);
                FS.close(stream);
                FS.chmod(node, mode);
              }
              return node;
            },createDevice:function (parent, name, input, output) {
              var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
              var mode = FS.getMode(!!input, !!output);
              if (!FS.createDevice.major) FS.createDevice.major = 64;
              var dev = FS.makedev(FS.createDevice.major++, 0);
              // Create a fake device that a set of stream ops to emulate
              // the old behavior.
              FS.registerDevice(dev, {
                open: function(stream) {
                  stream.seekable = false;
                },
                close: function(stream) {
                  // flush any pending line data
                  if (output && output.buffer && output.buffer.length) {
                    output(10);
                  }
                },
                read: function(stream, buffer, offset, length, pos /* ignored */) {
                  var bytesRead = 0;
                  for (var i = 0; i < length; i++) {
                    var result;
                    try {
                      result = input();
                    } catch (e) {
                      throw new FS.ErrnoError(ERRNO_CODES.EIO);
                    }
                    if (result === undefined && bytesRead === 0) {
                      throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
                    }
                    if (result === null || result === undefined) break;
                    bytesRead++;
                    buffer[offset+i] = result;
                  }
                  if (bytesRead) {
                    stream.node.timestamp = Date.now();
                  }
                  return bytesRead;
                },
                write: function(stream, buffer, offset, length, pos) {
                  for (var i = 0; i < length; i++) {
                    try {
                      output(buffer[offset+i]);
                    } catch (e) {
                      throw new FS.ErrnoError(ERRNO_CODES.EIO);
                    }
                  }
                  if (length) {
                    stream.node.timestamp = Date.now();
                  }
                  return i;
                }
              });
              return FS.mkdev(path, mode, dev);
            },createLink:function (parent, name, target, canRead, canWrite) {
              var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
              return FS.symlink(target, path);
            },forceLoadFile:function (obj) {
              if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
              var success = true;
              if (typeof XMLHttpRequest !== 'undefined') {
                throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
              } else if (Module['read']) {
                // Command-line.
                try {
                  // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
                  //          read() will try to parse UTF8.
                  obj.contents = intArrayFromString(Module['read'](obj.url), true);
                } catch (e) {
                  success = false;
                }
              } else {
                throw new Error('Cannot load without read() or XMLHttpRequest.');
              }
              if (!success) ___setErrNo(ERRNO_CODES.EIO);
              return success;
            },createLazyFile:function (parent, name, url, canRead, canWrite) {
              if (typeof XMLHttpRequest !== 'undefined') {
                if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
                // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
                function LazyUint8Array() {
                  this.lengthKnown = false;
                  this.chunks = []; // Loaded chunks. Index is the chunk number
                }
                LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
                  if (idx > this.length-1 || idx < 0) {
                    return undefined;
                  }
                  var chunkOffset = idx % this.chunkSize;
                  var chunkNum = Math.floor(idx / this.chunkSize);
                  return this.getter(chunkNum)[chunkOffset];
                }
                LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
                  this.getter = getter;
                }
                LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
                    // Find length
                    var xhr = new XMLHttpRequest();
                    xhr.open('HEAD', url, false);
                    xhr.send(null);
                    if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
                    var datalength = Number(xhr.getResponseHeader("Content-length"));
                    var header;
                    var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
                    var chunkSize = 1024*1024; // Chunk size in bytes
        
                    if (!hasByteServing) chunkSize = datalength;
        
                    // Function to get a range from the remote URL.
                    var doXHR = (function(from, to) {
                      if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
                      if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
        
                      // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
                      var xhr = new XMLHttpRequest();
                      xhr.open('GET', url, false);
                      if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
        
                      // Some hints to the browser that we want binary data.
                      if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
                      if (xhr.overrideMimeType) {
                        xhr.overrideMimeType('text/plain; charset=x-user-defined');
                      }
        
                      xhr.send(null);
                      if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
                      if (xhr.response !== undefined) {
                        return new Uint8Array(xhr.response || []);
                      } else {
                        return intArrayFromString(xhr.responseText || '', true);
                      }
                    });
                    var lazyArray = this;
                    lazyArray.setDataGetter(function(chunkNum) {
                      var start = chunkNum * chunkSize;
                      var end = (chunkNum+1) * chunkSize - 1; // including this byte
                      end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
                      if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
                        lazyArray.chunks[chunkNum] = doXHR(start, end);
                      }
                      if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
                      return lazyArray.chunks[chunkNum];
                    });
        
                    this._length = datalength;
                    this._chunkSize = chunkSize;
                    this.lengthKnown = true;
                }
        
                var lazyArray = new LazyUint8Array();
                Object.defineProperty(lazyArray, "length", {
                    get: function() {
                        if(!this.lengthKnown) {
                            this.cacheLength();
                        }
                        return this._length;
                    }
                });
                Object.defineProperty(lazyArray, "chunkSize", {
                    get: function() {
                        if(!this.lengthKnown) {
                            this.cacheLength();
                        }
                        return this._chunkSize;
                    }
                });
        
                var properties = { isDevice: false, contents: lazyArray };
              } else {
                var properties = { isDevice: false, url: url };
              }
        
              var node = FS.createFile(parent, name, properties, canRead, canWrite);
              // This is a total hack, but I want to get this lazy file code out of the
              // core of MEMFS. If we want to keep this lazy file concept I feel it should
              // be its own thin LAZYFS proxying calls to MEMFS.
              if (properties.contents) {
                node.contents = properties.contents;
              } else if (properties.url) {
                node.contents = null;
                node.url = properties.url;
              }
              // override each stream op with one that tries to force load the lazy file first
              var stream_ops = {};
              var keys = Object.keys(node.stream_ops);
              keys.forEach(function(key) {
                var fn = node.stream_ops[key];
                stream_ops[key] = function forceLoadLazyFile() {
                  if (!FS.forceLoadFile(node)) {
                    throw new FS.ErrnoError(ERRNO_CODES.EIO);
                  }
                  return fn.apply(null, arguments);
                };
              });
              // use a custom read function
              stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
                if (!FS.forceLoadFile(node)) {
                  throw new FS.ErrnoError(ERRNO_CODES.EIO);
                }
                var contents = stream.node.contents;
                if (position >= contents.length)
                  return 0;
                var size = Math.min(contents.length - position, length);
                assert(size >= 0);
                if (contents.slice) { // normal array
                  for (var i = 0; i < size; i++) {
                    buffer[offset + i] = contents[position + i];
                  }
                } else {
                  for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
                    buffer[offset + i] = contents.get(position + i);
                  }
                }
                return size;
              };
              node.stream_ops = stream_ops;
              return node;
            },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
              Browser.init();
              // TODO we should allow people to just pass in a complete filename instead
              // of parent and name being that we just join them anyways
              var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
              function processData(byteArray) {
                function finish(byteArray) {
                  if (!dontCreateFile) {
                    FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
                  }
                  if (onload) onload();
                  removeRunDependency('cp ' + fullname);
                }
                var handled = false;
                Module['preloadPlugins'].forEach(function(plugin) {
                  if (handled) return;
                  if (plugin['canHandle'](fullname)) {
                    plugin['handle'](byteArray, fullname, finish, function() {
                      if (onerror) onerror();
                      removeRunDependency('cp ' + fullname);
                    });
                    handled = true;
                  }
                });
                if (!handled) finish(byteArray);
              }
              addRunDependency('cp ' + fullname);
              if (typeof url == 'string') {
                Browser.asyncLoad(url, function(byteArray) {
                  processData(byteArray);
                }, onerror);
              } else {
                processData(url);
              }
            },indexedDB:function () {
              return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
            },DB_NAME:function () {
              return 'EM_FS_' + window.location.pathname;
            },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
              onload = onload || function(){};
              onerror = onerror || function(){};
              var indexedDB = FS.indexedDB();
              try {
                var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
              } catch (e) {
                return onerror(e);
              }
              openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
                console.log('creating db');
                var db = openRequest.result;
                db.createObjectStore(FS.DB_STORE_NAME);
              };
              openRequest.onsuccess = function openRequest_onsuccess() {
                var db = openRequest.result;
                var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
                var files = transaction.objectStore(FS.DB_STORE_NAME);
                var ok = 0, fail = 0, total = paths.length;
                function finish() {
                  if (fail == 0) onload(); else onerror();
                }
                paths.forEach(function(path) {
                  var putRequest = files.put(FS.analyzePath(path).object.contents, path);
                  putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
                  putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
                });
                transaction.onerror = onerror;
              };
              openRequest.onerror = onerror;
            },loadFilesFromDB:function (paths, onload, onerror) {
              onload = onload || function(){};
              onerror = onerror || function(){};
              var indexedDB = FS.indexedDB();
              try {
                var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
              } catch (e) {
                return onerror(e);
              }
              openRequest.onupgradeneeded = onerror; // no database to load from
              openRequest.onsuccess = function openRequest_onsuccess() {
                var db = openRequest.result;
                try {
                  var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
                } catch(e) {
                  onerror(e);
                  return;
                }
                var files = transaction.objectStore(FS.DB_STORE_NAME);
                var ok = 0, fail = 0, total = paths.length;
                function finish() {
                  if (fail == 0) onload(); else onerror();
                }
                paths.forEach(function(path) {
                  var getRequest = files.get(path);
                  getRequest.onsuccess = function getRequest_onsuccess() {
                    if (FS.analyzePath(path).exists) {
                      FS.unlink(path);
                    }
                    FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
                    ok++;
                    if (ok + fail == total) finish();
                  };
                  getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
                });
                transaction.onerror = onerror;
              };
              openRequest.onerror = onerror;
            }};var PATH={splitPath:function (filename) {
              var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
              return splitPathRe.exec(filename).slice(1);
            },normalizeArray:function (parts, allowAboveRoot) {
              // if the path tries to go above the root, `up` ends up > 0
              var up = 0;
              for (var i = parts.length - 1; i >= 0; i--) {
                var last = parts[i];
                if (last === '.') {
                  parts.splice(i, 1);
                } else if (last === '..') {
                  parts.splice(i, 1);
                  up++;
                } else if (up) {
                  parts.splice(i, 1);
                  up--;
                }
              }
              // if the path is allowed to go above the root, restore leading ..s
              if (allowAboveRoot) {
                for (; up--; up) {
                  parts.unshift('..');
                }
              }
              return parts;
            },normalize:function (path) {
              var isAbsolute = path.charAt(0) === '/',
                  trailingSlash = path.substr(-1) === '/';
              // Normalize the path
              path = PATH.normalizeArray(path.split('/').filter(function(p) {
                return !!p;
              }), !isAbsolute).join('/');
              if (!path && !isAbsolute) {
                path = '.';
              }
              if (path && trailingSlash) {
                path += '/';
              }
              return (isAbsolute ? '/' : '') + path;
            },dirname:function (path) {
              var result = PATH.splitPath(path),
                  root = result[0],
                  dir = result[1];
              if (!root && !dir) {
                // No dirname whatsoever
                return '.';
              }
              if (dir) {
                // It has a dirname, strip trailing slash
                dir = dir.substr(0, dir.length - 1);
              }
              return root + dir;
            },basename:function (path) {
              // EMSCRIPTEN return '/'' for '/', not an empty string
              if (path === '/') return '/';
              var lastSlash = path.lastIndexOf('/');
              if (lastSlash === -1) return path;
              return path.substr(lastSlash+1);
            },extname:function (path) {
              return PATH.splitPath(path)[3];
            },join:function () {
              var paths = Array.prototype.slice.call(arguments, 0);
              return PATH.normalize(paths.join('/'));
            },join2:function (l, r) {
              return PATH.normalize(l + '/' + r);
            },resolve:function () {
              var resolvedPath = '',
                resolvedAbsolute = false;
              for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
                var path = (i >= 0) ? arguments[i] : FS.cwd();
                // Skip empty and invalid entries
                if (typeof path !== 'string') {
                  throw new TypeError('Arguments to path.resolve must be strings');
                } else if (!path) {
                  continue;
                }
                resolvedPath = path + '/' + resolvedPath;
                resolvedAbsolute = path.charAt(0) === '/';
              }
              // At this point the path should be resolved to a full absolute path, but
              // handle relative paths to be safe (might happen when process.cwd() fails)
              resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
                return !!p;
              }), !resolvedAbsolute).join('/');
              return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
            },relative:function (from, to) {
              from = PATH.resolve(from).substr(1);
              to = PATH.resolve(to).substr(1);
              function trim(arr) {
                var start = 0;
                for (; start < arr.length; start++) {
                  if (arr[start] !== '') break;
                }
                var end = arr.length - 1;
                for (; end >= 0; end--) {
                  if (arr[end] !== '') break;
                }
                if (start > end) return [];
                return arr.slice(start, end - start + 1);
              }
              var fromParts = trim(from.split('/'));
              var toParts = trim(to.split('/'));
              var length = Math.min(fromParts.length, toParts.length);
              var samePartsLength = length;
              for (var i = 0; i < length; i++) {
                if (fromParts[i] !== toParts[i]) {
                  samePartsLength = i;
                  break;
                }
              }
              var outputParts = [];
              for (var i = samePartsLength; i < fromParts.length; i++) {
                outputParts.push('..');
              }
              outputParts = outputParts.concat(toParts.slice(samePartsLength));
              return outputParts.join('/');
            }};var Browser={mainLoop:{scheduler:null,method:"",shouldPause:false,paused:false,queue:[],pause:function () {
                Browser.mainLoop.shouldPause = true;
              },resume:function () {
                if (Browser.mainLoop.paused) {
                  Browser.mainLoop.paused = false;
                  Browser.mainLoop.scheduler();
                }
                Browser.mainLoop.shouldPause = false;
              },updateStatus:function () {
                if (Module['setStatus']) {
                  var message = Module['statusMessage'] || 'Please wait...';
                  var remaining = Browser.mainLoop.remainingBlockers;
                  var expected = Browser.mainLoop.expectedBlockers;
                  if (remaining) {
                    if (remaining < expected) {
                      Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
                    } else {
                      Module['setStatus'](message);
                    }
                  } else {
                    Module['setStatus']('');
                  }
                }
              }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
              if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
        
              if (Browser.initted || ENVIRONMENT_IS_WORKER) return;
              Browser.initted = true;
        
              try {
                new Blob();
                Browser.hasBlobConstructor = true;
              } catch(e) {
                Browser.hasBlobConstructor = false;
                console.log("warning: no blob constructor, cannot create blobs with mimetypes");
              }
              Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
              Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
              if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
                console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
                Module.noImageDecoding = true;
              }
        
              // Support for plugins that can process preloaded files. You can add more of these to
              // your app by creating and appending to Module.preloadPlugins.
              //
              // Each plugin is asked if it can handle a file based on the file's name. If it can,
              // it is given the file's raw data. When it is done, it calls a callback with the file's
              // (possibly modified) data. For example, a plugin might decompress a file, or it
              // might create some side data structure for use later (like an Image element, etc.).
        
              var imagePlugin = {};
              imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
                return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
              };
              imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
                var b = null;
                if (Browser.hasBlobConstructor) {
                  try {
                    b = new Blob([byteArray], { type: Browser.getMimetype(name) });
                    if (b.size !== byteArray.length) { // Safari bug #118630
                      // Safari's Blob can only take an ArrayBuffer
                      b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
                    }
                  } catch(e) {
                    Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
                  }
                }
                if (!b) {
                  var bb = new Browser.BlobBuilder();
                  bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
                  b = bb.getBlob();
                }
                var url = Browser.URLObject.createObjectURL(b);
                var img = new Image();
                img.onload = function img_onload() {
                  assert(img.complete, 'Image ' + name + ' could not be decoded');
                  var canvas = document.createElement('canvas');
                  canvas.width = img.width;
                  canvas.height = img.height;
                  var ctx = canvas.getContext('2d');
                  ctx.drawImage(img, 0, 0);
                  Module["preloadedImages"][name] = canvas;
                  Browser.URLObject.revokeObjectURL(url);
                  if (onload) onload(byteArray);
                };
                img.onerror = function img_onerror(event) {
                  console.log('Image ' + url + ' could not be decoded');
                  if (onerror) onerror();
                };
                img.src = url;
              };
              Module['preloadPlugins'].push(imagePlugin);
        
              var audioPlugin = {};
              audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
                return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
              };
              audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
                var done = false;
                function finish(audio) {
                  if (done) return;
                  done = true;
                  Module["preloadedAudios"][name] = audio;
                  if (onload) onload(byteArray);
                }
                function fail() {
                  if (done) return;
                  done = true;
                  Module["preloadedAudios"][name] = new Audio(); // empty shim
                  if (onerror) onerror();
                }
                if (Browser.hasBlobConstructor) {
                  try {
                    var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
                  } catch(e) {
                    return fail();
                  }
                  var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
                  var audio = new Audio();
                  audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
                  audio.onerror = function audio_onerror(event) {
                    if (done) return;
                    console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
                    function encode64(data) {
                      var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                      var PAD = '=';
                      var ret = '';
                      var leftchar = 0;
                      var leftbits = 0;
                      for (var i = 0; i < data.length; i++) {
                        leftchar = (leftchar << 8) | data[i];
                        leftbits += 8;
                        while (leftbits >= 6) {
                          var curr = (leftchar >> (leftbits-6)) & 0x3f;
                          leftbits -= 6;
                          ret += BASE[curr];
                        }
                      }
                      if (leftbits == 2) {
                        ret += BASE[(leftchar&3) << 4];
                        ret += PAD + PAD;
                      } else if (leftbits == 4) {
                        ret += BASE[(leftchar&0xf) << 2];
                        ret += PAD;
                      }
                      return ret;
                    }
                    audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
                    finish(audio); // we don't wait for confirmation this worked - but it's worth trying
                  };
                  audio.src = url;
                  // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
                  Browser.safeSetTimeout(function() {
                    finish(audio); // try to use it even though it is not necessarily ready to play
                  }, 10000);
                } else {
                  return fail();
                }
              };
              Module['preloadPlugins'].push(audioPlugin);
        
              // Canvas event setup
        
              var canvas = Module['canvas'];
              
              // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
              // Module['forcedAspectRatio'] = 4 / 3;
              
              canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                          canvas['mozRequestPointerLock'] ||
                                          canvas['webkitRequestPointerLock'] ||
                                          canvas['msRequestPointerLock'] ||
                                          function(){};
              canvas.exitPointerLock = document['exitPointerLock'] ||
                                       document['mozExitPointerLock'] ||
                                       document['webkitExitPointerLock'] ||
                                       document['msExitPointerLock'] ||
                                       function(){}; // no-op if function does not exist
              canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
        
              function pointerLockChange() {
                Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                      document['mozPointerLockElement'] === canvas ||
                                      document['webkitPointerLockElement'] === canvas ||
                                      document['msPointerLockElement'] === canvas;
              }
        
              document.addEventListener('pointerlockchange', pointerLockChange, false);
              document.addEventListener('mozpointerlockchange', pointerLockChange, false);
              document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
              document.addEventListener('mspointerlockchange', pointerLockChange, false);
        
              if (Module['elementPointerLock']) {
                canvas.addEventListener("click", function(ev) {
                  if (!Browser.pointerLock && canvas.requestPointerLock) {
                    canvas.requestPointerLock();
                    ev.preventDefault();
                  }
                }, false);
              }
            },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
              var ctx;
              var errorInfo = '?';
              function onContextCreationError(event) {
                errorInfo = event.statusMessage || errorInfo;
              }
              try {
                if (useWebGL) {
                  var contextAttributes = {
                    antialias: false,
                    alpha: false
                  };
        
                  if (webGLContextAttributes) {
                    for (var attribute in webGLContextAttributes) {
                      contextAttributes[attribute] = webGLContextAttributes[attribute];
                    }
                  }
        
        
                  canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
                  try {
                    ['experimental-webgl', 'webgl'].some(function(webglId) {
                      return ctx = canvas.getContext(webglId, contextAttributes);
                    });
                  } finally {
                    canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
                  }
                } else {
                  ctx = canvas.getContext('2d');
                }
                if (!ctx) throw ':(';
              } catch (e) {
                Module.print('Could not create canvas: ' + [errorInfo, e]);
                return null;
              }
              if (useWebGL) {
                // Set the background of the WebGL canvas to black
                canvas.style.backgroundColor = "black";
        
                // Warn on context loss
                canvas.addEventListener('webglcontextlost', function(event) {
                  alert('WebGL context lost. You will need to reload the page.');
                }, false);
              }
              if (setInModule) {
                GLctx = Module.ctx = ctx;
                Module.useWebGL = useWebGL;
                Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
                Browser.init();
              }
              return ctx;
            },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
              Browser.lockPointer = lockPointer;
              Browser.resizeCanvas = resizeCanvas;
              if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
              if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        
              var canvas = Module['canvas'];
              var canvasContainer = canvas.parentNode;
              function fullScreenChange() {
                Browser.isFullScreen = false;
                if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
                     document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
                     document['fullScreenElement'] || document['fullscreenElement'] ||
                     document['msFullScreenElement'] || document['msFullscreenElement'] ||
                     document['webkitCurrentFullScreenElement']) === canvasContainer) {
                  canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                            document['mozCancelFullScreen'] ||
                                            document['webkitCancelFullScreen'] ||
                                            document['msExitFullscreen'] ||
                                            document['exitFullscreen'] ||
                                            function() {};
                  canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
                  if (Browser.lockPointer) canvas.requestPointerLock();
                  Browser.isFullScreen = true;
                  if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
                } else {
                  
                  // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
                  var canvasContainer = canvas.parentNode;
                  canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
                  canvasContainer.parentNode.removeChild(canvasContainer);
                  
                  if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
                }
                if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
                Browser.updateCanvasDimensions(canvas);
              }
        
              if (!Browser.fullScreenHandlersInstalled) {
                Browser.fullScreenHandlersInstalled = true;
                document.addEventListener('fullscreenchange', fullScreenChange, false);
                document.addEventListener('mozfullscreenchange', fullScreenChange, false);
                document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
                document.addEventListener('MSFullscreenChange', fullScreenChange, false);
              }
        
              // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
              var canvasContainer = document.createElement("div");
              canvas.parentNode.insertBefore(canvasContainer, canvas);
              canvasContainer.appendChild(canvas);
              
              // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
              canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                                  canvasContainer['mozRequestFullScreen'] ||
                                                  canvasContainer['msRequestFullscreen'] ||
                                                 (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
              canvasContainer.requestFullScreen();
            },requestAnimationFrame:function requestAnimationFrame(func) {
              if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
                setTimeout(func, 1000/60);
              } else {
                if (!window.requestAnimationFrame) {
                  window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                                 window['mozRequestAnimationFrame'] ||
                                                 window['webkitRequestAnimationFrame'] ||
                                                 window['msRequestAnimationFrame'] ||
                                                 window['oRequestAnimationFrame'] ||
                                                 window['setTimeout'];
                }
                window.requestAnimationFrame(func);
              }
            },safeCallback:function (func) {
              return function() {
                if (!ABORT) return func.apply(null, arguments);
              };
            },safeRequestAnimationFrame:function (func) {
              return Browser.requestAnimationFrame(function() {
                if (!ABORT) func();
              });
            },safeSetTimeout:function (func, timeout) {
              return setTimeout(function() {
                if (!ABORT) func();
              }, timeout);
            },safeSetInterval:function (func, timeout) {
              return setInterval(function() {
                if (!ABORT) func();
              }, timeout);
            },getMimetype:function (name) {
              return {
                'jpg': 'image/jpeg',
                'jpeg': 'image/jpeg',
                'png': 'image/png',
                'bmp': 'image/bmp',
                'ogg': 'audio/ogg',
                'wav': 'audio/wav',
                'mp3': 'audio/mpeg'
              }[name.substr(name.lastIndexOf('.')+1)];
            },getUserMedia:function (func) {
              if(!window.getUserMedia) {
                window.getUserMedia = navigator['getUserMedia'] ||
                                      navigator['mozGetUserMedia'];
              }
              window.getUserMedia(func);
            },getMovementX:function (event) {
              return event['movementX'] ||
                     event['mozMovementX'] ||
                     event['webkitMovementX'] ||
                     0;
            },getMovementY:function (event) {
              return event['movementY'] ||
                     event['mozMovementY'] ||
                     event['webkitMovementY'] ||
                     0;
            },getMouseWheelDelta:function (event) {
              return Math.max(-1, Math.min(1, event.type === 'DOMMouseScroll' ? event.detail : -event.wheelDelta));
            },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
              if (Browser.pointerLock) {
                // When the pointer is locked, calculate the coordinates
                // based on the movement of the mouse.
                // Workaround for Firefox bug 764498
                if (event.type != 'mousemove' &&
                    ('mozMovementX' in event)) {
                  Browser.mouseMovementX = Browser.mouseMovementY = 0;
                } else {
                  Browser.mouseMovementX = Browser.getMovementX(event);
                  Browser.mouseMovementY = Browser.getMovementY(event);
                }
                
                // check if SDL is available
                if (typeof SDL != "undefined") {
                	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
                	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
                } else {
                	// just add the mouse delta to the current absolut mouse position
                	// FIXME: ideally this should be clamped against the canvas size and zero
                	Browser.mouseX += Browser.mouseMovementX;
                	Browser.mouseY += Browser.mouseMovementY;
                }        
              } else {
                // Otherwise, calculate the movement based on the changes
                // in the coordinates.
                var rect = Module["canvas"].getBoundingClientRect();
                var x, y;
                
                // Neither .scrollX or .pageXOffset are defined in a spec, but
                // we prefer .scrollX because it is currently in a spec draft.
                // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
                var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
                var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
                if (event.type == 'touchstart' ||
                    event.type == 'touchend' ||
                    event.type == 'touchmove') {
                  var t = event.touches.item(0);
                  if (t) {
                    x = t.pageX - (scrollX + rect.left);
                    y = t.pageY - (scrollY + rect.top);
                  } else {
                    return;
                  }
                } else {
                  x = event.pageX - (scrollX + rect.left);
                  y = event.pageY - (scrollY + rect.top);
                }
        
                // the canvas might be CSS-scaled compared to its backbuffer;
                // SDL-using content will want mouse coordinates in terms
                // of backbuffer units.
                var cw = Module["canvas"].width;
                var ch = Module["canvas"].height;
                x = x * (cw / rect.width);
                y = y * (ch / rect.height);
        
                Browser.mouseMovementX = x - Browser.mouseX;
                Browser.mouseMovementY = y - Browser.mouseY;
                Browser.mouseX = x;
                Browser.mouseY = y;
              }
            },xhrLoad:function (url, onload, onerror) {
              var xhr = new XMLHttpRequest();
              xhr.open('GET', url, true);
              xhr.responseType = 'arraybuffer';
              xhr.onload = function xhr_onload() {
                if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
                  onload(xhr.response);
                } else {
                  onerror();
                }
              };
              xhr.onerror = onerror;
              xhr.send(null);
            },asyncLoad:function (url, onload, onerror, noRunDep) {
              Browser.xhrLoad(url, function(arrayBuffer) {
                assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
                onload(new Uint8Array(arrayBuffer));
                if (!noRunDep) removeRunDependency('al ' + url);
              }, function(event) {
                if (onerror) {
                  onerror();
                } else {
                  throw 'Loading data file "' + url + '" failed.';
                }
              });
              if (!noRunDep) addRunDependency('al ' + url);
            },resizeListeners:[],updateResizeListeners:function () {
              var canvas = Module['canvas'];
              Browser.resizeListeners.forEach(function(listener) {
                listener(canvas.width, canvas.height);
              });
            },setCanvasSize:function (width, height, noUpdates) {
              var canvas = Module['canvas'];
              Browser.updateCanvasDimensions(canvas, width, height);
              if (!noUpdates) Browser.updateResizeListeners();
            },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
              // check if SDL is available   
              if (typeof SDL != "undefined") {
              	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
              	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
              	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
              }
              Browser.updateResizeListeners();
            },setWindowedCanvasSize:function () {
              // check if SDL is available       
              if (typeof SDL != "undefined") {
              	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
              	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
              	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
              }
              Browser.updateResizeListeners();
            },updateCanvasDimensions:function (canvas, wNative, hNative) {
              if (wNative && hNative) {
                canvas.widthNative = wNative;
                canvas.heightNative = hNative;
              } else {
                wNative = canvas.widthNative;
                hNative = canvas.heightNative;
              }
              var w = wNative;
              var h = hNative;
              if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
                if (w/h < Module['forcedAspectRatio']) {
                  w = Math.round(h * Module['forcedAspectRatio']);
                } else {
                  h = Math.round(w / Module['forcedAspectRatio']);
                }
              }
              if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
                   document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
                   document['fullScreenElement'] || document['fullscreenElement'] ||
                   document['msFullScreenElement'] || document['msFullscreenElement'] ||
                   document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
                 var factor = Math.min(screen.width / w, screen.height / h);
                 w = Math.round(w * factor);
                 h = Math.round(h * factor);
              }
              if (Browser.resizeCanvas) {
                if (canvas.width  != w) canvas.width  = w;
                if (canvas.height != h) canvas.height = h;
                if (typeof canvas.style != 'undefined') {
                  canvas.style.removeProperty( "width");
                  canvas.style.removeProperty("height");
                }
              } else {
                if (canvas.width  != wNative) canvas.width  = wNative;
                if (canvas.height != hNative) canvas.height = hNative;
                if (typeof canvas.style != 'undefined') {
                  if (w != wNative || h != hNative) {
                    canvas.style.setProperty( "width", w + "px", "important");
                    canvas.style.setProperty("height", h + "px", "important");
                  } else {
                    canvas.style.removeProperty( "width");
                    canvas.style.removeProperty("height");
                  }
                }
              }
            }};

        
        
        
        function __reallyNegative(x) {
            return x < 0 || (x === 0 && (1/x) === -Infinity);
          }function __formatString(format, varargs) {
            var textIndex = format;
            var argIndex = 0;
            function getNextArg(type) {
              // NOTE: Explicitly ignoring type safety. Otherwise this fails:
              //       int x = 4; printf("%c\n", (char)x);
              var ret;
              if (type === 'double') {
                ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
              } else if (type == 'i64') {
                ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                       HEAP32[(((varargs)+(argIndex+4))>>2)]];
        
              } else {
                type = 'i32'; // varargs are always i32, i64, or double
                ret = HEAP32[(((varargs)+(argIndex))>>2)];
              }
              argIndex += Runtime.getNativeFieldSize(type);
              return ret;
            }
        
            var ret = [];
            var curr, next, currArg;
            while(1) {
              var startTextIndex = textIndex;
              curr = HEAP8[(textIndex)];
              if (curr === 0) break;
              next = HEAP8[((textIndex+1)|0)];
              if (curr == 37) {
                // Handle flags.
                var flagAlwaysSigned = false;
                var flagLeftAlign = false;
                var flagAlternative = false;
                var flagZeroPad = false;
                var flagPadSign = false;
                flagsLoop: while (1) {
                  switch (next) {
                    case 43:
                      flagAlwaysSigned = true;
                      break;
                    case 45:
                      flagLeftAlign = true;
                      break;
                    case 35:
                      flagAlternative = true;
                      break;
                    case 48:
                      if (flagZeroPad) {
                        break flagsLoop;
                      } else {
                        flagZeroPad = true;
                        break;
                      }
                    case 32:
                      flagPadSign = true;
                      break;
                    default:
                      break flagsLoop;
                  }
                  textIndex++;
                  next = HEAP8[((textIndex+1)|0)];
                }
        
                // Handle width.
                var width = 0;
                if (next == 42) {
                  width = getNextArg('i32');
                  textIndex++;
                  next = HEAP8[((textIndex+1)|0)];
                } else {
                  while (next >= 48 && next <= 57) {
                    width = width * 10 + (next - 48);
                    textIndex++;
                    next = HEAP8[((textIndex+1)|0)];
                  }
                }
        
                // Handle precision.
                var precisionSet = false, precision = -1;
                if (next == 46) {
                  precision = 0;
                  precisionSet = true;
                  textIndex++;
                  next = HEAP8[((textIndex+1)|0)];
                  if (next == 42) {
                    precision = getNextArg('i32');
                    textIndex++;
                  } else {
                    while(1) {
                      var precisionChr = HEAP8[((textIndex+1)|0)];
                      if (precisionChr < 48 ||
                          precisionChr > 57) break;
                      precision = precision * 10 + (precisionChr - 48);
                      textIndex++;
                    }
                  }
                  next = HEAP8[((textIndex+1)|0)];
                }
                if (precision < 0) {
                  precision = 6; // Standard default.
                  precisionSet = false;
                }
        
                // Handle integer sizes. WARNING: These assume a 32-bit architecture!
                var argSize;
                switch (String.fromCharCode(next)) {
                  case 'h':
                    var nextNext = HEAP8[((textIndex+2)|0)];
                    if (nextNext == 104) {
                      textIndex++;
                      argSize = 1; // char (actually i32 in varargs)
                    } else {
                      argSize = 2; // short (actually i32 in varargs)
                    }
                    break;
                  case 'l':
                    var nextNext = HEAP8[((textIndex+2)|0)];
                    if (nextNext == 108) {
                      textIndex++;
                      argSize = 8; // long long
                    } else {
                      argSize = 4; // long
                    }
                    break;
                  case 'L': // long long
                  case 'q': // int64_t
                  case 'j': // intmax_t
                    argSize = 8;
                    break;
                  case 'z': // size_t
                  case 't': // ptrdiff_t
                  case 'I': // signed ptrdiff_t or unsigned size_t
                    argSize = 4;
                    break;
                  default:
                    argSize = null;
                }
                if (argSize) textIndex++;
                next = HEAP8[((textIndex+1)|0)];
        
                // Handle type specifier.
                switch (String.fromCharCode(next)) {
                  case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
                    // Integer.
                    var signed = next == 100 || next == 105;
                    argSize = argSize || 4;
                    var currArg = getNextArg('i' + (argSize * 8));
                    var origArg = currArg;
                    var argText;
                    // Flatten i64-1 [low, high] into a (slightly rounded) double
                    if (argSize == 8) {
                      currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
                    }
                    // Truncate to requested size.
                    if (argSize <= 4) {
                      var limit = Math.pow(256, argSize) - 1;
                      currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
                    }
                    // Format the number.
                    var currAbsArg = Math.abs(currArg);
                    var prefix = '';
                    if (next == 100 || next == 105) {
                      if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                      argText = reSign(currArg, 8 * argSize, 1).toString(10);
                    } else if (next == 117) {
                      if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                      argText = unSign(currArg, 8 * argSize, 1).toString(10);
                      currArg = Math.abs(currArg);
                    } else if (next == 111) {
                      argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
                    } else if (next == 120 || next == 88) {
                      prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                      if (argSize == 8 && i64Math) {
                        if (origArg[1]) {
                          argText = (origArg[1]>>>0).toString(16);
                          var lower = (origArg[0]>>>0).toString(16);
                          while (lower.length < 8) lower = '0' + lower;
                          argText += lower;
                        } else {
                          argText = (origArg[0]>>>0).toString(16);
                        }
                      } else
                      if (currArg < 0) {
                        // Represent negative numbers in hex as 2's complement.
                        currArg = -currArg;
                        argText = (currAbsArg - 1).toString(16);
                        var buffer = [];
                        for (var i = 0; i < argText.length; i++) {
                          buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                        }
                        argText = buffer.join('');
                        while (argText.length < argSize * 2) argText = 'f' + argText;
                      } else {
                        argText = currAbsArg.toString(16);
                      }
                      if (next == 88) {
                        prefix = prefix.toUpperCase();
                        argText = argText.toUpperCase();
                      }
                    } else if (next == 112) {
                      if (currAbsArg === 0) {
                        argText = '(nil)';
                      } else {
                        prefix = '0x';
                        argText = currAbsArg.toString(16);
                      }
                    }
                    if (precisionSet) {
                      while (argText.length < precision) {
                        argText = '0' + argText;
                      }
                    }
        
                    // Add sign if needed
                    if (currArg >= 0) {
                      if (flagAlwaysSigned) {
                        prefix = '+' + prefix;
                      } else if (flagPadSign) {
                        prefix = ' ' + prefix;
                      }
                    }
        
                    // Move sign to prefix so we zero-pad after the sign
                    if (argText.charAt(0) == '-') {
                      prefix = '-' + prefix;
                      argText = argText.substr(1);
                    }
        
                    // Add padding.
                    while (prefix.length + argText.length < width) {
                      if (flagLeftAlign) {
                        argText += ' ';
                      } else {
                        if (flagZeroPad) {
                          argText = '0' + argText;
                        } else {
                          prefix = ' ' + prefix;
                        }
                      }
                    }
        
                    // Insert the result into the buffer.
                    argText = prefix + argText;
                    argText.split('').forEach(function(chr) {
                      ret.push(chr.charCodeAt(0));
                    });
                    break;
                  }
                  case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
                    // Float.
                    var currArg = getNextArg('double');
                    var argText;
                    if (isNaN(currArg)) {
                      argText = 'nan';
                      flagZeroPad = false;
                    } else if (!isFinite(currArg)) {
                      argText = (currArg < 0 ? '-' : '') + 'inf';
                      flagZeroPad = false;
                    } else {
                      var isGeneral = false;
                      var effectivePrecision = Math.min(precision, 20);
        
                      // Convert g/G to f/F or e/E, as per:
                      // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                      if (next == 103 || next == 71) {
                        isGeneral = true;
                        precision = precision || 1;
                        var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                        if (precision > exponent && exponent >= -4) {
                          next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                          precision -= exponent + 1;
                        } else {
                          next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                          precision--;
                        }
                        effectivePrecision = Math.min(precision, 20);
                      }
        
                      if (next == 101 || next == 69) {
                        argText = currArg.toExponential(effectivePrecision);
                        // Make sure the exponent has at least 2 digits.
                        if (/[eE][-+]\d$/.test(argText)) {
                          argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                        }
                      } else if (next == 102 || next == 70) {
                        argText = currArg.toFixed(effectivePrecision);
                        if (currArg === 0 && __reallyNegative(currArg)) {
                          argText = '-' + argText;
                        }
                      }
        
                      var parts = argText.split('e');
                      if (isGeneral && !flagAlternative) {
                        // Discard trailing zeros and periods.
                        while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                               (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                          parts[0] = parts[0].slice(0, -1);
                        }
                      } else {
                        // Make sure we have a period in alternative mode.
                        if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                        // Zero pad until required precision.
                        while (precision > effectivePrecision++) parts[0] += '0';
                      }
                      argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
        
                      // Capitalize 'E' if needed.
                      if (next == 69) argText = argText.toUpperCase();
        
                      // Add sign.
                      if (currArg >= 0) {
                        if (flagAlwaysSigned) {
                          argText = '+' + argText;
                        } else if (flagPadSign) {
                          argText = ' ' + argText;
                        }
                      }
                    }
        
                    // Add padding.
                    while (argText.length < width) {
                      if (flagLeftAlign) {
                        argText += ' ';
                      } else {
                        if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                          argText = argText[0] + '0' + argText.slice(1);
                        } else {
                          argText = (flagZeroPad ? '0' : ' ') + argText;
                        }
                      }
                    }
        
                    // Adjust case.
                    if (next < 97) argText = argText.toUpperCase();
        
                    // Insert the result into the buffer.
                    argText.split('').forEach(function(chr) {
                      ret.push(chr.charCodeAt(0));
                    });
                    break;
                  }
                  case 's': {
                    // String.
                    var arg = getNextArg('i8*');
                    var argLength = arg ? _strlen(arg) : '(null)'.length;
                    if (precisionSet) argLength = Math.min(argLength, precision);
                    if (!flagLeftAlign) {
                      while (argLength < width--) {
                        ret.push(32);
                      }
                    }
                    if (arg) {
                      for (var i = 0; i < argLength; i++) {
                        ret.push(HEAPU8[((arg++)|0)]);
                      }
                    } else {
                      ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
                    }
                    if (flagLeftAlign) {
                      while (argLength < width--) {
                        ret.push(32);
                      }
                    }
                    break;
                  }
                  case 'c': {
                    // Character.
                    if (flagLeftAlign) ret.push(getNextArg('i8'));
                    while (--width > 0) {
                      ret.push(32);
                    }
                    if (!flagLeftAlign) ret.push(getNextArg('i8'));
                    break;
                  }
                  case 'n': {
                    // Write the length written so far to the next parameter.
                    var ptr = getNextArg('i32*');
                    HEAP32[((ptr)>>2)]=ret.length;
                    break;
                  }
                  case '%': {
                    // Literal percent sign.
                    ret.push(curr);
                    break;
                  }
                  default: {
                    // Unknown specifiers remain untouched.
                    for (var i = startTextIndex; i < textIndex + 2; i++) {
                      ret.push(HEAP8[(i)]);
                    }
                  }
                }
                textIndex += 2;
                // TODO: Support a/A (hex float) and m (last error) specifiers.
                // TODO: Support %1${specifier} for arg selection.
              } else {
                ret.push(curr);
                textIndex += 1;
              }
            }
            return ret;
          }
        
        function _malloc(bytes) {
            /* Over-allocate to make sure it is byte-aligned by 8.
             * This will leak memory, but this is only the dummy
             * implementation (replaced by dlmalloc normally) so
             * not an issue.
             */
            var ptr = Runtime.dynamicAlloc(bytes + 8);
            return (ptr+8) & 0xFFFFFFF8;
          }
        Module["_malloc"] = _malloc;function _snprintf(s, n, format, varargs) {
            // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
            // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
            var result = __formatString(format, varargs);
            var limit = (n === undefined) ? result.length
                                          : Math.min(result.length, Math.max(n - 1, 0));
            if (s < 0) {
              s = -s;
              var buf = _malloc(limit+1);
              HEAP32[((s)>>2)]=buf;
              s = buf;
            }
            for (var i = 0; i < limit; i++) {
              HEAP8[(((s)+(i))|0)]=result[i];
            }
            if (limit < n || (n === undefined)) HEAP8[(((s)+(i))|0)]=0;
            return result.length;
          }function _sprintf(s, format, varargs) {
            // int sprintf(char *restrict s, const char *restrict format, ...);
            // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
            return _snprintf(s, undefined, format, varargs);
          }

        function _strrchr(ptr, chr) {
            var ptr2 = ptr + _strlen(ptr);
            do {
              if (HEAP8[(ptr2)] == chr) return ptr2;
              ptr2--;
            } while (ptr2 >= ptr);
            return 0;
          }

        function _log10(x) {
            return Math.log(x) / Math.LN10;
          }

        var _sin=Math_sin;


        function _llvm_invariant_start() {}

        function ___cxa_guard_acquire(variable) {
            if (!HEAP8[(variable)]) { // ignore SAFE_HEAP stuff because llvm mixes i64 and i8 here
              HEAP8[(variable)]=1;
              return 1;
            }
            return 0;
          }

        
        
        function __exit(status) {
            // void _exit(int status);
            // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
            Module['exit'](status);
          }function _exit(status) {
            __exit(status);
          }function __ZSt9terminatev() {
            _exit(-1234);
          }

        function ___cxa_guard_release() {}

        
        var ___cxa_caught_exceptions=[];function ___cxa_begin_catch(ptr) {
            __ZSt18uncaught_exceptionv.uncaught_exception--;
            ___cxa_caught_exceptions.push(___cxa_last_thrown_exception);
            return ptr;
          }


        var _cos=Math_cos;

        var _llvm_pow_f64=Math_pow;

        function __ZNSt9exceptionD2Ev() {}


        function ___cxa_allocate_exception(size) {
            var ptr = _malloc(size + ___cxa_exception_header_size);
            return ptr + ___cxa_exception_header_size;
          }

        function ___errno_location() {
            return ___errno_state;
          }

        function ___cxa_pure_virtual() {
            ABORT = true;
            throw 'Pure virtual function called!';
          }

        function _llvm_lifetime_start() {}

        function _abort() {
            Module['abort']();
          }

        function _sbrk(bytes) {
            // Implement a Linux-like 'memory area' for our 'process'.
            // Changes the size of the memory area by |bytes|; returns the
            // address of the previous top ('break') of the memory area
            // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
            var self = _sbrk;
            if (!self.called) {
              DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
              self.called = true;
              assert(Runtime.dynamicAlloc);
              self.alloc = Runtime.dynamicAlloc;
              Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
            }
            var ret = DYNAMICTOP;
            if (bytes != 0) self.alloc(bytes);
            return ret;  // Previous break location.
          }

        function _fmod(x, y) {
            return x % y;
          }

        function _time(ptr) {
            var ret = Math.floor(Date.now()/1000);
            if (ptr) {
              HEAP32[((ptr)>>2)]=ret;
            }
            return ret;
          }

        var __ZTISt9exception=allocate([allocate([1,0,0,0,0,0,0], "i8", ALLOC_STATIC)+8, 0], "i32", ALLOC_STATIC);
      ___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
      Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
        Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
        Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
        Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
        Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
        Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
      FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
      __ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
      if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
      STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

      staticSealed = true; // seal the static portion of memory

      STACK_MAX = STACK_BASE + 5242880;

      DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

      assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");


      var Math_min = Math.min;
      function invoke_iiii(index,a1,a2,a3) {
        try {
          return Module["dynCall_iiii"](index,a1,a2,a3);
        } catch(e) {
          if (typeof e !== 'number' && e !== 'longjmp') throw e;
          asm["setThrew"](1, 0);
        }
      }

      function invoke_vid(index,a1,a2) {
        try {
          Module["dynCall_vid"](index,a1,a2);
        } catch(e) {
          if (typeof e !== 'number' && e !== 'longjmp') throw e;
          asm["setThrew"](1, 0);
        }
      }

      function invoke_viiiii(index,a1,a2,a3,a4,a5) {
        try {
          Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
        } catch(e) {
          if (typeof e !== 'number' && e !== 'longjmp') throw e;
          asm["setThrew"](1, 0);
        }
      }

      function invoke_i(index) {
        try {
          return Module["dynCall_i"](index);
        } catch(e) {
          if (typeof e !== 'number' && e !== 'longjmp') throw e;
          asm["setThrew"](1, 0);
        }
      }

      function invoke_vi(index,a1) {
        try {
          Module["dynCall_vi"](index,a1);
        } catch(e) {
          if (typeof e !== 'number' && e !== 'longjmp') throw e;
          asm["setThrew"](1, 0);
        }
      }

      function invoke_vii(index,a1,a2) {
        try {
          Module["dynCall_vii"](index,a1,a2);
        } catch(e) {
          if (typeof e !== 'number' && e !== 'longjmp') throw e;
          asm["setThrew"](1, 0);
        }
      }

      function invoke_ii(index,a1) {
        try {
          return Module["dynCall_ii"](index,a1);
        } catch(e) {
          if (typeof e !== 'number' && e !== 'longjmp') throw e;
          asm["setThrew"](1, 0);
        }
      }

      function invoke_v(index) {
        try {
          Module["dynCall_v"](index);
        } catch(e) {
          if (typeof e !== 'number' && e !== 'longjmp') throw e;
          asm["setThrew"](1, 0);
        }
      }

      function invoke_iiiii(index,a1,a2,a3,a4) {
        try {
          return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
        } catch(e) {
          if (typeof e !== 'number' && e !== 'longjmp') throw e;
          asm["setThrew"](1, 0);
        }
      }

      function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
        try {
          Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
        } catch(e) {
          if (typeof e !== 'number' && e !== 'longjmp') throw e;
          asm["setThrew"](1, 0);
        }
      }

      function invoke_iii(index,a1,a2) {
        try {
          return Module["dynCall_iii"](index,a1,a2);
        } catch(e) {
          if (typeof e !== 'number' && e !== 'longjmp') throw e;
          asm["setThrew"](1, 0);
        }
      }

      function invoke_viiii(index,a1,a2,a3,a4) {
        try {
          Module["dynCall_viiii"](index,a1,a2,a3,a4);
        } catch(e) {
          if (typeof e !== 'number' && e !== 'longjmp') throw e;
          asm["setThrew"](1, 0);
        }
      }

      function asmPrintInt(x, y) {
        Module.print('int ' + x + ',' + y);// + ' ' + new Error().stack);
      }
      function asmPrintFloat(x, y) {
        Module.print('float ' + x + ',' + y);// + ' ' + new Error().stack);
      }
      // EMSCRIPTEN_START_ASM
      var asm = (function(global, env, buffer) {
        'use asm';
        var HEAP8 = new global.Int8Array(buffer);
        var HEAP16 = new global.Int16Array(buffer);
        var HEAP32 = new global.Int32Array(buffer);
        var HEAPU8 = new global.Uint8Array(buffer);
        var HEAPU16 = new global.Uint16Array(buffer);
        var HEAPU32 = new global.Uint32Array(buffer);
        var HEAPF32 = new global.Float32Array(buffer);
        var HEAPF64 = new global.Float64Array(buffer);

        var STACKTOP=env.STACKTOP|0;
        var STACK_MAX=env.STACK_MAX|0;
        var tempDoublePtr=env.tempDoublePtr|0;
        var ABORT=env.ABORT|0;
        var __ZTISt9exception=env.__ZTISt9exception|0;

        var __THREW__ = 0;
        var threwValue = 0;
        var setjmpId = 0;
        var undef = 0;
        var nan = +env.NaN, inf = +env.Infinity;
        var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

        var tempRet0 = 0;
        var tempRet1 = 0;
        var tempRet2 = 0;
        var tempRet3 = 0;
        var tempRet4 = 0;
        var tempRet5 = 0;
        var tempRet6 = 0;
        var tempRet7 = 0;
        var tempRet8 = 0;
        var tempRet9 = 0;
        var Math_floor=global.Math.floor;
        var Math_abs=global.Math.abs;
        var Math_sqrt=global.Math.sqrt;
        var Math_pow=global.Math.pow;
        var Math_cos=global.Math.cos;
        var Math_sin=global.Math.sin;
        var Math_tan=global.Math.tan;
        var Math_acos=global.Math.acos;
        var Math_asin=global.Math.asin;
        var Math_atan=global.Math.atan;
        var Math_atan2=global.Math.atan2;
        var Math_exp=global.Math.exp;
        var Math_log=global.Math.log;
        var Math_ceil=global.Math.ceil;
        var Math_imul=global.Math.imul;
        var abort=env.abort;
        var assert=env.assert;
        var asmPrintInt=env.asmPrintInt;
        var asmPrintFloat=env.asmPrintFloat;
        var Math_min=env.min;
        var invoke_iiii=env.invoke_iiii;
        var invoke_vid=env.invoke_vid;
        var invoke_viiiii=env.invoke_viiiii;
        var invoke_i=env.invoke_i;
        var invoke_vi=env.invoke_vi;
        var invoke_vii=env.invoke_vii;
        var invoke_ii=env.invoke_ii;
        var invoke_v=env.invoke_v;
        var invoke_iiiii=env.invoke_iiiii;
        var invoke_viiiiii=env.invoke_viiiiii;
        var invoke_iii=env.invoke_iii;
        var invoke_viiii=env.invoke_viiii;
        var _fabs=env._fabs;
        var _sin=env._sin;
        var _strrchr=env._strrchr;
        var __ZSt9terminatev=env.__ZSt9terminatev;
        var _fmod=env._fmod;
        var ___cxa_guard_acquire=env.___cxa_guard_acquire;
        var _llvm_lifetime_start=env._llvm_lifetime_start;
        var __reallyNegative=env.__reallyNegative;
        var ___cxa_is_number_type=env.___cxa_is_number_type;
        var ___assert_fail=env.___assert_fail;
        var _llvm_invariant_start=env._llvm_invariant_start;
        var ___cxa_allocate_exception=env.___cxa_allocate_exception;
        var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
        var _floor=env._floor;
        var _fflush=env._fflush;
        var ___cxa_guard_release=env.___cxa_guard_release;
        var _llvm_pow_f64=env._llvm_pow_f64;
        var ___setErrNo=env.___setErrNo;
        var _sbrk=env._sbrk;
        var _snprintf=env._snprintf;
        var ___cxa_begin_catch=env.___cxa_begin_catch;
        var _emscripten_memcpy_big=env._emscripten_memcpy_big;
        var ___resumeException=env.___resumeException;
        var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
        var _sysconf=env._sysconf;
        var ___cxa_throw=env.___cxa_throw;
        var _cos=env._cos;
        var _sprintf=env._sprintf;
        var _llvm_lifetime_end=env._llvm_lifetime_end;
        var _toupper=env._toupper;
        var ___errno_location=env.___errno_location;
        var __ZNSt9exceptionD2Ev=env.__ZNSt9exceptionD2Ev;
        var ___cxa_does_inherit=env.___cxa_does_inherit;
        var __exit=env.__exit;
        var _abort=env._abort;
        var _time=env._time;
        var __formatString=env.__formatString;
        var _log10=env._log10;
        var _exit=env._exit;
        var ___cxa_pure_virtual=env.___cxa_pure_virtual;
        var tempFloat = 0.0;

      // EMSCRIPTEN_START_FUNCS
      function stackAlloc(size) {
        size = size|0;
        var ret = 0;
        ret = STACKTOP;
        STACKTOP = (STACKTOP + size)|0;
      STACKTOP = (STACKTOP + 7)&-8;
        return ret|0;
      }
      function stackSave() {
        return STACKTOP|0;
      }
      function stackRestore(top) {
        top = top|0;
        STACKTOP = top;
      }
      function setThrew(threw, value) {
        threw = threw|0;
        value = value|0;
        if ((__THREW__|0) == 0) {
          __THREW__ = threw;
          threwValue = value;
        }
      }
      function copyTempFloat(ptr) {
        ptr = ptr|0;
        HEAP8[tempDoublePtr] = HEAP8[ptr];
        HEAP8[tempDoublePtr+1|0] = HEAP8[ptr+1|0];
        HEAP8[tempDoublePtr+2|0] = HEAP8[ptr+2|0];
        HEAP8[tempDoublePtr+3|0] = HEAP8[ptr+3|0];
      }
      function copyTempDouble(ptr) {
        ptr = ptr|0;
        HEAP8[tempDoublePtr] = HEAP8[ptr];
        HEAP8[tempDoublePtr+1|0] = HEAP8[ptr+1|0];
        HEAP8[tempDoublePtr+2|0] = HEAP8[ptr+2|0];
        HEAP8[tempDoublePtr+3|0] = HEAP8[ptr+3|0];
        HEAP8[tempDoublePtr+4|0] = HEAP8[ptr+4|0];
        HEAP8[tempDoublePtr+5|0] = HEAP8[ptr+5|0];
        HEAP8[tempDoublePtr+6|0] = HEAP8[ptr+6|0];
        HEAP8[tempDoublePtr+7|0] = HEAP8[ptr+7|0];
      }

      function setTempRet0(value) {
        value = value|0;
        tempRet0 = value;
      }

      function setTempRet1(value) {
        value = value|0;
        tempRet1 = value;
      }

      function setTempRet2(value) {
        value = value|0;
        tempRet2 = value;
      }

      function setTempRet3(value) {
        value = value|0;
        tempRet3 = value;
      }

      function setTempRet4(value) {
        value = value|0;
        tempRet4 = value;
      }

      function setTempRet5(value) {
        value = value|0;
        tempRet5 = value;
      }

      function setTempRet6(value) {
        value = value|0;
        tempRet6 = value;
      }

      function setTempRet7(value) {
        value = value|0;
        tempRet7 = value;
      }

      function setTempRet8(value) {
        value = value|0;
        tempRet8 = value;
      }

      function setTempRet9(value) {
        value = value|0;
        tempRet9 = value;
      }

      function _gmemujs_test() {
       var label = 0, sp = 0;
       sp = STACKTOP;
       STACKTOP = sp;return ((144)|0);
      }
      function _initialize($sample_rate,$buffer_size) {
       $sample_rate = $sample_rate|0;
       $buffer_size = $buffer_size|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (_malloc(8)|0);
       $2 = $1;
       $3 = $1;
       HEAP32[$3>>2] = $sample_rate;
       $4 = (($1) + 4|0);
       $5 = $4;
       HEAP32[$5>>2] = $buffer_size;
       STACKTOP = sp;return ($2|0);
      }
      function _open_data($builder,$data,$size) {
       $builder = $builder|0;
       $data = $data|0;
       $size = $size|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($builder);
       $2 = HEAP32[$1>>2]|0;
       (_gme_open_data($data,$size,(160),$2)|0);
       $3 = (_malloc(8)|0);
       $4 = $3;
       $5 = $3;
       HEAP32[$5>>2] = $builder;
       $6 = HEAP32[(160)>>2]|0;
       $7 = (_gme_track_count($6)|0);
       $8 = (($3) + 4|0);
       $9 = $8;
       HEAP32[$9>>2] = $7;
       STACKTOP = sp;return ($4|0);
      }
      function _open_track($album,$track_number) {
       $album = $album|0;
       $track_number = $track_number|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (_malloc(8)|0);
       $2 = $1;
       $3 = $1;
       HEAP32[$3>>2] = $album;
       $4 = (($1) + 4|0);
       $5 = $4;
       HEAP32[$5>>2] = $track_number;
       STACKTOP = sp;return ($2|0);
      }
      function _track_info($track) {
       $track = $track|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
       var $9 = 0, $track_info = 0, $vararg_buffer = 0, $vararg_lifetime_bitcast = 0, $vararg_ptr = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       STACKTOP = STACKTOP + 32|0;
       $vararg_buffer = sp;
       $vararg_lifetime_bitcast = $vararg_buffer;
       $track_info = STACKTOP; STACKTOP = STACKTOP + 8|0;
       $1 = HEAP32[(160)>>2]|0;
       $2 = (($track) + 4|0);
       $3 = HEAP32[$2>>2]|0;
       (_gme_track_info($1,$track_info,$3)|0);
       $4 = HEAP32[(136)>>2]|0;
       $5 = HEAP32[$track_info>>2]|0;
       $6 = (($5) + 12|0);
       $7 = HEAP32[$6>>2]|0;
       $8 = (($5) + 64|0);
       $9 = HEAP32[$8>>2]|0;
       $10 = (($5) + 68|0);
       $11 = HEAP32[$10>>2]|0;
       $12 = (($5) + 72|0);
       $13 = HEAP32[$12>>2]|0;
       $14 = (($5) + 76|0);
       $15 = HEAP32[$14>>2]|0;
       $16 = (($5) + 80|0);
       $17 = HEAP32[$16>>2]|0;
       $18 = (($5) + 84|0);
       $19 = HEAP32[$18>>2]|0;
       $20 = (($5) + 88|0);
       $21 = HEAP32[$20>>2]|0;
       $vararg_ptr = ($vararg_buffer);
       HEAP32[$vararg_ptr>>2] = $7;
       $vararg_ptr1 = (($vararg_buffer) + 4|0);
       HEAP32[$vararg_ptr1>>2] = $9;
       $vararg_ptr2 = (($vararg_buffer) + 8|0);
       HEAP32[$vararg_ptr2>>2] = $11;
       $vararg_ptr3 = (($vararg_buffer) + 12|0);
       HEAP32[$vararg_ptr3>>2] = $13;
       $vararg_ptr4 = (($vararg_buffer) + 16|0);
       HEAP32[$vararg_ptr4>>2] = $15;
       $vararg_ptr5 = (($vararg_buffer) + 20|0);
       HEAP32[$vararg_ptr5>>2] = $17;
       $vararg_ptr6 = (($vararg_buffer) + 24|0);
       HEAP32[$vararg_ptr6>>2] = $19;
       $vararg_ptr7 = (($vararg_buffer) + 28|0);
       HEAP32[$vararg_ptr7>>2] = $21;
       (_sprintf(((168)|0),($4|0),($vararg_buffer|0))|0);
       STACKTOP = sp;return ((168)|0);
      }
      function _track_count($album) {
       $album = $album|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($album) + 4|0);
       $2 = HEAP32[$1>>2]|0;
       STACKTOP = sp;return ($2|0);
      }
      function _play_info($track) {
       $track = $track|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (_malloc(8)|0);
       $2 = $1;
       $3 = ($track);
       $4 = HEAP32[$3>>2]|0;
       $5 = ($4);
       $6 = HEAP32[$5>>2]|0;
       $7 = $1;
       HEAP32[$7>>2] = $6;
       $8 = (($1) + 4|0);
       $9 = $8;
       HEAP32[$9>>2] = $track;
       STACKTOP = sp;return ($2|0);
      }
      function _track_start($track) {
       $track = $track|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (_play_info($track)|0);
       $2 = HEAP32[(160)>>2]|0;
       $3 = (($track) + 4|0);
       $4 = HEAP32[$3>>2]|0;
       (_gme_start_track($2,$4)|0);
       STACKTOP = sp;return ($1|0);
      }
      function _generate_sound_data($buffer_size) {
       $buffer_size = $buffer_size|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = HEAP32[(160)>>2]|0;
       (_gme_play($1,16384,((2216)))|0);
       STACKTOP = sp;return (((2216))|0);
      }
      function __ZN6Ay_ApuC2Ev($this) {
       $this = $this|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
       var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
       var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
       var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $flags$05 = 0, $flags$05$phi = 0;
       var $out$07 = 0, $out$07$phi = 0, $phitmp = 0, $scevgep = 0, $x$06 = 0, $x$06$phi = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 472|0);
       __ZN10Blip_SynthILi12ELi1EEC1Ev($1);
       $4 = 7;
       while(1) {
        $5 = ((($this) + (($4*48)|0)|0) + 88|0);
        $6 = (34984 + ($4)|0);
        $7 = HEAP8[$6]|0;
        $8 = $7&255;
        $flags$05 = $8;$out$07 = $5;$x$06 = 2;
        while(1) {
         $9 = $flags$05 & 1;
         $10 = (0 - ($9))|0;
         $11 = $flags$05 >>> 1;
         $12 = $11 & 1;
         $13 = (($12) - ($9))|0;
         $14 = $10 & 15;
         $15 = (34992 + ($14)|0);
         $16 = HEAP8[$15]|0;
         $17 = (($out$07) + 1|0);
         HEAP8[$out$07] = $16;
         $18 = (($13) + ($14))|0;
         $19 = (34992 + ($18)|0);
         $20 = HEAP8[$19]|0;
         $21 = (($out$07) + 2|0);
         HEAP8[$17] = $20;
         $22 = (($13) + ($18))|0;
         $23 = (34992 + ($22)|0);
         $24 = HEAP8[$23]|0;
         $25 = (($out$07) + 3|0);
         HEAP8[$21] = $24;
         $26 = (($13) + ($22))|0;
         $27 = (34992 + ($26)|0);
         $28 = HEAP8[$27]|0;
         $29 = (($out$07) + 4|0);
         HEAP8[$25] = $28;
         $30 = (($13) + ($26))|0;
         $31 = (34992 + ($30)|0);
         $32 = HEAP8[$31]|0;
         $33 = (($out$07) + 5|0);
         HEAP8[$29] = $32;
         $34 = (($13) + ($30))|0;
         $35 = (34992 + ($34)|0);
         $36 = HEAP8[$35]|0;
         $37 = (($out$07) + 6|0);
         HEAP8[$33] = $36;
         $38 = (($13) + ($34))|0;
         $39 = (34992 + ($38)|0);
         $40 = HEAP8[$39]|0;
         $41 = (($out$07) + 7|0);
         HEAP8[$37] = $40;
         $42 = (($13) + ($38))|0;
         $43 = (34992 + ($42)|0);
         $44 = HEAP8[$43]|0;
         $45 = (($out$07) + 8|0);
         HEAP8[$41] = $44;
         $46 = (($13) + ($42))|0;
         $47 = (34992 + ($46)|0);
         $48 = HEAP8[$47]|0;
         $49 = (($out$07) + 9|0);
         HEAP8[$45] = $48;
         $50 = (($13) + ($46))|0;
         $51 = (34992 + ($50)|0);
         $52 = HEAP8[$51]|0;
         $53 = (($out$07) + 10|0);
         HEAP8[$49] = $52;
         $54 = (($13) + ($50))|0;
         $55 = (34992 + ($54)|0);
         $56 = HEAP8[$55]|0;
         $57 = (($out$07) + 11|0);
         HEAP8[$53] = $56;
         $58 = (($13) + ($54))|0;
         $59 = (34992 + ($58)|0);
         $60 = HEAP8[$59]|0;
         $61 = (($out$07) + 12|0);
         HEAP8[$57] = $60;
         $62 = (($13) + ($58))|0;
         $63 = (34992 + ($62)|0);
         $64 = HEAP8[$63]|0;
         $65 = (($out$07) + 13|0);
         HEAP8[$61] = $64;
         $66 = (($13) + ($62))|0;
         $67 = (34992 + ($66)|0);
         $68 = HEAP8[$67]|0;
         $69 = (($out$07) + 14|0);
         HEAP8[$65] = $68;
         $70 = (($13) + ($66))|0;
         $71 = (34992 + ($70)|0);
         $72 = HEAP8[$71]|0;
         $73 = (($out$07) + 15|0);
         HEAP8[$69] = $72;
         $74 = (($13) + ($70))|0;
         $75 = (34992 + ($74)|0);
         $76 = HEAP8[$75]|0;
         HEAP8[$73] = $76;
         $scevgep = (($out$07) + 16|0);
         $77 = $flags$05 >> 2;
         $phitmp = (($x$06) + -1)|0;
         $78 = ($phitmp|0)>(-1);
         if ($78) {
          $x$06$phi = $phitmp;$out$07$phi = $scevgep;$flags$05$phi = $77;$x$06 = $x$06$phi;$out$07 = $out$07$phi;$flags$05 = $flags$05$phi;
         } else {
          break;
         }
        }
        $2 = (($4) + -1)|0;
        $3 = ($4|0)==(0);
        if ($3) {
         break;
        } else {
         $4 = $2;
        }
       }
       __ZN6Ay_Apu6outputEP11Blip_Buffer($this,0);
       __ZN6Ay_Apu6volumeEd($this,1.0);
       __ZN6Ay_Apu5resetEv($this);
       STACKTOP = sp;return;
      }
      function __ZN10Blip_SynthILi12ELi1EEC1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN10Blip_SynthILi12ELi1EEC2Ev($this);
       STACKTOP = sp;return;
      }
      function __ZN6Ay_Apu6outputEP11Blip_Buffer($this,$buf) {
       $this = $this|0;
       $buf = $buf|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN6Ay_Apu10osc_outputEiP11Blip_Buffer($this,0,$buf);
       __ZN6Ay_Apu10osc_outputEiP11Blip_Buffer($this,1,$buf);
       __ZN6Ay_Apu10osc_outputEiP11Blip_Buffer($this,2,$buf);
       STACKTOP = sp;return;
      }
      function __ZN6Ay_Apu6volumeEd($this,$v) {
       $this = $this|0;
       $v = +$v;
       var $1 = 0, $2 = 0.0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 472|0);
       $2 = $v * 9.15032679738561963156E-4;
       __ZN10Blip_SynthILi12ELi1EE6volumeEd($1,$2);
       STACKTOP = sp;return;
      }
      function __ZN6Ay_Apu5resetEv($this) {
       $this = $this|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0;
       var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
       sp = STACKTOP;
       $1 = (($this) + 48|0);
       HEAP32[$1>>2] = 0;
       $2 = (($this) + 68|0);
       HEAP32[$2>>2] = 0;
       $3 = (($this) + 72|0);
       HEAP32[$3>>2] = 1;
       $4 = (($this) + 32|0);
       HEAP32[$4>>2] = 16;
       $5 = (($this) + 36|0);
       $6 = (($this) + 16|0);
       $7 = $5;
       $8 = $7;
       $9 = $8;
       HEAP32[$9>>2] = 0;
       $10 = (($8) + 4)|0;
       $11 = $10;
       HEAP32[$11>>2] = 0;
       HEAP32[$6>>2] = 16;
       $12 = (($this) + 20|0);
       $13 = ($this);
       $14 = $12;
       $15 = $14;
       $16 = $15;
       HEAP32[$16>>2] = 0;
       $17 = (($15) + 4)|0;
       $18 = $17;
       HEAP32[$18>>2] = 0;
       HEAP32[$13>>2] = 16;
       $19 = (($this) + 4|0);
       $20 = $19;
       $21 = $20;
       $22 = $21;
       HEAP32[$22>>2] = 0;
       $23 = (($21) + 4)|0;
       $24 = $23;
       HEAP32[$24>>2] = 0;
       $25 = (($this) + 52|0);
       $26 = (($this) + 59|0);
       dest=$25+0|0; stop=dest+16|0; do { HEAP8[dest]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));;
       HEAP8[$26] = -1;
       __ZN6Ay_Apu11write_data_Eii($this,13,0);
       STACKTOP = sp;return;
      }
      function __ZN6Ay_Apu11write_data_Eii($this,$addr,$data) {
       $this = $this|0;
       $addr = $addr|0;
       $data = $data|0;
       var $$ = 0, $$0 = 0, $$1 = 0, $$2 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
       var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($addr>>>0)<(16);
       if (!($1)) {
        ___assert_fail(((35008)|0),((35040)|0),122,((35080)|0));
        // unreachable;
       }
       $2 = ($addr|0)==(13);
       if ($2) {
        $3 = $data & 8;
        $4 = ($3|0)==(0);
        if ($4) {
         $5 = $data & 4;
         $6 = ($5|0)!=(0);
         $7 = $6 ? 15 : 9;
         $$0 = $7;
        } else {
         $$0 = $data;
        }
        $8 = (($$0) + -7)|0;
        $9 = ((($this) + (($8*48)|0)|0) + 88|0);
        $10 = (($this) + 80|0);
        HEAP32[$10>>2] = $9;
        $11 = (($this) + 84|0);
        HEAP32[$11>>2] = -48;
        $12 = (($this) + 76|0);
        HEAP32[$12>>2] = 0;
        $$1 = $$0;
       } else {
        $$1 = $data;
       }
       $13 = $$1&255;
       $14 = ((($this) + ($addr)|0) + 52|0);
       HEAP8[$14] = $13;
       $15 = $addr >> 1;
       $16 = ($15|0)<(3);
       if (!($16)) {
        STACKTOP = sp;return;
       }
       $17 = $15 << 1;
       $18 = $17 | 1;
       $19 = ((($this) + ($18)|0) + 52|0);
       $20 = HEAP8[$19]|0;
       $21 = $20&255;
       $22 = $21 << 12;
       $23 = $22 & 61440;
       $24 = ((($this) + ($17)|0) + 52|0);
       $25 = HEAP8[$24]|0;
       $26 = $25&255;
       $27 = $26 << 4;
       $28 = $23 | $27;
       $29 = ($28|0)!=(0);
       $$ = $29 ? $28 : 16;
       $30 = (($this) + ($15<<4)|0);
       $31 = HEAP32[$30>>2]|0;
       $32 = (($$) - ($31))|0;
       $33 = ((($this) + ($15<<4)|0) + 4|0);
       $34 = HEAP32[$33>>2]|0;
       $35 = (($32) + ($34))|0;
       $36 = ($35|0)<(0);
       $$2 = $36 ? 0 : $35;
       HEAP32[$33>>2] = $$2;
       HEAP32[$30>>2] = $$;
       STACKTOP = sp;return;
      }
      function __ZN6Ay_Apu9run_untilEi($this,$final_end_time) {
       $this = $this|0;
       $final_end_time = $final_end_time|0;
       var $$ = 0, $$1 = 0, $$5 = 0, $$7 = 0, $$7$v = 0, $$8 = 0, $$final_end_time = 0, $$lcssa = 0, $$osc_mode$0 = 0, $$osc_mode$04 = 0, $$volume$1 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
       var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
       var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
       var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $148$phi = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
       var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
       var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $2 = 0, $20 = 0;
       var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
       var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
       var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
       var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
       var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $delta1$0 = 0, $delta1$114 = 0, $delta1$2 = 0, $delta1$3 = 0, $delta1$4$lcssa = 0, $delta1$5 = 0, $end_time$0 = 0, $end_time$1 = 0, $exitcond = 0, $final_end_time$ = 0, $final_end_time$9 = 0, $half_vol$0 = 0, $index$031 = 0, $noise_lfsr$0 = 0;
       var $noise_lfsr$1 = 0, $noise_lfsr$213 = 0, $noise_lfsr$213$phi = 0, $noise_lfsr$3 = 0, $noise_lfsr$4 = 0, $ntime$0 = 0, $ntime$1 = 0, $ntime$212 = 0, $ntime$3 = 0, $ntime$3$end_time$1 = 0, $ntime$4 = 0, $or$cond = 0, $or$cond6 = 0, $osc_env_pos$0 = 0, $osc_mode$0 = 0, $osc_mode$1 = 0, $phase$0 = 0, $phase$126 = 0, $phase$126$phi = 0, $phase$2 = 0;
       var $start_time$0 = 0, $start_time$0$phi = 0, $time$0 = 0, $time$1 = 0, $time$2 = 0, $time$2$end_time$1 = 0, $time$3$lcssa = 0, $time$318 = 0, $time$318$phi = 0, $time$425 = 0, $time$425$phi = 0, $time$5 = 0, $time$6 = 0, $volume$0 = 0, $volume$1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 48|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = ($2|0)>($final_end_time|0);
       if ($3) {
        ___assert_fail(((35096)|0),((35040)|0),166,((35128)|0));
        // unreachable;
       }
       $4 = (($this) + 58|0);
       $5 = HEAP8[$4]|0;
       $6 = $5&255;
       $7 = $6 << 5;
       $8 = $7 & 992;
       $9 = ($8|0)!=(0);
       $$ = $9 ? $8 : 32;
       $10 = (($this) + 68|0);
       $11 = HEAP32[$10>>2]|0;
       $12 = (($this) + 72|0);
       $13 = HEAP32[$12>>2]|0;
       $14 = (($this) + 64|0);
       $15 = HEAP8[$14]|0;
       $16 = $15&255;
       $17 = $16 << 8;
       $18 = (($this) + 63|0);
       $19 = HEAP8[$18]|0;
       $20 = $19&255;
       $21 = $17 | $20;
       $22 = $21 << 5;
       $23 = ($21|0)!=(0);
       $$1 = $23 ? $22 : 32;
       $24 = (($this) + 76|0);
       $25 = HEAP32[$24>>2]|0;
       $26 = ($25|0)==(0);
       if ($26) {
        HEAP32[$24>>2] = $$1;
       }
       $27 = (($this) + 59|0);
       $28 = (($this) + 84|0);
       $29 = (($final_end_time) + -1)|0;
       $30 = (($this) + 472|0);
       $31 = (($this) + 472|0);
       $32 = (($this) + 80|0);
       $33 = (($this) + 472|0);
       $34 = (($this) + 80|0);
       $35 = (($this) + 65|0);
       $index$031 = 0;
       while(1) {
        $36 = HEAP8[$27]|0;
        $37 = $36&255;
        $38 = $37 >>> $index$031;
        $39 = ((($this) + ($index$031<<4)|0) + 12|0);
        $40 = HEAP32[$39>>2]|0;
        $41 = ($40|0)==(0|0);
        do {
         if (!($41)) {
          __ZN11Blip_Buffer12set_modifiedEv($40);
          $42 = (__ZNK11Blip_Buffer10clock_rateEv($40)|0);
          $43 = (($42) + 16384)|0;
          $44 = $43 >>> 15;
          $45 = (($this) + ($index$031<<4)|0);
          $46 = HEAP32[$45>>2]|0;
          $47 = ($46|0)>($44|0);
          if ($47) {
           $half_vol$0 = 0;$osc_mode$0 = $38;
          } else {
           $48 = $38 & 1;
           $49 = $48 ^ 1;
           $50 = $48 ^ 1;
           $51 = $50 | $38;
           $half_vol$0 = $49;$osc_mode$0 = $51;
          }
          $52 = HEAP32[$1>>2]|0;
          $53 = (($index$031) + 8)|0;
          $54 = ((($this) + ($53)|0) + 52|0);
          $55 = HEAP8[$54]|0;
          $56 = $55&255;
          $57 = $56 & 15;
          $58 = (34992 + ($57)|0);
          $59 = HEAP8[$58]|0;
          $60 = $59&255;
          $61 = $60 >>> $half_vol$0;
          $62 = HEAP32[$28>>2]|0;
          $63 = $56 & 16;
          $64 = ($63|0)==(0);
          do {
           if ($64) {
            $78 = ($61|0)==(0);
            $$osc_mode$04 = $78 ? 9 : $osc_mode$0;
            $end_time$0 = $final_end_time;$osc_mode$1 = $$osc_mode$04;$volume$0 = $61;
           } else {
            $65 = HEAP32[$34>>2]|0;
            $66 = (($65) + ($62)|0);
            $67 = HEAP8[$66]|0;
            $68 = $67&255;
            $69 = $68 >>> $half_vol$0;
            $70 = HEAP8[$35]|0;
            $71 = $70 & 1;
            $72 = ($71<<24>>24)==(0);
            $73 = ($62|0)<(-32);
            $or$cond = $72 | $73;
            if ($or$cond) {
             $74 = HEAP32[$24>>2]|0;
             $75 = (($74) + ($52))|0;
             $76 = ($75|0)<($final_end_time|0);
             $$final_end_time = $76 ? $75 : $final_end_time;
             $end_time$0 = $$final_end_time;$osc_mode$1 = $osc_mode$0;$volume$0 = $69;
             break;
            } else {
             $77 = ($69|0)==(0);
             $$osc_mode$0 = $77 ? 9 : $osc_mode$0;
             $end_time$0 = $final_end_time;$osc_mode$1 = $$osc_mode$0;$volume$0 = $69;
             break;
            }
           }
          } while(0);
          $79 = HEAP32[$45>>2]|0;
          $80 = ((($this) + ($index$031<<4)|0) + 4|0);
          $81 = HEAP32[$80>>2]|0;
          $82 = (($81) + ($52))|0;
          $83 = $osc_mode$1 & 1;
          $84 = ($83|0)!=(0);
          if ($84) {
           $85 = (($29) + ($79))|0;
           $86 = (($85) - ($82))|0;
           $87 = (($86|0) / ($79|0))&-1;
           $88 = Math_imul($87, $79)|0;
           $89 = (($88) + ($82))|0;
           $90 = $87 & 1;
           $91 = ((($this) + ($index$031<<4)|0) + 10|0);
           $92 = HEAP16[$91>>1]|0;
           $93 = $92&65535;
           $94 = $93 ^ $90;
           $95 = $94&65535;
           HEAP16[$91>>1] = $95;
           $time$0 = $89;
          } else {
           $time$0 = $82;
          }
          $96 = $osc_mode$1 & 8;
          $97 = ($96|0)!=(0);
          $98 = (($52) + ($11))|0;
          $final_end_time$ = $97 ? $final_end_time : $98;
          $$5 = $97 ? 1 : $13;
          $99 = ((($this) + ($index$031<<4)|0) + 10|0);
          $100 = $osc_mode$1 >>> 3;
          $101 = ((($this) + ($index$031<<4)|0) + 8|0);
          $end_time$1 = $end_time$0;$noise_lfsr$0 = $$5;$ntime$0 = $final_end_time$;$osc_env_pos$0 = $62;$start_time$0 = $52;$time$1 = $time$0;$volume$1 = $volume$0;
          while(1) {
           $102 = HEAP16[$99>>1]|0;
           $103 = $102&65535;
           $104 = $103 | $osc_mode$1;
           $105 = $noise_lfsr$0 | $100;
           $106 = $105 & 1;
           $107 = $106 & $104;
           $108 = ($107|0)==(0);
           $$volume$1 = $108 ? 0 : $volume$1;
           $109 = HEAP16[$101>>1]|0;
           $110 = $109 << 16 >> 16;
           $111 = ($$volume$1|0)==($110|0);
           if (!($111)) {
            $112 = (($$volume$1) - ($110))|0;
            $113 = $$volume$1&65535;
            HEAP16[$101>>1] = $113;
            __ZNK10Blip_SynthILi12ELi1EE6offsetEiiP11Blip_Buffer($33,$start_time$0,$112,$40);
           }
           $114 = ($ntime$0|0)<($end_time$1|0);
           $115 = ($time$1|0)<($end_time$1|0);
           $or$cond6 = $114 | $115;
           do {
            if ($or$cond6) {
             $116 = $$volume$1 << 1;
             $117 = (($116) - ($volume$1))|0;
             $118 = ($116|0)!=($volume$1|0);
             $119 = $118&1;
             $120 = HEAP16[$99>>1]|0;
             $121 = $120 << 16 >> 16;
             $122 = $121 | $83;
             $delta1$0 = $117;$noise_lfsr$1 = $noise_lfsr$0;$ntime$1 = $ntime$0;$phase$0 = $122;$time$2 = $time$1;
             while(1) {
              $123 = ($end_time$1|0)>($time$2|0);
              $time$2$end_time$1 = $123 ? $time$2 : $end_time$1;
              $124 = $phase$0 & $119;
              $125 = ($124|0)==(0);
              do {
               if ($125) {
                $138 = (($time$2$end_time$1) - ($ntime$1))|0;
                $139 = ($138|0)>(-1);
                if (!($139)) {
                 $delta1$3 = $delta1$0;$noise_lfsr$3 = $noise_lfsr$1;$ntime$3 = $ntime$1;
                 break;
                }
                $140 = (($138|0) % ($$|0))&-1;
                $141 = (($time$2$end_time$1) + ($$))|0;
                $142 = (($141) - ($140))|0;
                $delta1$3 = $delta1$0;$noise_lfsr$3 = $noise_lfsr$1;$ntime$3 = $142;
               } else {
                $126 = ($ntime$1|0)>($time$2$end_time$1|0);
                if ($126) {
                 $delta1$3 = $delta1$0;$noise_lfsr$3 = $noise_lfsr$1;$ntime$3 = $ntime$1;
                 break;
                } else {
                 $delta1$114 = $delta1$0;$noise_lfsr$213 = $noise_lfsr$1;$ntime$212 = $ntime$1;
                }
                while(1) {
                 $127 = (($noise_lfsr$213) + 1)|0;
                 $128 = $noise_lfsr$213 & 1;
                 $129 = (0 - ($128))|0;
                 $130 = $129 & 73728;
                 $131 = $noise_lfsr$213 >>> 1;
                 $132 = $130 ^ $131;
                 $133 = $127 & 2;
                 $134 = ($133|0)==(0);
                 if ($134) {
                  $delta1$2 = $delta1$114;
                 } else {
                  $135 = (0 - ($delta1$114))|0;
                  __ZNK10Blip_SynthILi12ELi1EE6offsetEiiP11Blip_Buffer($31,$ntime$212,$135,$40);
                  $delta1$2 = $135;
                 }
                 $136 = (($ntime$212) + ($$))|0;
                 $137 = ($136|0)>($time$2$end_time$1|0);
                 if ($137) {
                  $delta1$3 = $delta1$2;$noise_lfsr$3 = $132;$ntime$3 = $136;
                  break;
                 } else {
                  $noise_lfsr$213$phi = $132;$delta1$114 = $delta1$2;$ntime$212 = $136;$noise_lfsr$213 = $noise_lfsr$213$phi;
                 }
                }
               }
              } while(0);
              $143 = ($end_time$1|0)>($ntime$3|0);
              $ntime$3$end_time$1 = $143 ? $ntime$3 : $end_time$1;
              $144 = $noise_lfsr$3 & $119;
              $145 = ($144|0)==(0);
              $146 = ($time$2|0)<($ntime$3$end_time$1|0);
              do {
               if ($145) {
                if ($146) {
                 $phase$126 = $phase$0;$time$425 = $time$2;
                } else {
                 $delta1$5 = $delta1$3;$phase$2 = $phase$0;$time$5 = $time$2;
                 break;
                }
                while(1) {
                 $153 = (($time$425) + ($79))|0;
                 $154 = $phase$126 ^ 1;
                 $155 = ($153|0)<($ntime$3$end_time$1|0);
                 if ($155) {
                  $time$425$phi = $153;$phase$126$phi = $154;$time$425 = $time$425$phi;$phase$126 = $phase$126$phi;
                 } else {
                  $delta1$5 = $delta1$3;$phase$2 = $154;$time$5 = $153;
                  break;
                 }
                }
               } else {
                $147 = (0 - ($delta1$3))|0;
                if ($146) {
                 $148 = $147;$time$318 = $time$2;
                 while(1) {
                  __ZNK10Blip_SynthILi12ELi1EE6offsetEiiP11Blip_Buffer($30,$time$318,$148,$40);
                  $149 = (($time$318) + ($79))|0;
                  $150 = ($149|0)<($ntime$3$end_time$1|0);
                  $151 = (0 - ($148))|0;
                  if ($150) {
                   $time$318$phi = $149;$148$phi = $151;$time$318 = $time$318$phi;$148 = $148$phi;
                  } else {
                   $$lcssa = $151;$delta1$4$lcssa = $148;$time$3$lcssa = $149;
                   break;
                  }
                 }
                } else {
                 $$lcssa = $147;$delta1$4$lcssa = $delta1$3;$time$3$lcssa = $time$2;
                }
                $152 = $$lcssa >>> 31;
                $delta1$5 = $delta1$4$lcssa;$phase$2 = $152;$time$5 = $time$3$lcssa;
               }
              } while(0);
              $156 = ($time$5|0)<($end_time$1|0);
              if ($156) {
               $delta1$0 = $delta1$5;$noise_lfsr$1 = $noise_lfsr$3;$ntime$1 = $ntime$3;$phase$0 = $phase$2;$time$2 = $time$5;
               continue;
              }
              if ($143) {
               $delta1$0 = $delta1$5;$noise_lfsr$1 = $noise_lfsr$3;$ntime$1 = $ntime$3;$phase$0 = $phase$2;$time$2 = $time$5;
              } else {
               break;
              }
             }
             $157 = (($delta1$5) + ($volume$1))|0;
             $158 = $157 >>> 1;
             $159 = $158&65535;
             HEAP16[$101>>1] = $159;
             if ($84) {
              $noise_lfsr$4 = $noise_lfsr$3;$ntime$4 = $ntime$3;$time$6 = $time$5;
              break;
             }
             $160 = $phase$2&65535;
             HEAP16[$99>>1] = $160;
             $noise_lfsr$4 = $noise_lfsr$3;$ntime$4 = $ntime$3;$time$6 = $time$5;
            } else {
             $noise_lfsr$4 = $noise_lfsr$0;$ntime$4 = $ntime$0;$time$6 = $time$1;
            }
           } while(0);
           $161 = ($end_time$1|0)<($final_end_time|0);
           if (!($161)) {
            break;
           }
           $162 = ($osc_env_pos$0|0)>(-2);
           $$7$v = $162 ? -31 : 1;
           $$7 = (($$7$v) + ($osc_env_pos$0))|0;
           $163 = HEAP32[$32>>2]|0;
           $164 = (($163) + ($$7)|0);
           $165 = HEAP8[$164]|0;
           $166 = $165&255;
           $167 = $166 >>> $half_vol$0;
           $168 = (($end_time$1) + ($$1))|0;
           $169 = ($168|0)>($final_end_time|0);
           $final_end_time$9 = $169 ? $final_end_time : $168;
           $start_time$0$phi = $end_time$1;$end_time$1 = $final_end_time$9;$noise_lfsr$0 = $noise_lfsr$4;$ntime$0 = $ntime$4;$osc_env_pos$0 = $$7;$time$1 = $time$6;$volume$1 = $167;$start_time$0 = $start_time$0$phi;
          }
          $170 = (($time$6) - ($final_end_time))|0;
          HEAP32[$80>>2] = $170;
          if ($97) {
           break;
          }
          $171 = (($ntime$4) - ($final_end_time))|0;
          HEAP32[$10>>2] = $171;
          HEAP32[$12>>2] = $noise_lfsr$4;
         }
        } while(0);
        $172 = (($index$031) + 1)|0;
        $exitcond = ($172|0)==(3);
        if ($exitcond) {
         break;
        } else {
         $index$031 = $172;
        }
       }
       $173 = HEAP32[$1>>2]|0;
       $174 = (($final_end_time) - ($173))|0;
       $175 = HEAP32[$24>>2]|0;
       $176 = (($174) - ($175))|0;
       $177 = ($176|0)>(-1);
       do {
        if ($177) {
         $179 = (($176) + ($$1))|0;
         $180 = (($179|0) / ($$1|0))&-1;
         $181 = (($this) + 84|0);
         $182 = HEAP32[$181>>2]|0;
         $183 = (($182) + ($180))|0;
         $184 = ($183|0)>(-1);
         $185 = $183 | -32;
         $$8 = $184 ? $185 : $183;
         HEAP32[$181>>2] = $$8;
         $186 = Math_imul($180, $$1)|0;
         $187 = (($176) - ($186))|0;
         $188 = (0 - ($187))|0;
         $189 = ($$1|0)<($188|0);
         if ($189) {
          ___assert_fail(((35144)|0),((35040)|0),388,((35128)|0));
          // unreachable;
         }
         $190 = (0 - ($187))|0;
         HEAP32[$24>>2] = $190;
         $191 = ($187|0)<(0);
         if ($191) {
          break;
         }
         ___assert_fail(((35168)|0),((35040)|0),391,((35128)|0));
         // unreachable;
        } else {
         $178 = (0 - ($176))|0;
         HEAP32[$24>>2] = $178;
        }
       } while(0);
       $192 = (($this) + 84|0);
       $193 = HEAP32[$192>>2]|0;
       $194 = ($193|0)<(0);
       if ($194) {
        HEAP32[$1>>2] = $final_end_time;
        STACKTOP = sp;return;
       } else {
        ___assert_fail(((35184)|0),((35040)|0),392,((35128)|0));
        // unreachable;
       }
      }
      function __ZN11Blip_Buffer12set_modifiedEv($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 40|0);
       HEAP32[$1>>2] = 1;
       STACKTOP = sp;return;
      }
      function __ZNK11Blip_Buffer10clock_rateEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 28|0);
       $2 = HEAP32[$1>>2]|0;
       STACKTOP = sp;return ($2|0);
      }
      function __ZNK10Blip_SynthILi12ELi1EE6offsetEiiP11Blip_Buffer($this,$t,$delta,$buf) {
       $this = $this|0;
       $t = $t|0;
       $delta = $delta|0;
       $buf = $buf|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($buf);
       $2 = HEAP32[$1>>2]|0;
       $3 = Math_imul($2, $t)|0;
       $4 = (($buf) + 4|0);
       $5 = HEAP32[$4>>2]|0;
       $6 = (($3) + ($5))|0;
       __ZNK10Blip_SynthILi12ELi1EE16offset_resampledEjiP11Blip_Buffer($this,$6,$delta,$buf);
       STACKTOP = sp;return;
      }
      function __ZNK10Blip_SynthILi12ELi1EE16offset_resampledEjiP11Blip_Buffer($this,$time,$delta,$blip_buf) {
       $this = $this|0;
       $time = $time|0;
       $delta = $delta|0;
       $blip_buf = $blip_buf|0;
       var $$sum = 0, $$sum1 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum1415 = 0, $$sum16 = 0, $$sum1718 = 0, $$sum19 = 0, $$sum2 = 0, $$sum2021 = 0, $$sum22 = 0, $$sum2324 = 0, $$sum25 = 0, $$sum2627 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum45 = 0, $$sum6 = 0;
       var $$sum7 = 0, $$sum8 = 0, $$sum910 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
       var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
       var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
       var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
       var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $time >>> 16;
       $2 = (($blip_buf) + 12|0);
       $3 = HEAP32[$2>>2]|0;
       $4 = ($1|0)<($3|0);
       if ($4) {
        $5 = (($this) + 8|0);
        $6 = HEAP32[$5>>2]|0;
        $7 = Math_imul($6, $delta)|0;
        $8 = (($blip_buf) + 8|0);
        $9 = HEAP32[$8>>2]|0;
        $10 = $time >>> 10;
        $11 = $10 & 63;
        $$sum = (64 - ($11))|0;
        $12 = ((($this) + ($$sum<<1)|0) + 40|0);
        $13 = HEAP16[$12>>1]|0;
        $14 = $13 << 16 >> 16;
        $15 = Math_imul($14, $7)|0;
        $$sum1 = (($1) + 2)|0;
        $16 = (($9) + ($$sum1<<2)|0);
        $17 = HEAP32[$16>>2]|0;
        $18 = (($15) + ($17))|0;
        $$sum2 = (($$sum) + 64)|0;
        $19 = ((($this) + ($$sum2<<1)|0) + 40|0);
        $20 = HEAP16[$19>>1]|0;
        $21 = $20 << 16 >> 16;
        $22 = Math_imul($21, $7)|0;
        $$sum3 = (($1) + 3)|0;
        $23 = (($9) + ($$sum3<<2)|0);
        $24 = HEAP32[$23>>2]|0;
        $25 = (($22) + ($24))|0;
        $$sum45 = $$sum | 128;
        $26 = ((($this) + ($$sum45<<1)|0) + 40|0);
        $27 = HEAP16[$26>>1]|0;
        $28 = $27 << 16 >> 16;
        HEAP32[$16>>2] = $18;
        HEAP32[$23>>2] = $25;
        $29 = Math_imul($28, $7)|0;
        $$sum6 = (($1) + 4)|0;
        $30 = (($9) + ($$sum6<<2)|0);
        $31 = HEAP32[$30>>2]|0;
        $32 = (($29) + ($31))|0;
        $$sum7 = (($$sum) + 192)|0;
        $33 = ((($this) + ($$sum7<<1)|0) + 40|0);
        $34 = HEAP16[$33>>1]|0;
        $35 = $34 << 16 >> 16;
        $36 = Math_imul($35, $7)|0;
        $$sum8 = (($1) + 5)|0;
        $37 = (($9) + ($$sum8<<2)|0);
        $38 = HEAP32[$37>>2]|0;
        $39 = (($36) + ($38))|0;
        $$sum910 = $$sum | 256;
        $40 = ((($this) + ($$sum910<<1)|0) + 40|0);
        $41 = HEAP16[$40>>1]|0;
        $42 = $41 << 16 >> 16;
        HEAP32[$30>>2] = $32;
        HEAP32[$37>>2] = $39;
        $43 = Math_imul($42, $7)|0;
        $$sum11 = (($1) + 6)|0;
        $44 = (($9) + ($$sum11<<2)|0);
        $45 = HEAP32[$44>>2]|0;
        $46 = (($43) + ($45))|0;
        $$sum12 = (($$sum) + 320)|0;
        $47 = ((($this) + ($$sum12<<1)|0) + 40|0);
        $48 = HEAP16[$47>>1]|0;
        $49 = $48 << 16 >> 16;
        $50 = Math_imul($49, $7)|0;
        $$sum13 = (($1) + 7)|0;
        $51 = (($9) + ($$sum13<<2)|0);
        $52 = HEAP32[$51>>2]|0;
        $53 = (($50) + ($52))|0;
        $54 = ((($this) + ($11<<1)|0) + 40|0);
        $$sum1415 = $11 | 320;
        $55 = ((($this) + ($$sum1415<<1)|0) + 40|0);
        $56 = HEAP16[$55>>1]|0;
        $57 = $56 << 16 >> 16;
        HEAP32[$44>>2] = $46;
        HEAP32[$51>>2] = $53;
        $58 = Math_imul($57, $7)|0;
        $$sum16 = (($1) + 8)|0;
        $59 = (($9) + ($$sum16<<2)|0);
        $60 = HEAP32[$59>>2]|0;
        $61 = (($58) + ($60))|0;
        $$sum1718 = $11 | 256;
        $62 = ((($this) + ($$sum1718<<1)|0) + 40|0);
        $63 = HEAP16[$62>>1]|0;
        $64 = $63 << 16 >> 16;
        $65 = Math_imul($64, $7)|0;
        $$sum19 = (($1) + 9)|0;
        $66 = (($9) + ($$sum19<<2)|0);
        $67 = HEAP32[$66>>2]|0;
        $68 = (($65) + ($67))|0;
        $$sum2021 = $11 | 192;
        $69 = ((($this) + ($$sum2021<<1)|0) + 40|0);
        $70 = HEAP16[$69>>1]|0;
        $71 = $70 << 16 >> 16;
        HEAP32[$59>>2] = $61;
        HEAP32[$66>>2] = $68;
        $72 = Math_imul($71, $7)|0;
        $$sum22 = (($1) + 10)|0;
        $73 = (($9) + ($$sum22<<2)|0);
        $74 = HEAP32[$73>>2]|0;
        $75 = (($72) + ($74))|0;
        $$sum2324 = $11 | 128;
        $76 = ((($this) + ($$sum2324<<1)|0) + 40|0);
        $77 = HEAP16[$76>>1]|0;
        $78 = $77 << 16 >> 16;
        $79 = Math_imul($78, $7)|0;
        $$sum25 = (($1) + 11)|0;
        $80 = (($9) + ($$sum25<<2)|0);
        $81 = HEAP32[$80>>2]|0;
        $82 = (($79) + ($81))|0;
        $$sum2627 = $11 | 64;
        $83 = ((($this) + ($$sum2627<<1)|0) + 40|0);
        $84 = HEAP16[$83>>1]|0;
        $85 = $84 << 16 >> 16;
        HEAP32[$73>>2] = $75;
        HEAP32[$80>>2] = $82;
        $86 = Math_imul($85, $7)|0;
        $$sum28 = (($1) + 12)|0;
        $87 = (($9) + ($$sum28<<2)|0);
        $88 = HEAP32[$87>>2]|0;
        $89 = (($86) + ($88))|0;
        $90 = HEAP16[$54>>1]|0;
        $91 = $90 << 16 >> 16;
        $92 = Math_imul($91, $7)|0;
        $$sum29 = (($1) + 13)|0;
        $93 = (($9) + ($$sum29<<2)|0);
        $94 = HEAP32[$93>>2]|0;
        $95 = (($92) + ($94))|0;
        HEAP32[$87>>2] = $89;
        HEAP32[$93>>2] = $95;
        STACKTOP = sp;return;
       } else {
        ___assert_fail(((35200)|0),((35272)|0),342,((35312)|0));
        // unreachable;
       }
      }
      function __ZN10Blip_SynthILi12ELi1EEC2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = (($this) + 40|0);
       __ZN11Blip_Synth_C2EPsi($1,$2,12);
       STACKTOP = sp;return;
      }
      function __ZN10Blip_SynthILi12ELi1EE6volumeEd($this,$v) {
       $this = $this|0;
       $v = +$v;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       __ZN11Blip_Synth_11volume_unitEd($1,$v);
       STACKTOP = sp;return;
      }
      function __ZN6Ay_Apu10osc_outputEiP11Blip_Buffer($this,$i,$buf) {
       $this = $this|0;
       $i = $i|0;
       $buf = $buf|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($i>>>0)<(3);
       if ($1) {
        $2 = ((($this) + ($i<<4)|0) + 12|0);
        HEAP32[$2>>2] = $buf;
        STACKTOP = sp;return;
       } else {
        ___assert_fail(((35336)|0),((35368)|0),86,((35400)|0));
        // unreachable;
       }
      }
      function __ZN6Ay_CpuC2Ev($this) {
       $this = $this|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0;
       var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $even$0$lcssa = 0, $even$01 = 0, $even$01$phi = 0, $i$03 = 0, $p$02 = 0, $p$02$phi = 0, $phitmp = 0, $phitmp4 = 0, $phitmp5 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 524|0);
       $2 = (($this) + 520|0);
       HEAP32[$2>>2] = $1;
       $i$03 = 255;
       while(1) {
        $3 = ($i$03|0)==(0);
        if ($3) {
         $even$0$lcssa = 4;
        } else {
         $even$01 = 1;$p$02 = $i$03;
         while(1) {
          $4 = $p$02 ^ $even$01;
          $5 = $p$02 >> 1;
          $6 = ($5|0)==(0);
          if ($6) {
           break;
          } else {
           $p$02$phi = $5;$even$01$phi = $4;$p$02 = $p$02$phi;$even$01 = $even$01$phi;
          }
         }
         $phitmp4 = $4 << 2;
         $phitmp5 = $phitmp4 & 4;
         $even$0$lcssa = $phitmp5;
        }
        $7 = $i$03 & 168;
        $8 = $even$0$lcssa | $7;
        $9 = $8&255;
        $10 = (($this) + ($i$03)|0);
        HEAP8[$10] = $9;
        $11 = $8 | 1;
        $12 = $11&255;
        $13 = (($i$03) + 256)|0;
        $14 = (($this) + ($13)|0);
        HEAP8[$14] = $12;
        $phitmp = (($i$03) + -1)|0;
        $15 = ($phitmp|0)>(-1);
        if ($15) {
         $i$03 = $phitmp;
        } else {
         break;
        }
       }
       $16 = ($this);
       $17 = HEAP8[$16]|0;
       $18 = $17&255;
       $19 = $18 | 64;
       $20 = $19&255;
       HEAP8[$16] = $20;
       $21 = (($this) + 256|0);
       $22 = HEAP8[$21]|0;
       $23 = $22&255;
       $24 = $23 | 64;
       $25 = $24&255;
       HEAP8[$21] = $25;
       STACKTOP = sp;return;
      }
      function __ZN6Ay_Cpu5resetEPv($this,$m) {
       $this = $this|0;
       $m = $m|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, dest = 0, label = 0, sp = 0, stop = 0;
       sp = STACKTOP;
       $1 = (($this) + 512|0);
       HEAP32[$1>>2] = $m;
       $2 = (($this) + 524|0);
       $3 = (($this) + 520|0);
       HEAP32[$3>>2] = $2;
       $4 = (($this) + 516|0);
       HEAP32[$4>>2] = 0;
       $5 = $2;
       dest=$5+0|0; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));;HEAP16[$5+36>>1]=0|0;
       STACKTOP = sp;return;
      }
      function __ZN6Ay_Cpu3runEl($this,$end_time) {
       $this = $this|0;
       $end_time = $end_time|0;
       var $$ = 0, $$10 = 0, $$10$v = 0, $$11 = 0, $$12 = 0, $$13 = 0, $$13$v = 0, $$15 = 0, $$18 = 0, $$19 = 0, $$21 = 0, $$8 = 0, $$8$v = 0, $$9 = 0, $$flags$0 = 0, $$in = 0, $$masked = 0, $$masked3 = 0, $$pc$1 = 0, $$pc$120 = 0;
       var $$sink = 0, $$sink$in = 0, $$sum = 0, $$sum4 = 0, $$sum5 = 0, $$sum6 = 0, $$sum7 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0;
       var $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0;
       var $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0;
       var $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0;
       var $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0;
       var $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0;
       var $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0;
       var $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0;
       var $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0;
       var $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0;
       var $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0;
       var $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0;
       var $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0;
       var $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0;
       var $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0;
       var $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0;
       var $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0;
       var $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0;
       var $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0;
       var $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0;
       var $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0;
       var $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0;
       var $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0;
       var $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0;
       var $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0;
       var $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0;
       var $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0;
       var $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0;
       var $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0;
       var $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0;
       var $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0;
       var $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0;
       var $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $159 = 0, $16 = 0;
       var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
       var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
       var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
       var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
       var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
       var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
       var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
       var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
       var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
       var $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0;
       var $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0;
       var $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0;
       var $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0;
       var $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0;
       var $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0;
       var $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0;
       var $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0;
       var $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0;
       var $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0;
       var $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0;
       var $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0;
       var $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0;
       var $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0;
       var $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0;
       var $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0;
       var $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0;
       var $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0;
       var $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0;
       var $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0;
       var $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0;
       var $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0;
       var $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0;
       var $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0;
       var $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0;
       var $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0;
       var $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0;
       var $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0;
       var $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0;
       var $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0;
       var $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0;
       var $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0;
       var $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0;
       var $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0;
       var $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0;
       var $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0;
       var $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0;
       var $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $adjust$0 = 0, $adjust$0$ = 0, $data$0 = 0, $data$1 = 0, $data$10 = 0, $data$11 = 0, $data$12 = 0, $data$13 = 0, $data$14 = 0;
       var $data$15 = 0, $data$16 = 0, $data$18 = 0, $data$19 = 0, $data$2 = 0, $data$3 = 0, $data$4 = 0, $data$5 = 0, $data$6 = 0, $data$7 = 0, $data$8 = 0, $data$9 = 0, $data269$0 = 0, $data269$1 = 0, $flags$0$be = 0, $flags$025 = 0, $flags$053 = 0, $flags$1 = 0, $flags$10 = 0, $flags$11 = 0;
       var $flags$2 = 0, $flags$3 = 0, $flags$4 = 0, $flags$6 = 0, $flags$8 = 0, $flags$9 = 0, $inc$0 = 0, $inc59$0 = 0, $inc62$0 = 0, $inc65$0 = 0, $ix$0$be = 0, $ix$033 = 0, $ix$074 = 0, $ix$1 = 0, $ix$2 = 0, $ixy$0 = 0, $ixy$1 = 0, $ixy$1$ix$0 = 0, $ixy$2 = 0, $ixy$2$ix$0 = 0;
       var $ixy$3 = 0, $ixy$3$ix$0 = 0, $iy$0$be = 0, $iy$0$ixy$1 = 0, $iy$0$ixy$2 = 0, $iy$0$ixy$3 = 0, $iy$029 = 0, $iy$059 = 0, $iy$1 = 0, $iy$2 = 0, $opcode$0 = 0, $or$cond = 0, $or$cond14 = 0, $or$cond16 = 0, $or$cond17 = 0, $or$cond52 = 0, $pc$0 = 0, $pc$1$be = 0, $pc$10 = 0, $pc$11 = 0;
       var $pc$12 = 0, $pc$13 = 0, $pc$14 = 0, $pc$141 = 0, $pc$15 = 0, $pc$16 = 0, $pc$17 = 0, $pc$18 = 0, $pc$19 = 0, $pc$2 = 0, $pc$20 = 0, $pc$21 = 0, $pc$22 = 0, $pc$23 = 0, $pc$3 = 0, $pc$4 = 0, $pc$5 = 0, $pc$6 = 0, $pc$7 = 0, $pc$8 = 0;
       var $pc$9 = 0, $s = 0, $s_time$0 = 0, $s_time$1$be = 0, $s_time$10 = 0, $s_time$11 = 0, $s_time$12 = 0, $s_time$13 = 0, $s_time$14 = 0, $s_time$15 = 0, $s_time$16 = 0, $s_time$17 = 0, $s_time$18 = 0, $s_time$19 = 0, $s_time$2 = 0, $s_time$20 = 0, $s_time$21 = 0, $s_time$22 = 0, $s_time$3 = 0, $s_time$4 = 0;
       var $s_time$5 = 0, $s_time$6 = 0, $s_time$7 = 0, $s_time$8 = 0, $s_time$9 = 0, $sp$0$be = 0, $sp$037 = 0, $sp$089 = 0, $sp$1 = 0, $temp45$0 = 0, $temp47$0 = 0, $temp50$0 = 0, $temp70$0 = 0, $tmpcast = 0, $warning$0$off0$be = 0, $warning$0$off0107 = 0, $warning$0$off048 = 0, $warning$1$off0 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       STACKTOP = STACKTOP + 8|0;
       $s = sp;
       $tmpcast = $s;
       $1 = STACKTOP; STACKTOP = STACKTOP + 8|0;
       __ZN6Ay_Cpu12set_end_timeEl($this,$end_time);
       $2 = (($this) + 524|0);
       $3 = $2;
       $4 = $3;
       $5 = $4;
       $6 = HEAP32[$5>>2]|0;
       $7 = (($4) + 4)|0;
       $8 = $7;
       $9 = HEAP32[$8>>2]|0;
       $10 = $s;
       $11 = $10;
       HEAP32[$11>>2] = $6;
       $12 = (($10) + 4)|0;
       $13 = $12;
       HEAP32[$13>>2] = $9;
       $14 = (($this) + 520|0);
       HEAP32[$14>>2] = $tmpcast;
       $15 = $1;
       $16 = (($this) + 540|0);
       $17 = $16;
       $18 = $16;
       $19 = $18;
       $20 = $19;
       $21 = HEAPU8[$20]|(HEAPU8[$20+1|0]<<8)|(HEAPU8[$20+2|0]<<16)|(HEAPU8[$20+3|0]<<24);
       $22 = (($19) + 4)|0;
       $23 = $22;
       $24 = HEAPU8[$23]|(HEAPU8[$23+1|0]<<8)|(HEAPU8[$23+2|0]<<16)|(HEAPU8[$23+3|0]<<24);
       $25 = $1;
       $26 = $25;
       HEAP32[$26>>2] = $21;
       $27 = (($25) + 4)|0;
       $28 = $27;
       HEAP32[$28>>2] = $24;
       $29 = (($tmpcast) + 4|0);
       $30 = HEAP32[$29>>2]|0;
       $31 = (($this) + 512|0);
       $32 = HEAP32[$31>>2]|0;
       $33 = (($this) + 532|0);
       $34 = HEAP16[$33>>1]|0;
       $35 = $34&65535;
       $36 = (($this) + 534|0);
       $37 = HEAP16[$36>>1]|0;
       $38 = $37&65535;
       $39 = (($this) + 536|0);
       $40 = HEAP16[$39>>1]|0;
       $41 = $40&65535;
       $42 = (($this) + 538|0);
       $43 = HEAP16[$42>>1]|0;
       $44 = $43&65535;
       $45 = (($17) + 7|0);
       $46 = HEAP8[$45]|0;
       $47 = $46&255;
       $48 = (($32) + ($35)|0);
       $49 = HEAP8[$48]|0;
       $50 = $49&255;
       $51 = (35416 + ($50)|0);
       $52 = HEAP8[$51]|0;
       $53 = $52&255;
       $54 = (($53) + ($30))|0;
       $55 = ($54|0)<(0);
       $56 = ($54|0)<($53|0);
       $or$cond52 = $55 | $56;
       if (!($or$cond52)) {
        $flags$025 = $47;$ix$033 = $41;$iy$029 = $44;$pc$141 = $35;$s_time$22 = $30;$sp$037 = $38;$warning$0$off048 = 0;
        HEAP32[$29>>2] = $s_time$22;
        $1559 = $flags$025&255;
        $1560 = (($15) + 7|0);
        HEAP8[$1560] = $1559;
        $1561 = $ix$033&65535;
        HEAP16[$39>>1] = $1561;
        $1562 = $iy$029&65535;
        HEAP16[$42>>1] = $1562;
        $1563 = $sp$037&65535;
        HEAP16[$36>>1] = $1563;
        $1564 = $pc$141&65535;
        HEAP16[$33>>1] = $1564;
        $1565 = $1;
        $1566 = $1565;
        $1567 = HEAP32[$1566>>2]|0;
        $1568 = (($1565) + 4)|0;
        $1569 = $1568;
        $1570 = HEAP32[$1569>>2]|0;
        $1571 = $18;
        $1572 = $1571;
        HEAP8[$1572]=$1567&255;HEAP8[$1572+1|0]=($1567>>8)&255;HEAP8[$1572+2|0]=($1567>>16)&255;HEAP8[$1572+3|0]=$1567>>24;
        $1573 = (($1571) + 4)|0;
        $1574 = $1573;
        HEAP8[$1574]=$1570&255;HEAP8[$1574+1|0]=($1570>>8)&255;HEAP8[$1574+2|0]=($1570>>16)&255;HEAP8[$1574+3|0]=$1570>>24;
        $1575 = $s;
        $1576 = $1575;
        $1577 = HEAP32[$1576>>2]|0;
        $1578 = (($1575) + 4)|0;
        $1579 = $1578;
        $1580 = HEAP32[$1579>>2]|0;
        $1581 = $3;
        $1582 = $1581;
        HEAP32[$1582>>2] = $1577;
        $1583 = (($1581) + 4)|0;
        $1584 = $1583;
        HEAP32[$1584>>2] = $1580;
        HEAP32[$14>>2] = $2;
        STACKTOP = sp;return ($warning$0$off048|0);
       }
       $57 = (($this) + 548|0);
       $58 = $57;
       $59 = (($this) + 554|0);
       $60 = $59;
       $61 = (($15) + 6|0);
       $62 = (($58) + 7|0);
       $63 = $s;
       $64 = (($15) + 6|0);
       $65 = (($15) + 4|0);
       $66 = (($15) + 6|0);
       $67 = (($15) + 6|0);
       $68 = (($15) + 1|0);
       $69 = $1;
       $70 = (($69) + 4|0);
       $71 = (($15) + 6|0);
       $72 = (($1) + -24|0);
       $73 = $72;
       $74 = (($15) + 6|0);
       $75 = (($1) + -24|0);
       $76 = $75;
       $77 = $1;
       $78 = (($77) + 4|0);
       $79 = (($15) + 6|0);
       $80 = $1;
       $81 = $1;
       $82 = (($81) + 4|0);
       $83 = (($15) + 6|0);
       $84 = (($1) + -184|0);
       $85 = $84;
       $86 = $1;
       $87 = (($86) + 4|0);
       $88 = $1;
       $89 = (($15) + 6|0);
       $90 = $1;
       $91 = (($90) + 4|0);
       $92 = $1;
       $93 = $1;
       $94 = (($93) + 4|0);
       $95 = $1;
       $96 = $1;
       $97 = $1;
       $98 = $1;
       $99 = (($98) + 4|0);
       $100 = (($15) + 6|0);
       $101 = (($1) + -160|0);
       $102 = $101;
       $103 = $1;
       $104 = (($103) + 4|0);
       $105 = (($15) + 6|0);
       $106 = (($1) + -176|0);
       $107 = $106;
       $108 = $1;
       $109 = (($108) + 4|0);
       $110 = (($15) + 6|0);
       $111 = (($1) + -168|0);
       $112 = $111;
       $113 = (($1) + -112|0);
       $114 = $113;
       $115 = $1;
       $116 = (($115) + 4|0);
       $117 = $1;
       $118 = $1;
       $119 = $1;
       $120 = (($119) + 4|0);
       $121 = $1;
       $122 = (($121) + 4|0);
       $123 = (($1) + -8|0);
       $124 = $123;
       $125 = $1;
       $126 = $1;
       $127 = (($126) + 4|0);
       $128 = (($15) + 6|0);
       $129 = $1;
       $130 = (($129) + 4|0);
       $131 = (($15) + 6|0);
       $132 = $1;
       $133 = $1;
       $134 = (($15) + 6|0);
       $135 = $1;
       $136 = (($135) + 4|0);
       $137 = (($15) + 6|0);
       $138 = (($15) + 6|0);
       $139 = (($15) + 6|0);
       $140 = (($15) + 6|0);
       $141 = (($15) + 6|0);
       $142 = (($15) + 6|0);
       $143 = (($15) + 6|0);
       $144 = (($15) + 6|0);
       $145 = $1;
       $146 = (($145) + 4|0);
       $147 = $1;
       $148 = (($147) + 4|0);
       $149 = (($147) + 2|0);
       $150 = (($this) + 548|0);
       $151 = $1;
       $152 = $1;
       $153 = (($this) + 550|0);
       $154 = (($151) + 2|0);
       $155 = (($this) + 552|0);
       $156 = (($151) + 4|0);
       $157 = (($this) + 556|0);
       $158 = (($this) + 557|0);
       $159 = (($this) + 556|0);
       $160 = (($this) + 557|0);
       $161 = $1;
       $162 = (($161) + 4|0);
       $163 = $1;
       $164 = $1;
       $165 = (($164) + 4|0);
       $166 = (($1) + -16|0);
       $167 = $166;
       $168 = $1;
       $169 = (($168) + 4|0);
       $170 = (($1) + -32|0);
       $171 = $170;
       $172 = $1;
       $173 = (($172) + 4|0);
       $174 = (($1) + -48|0);
       $175 = $174;
       $176 = $1;
       $177 = (($176) + 4|0);
       $178 = (($1) + -8|0);
       $179 = $178;
       $180 = $1;
       $181 = (($180) + 4|0);
       $182 = (($1) + -24|0);
       $183 = $182;
       $184 = $1;
       $185 = (($184) + 4|0);
       $186 = (($1) + -40|0);
       $187 = $186;
       $188 = $1;
       $189 = (($188) + 4|0);
       $190 = (($1) + -56|0);
       $191 = $190;
       $192 = $1;
       $193 = (($192) + 4|0);
       $194 = $1;
       $195 = $1;
       $196 = (($195) + 4|0);
       $197 = $1;
       $198 = $1;
       $199 = $1;
       $200 = (($199) + 4|0);
       $201 = $1;
       $202 = $1;
       $203 = (($1) + -8|0);
       $204 = $203;
       $205 = (($15) + 7|0);
       $206 = $s;
       $207 = $1;
       $208 = (($1) + -8|0);
       $209 = $208;
       $210 = (($1) + -8|0);
       $211 = $210;
       $212 = $1;
       $213 = $1;
       $214 = (($213) + 4|0);
       $215 = (($15) + 6|0);
       $216 = $1;
       $217 = (($216) + 4|0);
       $218 = (($15) + 6|0);
       $219 = (($15) + 6|0);
       $220 = $1;
       $221 = (($220) + 4|0);
       $222 = (($15) + 6|0);
       $223 = $1;
       $224 = $1;
       $225 = (($224) + 4|0);
       $226 = (($224) + 2|0);
       $227 = (($15) + 6|0);
       $228 = $1;
       $229 = $1;
       $230 = (($229) + 4|0);
       $231 = (($15) + 1|0);
       $232 = $s;
       $233 = $1;
       $234 = $1;
       $235 = (($234) + 4|0);
       $236 = $1;
       $237 = (($15) + 1|0);
       $238 = (($15) + 6|0);
       $239 = (($this) + 559|0);
       $240 = (($15) + 6|0);
       $241 = (($this) + 558|0);
       $242 = (($this) + 559|0);
       $243 = (($15) + 6|0);
       $244 = (($15) + 6|0);
       $245 = (($this) + 557|0);
       $246 = (($this) + 558|0);
       $247 = (($15) + 6|0);
       $248 = (($this) + 557|0);
       $249 = (($this) + 556|0);
       $250 = (($this) + 560|0);
       $251 = (($this) + 560|0);
       $252 = (($this) + 560|0);
       $253 = $1;
       $254 = (($1) + -112|0);
       $255 = $254;
       $256 = (($1) + -8|0);
       $257 = $256;
       $258 = (($1) + -8|0);
       $259 = $258;
       $260 = (($1) + -8|0);
       $261 = $260;
       $262 = (($1) + -96|0);
       $263 = $262;
       $264 = (($1) + -104|0);
       $265 = $264;
       $$in = $35;$278 = $54;$279 = $50;$280 = $49;$flags$053 = $47;$ix$074 = $41;$iy$059 = $44;$sp$089 = $38;$warning$0$off0107 = 0;
       L4: while(1) {
        $281 = (($$in) + 1)|0;
        $282 = (($32) + ($281)|0);
        $283 = HEAP8[$282]|0;
        $284 = $283&255;
        L6: do {
         switch ($279|0) {
         case 127: case 109: case 100: case 91: case 82: case 73: case 64: case 0:  {
          $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $281;$s_time$1$be = $278;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
          break;
         }
         case 8:  {
          $285 = HEAP8[$60]|0;
          $286 = HEAP8[$61]|0;
          HEAP8[$60] = $286;
          HEAP8[$61] = $285;
          $287 = HEAP8[$62]|0;
          $288 = $287&255;
          $289 = $flags$053&255;
          HEAP8[$62] = $289;
          $flags$0$be = $288;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $281;$s_time$1$be = $278;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
          break;
         }
         case 211:  {
          $290 = (($$in) + 2)|0;
          $291 = HEAP32[$63>>2]|0;
          $292 = (($291) + ($278))|0;
          $293 = HEAP8[$64]|0;
          $294 = $293&255;
          $295 = $294 << 8;
          $296 = $295 | $284;
          __Z10ay_cpu_outP6Ay_Cpulji($this,$292,$296,$294);
          $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $290;$s_time$1$be = $278;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
          break;
         }
         case 46:  {
          $297 = (($$in) + 2)|0;
          HEAP8[$65] = $283;
          $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $297;$s_time$1$be = $278;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
          break;
         }
         case 62:  {
          $298 = (($$in) + 2)|0;
          HEAP8[$66] = $283;
          $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $298;$s_time$1$be = $278;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
          break;
         }
         case 58:  {
          $299 = (__Z8get_le16PKv($282)|0);
          $300 = (($$in) + 3)|0;
          $301 = (($32) + ($299)|0);
          $302 = HEAP8[$301]|0;
          HEAP8[$67] = $302;
          $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $300;$s_time$1$be = $278;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
          break;
         }
         case 32:  {
          $303 = (($$in) + 2)|0;
          $304 = $flags$053 & 64;
          $305 = ($304|0)==(0);
          if (!($305)) {
           $pc$0 = $303;
           label = 3;
           break L6;
          }
          $306 = $283 << 24 >> 24;
          $307 = (($306) + ($303))|0;
          $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $307;$s_time$1$be = $278;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
          break;
         }
         case 40:  {
          $308 = (($$in) + 2)|0;
          $309 = $flags$053 & 64;
          $310 = ($309|0)==(0);
          if ($310) {
           $pc$0 = $308;
           label = 3;
           break L6;
          }
          $311 = $283 << 24 >> 24;
          $312 = (($311) + ($308))|0;
          $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $312;$s_time$1$be = $278;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
          break;
         }
         case 48:  {
          $313 = (($$in) + 2)|0;
          $314 = $flags$053 & 1;
          $315 = ($314|0)==(0);
          if (!($315)) {
           $pc$0 = $313;
           label = 3;
           break L6;
          }
          $316 = $283 << 24 >> 24;
          $317 = (($316) + ($313))|0;
          $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $317;$s_time$1$be = $278;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
          break;
         }
         case 56:  {
          $318 = (($$in) + 2)|0;
          $319 = $flags$053 & 1;
          $320 = ($319|0)==(0);
          if ($320) {
           $pc$0 = $318;
           label = 3;
           break L6;
          }
          $321 = $283 << 24 >> 24;
          $322 = (($321) + ($318))|0;
          $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $322;$s_time$1$be = $278;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
          break;
         }
         case 24:  {
          $323 = $283 << 24 >> 24;
          $324 = (($$in) + 2)|0;
          $325 = (($324) + ($323))|0;
          $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $325;$s_time$1$be = $278;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
          break;
         }
         case 16:  {
          $326 = HEAP8[$68]|0;
          $327 = $326&255;
          $328 = (($327) + -1)|0;
          $329 = $328&255;
          HEAP8[$68] = $329;
          $330 = (($$in) + 2)|0;
          $331 = ($328|0)==(0);
          if ($331) {
           $pc$0 = $330;
           label = 3;
           break L6;
          }
          $332 = $283 << 24 >> 24;
          $333 = (($332) + ($330))|0;
          $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $333;$s_time$1$be = $278;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
          break;
         }
         case 194:  {
          $334 = $flags$053 & 64;
          $335 = ($334|0)==(0);
          if (!($335)) {
           $s_time$0 = $278;
           label = 6;
           break L6;
          }
          $336 = (__Z8get_le16PKv($282)|0);
          $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $336;$s_time$1$be = $278;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
          break;
         }
         case 202:  {
          $337 = $flags$053 & 64;
          $338 = ($337|0)==(0);
          if ($338) {
           $s_time$0 = $278;
           label = 6;
           break L6;
          }
          $339 = (__Z8get_le16PKv($282)|0);
          $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $339;$s_time$1$be = $278;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
          break;
         }
         case 210:  {
          $340 = $flags$053 & 1;
          $341 = ($340|0)==(0);
          if (!($341)) {
           $s_time$0 = $278;
           label = 6;
           break L6;
          }
          $342 = (__Z8get_le16PKv($282)|0);
          $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $342;$s_time$1$be = $278;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
          break;
         }
         case 218:  {
          $343 = $flags$053 & 1;
          $344 = ($343|0)==(0);
          if ($344) {
           $s_time$0 = $278;
           label = 6;
           break L6;
          }
          $345 = (__Z8get_le16PKv($282)|0);
          $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $345;$s_time$1$be = $278;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
          break;
         }
         case 226:  {
          $346 = $flags$053 & 4;
          $347 = ($346|0)==(0);
          if (!($347)) {
           $s_time$0 = $278;
           label = 6;
           break L6;
          }
          $348 = (__Z8get_le16PKv($282)|0);
          $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $348;$s_time$1$be = $278;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
          break;
         }
         case 234:  {
          $349 = $flags$053 & 4;
          $350 = ($349|0)==(0);
          if ($350) {
           $s_time$0 = $278;
           label = 6;
           break L6;
          }
          $351 = (__Z8get_le16PKv($282)|0);
          $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $351;$s_time$1$be = $278;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
          break;
         }
         case 242:  {
          $352 = $flags$053 & 128;
          $353 = ($352|0)==(0);
          if (!($353)) {
           $s_time$0 = $278;
           label = 6;
           break L6;
          }
          $354 = (__Z8get_le16PKv($282)|0);
          $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $354;$s_time$1$be = $278;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
          break;
         }
         case 250:  {
          $355 = $flags$053 & 128;
          $356 = ($355|0)==(0);
          if ($356) {
           $s_time$0 = $278;
           label = 6;
           break L6;
          }
          $357 = (__Z8get_le16PKv($282)|0);
          $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $357;$s_time$1$be = $278;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
          break;
         }
         case 195:  {
          $358 = (__Z8get_le16PKv($282)|0);
          $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $358;$s_time$1$be = $278;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
          break;
         }
         case 233:  {
          $359 = HEAP16[$70>>1]|0;
          $360 = $359&65535;
          $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $360;$s_time$1$be = $278;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
          break;
         }
         case 192:  {
          $361 = $flags$053 & 64;
          $362 = ($361|0)==(0);
          if ($362) {
           $s_time$2 = $278;
           label = 58;
           break L6;
          }
          $363 = (($278) + -6)|0;
          $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $281;$s_time$1$be = $363;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
          break;
         }
         case 200:  {
          $364 = $flags$053 & 64;
          $365 = ($364|0)==(0);
          if (!($365)) {
           $s_time$2 = $278;
           label = 58;
           break L6;
          }
          $366 = (($278) + -6)|0;
          $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $281;$s_time$1$be = $366;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
          break;
         }
         case 208:  {
          $367 = $flags$053 & 1;
          $368 = ($367|0)==(0);
          if ($368) {
           $s_time$2 = $278;
           label = 58;
           break L6;
          }
          $369 = (($278) + -6)|0;
          $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $281;$s_time$1$be = $369;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
          break;
         }
         case 216:  {
          $370 = $flags$053 & 1;
          $371 = ($370|0)==(0);
          if (!($371)) {
           $s_time$2 = $278;
           label = 58;
           break L6;
          }
          $372 = (($278) + -6)|0;
          $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $281;$s_time$1$be = $372;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
          break;
         }
         case 224:  {
          $373 = $flags$053 & 4;
          $374 = ($373|0)==(0);
          if ($374) {
           $s_time$2 = $278;
           label = 58;
           break L6;
          }
          $375 = (($278) + -6)|0;
          $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $281;$s_time$1$be = $375;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
          break;
         }
         case 232:  {
          $376 = $flags$053 & 4;
          $377 = ($376|0)==(0);
          if (!($377)) {
           $s_time$2 = $278;
           label = 58;
           break L6;
          }
          $378 = (($278) + -6)|0;
          $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $281;$s_time$1$be = $378;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
          break;
         }
         case 240:  {
          $379 = $flags$053 & 128;
          $380 = ($379|0)==(0);
          if ($380) {
           $s_time$2 = $278;
           label = 58;
           break L6;
          }
          $381 = (($278) + -6)|0;
          $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $281;$s_time$1$be = $381;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
          break;
         }
         case 248:  {
          $382 = $flags$053 & 128;
          $383 = ($382|0)==(0);
          if (!($383)) {
           $s_time$2 = $278;
           label = 58;
           break L6;
          }
          $384 = (($278) + -6)|0;
          $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $281;$s_time$1$be = $384;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
          break;
         }
         case 201:  {
          $s_time$2 = $278;
          label = 58;
          break;
         }
         case 196:  {
          $389 = $flags$053 & 64;
          $390 = ($389|0)==(0);
          if ($390) {
           label = 67;
          } else {
           label = 5;
          }
          break;
         }
         case 204:  {
          $391 = $flags$053 & 64;
          $392 = ($391|0)==(0);
          if ($392) {
           label = 5;
          } else {
           label = 67;
          }
          break;
         }
         case 212:  {
          $393 = $flags$053 & 1;
          $394 = ($393|0)==(0);
          if ($394) {
           label = 67;
          } else {
           label = 5;
          }
          break;
         }
         case 220:  {
          $395 = $flags$053 & 1;
          $396 = ($395|0)==(0);
          if ($396) {
           label = 5;
          } else {
           label = 67;
          }
          break;
         }
         case 228:  {
          $397 = $flags$053 & 4;
          $398 = ($397|0)==(0);
          if ($398) {
           label = 67;
          } else {
           label = 5;
          }
          break;
         }
         case 236:  {
          $399 = $flags$053 & 4;
          $400 = ($399|0)==(0);
          if ($400) {
           label = 5;
          } else {
           label = 67;
          }
          break;
         }
         case 244:  {
          $401 = $flags$053 & 128;
          $402 = ($401|0)==(0);
          if ($402) {
           label = 67;
          } else {
           label = 5;
          }
          break;
         }
         case 252:  {
          $403 = $flags$053 & 128;
          $404 = ($403|0)==(0);
          if ($404) {
           label = 5;
          } else {
           label = 67;
          }
          break;
         }
         case 205:  {
          label = 67;
          break;
         }
         case 255:  {
          $410 = ($$in>>>0)>(65535);
          if (!($410)) {
           label = 70;
           break L6;
          }
          $411 = $$in & 65535;
          $412 = (($278) + -11)|0;
          $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $411;$s_time$1$be = $412;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
          break;
         }
         case 247: case 239: case 231: case 223: case 215: case 207: case 199:  {
          label = 70;
          break;
         }
         case 245:  {
          $414 = HEAP8[$71]|0;
          $415 = $414&255;
          $416 = $415 << 8;
          $417 = (($416) + ($flags$053))|0;
          $data$0 = $417;$pc$2 = $281;$s_time$3 = $278;
          label = 73;
          break;
         }
         case 229: case 213: case 197:  {
          $418 = $279 >>> 3;
          $419 = (($73) + ($418)|0);
          $420 = $419;
          $421 = HEAP16[$420>>1]|0;
          $422 = $421&65535;
          $data$0 = $422;$pc$2 = $281;$s_time$3 = $278;
          label = 73;
          break;
         }
         case 241:  {
          $426 = (($32) + ($sp$089)|0);
          $427 = HEAP8[$426]|0;
          $428 = $427&255;
          $429 = (($sp$089) + 1)|0;
          $430 = (($32) + ($429)|0);
          $431 = HEAP8[$430]|0;
          HEAP8[$74] = $431;
          $432 = (($sp$089) + 2)|0;
          $433 = $432 & 65535;
          $flags$0$be = $428;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $281;$s_time$1$be = $278;$sp$0$be = $433;$warning$0$off0$be = $warning$0$off0107;
          break;
         }
         case 134: case 150:  {
          $442 = $flags$053 & -2;
          $flags$1 = $442;
          label = 77;
          break;
         }
         case 225: case 209: case 193:  {
          $434 = (($32) + ($sp$089)|0);
          $435 = (__Z8get_le16PKv($434)|0);
          $436 = $435&65535;
          $437 = $279 >>> 3;
          $438 = (($76) + ($437)|0);
          $439 = $438;
          HEAP16[$439>>1] = $436;
          $440 = (($sp$089) + 2)|0;
          $441 = $440 & 65535;
          $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $281;$s_time$1$be = $278;$sp$0$be = $441;$warning$0$off0$be = $warning$0$off0107;
          break;
         }
         case 142: case 158:  {
          $flags$1 = $flags$053;
          label = 77;
          break;
         }
         case 198: case 214:  {
          $448 = $flags$053 & -2;
          $flags$2 = $448;
          label = 79;
          break;
         }
         case 206: case 222:  {
          $flags$2 = $flags$053;
          label = 79;
          break;
         }
         case 135: case 133: case 132: case 131: case 130: case 129: case 128: case 151: case 149: case 148: case 147: case 146: case 145: case 144:  {
          $450 = $flags$053 & -2;
          $flags$3 = $450;
          label = 81;
          break;
         }
         case 143: case 141: case 140: case 139: case 138: case 137: case 136: case 159: case 157: case 156: case 155: case 154: case 153: case 152:  {
          $flags$3 = $flags$053;
          label = 81;
          break;
         }
         case 190:  {
          $480 = HEAP16[$82>>1]|0;
          $481 = $480&65535;
          $482 = (($32) + ($481)|0);
          $483 = HEAP8[$482]|0;
          $484 = $483&255;
          $data$2 = $484;$pc$4 = $281;$s_time$5 = $278;
          label = 86;
          break;
         }
         case 254:  {
          $485 = (($$in) + 2)|0;
          $data$2 = $284;$pc$4 = $485;$s_time$5 = $278;
          label = 86;
          break;
         }
         case 191: case 189: case 188: case 187: case 186: case 185: case 184:  {
          $486 = $279 ^ 1;
          $487 = (($85) + ($486)|0);
          $488 = HEAP8[$487]|0;
          $489 = $488&255;
          $data$2 = $489;$pc$4 = $281;$s_time$5 = $278;
          label = 86;
          break;
         }
         case 41: case 25: case 9:  {
          $508 = $279 >>> 3;
          $$sum7 = (($508) + -1)|0;
          $509 = (($88) + ($$sum7)|0);
          $510 = $509;
          $511 = HEAP16[$510>>1]|0;
          $512 = $511&65535;
          $data$3 = $512;
          label = 88;
          break;
         }
         case 57:  {
          $data$3 = $sp$089;
          label = 88;
          break;
         }
         case 39:  {
          $528 = HEAP8[$89]|0;
          $529 = $528&255;
          $530 = ($528&255)>(153);
          $531 = $530&1;
          $$flags$0 = $531 | $flags$053;
          $532 = $$flags$0 & 1;
          $533 = (0 - ($532))|0;
          $534 = $533 & 96;
          $535 = $flags$053 & 16;
          $536 = ($535|0)==(0);
          if ($536) {
           $537 = $529 & 14;
           $538 = ($537>>>0)>(9);
           if ($538) {
            label = 91;
           } else {
            $adjust$0 = $534;
           }
          } else {
           label = 91;
          }
          if ((label|0) == 91) {
           label = 0;
           $539 = $534 | 6;
           $adjust$0 = $539;
          }
          $540 = $flags$053 & 2;
          $541 = ($540|0)==(0);
          $542 = (0 - ($adjust$0))|0;
          $adjust$0$ = $541 ? $adjust$0 : $542;
          $543 = (($adjust$0$) + ($529))|0;
          $544 = $$flags$0 & 3;
          $545 = HEAP8[$89]|0;
          $546 = $545&255;
          $547 = $546 ^ $543;
          $548 = $547 & 16;
          $549 = $543&255;
          $550 = $543 & 255;
          $551 = (($this) + ($550)|0);
          $552 = HEAP8[$551]|0;
          $553 = $552&255;
          $554 = $553 | $544;
          $555 = $554 | $548;
          HEAP8[$89] = $549;
          $flags$0$be = $555;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $281;$s_time$1$be = $278;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
          break;
         }
         case 52:  {
          $556 = HEAP16[$91>>1]|0;
          $557 = $556&65535;
          $558 = (($32) + ($557)|0);
          $559 = HEAP8[$558]|0;
          $560 = $559&255;
          $561 = (($560) + 1)|0;
          $562 = $561&255;
          HEAP8[$558] = $562;
          $data$4 = $561;$ix$1 = $ix$074;$iy$1 = $iy$059;$pc$5 = $281;$s_time$6 = $278;
          label = 95;
          break;
         }
         case 60: case 44: case 36: case 28: case 20: case 12: case 4:  {
          $563 = $279 >>> 3;
          $564 = $563 ^ 1;
          $565 = (($92) + ($564)|0);
          $566 = HEAP8[$565]|0;
          $567 = (($566) + 1)<<24>>24;
          HEAP8[$565] = $567;
          $568 = $567&255;
          $data$4 = $568;$ix$1 = $ix$074;$iy$1 = $iy$059;$pc$5 = $281;$s_time$6 = $278;
          label = 95;
          break;
         }
         case 53:  {
          $582 = HEAP16[$94>>1]|0;
          $583 = $582&65535;
          $584 = (($32) + ($583)|0);
          $585 = HEAP8[$584]|0;
          $586 = $585&255;
          $587 = (($586) + -1)|0;
          $588 = $587&255;
          HEAP8[$584] = $588;
          $data$5 = $587;$ix$2 = $ix$074;$iy$2 = $iy$059;$pc$6 = $281;$s_time$7 = $278;
          label = 98;
          break;
         }
         case 61: case 45: case 37: case 29: case 21: case 13: case 5:  {
          $589 = $279 >>> 3;
          $590 = $589 ^ 1;
          $591 = (($95) + ($590)|0);
          $592 = HEAP8[$591]|0;
          $593 = (($592) + -1)<<24>>24;
          HEAP8[$591] = $593;
          $594 = $593&255;
          $data$5 = $594;$ix$2 = $ix$074;$iy$2 = $iy$059;$pc$6 = $281;$s_time$7 = $278;
          label = 98;
          break;
         }
         case 35: case 19: case 3:  {
          $607 = $279 >>> 3;
          $608 = (($96) + ($607)|0);
          $609 = $608;
          $610 = HEAP16[$609>>1]|0;
          $611 = (($610) + 1)<<16>>16;
          HEAP16[$609>>1] = $611;
          $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $281;$s_time$1$be = $278;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
          break;
         }
         case 51:  {
          $612 = (($sp$089) + 1)|0;
          $613 = $612 & 65535;
          $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $281;$s_time$1$be = $278;$sp$0$be = $613;$warning$0$off0$be = $warning$0$off0107;
          break;
         }
         case 43: case 27: case 11:  {
          $614 = $279 >>> 3;
          $$sum6 = (($614) + -1)|0;
          $615 = (($97) + ($$sum6)|0);
          $616 = $615;
          $617 = HEAP16[$616>>1]|0;
          $618 = (($617) + -1)<<16>>16;
          HEAP16[$616>>1] = $618;
          $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $281;$s_time$1$be = $278;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
          break;
         }
         case 59:  {
          $619 = (($sp$089) + 65535)|0;
          $620 = $619 & 65535;
          $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $281;$s_time$1$be = $278;$sp$0$be = $620;$warning$0$off0$be = $warning$0$off0107;
          break;
         }
         case 166:  {
          $621 = HEAP16[$99>>1]|0;
          $622 = $621&65535;
          $623 = (($32) + ($622)|0);
          $624 = HEAP8[$623]|0;
          $625 = $624&255;
          $data$6 = $625;$pc$7 = $281;$s_time$8 = $278;
          label = 106;
          break;
         }
         case 230:  {
          $626 = (($$in) + 2)|0;
          $data$6 = $284;$pc$7 = $626;$s_time$8 = $278;
          label = 106;
          break;
         }
         case 167: case 165: case 164: case 163: case 162: case 161: case 160:  {
          $627 = $279 ^ 1;
          $628 = (($102) + ($627)|0);
          $629 = HEAP8[$628]|0;
          $630 = $629&255;
          $data$6 = $630;$pc$7 = $281;$s_time$8 = $278;
          label = 106;
          break;
         }
         case 182:  {
          $639 = HEAP16[$104>>1]|0;
          $640 = $639&65535;
          $641 = (($32) + ($640)|0);
          $642 = HEAP8[$641]|0;
          $643 = $642&255;
          $data$7 = $643;$pc$8 = $281;$s_time$9 = $278;
          label = 110;
          break;
         }
         case 246:  {
          $644 = (($$in) + 2)|0;
          $data$7 = $284;$pc$8 = $644;$s_time$9 = $278;
          label = 110;
          break;
         }
         case 183: case 181: case 180: case 179: case 178: case 177: case 176:  {
          $645 = $279 ^ 1;
          $646 = (($107) + ($645)|0);
          $647 = HEAP8[$646]|0;
          $648 = $647&255;
          $data$7 = $648;$pc$8 = $281;$s_time$9 = $278;
          label = 110;
          break;
         }
         case 174:  {
          $657 = HEAP16[$109>>1]|0;
          $658 = $657&65535;
          $659 = (($32) + ($658)|0);
          $660 = HEAP8[$659]|0;
          $661 = $660&255;
          $data$8 = $661;$pc$9 = $281;$s_time$10 = $278;
          label = 114;
          break;
         }
         case 238:  {
          $662 = (($$in) + 2)|0;
          $data$8 = $284;$pc$9 = $662;$s_time$10 = $278;
          label = 114;
          break;
         }
         case 175: case 173: case 172: case 171: case 170: case 169: case 168:  {
          $663 = $279 ^ 1;
          $664 = (($112) + ($663)|0);
          $665 = HEAP8[$664]|0;
          $666 = $665&255;
          $data$8 = $666;$pc$9 = $281;$s_time$10 = $278;
          label = 114;
          break;
         }
         case 119: case 117: case 116: case 115: case 114: case 113: case 112:  {
          $675 = $279 ^ 1;
          $676 = (($114) + ($675)|0);
          $677 = HEAP8[$676]|0;
          $678 = HEAP16[$116>>1]|0;
          $679 = $678&65535;
          $680 = (($32) + ($679)|0);
          HEAP8[$680] = $677;
          $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $281;$s_time$1$be = $278;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
          break;
         }
         case 125: case 124: case 123: case 122: case 121: case 120: case 111: case 108: case 107: case 106: case 105: case 104: case 103: case 101: case 99: case 98: case 97: case 96: case 95: case 93: case 92: case 90: case 89: case 88: case 87: case 85: case 84: case 83: case 81: case 80: case 79: case 77: case 76: case 75: case 74: case 72: case 71: case 69: case 68: case 67: case 66: case 65:  {
          $681 = $279 & 7;
          $682 = $681 ^ 1;
          $683 = (($117) + ($682)|0);
          $684 = HEAP8[$683]|0;
          $685 = $279 >>> 3;
          $686 = $685 & 7;
          $687 = $686 ^ 1;
          $688 = (($117) + ($687)|0);
          HEAP8[$688] = $684;
          $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $281;$s_time$1$be = $278;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
          break;
         }
         case 38: case 30: case 22: case 14: case 6:  {
          $689 = $279 >>> 3;
          $690 = $689 ^ 1;
          $691 = (($118) + ($690)|0);
          HEAP8[$691] = $283;
          $692 = (($$in) + 2)|0;
          $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $692;$s_time$1$be = $278;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
          break;
         }
         case 54:  {
          $693 = (($$in) + 2)|0;
          $694 = HEAP16[$120>>1]|0;
          $695 = $694&65535;
          $696 = (($32) + ($695)|0);
          HEAP8[$696] = $283;
          $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $693;$s_time$1$be = $278;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
          break;
         }
         case 126: case 110: case 102: case 94: case 86: case 78: case 70:  {
          $697 = HEAP16[$122>>1]|0;
          $698 = $697&65535;
          $699 = (($32) + ($698)|0);
          $700 = HEAP8[$699]|0;
          $701 = $279 >>> 3;
          $702 = $701 ^ 1;
          $703 = (($124) + ($702)|0);
          HEAP8[$703] = $700;
          $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $281;$s_time$1$be = $278;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
          break;
         }
         case 33: case 17: case 1:  {
          $704 = (__Z8get_le16PKv($282)|0);
          $705 = $704&65535;
          $706 = $279 >>> 3;
          $707 = (($125) + ($706)|0);
          $708 = $707;
          HEAP16[$708>>1] = $705;
          $709 = (($$in) + 3)|0;
          $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $709;$s_time$1$be = $278;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
          break;
         }
         case 49:  {
          $710 = (__Z8get_le16PKv($282)|0);
          $711 = (($$in) + 3)|0;
          $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $711;$s_time$1$be = $278;$sp$0$be = $710;$warning$0$off0$be = $warning$0$off0107;
          break;
         }
         case 42:  {
          $712 = (__Z8get_le16PKv($282)|0);
          $713 = (($$in) + 3)|0;
          $714 = (($32) + ($712)|0);
          $715 = (__Z8get_le16PKv($714)|0);
          $716 = $715&65535;
          HEAP16[$127>>1] = $716;
          $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $713;$s_time$1$be = $278;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
          break;
         }
         case 50:  {
          $717 = (__Z8get_le16PKv($282)|0);
          $718 = (($$in) + 3)|0;
          $719 = HEAP8[$128]|0;
          $720 = (($32) + ($717)|0);
          HEAP8[$720] = $719;
          $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $718;$s_time$1$be = $278;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
          break;
         }
         case 34:  {
          $721 = (__Z8get_le16PKv($282)|0);
          $722 = (($$in) + 3)|0;
          $723 = (($32) + ($721)|0);
          $724 = HEAP16[$130>>1]|0;
          $725 = $724&65535;
          __Z8set_le16Pvj($723,$725);
          $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $722;$s_time$1$be = $278;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
          break;
         }
         case 18: case 2:  {
          $726 = HEAP8[$131]|0;
          $727 = $279 >>> 3;
          $728 = (($132) + ($727)|0);
          $729 = $728;
          $730 = HEAP16[$729>>1]|0;
          $731 = $730&65535;
          $732 = (($32) + ($731)|0);
          HEAP8[$732] = $726;
          $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $281;$s_time$1$be = $278;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
          break;
         }
         case 26: case 10:  {
          $733 = $279 >>> 3;
          $$sum5 = (($733) + -1)|0;
          $734 = (($133) + ($$sum5)|0);
          $735 = $734;
          $736 = HEAP16[$735>>1]|0;
          $737 = $736&65535;
          $738 = (($32) + ($737)|0);
          $739 = HEAP8[$738]|0;
          HEAP8[$134] = $739;
          $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $281;$s_time$1$be = $278;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
          break;
         }
         case 249:  {
          $740 = HEAP16[$136>>1]|0;
          $741 = $740&65535;
          $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $281;$s_time$1$be = $278;$sp$0$be = $741;$warning$0$off0$be = $warning$0$off0107;
          break;
         }
         case 7:  {
          $742 = HEAP8[$137]|0;
          $743 = $742&255;
          $744 = $743 << 1;
          $745 = $743 >>> 7;
          $746 = $744 | $745;
          $747 = $flags$053 & 196;
          $748 = $746 & 41;
          $749 = $748 | $747;
          $750 = $746&255;
          HEAP8[$137] = $750;
          $flags$0$be = $749;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $281;$s_time$1$be = $278;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
          break;
         }
         case 15:  {
          $751 = HEAP8[$138]|0;
          $752 = $751&255;
          $753 = $flags$053 & 196;
          $754 = $752 & 1;
          $755 = $754 | $753;
          $756 = $752 << 7;
          $757 = $752 >>> 1;
          $758 = $756 | $757;
          $759 = $757 & 40;
          $760 = $755 | $759;
          $761 = $758&255;
          HEAP8[$138] = $761;
          $flags$0$be = $760;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $281;$s_time$1$be = $278;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
          break;
         }
         case 23:  {
          $762 = HEAP8[$139]|0;
          $763 = $762&255;
          $764 = $763 << 1;
          $765 = $flags$053 & 1;
          $766 = $764 | $765;
          $767 = $flags$053 & 196;
          $768 = $764 & 40;
          $769 = $763 >>> 7;
          $770 = $769 | $767;
          $771 = $770 | $768;
          $772 = $766&255;
          HEAP8[$139] = $772;
          $flags$0$be = $771;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $281;$s_time$1$be = $278;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
          break;
         }
         case 31:  {
          $773 = $flags$053 << 7;
          $774 = HEAP8[$140]|0;
          $775 = $774&255;
          $776 = $775 >>> 1;
          $777 = $776 | $773;
          $778 = $flags$053 & 196;
          $779 = $776 & 40;
          $780 = $775 & 1;
          $781 = $780 | $778;
          $782 = $781 | $779;
          $783 = $777&255;
          HEAP8[$140] = $783;
          $flags$0$be = $782;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $281;$s_time$1$be = $278;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
          break;
         }
         case 47:  {
          $784 = HEAP8[$141]|0;
          $785 = $784&255;
          $786 = $785 ^ -1;
          $787 = $flags$053 & 197;
          $788 = $786 & 40;
          $789 = $787 | $788;
          $790 = $789 | 18;
          $791 = $786&255;
          HEAP8[$141] = $791;
          $flags$0$be = $790;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $281;$s_time$1$be = $278;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
          break;
         }
         case 63:  {
          $792 = $flags$053 & 197;
          $793 = $flags$053 << 4;
          $794 = $793 & 16;
          $795 = $794 | $792;
          $796 = HEAP8[$142]|0;
          $797 = $796&255;
          $798 = $797 & 40;
          $799 = $795 | $798;
          $800 = $799 ^ 1;
          $flags$0$be = $800;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $281;$s_time$1$be = $278;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
          break;
         }
         case 55:  {
          $801 = $flags$053 & 196;
          $802 = HEAP8[$143]|0;
          $803 = $802&255;
          $804 = $803 & 40;
          $805 = $801 | $804;
          $806 = $805 | 1;
          $flags$0$be = $806;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $281;$s_time$1$be = $278;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
          break;
         }
         case 219:  {
          $807 = (($$in) + 2)|0;
          $808 = HEAP8[$144]|0;
          $809 = $808&255;
          $810 = $809 << 8;
          $811 = $810 | $284;
          $812 = (__Z9ay_cpu_inP6Ay_Cpuj($this,$811)|0);
          $813 = $812&255;
          HEAP8[$144] = $813;
          $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $807;$s_time$1$be = $278;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
          break;
         }
         case 227:  {
          $814 = (($32) + ($sp$089)|0);
          $815 = (__Z8get_le16PKv($814)|0);
          $816 = HEAP16[$146>>1]|0;
          $817 = $816&65535;
          __Z8set_le16Pvj($814,$817);
          $818 = $815&65535;
          HEAP16[$146>>1] = $818;
          $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $281;$s_time$1$be = $278;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
          break;
         }
         case 235:  {
          $819 = HEAP16[$148>>1]|0;
          $820 = HEAP16[$149>>1]|0;
          HEAP16[$148>>1] = $820;
          HEAP16[$149>>1] = $819;
          $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $281;$s_time$1$be = $278;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
          break;
         }
         case 243:  {
          HEAP8[$157] = 0;
          HEAP8[$158] = 0;
          $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $281;$s_time$1$be = $278;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
          break;
         }
         case 217:  {
          $821 = HEAP16[$150>>1]|0;
          $822 = HEAP16[$152>>1]|0;
          HEAP16[$150>>1] = $822;
          HEAP16[$152>>1] = $821;
          $823 = HEAP16[$153>>1]|0;
          $824 = HEAP16[$154>>1]|0;
          HEAP16[$153>>1] = $824;
          HEAP16[$154>>1] = $823;
          $825 = HEAP16[$155>>1]|0;
          $826 = HEAP16[$156>>1]|0;
          HEAP16[$155>>1] = $826;
          HEAP16[$156>>1] = $825;
          $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $281;$s_time$1$be = $278;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
          break;
         }
         case 251:  {
          HEAP8[$159] = 1;
          HEAP8[$160] = 1;
          $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $281;$s_time$1$be = $278;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
          break;
         }
         case 203:  {
          $827 = (($$in) + 2)|0;
          switch ($284|0) {
          case 6:  {
           $828 = (($278) + 7)|0;
           $829 = HEAP16[$162>>1]|0;
           $830 = $829&65535;
           $data$9 = $830;$pc$10 = $827;$s_time$11 = $828;
           label = 143;
           break L6;
           break;
          }
          case 7: case 5: case 4: case 3: case 2: case 1: case 0:  {
           $843 = $284 ^ 1;
           $844 = (($163) + ($843)|0);
           $845 = HEAP8[$844]|0;
           $846 = $845&255;
           $847 = $846 << 1;
           $848 = $847 & 254;
           $849 = $846 >>> 7;
           $850 = $848 | $849;
           $851 = (($this) + ($850)|0);
           $852 = HEAP8[$851]|0;
           $853 = $852&255;
           $854 = $853 | $849;
           $855 = $850&255;
           HEAP8[$844] = $855;
           $flags$0$be = $854;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $827;$s_time$1$be = $278;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
           break L6;
           break;
          }
          case 22:  {
           $856 = (($278) + 7)|0;
           $857 = HEAP16[$165>>1]|0;
           $858 = $857&65535;
           $data$10 = $858;$pc$11 = $827;$s_time$12 = $856;
           label = 146;
           break L6;
           break;
          }
          case 23: case 21: case 20: case 19: case 18: case 17: case 16:  {
           $869 = $284 ^ 1;
           $870 = (($167) + ($869)|0);
           $871 = HEAP8[$870]|0;
           $872 = $871&255;
           $873 = $872 << 1;
           $874 = $flags$053 & 1;
           $875 = $873 | $874;
           $876 = (($this) + ($875)|0);
           $877 = HEAP8[$876]|0;
           $878 = $877&255;
           $879 = $875&255;
           HEAP8[$870] = $879;
           $flags$0$be = $878;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $827;$s_time$1$be = $278;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
           break L6;
           break;
          }
          case 38:  {
           $880 = (($278) + 7)|0;
           $881 = HEAP16[$169>>1]|0;
           $882 = $881&65535;
           $data$11 = $882;$pc$12 = $827;$s_time$13 = $880;
           label = 149;
           break L6;
           break;
          }
          case 39: case 37: case 36: case 35: case 34: case 33: case 32:  {
           $891 = $284 ^ 1;
           $892 = (($171) + ($891)|0);
           $893 = HEAP8[$892]|0;
           $894 = $893&255;
           $895 = $894 << 1;
           $896 = (($this) + ($895)|0);
           $897 = HEAP8[$896]|0;
           $898 = $897&255;
           $899 = $895&255;
           HEAP8[$892] = $899;
           $flags$0$be = $898;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $827;$s_time$1$be = $278;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
           break L6;
           break;
          }
          case 54:  {
           $900 = (($278) + 7)|0;
           $901 = HEAP16[$173>>1]|0;
           $902 = $901&65535;
           $data$12 = $902;$pc$13 = $827;$s_time$14 = $900;
           label = 152;
           break L6;
           break;
          }
          case 55: case 53: case 52: case 51: case 50: case 49: case 48:  {
           $912 = $284 ^ 1;
           $913 = (($175) + ($912)|0);
           $914 = HEAP8[$913]|0;
           $915 = $914&255;
           $916 = $915 << 1;
           $917 = $916 | 1;
           $918 = (($this) + ($917)|0);
           $919 = HEAP8[$918]|0;
           $920 = $919&255;
           $921 = $917&255;
           HEAP8[$913] = $921;
           $flags$0$be = $920;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $827;$s_time$1$be = $278;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
           break L6;
           break;
          }
          case 14:  {
           $922 = (($278) + 7)|0;
           $923 = HEAP16[$177>>1]|0;
           $924 = $923&65535;
           $data$13 = $924;$pc$14 = $827;$s_time$15 = $922;
           label = 155;
           break L6;
           break;
          }
          case 15: case 13: case 12: case 11: case 10: case 9: case 8:  {
           $938 = $284 ^ 1;
           $939 = (($179) + ($938)|0);
           $940 = HEAP8[$939]|0;
           $941 = $940&255;
           $942 = $941 & 1;
           $943 = $941 << 7;
           $944 = $943 & 128;
           $945 = $941 >>> 1;
           $946 = $944 | $945;
           $947 = (($this) + ($946)|0);
           $948 = HEAP8[$947]|0;
           $949 = $948&255;
           $950 = $942 | $949;
           $951 = $946&255;
           HEAP8[$939] = $951;
           $flags$0$be = $950;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $827;$s_time$1$be = $278;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
           break L6;
           break;
          }
          case 30:  {
           $952 = (($278) + 7)|0;
           $953 = HEAP16[$181>>1]|0;
           $954 = $953&65535;
           $data$14 = $954;$pc$15 = $827;$s_time$16 = $952;
           label = 158;
           break L6;
           break;
          }
          case 31: case 29: case 28: case 27: case 26: case 25: case 24:  {
           $968 = $284 ^ 1;
           $969 = (($183) + ($968)|0);
           $970 = HEAP8[$969]|0;
           $971 = $970&255;
           $972 = $971 & 1;
           $973 = $flags$053 << 7;
           $974 = $973 & 128;
           $975 = $971 >>> 1;
           $976 = $975 | $974;
           $977 = (($this) + ($976)|0);
           $978 = HEAP8[$977]|0;
           $979 = $978&255;
           $980 = $979 | $972;
           $981 = $976&255;
           HEAP8[$969] = $981;
           $flags$0$be = $980;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $827;$s_time$1$be = $278;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
           break L6;
           break;
          }
          case 46:  {
           $982 = HEAP16[$185>>1]|0;
           $983 = $982&65535;
           $984 = (($278) + 7)|0;
           $data$15 = $983;$pc$16 = $827;$s_time$17 = $984;
           label = 161;
           break L6;
           break;
          }
          case 47: case 45: case 44: case 43: case 42: case 41: case 40:  {
           $997 = $284 ^ 1;
           $998 = (($187) + ($997)|0);
           $999 = HEAP8[$998]|0;
           $1000 = $999&255;
           $1001 = $1000 & 1;
           $1002 = $1000 & 128;
           $1003 = $1000 >>> 1;
           $1004 = $1002 | $1003;
           $1005 = (($this) + ($1004)|0);
           $1006 = HEAP8[$1005]|0;
           $1007 = $1006&255;
           $1008 = $1001 | $1007;
           $1009 = $1004&255;
           HEAP8[$998] = $1009;
           $flags$0$be = $1008;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $827;$s_time$1$be = $278;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
           break L6;
           break;
          }
          case 62:  {
           $1010 = (($278) + 7)|0;
           $1011 = HEAP16[$189>>1]|0;
           $1012 = $1011&65535;
           $data$16 = $1012;$pc$17 = $827;$s_time$18 = $1010;
           label = 164;
           break L6;
           break;
          }
          case 63: case 61: case 60: case 59: case 58: case 57: case 56:  {
           $1023 = $284 ^ 1;
           $1024 = (($191) + ($1023)|0);
           $1025 = HEAP8[$1024]|0;
           $1026 = $1025&255;
           $1027 = $1026 & 1;
           $1028 = $1026 >>> 1;
           $1029 = (($this) + ($1028)|0);
           $1030 = HEAP8[$1029]|0;
           $1031 = $1030&255;
           $1032 = $1027 | $1031;
           $1033 = $1028&255;
           HEAP8[$1024] = $1033;
           $flags$0$be = $1032;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $827;$s_time$1$be = $278;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
           break L6;
           break;
          }
          case 126: case 118: case 110: case 102: case 94: case 86: case 78: case 70:  {
           $1034 = (($278) + 4)|0;
           $1035 = HEAP16[$193>>1]|0;
           $1036 = $1035&65535;
           $1037 = (($32) + ($1036)|0);
           $1038 = HEAP8[$1037]|0;
           $1039 = $1038&255;
           $1040 = $flags$053 & 1;
           $flags$6 = $1040;$s_time$19 = $1034;$temp45$0 = $1039;
           break;
          }
          case 127: case 125: case 124: case 123: case 122: case 121: case 120: case 119: case 117: case 116: case 115: case 114: case 113: case 112: case 111: case 109: case 108: case 107: case 106: case 105: case 104: case 103: case 101: case 100: case 99: case 98: case 97: case 96: case 95: case 93: case 92: case 91: case 90: case 89: case 88: case 87: case 85: case 84: case 83: case 82: case 81: case 80: case 79: case 77: case 76: case 75: case 74: case 73: case 72: case 71: case 69: case 68: case 67: case 66: case 65: case 64:  {
           $1041 = $284 & 7;
           $1042 = $1041 ^ 1;
           $1043 = (($194) + ($1042)|0);
           $1044 = HEAP8[$1043]|0;
           $1045 = $1044&255;
           $1046 = $flags$053 & 1;
           $1047 = $1045 & 40;
           $1048 = $1047 | $1046;
           $flags$6 = $1048;$s_time$19 = $278;$temp45$0 = $1045;
           break;
          }
          case 254: case 246: case 238: case 230: case 222: case 214: case 206: case 198: case 190: case 182: case 174: case 166: case 158: case 150: case 142: case 134:  {
           $1060 = (($278) + 7)|0;
           $1061 = HEAP16[$196>>1]|0;
           $1062 = $1061&65535;
           $1063 = (($32) + ($1062)|0);
           $1064 = HEAP8[$1063]|0;
           $1065 = $1064&255;
           $1066 = $284 >>> 3;
           $1067 = $1066 & 7;
           $1068 = 1 << $1067;
           $1069 = $1065 | $1068;
           $1070 = $284 & 64;
           $1071 = ($1070|0)==(0);
           $1072 = $1071 ? $1068 : 0;
           $$11 = $1069 ^ $1072;
           $1073 = $$11&255;
           HEAP8[$1063] = $1073;
           $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $827;$s_time$1$be = $1060;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
           break L6;
           break;
          }
          case 255: case 253: case 252: case 251: case 250: case 249: case 248: case 247: case 245: case 244: case 243: case 242: case 241: case 240: case 239: case 237: case 236: case 235: case 234: case 233: case 232: case 231: case 229: case 228: case 227: case 226: case 225: case 224: case 223: case 221: case 220: case 219: case 218: case 217: case 216: case 215: case 213: case 212: case 211: case 210: case 209: case 208: case 207: case 205: case 204: case 203: case 202: case 201: case 200: case 199: case 197: case 196: case 195: case 194: case 193: case 192:  {
           $1074 = $284 >>> 3;
           $1075 = $1074 & 7;
           $1076 = 1 << $1075;
           $1077 = $284 & 7;
           $1078 = $1077 ^ 1;
           $1079 = (($197) + ($1078)|0);
           $1080 = HEAP8[$1079]|0;
           $1081 = $1080&255;
           $1082 = $1081 | $1076;
           $1083 = $1082&255;
           HEAP8[$1079] = $1083;
           $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $827;$s_time$1$be = $278;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
           break L6;
           break;
          }
          case 191: case 189: case 188: case 187: case 186: case 185: case 184: case 183: case 181: case 180: case 179: case 178: case 177: case 176: case 175: case 173: case 172: case 171: case 170: case 169: case 168: case 167: case 165: case 164: case 163: case 162: case 161: case 160: case 159: case 157: case 156: case 155: case 154: case 153: case 152: case 151: case 149: case 148: case 147: case 146: case 145: case 144: case 143: case 141: case 140: case 139: case 138: case 137: case 136: case 135: case 133: case 132: case 131: case 130: case 129: case 128:  {
           $1084 = $284 >>> 3;
           $1085 = $1084 & 7;
           $1086 = 1 << $1085;
           $1087 = $1086 ^ 255;
           $1088 = $284 & 7;
           $1089 = $1088 ^ 1;
           $1090 = (($198) + ($1089)|0);
           $1091 = HEAP8[$1090]|0;
           $1092 = $1091&255;
           $1093 = $1092 & $1087;
           $1094 = $1093&255;
           HEAP8[$1090] = $1094;
           $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $827;$s_time$1$be = $278;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
           break L6;
           break;
          }
          default: {
           label = 172;
           break L4;
          }
          }
          $1049 = $284 >>> 3;
          $1050 = $1049 & 7;
          $1051 = 1 << $1050;
          $1052 = $temp45$0 & $1051;
          $1053 = $1052 & 128;
          $1054 = (($1052) + 32767)|0;
          $1055 = $1054 >>> 8;
          $1056 = $1055 & 68;
          $1057 = $flags$6 | $1053;
          $1058 = $1057 | $1056;
          $1059 = $1058 | 16;
          $flags$0$be = $1059;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $827;$s_time$1$be = $s_time$19;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
          break;
         }
         case 237:  {
          $1095 = (($$in) + 2)|0;
          $1096 = (35728 + ($284)|0);
          $1097 = HEAP8[$1096]|0;
          $1098 = $1097&255;
          $1099 = $1098 >>> 4;
          $1100 = (($1099) + ($278))|0;
          switch ($284|0) {
          case 106: case 90: case 74: case 98: case 82: case 66:  {
           $1101 = $284 >>> 3;
           $1102 = $1101 & 6;
           $1103 = (($201) + ($1102)|0);
           $1104 = $1103;
           $1105 = HEAP16[$1104>>1]|0;
           $1106 = $1105&65535;
           $temp47$0 = $1106;
           label = 175;
           break;
          }
          case 122: case 114:  {
           $temp47$0 = $sp$089;
           label = 175;
           break;
          }
          case 113:  {
           HEAP8[$205] = 0;
           label = 178;
           break;
          }
          case 120: case 112: case 104: case 96: case 88: case 80: case 72: case 64:  {
           $1135 = HEAP16[$202>>1]|0;
           $1136 = $1135&65535;
           $1137 = (__Z9ay_cpu_inP6Ay_Cpuj($this,$1136)|0);
           $1138 = $1137&255;
           $1139 = $284 >>> 3;
           $1140 = $1139 ^ 1;
           $1141 = (($204) + ($1140)|0);
           HEAP8[$1141] = $1138;
           $1142 = $flags$053 & 1;
           $1143 = (($this) + ($1137)|0);
           $1144 = HEAP8[$1143]|0;
           $1145 = $1144&255;
           $1146 = $1145 | $1142;
           $flags$0$be = $1146;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $1095;$s_time$1$be = $1100;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
           break L6;
           break;
          }
          case 121: case 105: case 97: case 89: case 81: case 73: case 65:  {
           label = 178;
           break;
          }
          case 83: case 67:  {
           $1156 = $284 >>> 3;
           $1157 = (($211) + ($1156)|0);
           $1158 = $1157;
           $1159 = HEAP16[$1158>>1]|0;
           $1160 = $1159&65535;
           $temp50$0 = $1160;
           label = 180;
           break;
          }
          case 115:  {
           $temp50$0 = $sp$089;
           label = 180;
           break;
          }
          case 91: case 75:  {
           $1165 = (($32) + ($1095)|0);
           $1166 = (__Z8get_le16PKv($1165)|0);
           $1167 = (($$in) + 4)|0;
           $1168 = (($32) + ($1166)|0);
           $1169 = (__Z8get_le16PKv($1168)|0);
           $1170 = $1169&65535;
           $1171 = $284 >>> 3;
           $$sum4 = (($1171) + -9)|0;
           $1172 = (($212) + ($$sum4)|0);
           $1173 = $1172;
           HEAP16[$1173>>1] = $1170;
           $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $1167;$s_time$1$be = $1100;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
           break L6;
           break;
          }
          case 123:  {
           $1174 = (($32) + ($1095)|0);
           $1175 = (__Z8get_le16PKv($1174)|0);
           $1176 = (($$in) + 4)|0;
           $1177 = (($32) + ($1175)|0);
           $1178 = (__Z8get_le16PKv($1177)|0);
           $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $1176;$s_time$1$be = $1100;$sp$0$be = $1178;$warning$0$off0$be = $warning$0$off0107;
           break L6;
           break;
          }
          case 103:  {
           $1179 = HEAP16[$214>>1]|0;
           $1180 = $1179&65535;
           $1181 = (($32) + ($1180)|0);
           $1182 = HEAP8[$1181]|0;
           $1183 = $1182&255;
           $1184 = HEAP8[$215]|0;
           $1185 = $1184&255;
           $1186 = $1185 << 4;
           $1187 = $1183 >>> 4;
           $1188 = $1186 | $1187;
           $1189 = $1188&255;
           HEAP8[$1181] = $1189;
           $1190 = HEAP8[$215]|0;
           $1191 = $1190&255;
           $1192 = $1191 & 240;
           $1193 = $1183 & 15;
           $1194 = $1192 | $1193;
           $1195 = $flags$053 & 1;
           $1196 = (($this) + ($1194)|0);
           $1197 = HEAP8[$1196]|0;
           $1198 = $1197&255;
           $1199 = $1198 | $1195;
           $1200 = $1194&255;
           HEAP8[$215] = $1200;
           $flags$0$be = $1199;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $1095;$s_time$1$be = $1100;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
           break L6;
           break;
          }
          case 124: case 116: case 108: case 100: case 92: case 84: case 76: case 68:  {
           $1223 = $flags$053 & -2;
           $1224 = HEAP8[$219]|0;
           $1225 = $1224&255;
           HEAP8[$219] = 0;
           $data$1 = $1225;$flags$4 = $1223;$opcode$0 = 16;$pc$3 = $1095;$s_time$4 = $1100;
           label = 82;
           break L6;
           break;
          }
          case 111:  {
           $1201 = HEAP16[$217>>1]|0;
           $1202 = $1201&65535;
           $1203 = (($32) + ($1202)|0);
           $1204 = HEAP8[$1203]|0;
           $1205 = $1204&255;
           $1206 = $1205 << 4;
           $1207 = HEAP8[$218]|0;
           $1208 = $1207&255;
           $1209 = $1208 & 15;
           $1210 = $1209 | $1206;
           $1211 = $1210&255;
           HEAP8[$1203] = $1211;
           $1212 = HEAP8[$218]|0;
           $1213 = $1212&255;
           $1214 = $1213 & 240;
           $1215 = $1205 >>> 4;
           $1216 = $1214 | $1215;
           $1217 = $flags$053 & 1;
           $1218 = (($this) + ($1216)|0);
           $1219 = HEAP8[$1218]|0;
           $1220 = $1219&255;
           $1221 = $1220 | $1217;
           $1222 = $1216&255;
           HEAP8[$218] = $1222;
           $flags$0$be = $1221;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $1095;$s_time$1$be = $1100;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
           break L6;
           break;
          }
          case 177: case 161:  {
           $inc$0 = 1;
           label = 187;
           break;
          }
          case 185: case 169:  {
           $inc$0 = -1;
           label = 187;
           break;
          }
          case 176: case 160:  {
           $inc59$0 = 1;
           label = 190;
           break;
          }
          case 184: case 168:  {
           $inc59$0 = -1;
           label = 190;
           break;
          }
          case 179: case 163:  {
           $inc62$0 = 1;
           label = 193;
           break;
          }
          case 178: case 162:  {
           $inc65$0 = 1;
           label = 195;
           break;
          }
          case 187: case 171:  {
           $inc62$0 = -1;
           label = 193;
           break;
          }
          case 71:  {
           $1333 = HEAP8[$238]|0;
           HEAP8[$239] = $1333;
           $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $1095;$s_time$1$be = $1100;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
           break L6;
           break;
          }
          case 79:  {
           $1334 = HEAP8[$240]|0;
           HEAP8[$241] = $1334;
           $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $1095;$s_time$1$be = $1100;$sp$0$be = $sp$089;$warning$0$off0$be = 1;
           break L6;
           break;
          }
          case 186: case 170:  {
           $inc65$0 = -1;
           label = 195;
           break;
          }
          case 87:  {
           $1335 = HEAP8[$242]|0;
           HEAP8[$243] = $1335;
           $warning$1$off0 = $warning$0$off0107;
           label = 200;
           break;
          }
          case 95:  {
           $1336 = HEAP8[$246]|0;
           HEAP8[$247] = $1336;
           $warning$1$off0 = 1;
           label = 200;
           break;
          }
          case 125: case 117: case 109: case 101: case 93: case 85: case 77: case 69:  {
           $1350 = HEAP8[$248]|0;
           HEAP8[$249] = $1350;
           $s_time$2 = $1100;
           label = 58;
           break L6;
           break;
          }
          case 110: case 102: case 78: case 70:  {
           HEAP8[$250] = 0;
           $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $1095;$s_time$1$be = $1100;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
           break L6;
           break;
          }
          case 118: case 86:  {
           HEAP8[$251] = 1;
           $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $1095;$s_time$1$be = $1100;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
           break L6;
           break;
          }
          case 126: case 94:  {
           HEAP8[$252] = 2;
           $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $1095;$s_time$1$be = $1100;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
           break L6;
           break;
          }
          default: {
           $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $1095;$s_time$1$be = $1100;$sp$0$be = $sp$089;$warning$0$off0$be = 1;
           break L6;
          }
          }
          if ((label|0) == 175) {
           label = 0;
           $1107 = $flags$053 & 1;
           $1108 = (($temp47$0) + ($1107))|0;
           $1109 = $284 >>> 2;
           $1110 = $1109 & 2;
           $1111 = ($1110|0)==(0);
           $1112 = (0 - ($1108))|0;
           $$12 = $1111 ? $1112 : $1108;
           $1113 = HEAP16[$200>>1]|0;
           $1114 = $1113&65535;
           $1115 = (($$12) + ($1114))|0;
           $1116 = $1114 ^ $temp47$0;
           $1117 = $1116 ^ $1115;
           $1118 = $1115 >>> 16;
           $1119 = $1118 & 1;
           $1120 = $1117 >>> 8;
           $1121 = $1120 & 16;
           $1122 = $1115 >>> 8;
           $1123 = $1122 & 168;
           $1124 = (($1117) + 32768)|0;
           $1125 = $1124 >>> 14;
           $1126 = $1125 & 4;
           $1127 = $1119 | $1110;
           $1128 = $1127 | $1123;
           $1129 = $1128 | $1121;
           $1130 = $1129 | $1126;
           $1131 = $1130 ^ 2;
           $1132 = $1115&65535;
           HEAP16[$200>>1] = $1132;
           $1133 = ($1132<<16>>16)==(0);
           $1134 = $1131 | 64;
           $$19 = $1133 ? $1134 : $1131;
           $flags$0$be = $$19;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $1095;$s_time$1$be = $1100;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
           break L6;
          }
          else if ((label|0) == 178) {
           label = 0;
           $1147 = HEAP32[$206>>2]|0;
           $1148 = (($1147) + ($1100))|0;
           $1149 = HEAP16[$207>>1]|0;
           $1150 = $1149&65535;
           $1151 = $284 >>> 3;
           $1152 = $1151 ^ 1;
           $1153 = (($209) + ($1152)|0);
           $1154 = HEAP8[$1153]|0;
           $1155 = $1154&255;
           __Z10ay_cpu_outP6Ay_Cpulji($this,$1148,$1150,$1155);
           $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $1095;$s_time$1$be = $1100;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
           break L6;
          }
          else if ((label|0) == 180) {
           label = 0;
           $1161 = (($32) + ($1095)|0);
           $1162 = (__Z8get_le16PKv($1161)|0);
           $1163 = (($$in) + 4)|0;
           $1164 = (($32) + ($1162)|0);
           __Z8set_le16Pvj($1164,$temp50$0);
           $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $1163;$s_time$1$be = $1100;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
           break L6;
          }
          else if ((label|0) == 187) {
           label = 0;
           $1226 = HEAP16[$221>>1]|0;
           $1227 = $1226&65535;
           $1228 = (($1227) + ($inc$0))|0;
           $1229 = $1228&65535;
           HEAP16[$221>>1] = $1229;
           $1230 = (($32) + ($1227)|0);
           $1231 = HEAP8[$1230]|0;
           $1232 = $1231&255;
           $1233 = HEAP8[$222]|0;
           $1234 = $1233&255;
           $1235 = (($1234) - ($1232))|0;
           $1236 = $flags$053 & 1;
           $1237 = $1233 ^ $1231;
           $1238 = $1237&255;
           $1239 = $1238 & 16;
           $$masked3 = $1235 & 144;
           $1240 = $1239 ^ $$masked3;
           $1241 = $1240 | $1236;
           $1242 = $1235&255;
           $1243 = ($1242<<24>>24)==(0);
           $$13$v = $1243 ? 66 : 2;
           $$13 = $1241 | $$13$v;
           $1244 = $1240 >>> 4;
           $1245 = $1244 & 1;
           $1246 = (($1235) - ($1245))|0;
           $1247 = $1246 & 8;
           $1248 = $$13 | $1247;
           $1249 = $1246 << 4;
           $1250 = $1249 & 32;
           $1251 = $1248 | $1250;
           $1252 = HEAP16[$223>>1]|0;
           $1253 = (($1252) + -1)<<16>>16;
           HEAP16[$223>>1] = $1253;
           $1254 = ($1253<<16>>16)==(0);
           if ($1254) {
            $flags$0$be = $1251;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $1095;$s_time$1$be = $1100;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
            break L6;
           }
           $1255 = $1251 | 4;
           $1256 = $$13$v & 64;
           $1257 = ($1256|0)!=(0);
           $1258 = ($283&255)<(176);
           $or$cond14 = $1257 | $1258;
           $1259 = (($1100) + 5)|0;
           $$pc$120 = $or$cond14 ? $1095 : $$in;
           $$21 = $or$cond14 ? $1100 : $1259;
           $flags$0$be = $1255;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $$pc$120;$s_time$1$be = $$21;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
           break L6;
          }
          else if ((label|0) == 190) {
           label = 0;
           $1260 = HEAP16[$225>>1]|0;
           $1261 = $1260&65535;
           $1262 = (($1261) + ($inc59$0))|0;
           $1263 = $1262&65535;
           HEAP16[$225>>1] = $1263;
           $1264 = (($32) + ($1261)|0);
           $1265 = HEAP8[$1264]|0;
           $1266 = $1265&255;
           $1267 = HEAP16[$226>>1]|0;
           $1268 = $1267&65535;
           $1269 = (($1268) + ($inc59$0))|0;
           $1270 = $1269&65535;
           HEAP16[$226>>1] = $1270;
           $1271 = (($32) + ($1268)|0);
           HEAP8[$1271] = $1265;
           $1272 = HEAP8[$227]|0;
           $1273 = $1272&255;
           $1274 = (($1273) + ($1266))|0;
           $1275 = $flags$053 & 193;
           $1276 = $1274 & 8;
           $1277 = $1276 | $1275;
           $1278 = $1274 << 4;
           $1279 = $1278 & 32;
           $1280 = $1277 | $1279;
           $1281 = HEAP16[$228>>1]|0;
           $1282 = (($1281) + -1)<<16>>16;
           HEAP16[$228>>1] = $1282;
           $1283 = ($1282<<16>>16)==(0);
           if ($1283) {
            $flags$0$be = $1280;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $1095;$s_time$1$be = $1100;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
            break L6;
           }
           $1284 = $1280 | 4;
           $1285 = ($283&255)<(176);
           $1286 = (($1100) + 5)|0;
           $$pc$1 = $1285 ? $1095 : $$in;
           $$15 = $1285 ? $1100 : $1286;
           $flags$0$be = $1284;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $$pc$1;$s_time$1$be = $$15;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
           break L6;
          }
          else if ((label|0) == 193) {
           label = 0;
           $1287 = HEAP16[$230>>1]|0;
           $1288 = $1287&65535;
           $1289 = (($1288) + ($inc62$0))|0;
           $1290 = $1289&65535;
           HEAP16[$230>>1] = $1290;
           $1291 = (($32) + ($1288)|0);
           $1292 = HEAP8[$1291]|0;
           $1293 = $1292&255;
           $1294 = HEAP8[$231]|0;
           $1295 = (($1294) + -1)<<24>>24;
           HEAP8[$231] = $1295;
           $1296 = $1295&255;
           $1297 = $1293 >>> 6;
           $1298 = $1297 & 2;
           $1299 = (($this) + ($1296)|0);
           $1300 = HEAP8[$1299]|0;
           $1301 = $1300&255;
           $1302 = $1301 & 251;
           $1303 = $1302 | $1298;
           $1304 = ($1295<<24>>24)!=(0);
           $1305 = ($283&255)>(175);
           $or$cond16 = $1304 & $1305;
           $1306 = (($1100) + 5)|0;
           $pc$18 = $or$cond16 ? $$in : $1095;
           $s_time$20 = $or$cond16 ? $1306 : $1100;
           $1307 = HEAP32[$232>>2]|0;
           $1308 = (($s_time$20) + ($1307))|0;
           $1309 = HEAP16[$233>>1]|0;
           $1310 = $1309&65535;
           __Z10ay_cpu_outP6Ay_Cpulji($this,$1308,$1310,$1293);
           $flags$0$be = $1303;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $pc$18;$s_time$1$be = $s_time$20;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
           break L6;
          }
          else if ((label|0) == 195) {
           label = 0;
           $1311 = HEAP16[$235>>1]|0;
           $1312 = $1311&65535;
           $1313 = (($1312) + ($inc65$0))|0;
           $1314 = $1313&65535;
           HEAP16[$235>>1] = $1314;
           $1315 = HEAP16[$236>>1]|0;
           $1316 = $1315&65535;
           $1317 = (__Z9ay_cpu_inP6Ay_Cpuj($this,$1316)|0);
           $1318 = HEAP8[$237]|0;
           $1319 = (($1318) + -1)<<24>>24;
           HEAP8[$237] = $1319;
           $1320 = $1319&255;
           $1321 = $1317 >>> 6;
           $1322 = $1321 & 2;
           $1323 = (($this) + ($1320)|0);
           $1324 = HEAP8[$1323]|0;
           $1325 = $1324&255;
           $1326 = $1325 & 251;
           $1327 = $1326 | $1322;
           $1328 = ($1319<<24>>24)!=(0);
           $1329 = ($283&255)>(175);
           $or$cond17 = $1328 & $1329;
           $1330 = (($1100) + 5)|0;
           $pc$19 = $or$cond17 ? $$in : $1095;
           $s_time$21 = $or$cond17 ? $1330 : $1100;
           $1331 = $1317&255;
           $1332 = (($32) + ($1312)|0);
           HEAP8[$1332] = $1331;
           $flags$0$be = $1327;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $pc$19;$s_time$1$be = $s_time$21;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
           break L6;
          }
          else if ((label|0) == 200) {
           label = 0;
           $1337 = $flags$053 & 1;
           $1338 = HEAP8[$244]|0;
           $1339 = $1338&255;
           $1340 = (($this) + ($1339)|0);
           $1341 = HEAP8[$1340]|0;
           $1342 = $1341&255;
           $1343 = $1342 & 251;
           $1344 = $1343 | $1337;
           $1345 = HEAP8[$245]|0;
           $1346 = $1345&255;
           $1347 = $1346 << 2;
           $1348 = $1347 & 4;
           $1349 = $1344 | $1348;
           $flags$0$be = $1349;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $1095;$s_time$1$be = $1100;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$1$off0;
           break L6;
          }
          break;
         }
         case 253:  {
          $ixy$0 = $iy$059;
          label = 206;
          break;
         }
         case 221:  {
          $ixy$0 = $ix$074;
          label = 206;
          break;
         }
         case 118:  {
          label = 265;
          break L4;
          break;
         }
         default: {
          label = 264;
          break L4;
         }
         }
        } while(0);
        L186: do {
         if ((label|0) == 3) {
          label = 0;
          $266 = (($278) + -5)|0;
          $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $pc$0;$s_time$1$be = $266;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
         }
         else if ((label|0) == 5) {
          label = 0;
          $276 = (($278) + -7)|0;
          $s_time$0 = $276;
          label = 6;
         }
         else if ((label|0) == 58) {
          label = 0;
          $385 = (($32) + ($sp$089)|0);
          $386 = (__Z8get_le16PKv($385)|0);
          $387 = (($sp$089) + 2)|0;
          $388 = $387 & 65535;
          $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $386;$s_time$1$be = $s_time$2;$sp$0$be = $388;$warning$0$off0$be = $warning$0$off0107;
         }
         else if ((label|0) == 67) {
          label = 0;
          $405 = (($$in) + 3)|0;
          $406 = (__Z8get_le16PKv($282)|0);
          $407 = (($sp$089) + 65534)|0;
          $408 = $407 & 65535;
          $409 = (($32) + ($408)|0);
          __Z8set_le16Pvj($409,$405);
          $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $406;$s_time$1$be = $278;$sp$0$be = $408;$warning$0$off0$be = $warning$0$off0107;
         }
         else if ((label|0) == 70) {
          label = 0;
          $413 = $279 & 56;
          $data$0 = $281;$pc$2 = $413;$s_time$3 = $278;
          label = 73;
         }
         else if ((label|0) == 77) {
          label = 0;
          $443 = HEAP16[$78>>1]|0;
          $444 = $443&65535;
          $445 = (($32) + ($444)|0);
          $446 = HEAP8[$445]|0;
          $447 = $446&255;
          $data$1 = $447;$flags$4 = $flags$1;$opcode$0 = $279;$pc$3 = $281;$s_time$4 = $278;
          label = 82;
         }
         else if ((label|0) == 79) {
          label = 0;
          $449 = (($$in) + 2)|0;
          $data$1 = $284;$flags$4 = $flags$2;$opcode$0 = $279;$pc$3 = $449;$s_time$4 = $278;
          label = 82;
         }
         else if ((label|0) == 81) {
          label = 0;
          $451 = $279 & 7;
          $452 = $451 ^ 1;
          $453 = (($80) + ($452)|0);
          $454 = HEAP8[$453]|0;
          $455 = $454&255;
          $data$1 = $455;$flags$4 = $flags$3;$opcode$0 = $279;$pc$3 = $281;$s_time$4 = $278;
          label = 82;
         }
         else if ((label|0) == 88) {
          label = 0;
          $513 = HEAP16[$87>>1]|0;
          $514 = $513&65535;
          $515 = (($514) + ($data$3))|0;
          $516 = $514 ^ $data$3;
          $517 = $515&65535;
          HEAP16[$87>>1] = $517;
          $518 = $flags$053 & 196;
          $519 = $515 >>> 16;
          $520 = $519 | $518;
          $521 = $515 >>> 8;
          $522 = $521 & 40;
          $523 = $520 | $522;
          $524 = $516 ^ $515;
          $525 = $524 >>> 8;
          $526 = $525 & 16;
          $527 = $523 | $526;
          $flags$0$be = $527;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $281;$s_time$1$be = $278;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
         }
         else if ((label|0) == 206) {
          label = 0;
          $1351 = (($$in) + 2)|0;
          $1352 = (($32) + ($1351)|0);
          $1353 = HEAP8[$1352]|0;
          $1354 = $1353&255;
          $1355 = (35728 + ($284)|0);
          $1356 = HEAP8[$1355]|0;
          $1357 = $1356&255;
          $1358 = $1357 & 15;
          $1359 = (($1358) + ($278))|0;
          switch ($284|0) {
          case 109: case 100:  {
           $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $1351;$s_time$1$be = $1359;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
           break L186;
           break;
          }
          case 229:  {
           $data$0 = $ixy$0;$pc$2 = $1351;$s_time$3 = $1359;
           label = 73;
           break L186;
           break;
          }
          case 134: case 150:  {
           $1360 = $flags$053 & -2;
           $flags$8 = $1360;
           label = 208;
           break;
          }
          case 142: case 158:  {
           $flags$8 = $flags$053;
           label = 208;
           break;
          }
          case 132: case 148:  {
           $1368 = $flags$053 & -2;
           $flags$9 = $1368;
           label = 210;
           break;
          }
          case 140: case 156:  {
           $flags$9 = $flags$053;
           label = 210;
           break;
          }
          case 133: case 149:  {
           $1370 = $flags$053 & -2;
           $flags$10 = $1370;
           label = 212;
           break;
          }
          case 141: case 157:  {
           $flags$10 = $flags$053;
           label = 212;
           break;
          }
          case 41:  {
           $temp70$0 = $ixy$0;
           label = 215;
           break;
          }
          case 25: case 9:  {
           $1372 = $284 >>> 3;
           $$sum = (($1372) + -1)|0;
           $1373 = (($253) + ($$sum)|0);
           $1374 = $1373;
           $1375 = HEAP16[$1374>>1]|0;
           $1376 = $1375&65535;
           $temp70$0 = $1376;
           label = 215;
           break;
          }
          case 57:  {
           $temp70$0 = $sp$089;
           label = 215;
           break;
          }
          case 166:  {
           $1390 = (($$in) + 3)|0;
           $1391 = $1353 << 24 >> 24;
           $1392 = (($1391) + ($ixy$0))|0;
           $1393 = $1392 & 65535;
           $1394 = (($32) + ($1393)|0);
           $1395 = HEAP8[$1394]|0;
           $1396 = $1395&255;
           $data$6 = $1396;$pc$7 = $1390;$s_time$8 = $1359;
           label = 106;
           break L186;
           break;
          }
          case 164:  {
           $1397 = $ixy$0 >>> 8;
           $data$6 = $1397;$pc$7 = $1351;$s_time$8 = $1359;
           label = 106;
           break L186;
           break;
          }
          case 165:  {
           $1398 = $ixy$0 & 255;
           $data$6 = $1398;$pc$7 = $1351;$s_time$8 = $1359;
           label = 106;
           break L186;
           break;
          }
          case 182:  {
           $1399 = (($$in) + 3)|0;
           $1400 = $1353 << 24 >> 24;
           $1401 = (($1400) + ($ixy$0))|0;
           $1402 = $1401 & 65535;
           $1403 = (($32) + ($1402)|0);
           $1404 = HEAP8[$1403]|0;
           $1405 = $1404&255;
           $data$7 = $1405;$pc$8 = $1399;$s_time$9 = $1359;
           label = 110;
           break L186;
           break;
          }
          case 180:  {
           $1406 = $ixy$0 >>> 8;
           $data$7 = $1406;$pc$8 = $1351;$s_time$9 = $1359;
           label = 110;
           break L186;
           break;
          }
          case 181:  {
           $1407 = $ixy$0 & 255;
           $data$7 = $1407;$pc$8 = $1351;$s_time$9 = $1359;
           label = 110;
           break L186;
           break;
          }
          case 174:  {
           $1408 = (($$in) + 3)|0;
           $1409 = $1353 << 24 >> 24;
           $1410 = (($1409) + ($ixy$0))|0;
           $1411 = $1410 & 65535;
           $1412 = (($32) + ($1411)|0);
           $1413 = HEAP8[$1412]|0;
           $1414 = $1413&255;
           $data$8 = $1414;$pc$9 = $1408;$s_time$10 = $1359;
           label = 114;
           break L186;
           break;
          }
          case 172:  {
           $1415 = $ixy$0 >>> 8;
           $data$8 = $1415;$pc$9 = $1351;$s_time$10 = $1359;
           label = 114;
           break L186;
           break;
          }
          case 173:  {
           $1416 = $ixy$0 & 255;
           $data$8 = $1416;$pc$9 = $1351;$s_time$10 = $1359;
           label = 114;
           break L186;
           break;
          }
          case 190:  {
           $1417 = (($$in) + 3)|0;
           $1418 = $1353 << 24 >> 24;
           $1419 = (($1418) + ($ixy$0))|0;
           $1420 = $1419 & 65535;
           $1421 = (($32) + ($1420)|0);
           $1422 = HEAP8[$1421]|0;
           $1423 = $1422&255;
           $data$2 = $1423;$pc$4 = $1417;$s_time$5 = $1359;
           label = 86;
           break L186;
           break;
          }
          case 188:  {
           $1424 = $ixy$0 >>> 8;
           $data$2 = $1424;$pc$4 = $1351;$s_time$5 = $1359;
           label = 86;
           break L186;
           break;
          }
          case 189:  {
           $1425 = $ixy$0 & 255;
           $data$2 = $1425;$pc$4 = $1351;$s_time$5 = $1359;
           label = 86;
           break L186;
           break;
          }
          case 119: case 117: case 116: case 115: case 114: case 113: case 112:  {
           $1426 = $284 ^ 1;
           $1427 = (($255) + ($1426)|0);
           $$sink$in = $1427;$pc$20 = $1351;
           label = 230;
           break;
          }
          case 54:  {
           $1428 = (($$in) + 3)|0;
           $1429 = (($32) + ($1428)|0);
           $$sink$in = $1429;$pc$20 = $1428;
           label = 230;
           break;
          }
          case 124: case 92: case 84: case 76: case 68:  {
           $1435 = $ixy$0 >>> 8;
           $1436 = $1435&255;
           $1437 = $284 >>> 3;
           $1438 = $1437 ^ 1;
           $1439 = (($257) + ($1438)|0);
           HEAP8[$1439] = $1436;
           $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $1351;$s_time$1$be = $1359;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
           break L186;
           break;
          }
          case 125: case 93: case 85: case 77: case 69:  {
           $1440 = $ixy$0&255;
           $1441 = $284 >>> 3;
           $1442 = $1441 ^ 1;
           $1443 = (($259) + ($1442)|0);
           HEAP8[$1443] = $1440;
           $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $1351;$s_time$1$be = $1359;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
           break L186;
           break;
          }
          case 38:  {
           $1453 = (($$in) + 3)|0;
           $data269$0 = $1354;$pc$21 = $1453;
           label = 237;
           break;
          }
          case 126: case 110: case 102: case 94: case 86: case 78: case 70:  {
           $1444 = (($$in) + 3)|0;
           $1445 = $1353 << 24 >> 24;
           $1446 = (($1445) + ($ixy$0))|0;
           $1447 = $1446 & 65535;
           $1448 = (($32) + ($1447)|0);
           $1449 = HEAP8[$1448]|0;
           $1450 = $284 >>> 3;
           $1451 = $1450 ^ 1;
           $1452 = (($261) + ($1451)|0);
           HEAP8[$1452] = $1449;
           $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $1444;$s_time$1$be = $1359;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
           break L186;
           break;
          }
          case 101:  {
           $1454 = $ixy$0 & 255;
           $data269$0 = $1454;$pc$21 = $1351;
           label = 237;
           break;
          }
          case 103: case 99: case 98: case 97: case 96:  {
           $1455 = $284 ^ 1;
           $1456 = (($263) + ($1455)|0);
           $1457 = HEAP8[$1456]|0;
           $1458 = $1457&255;
           $data269$0 = $1458;$pc$21 = $1351;
           label = 237;
           break;
          }
          case 46:  {
           $1462 = (($$in) + 3)|0;
           $data269$1 = $1354;$pc$22 = $1462;
           label = 241;
           break;
          }
          case 108:  {
           $1463 = $ixy$0 >>> 8;
           $data269$1 = $1463;$pc$22 = $1351;
           label = 241;
           break;
          }
          case 111: case 107: case 106: case 105: case 104:  {
           $1464 = $284 ^ 1;
           $1465 = (($265) + ($1464)|0);
           $1466 = HEAP8[$1465]|0;
           $1467 = $1466&255;
           $data269$1 = $1467;$pc$22 = $1351;
           label = 241;
           break;
          }
          case 249:  {
           $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $1351;$s_time$1$be = $1359;$sp$0$be = $ixy$0;$warning$0$off0$be = $warning$0$off0107;
           break L186;
           break;
          }
          case 34:  {
           $1471 = (__Z8get_le16PKv($1352)|0);
           $1472 = (($$in) + 4)|0;
           $1473 = (($32) + ($1471)|0);
           __Z8set_le16Pvj($1473,$ixy$0);
           $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $1472;$s_time$1$be = $1359;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
           break L186;
           break;
          }
          case 33:  {
           $1474 = (__Z8get_le16PKv($1352)|0);
           $1475 = (($$in) + 4)|0;
           $flags$11 = $flags$053;$ixy$1 = $1474;$pc$23 = $1475;$sp$1 = $sp$089;
           break;
          }
          case 42:  {
           $1476 = (__Z8get_le16PKv($1352)|0);
           $1477 = (($32) + ($1476)|0);
           $1478 = (__Z8get_le16PKv($1477)|0);
           $1479 = (($$in) + 4)|0;
           $flags$11 = $flags$053;$ixy$1 = $1478;$pc$23 = $1479;$sp$1 = $sp$089;
           break;
          }
          case 203:  {
           $1480 = $1353 << 24 >> 24;
           $1481 = (($1480) + ($ixy$0))|0;
           $1482 = $1481 & 65535;
           $1483 = (($$in) + 3)|0;
           $1484 = (($32) + ($1483)|0);
           $1485 = HEAP8[$1484]|0;
           $1486 = $1485&255;
           $1487 = (($$in) + 4)|0;
           switch ($1486|0) {
           case 6:  {
            $data$9 = $1482;$pc$10 = $1487;$s_time$11 = $1359;
            label = 143;
            break L186;
            break;
           }
           case 22:  {
            $data$10 = $1482;$pc$11 = $1487;$s_time$12 = $1359;
            label = 146;
            break L186;
            break;
           }
           case 38:  {
            $data$11 = $1482;$pc$12 = $1487;$s_time$13 = $1359;
            label = 149;
            break L186;
            break;
           }
           case 54:  {
            $data$12 = $1482;$pc$13 = $1487;$s_time$14 = $1359;
            label = 152;
            break L186;
            break;
           }
           case 14:  {
            $data$13 = $1482;$pc$14 = $1487;$s_time$15 = $1359;
            label = 155;
            break L186;
            break;
           }
           case 30:  {
            $data$14 = $1482;$pc$15 = $1487;$s_time$16 = $1359;
            label = 158;
            break L186;
            break;
           }
           case 46:  {
            $data$15 = $1482;$pc$16 = $1487;$s_time$17 = $1359;
            label = 161;
            break L186;
            break;
           }
           case 62:  {
            $data$16 = $1482;$pc$17 = $1487;$s_time$18 = $1359;
            label = 164;
            break L186;
            break;
           }
           case 126: case 118: case 110: case 102: case 94: case 86: case 78: case 70:  {
            $1488 = (($32) + ($1482)|0);
            $1489 = HEAP8[$1488]|0;
            $1490 = $1489&255;
            $1491 = $1486 >>> 3;
            $1492 = $1491 & 7;
            $1493 = 1 << $1492;
            $1494 = $1490 & $1493;
            $1495 = $flags$053 & 1;
            $1496 = $1494 & 128;
            $1497 = (($1494) + 32767)|0;
            $1498 = $1497 >>> 8;
            $1499 = $1498 & 68;
            $1500 = $1495 | $1496;
            $1501 = $1500 | $1499;
            $1502 = $1501 | 16;
            $flags$0$be = $1502;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $1487;$s_time$1$be = $1359;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
            break L186;
            break;
           }
           case 254: case 246: case 238: case 230: case 222: case 214: case 206: case 198: case 190: case 182: case 174: case 166: case 158: case 150: case 142: case 134:  {
            $1503 = (($32) + ($1482)|0);
            $1504 = HEAP8[$1503]|0;
            $1505 = $1504&255;
            $1506 = $1486 >>> 3;
            $1507 = $1506 & 7;
            $1508 = 1 << $1507;
            $1509 = $1505 | $1508;
            $1510 = $1486 & 64;
            $1511 = ($1510|0)==(0);
            $1512 = $1511 ? $1508 : 0;
            $$18 = $1509 ^ $1512;
            $1513 = $$18&255;
            HEAP8[$1503] = $1513;
            $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $1487;$s_time$1$be = $1359;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
            break L186;
            break;
           }
           default: {
            $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $1487;$s_time$1$be = $1359;$sp$0$be = $sp$089;$warning$0$off0$be = 1;
            break L186;
           }
           }
           break;
          }
          case 35:  {
           $1514 = (($ixy$0) + 1)|0;
           $1515 = $1514 & 65535;
           $flags$11 = $flags$053;$ixy$1 = $1515;$pc$23 = $1351;$sp$1 = $sp$089;
           break;
          }
          case 43:  {
           $1516 = (($ixy$0) + 65535)|0;
           $1517 = $1516 & 65535;
           $flags$11 = $flags$053;$ixy$1 = $1517;$pc$23 = $1351;$sp$1 = $sp$089;
           break;
          }
          case 52:  {
           $1518 = $1353 << 24 >> 24;
           $1519 = (($1518) + ($ixy$0))|0;
           $1520 = $1519 & 65535;
           $1521 = (($$in) + 3)|0;
           $1522 = (($32) + ($1520)|0);
           $1523 = HEAP8[$1522]|0;
           $1524 = $1523&255;
           $1525 = (($1524) + 1)|0;
           $1526 = $1525&255;
           HEAP8[$1522] = $1526;
           $data$4 = $1525;$ix$1 = $ix$074;$iy$1 = $iy$059;$pc$5 = $1521;$s_time$6 = $1359;
           label = 95;
           break L186;
           break;
          }
          case 53:  {
           $1527 = $1353 << 24 >> 24;
           $1528 = (($1527) + ($ixy$0))|0;
           $1529 = $1528 & 65535;
           $1530 = (($$in) + 3)|0;
           $1531 = (($32) + ($1529)|0);
           $1532 = HEAP8[$1531]|0;
           $1533 = $1532&255;
           $1534 = (($1533) + -1)|0;
           $1535 = $1534&255;
           HEAP8[$1531] = $1535;
           $data$5 = $1534;$ix$2 = $ix$074;$iy$2 = $iy$059;$pc$6 = $1530;$s_time$7 = $1359;
           label = 98;
           break L186;
           break;
          }
          case 36:  {
           $1536 = (($ixy$0) + 256)|0;
           $1537 = $1536 & 65535;
           $1538 = $1537 >>> 8;
           $data$18 = $1538;$ixy$2 = $1537;
           label = 256;
           break;
          }
          case 44:  {
           $1539 = (($ixy$0) + 1)|0;
           $1540 = $1539 & 255;
           $1541 = $ixy$0 & 65280;
           $1542 = $1540 | $1541;
           $data$18 = $1540;$ixy$2 = $1542;
           label = 256;
           break;
          }
          case 37:  {
           $1544 = (($ixy$0) + 65280)|0;
           $1545 = $1544 & 65535;
           $1546 = $1545 >>> 8;
           $data$19 = $1546;$ixy$3 = $1545;
           label = 259;
           break;
          }
          case 45:  {
           $1547 = (($ixy$0) + 255)|0;
           $1548 = $1547 & 255;
           $1549 = $ixy$0 & 65280;
           $1550 = $1548 | $1549;
           $data$19 = $1548;$ixy$3 = $1550;
           label = 259;
           break;
          }
          case 225:  {
           $1552 = (($32) + ($sp$089)|0);
           $1553 = (__Z8get_le16PKv($1552)|0);
           $1554 = (($sp$089) + 2)|0;
           $1555 = $1554 & 65535;
           $flags$11 = $flags$053;$ixy$1 = $1553;$pc$23 = $1351;$sp$1 = $1555;
           break;
          }
          case 233:  {
           $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $ixy$0;$s_time$1$be = $1359;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
           break L186;
           break;
          }
          case 227:  {
           $1556 = (($32) + ($sp$089)|0);
           $1557 = (__Z8get_le16PKv($1556)|0);
           __Z8set_le16Pvj($1556,$ixy$0);
           $flags$11 = $flags$053;$ixy$1 = $1557;$pc$23 = $1351;$sp$1 = $sp$089;
           break;
          }
          default: {
           $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $281;$s_time$1$be = $1359;$sp$0$be = $sp$089;$warning$0$off0$be = 1;
           break L186;
          }
          }
          if ((label|0) == 208) {
           label = 0;
           $1361 = (($$in) + 3)|0;
           $1362 = $1353 << 24 >> 24;
           $1363 = (($1362) + ($ixy$0))|0;
           $1364 = $1363 & 65535;
           $1365 = (($32) + ($1364)|0);
           $1366 = HEAP8[$1365]|0;
           $1367 = $1366&255;
           $data$1 = $1367;$flags$4 = $flags$8;$opcode$0 = $284;$pc$3 = $1361;$s_time$4 = $1359;
           label = 82;
           break;
          }
          else if ((label|0) == 210) {
           label = 0;
           $1369 = $ixy$0 >>> 8;
           $data$1 = $1369;$flags$4 = $flags$9;$opcode$0 = $284;$pc$3 = $1351;$s_time$4 = $1359;
           label = 82;
           break;
          }
          else if ((label|0) == 212) {
           label = 0;
           $1371 = $ixy$0 & 255;
           $data$1 = $1371;$flags$4 = $flags$10;$opcode$0 = $284;$pc$3 = $1351;$s_time$4 = $1359;
           label = 82;
           break;
          }
          else if ((label|0) == 215) {
           label = 0;
           $1377 = (($temp70$0) + ($ixy$0))|0;
           $1378 = $temp70$0 ^ $ixy$0;
           $1379 = $1377 & 65535;
           $1380 = $flags$053 & 196;
           $1381 = $1377 >>> 16;
           $1382 = $1381 | $1380;
           $1383 = $1377 >>> 8;
           $1384 = $1383 & 40;
           $1385 = $1382 | $1384;
           $1386 = $1378 ^ $1377;
           $1387 = $1386 >>> 8;
           $1388 = $1387 & 16;
           $1389 = $1385 | $1388;
           $flags$11 = $1389;$ixy$1 = $1379;$pc$23 = $1351;$sp$1 = $sp$089;
          }
          else if ((label|0) == 230) {
           label = 0;
           $$sink = HEAP8[$$sink$in]|0;
           $1430 = (($pc$20) + 1)|0;
           $1431 = $1353 << 24 >> 24;
           $1432 = (($1431) + ($ixy$0))|0;
           $1433 = $1432 & 65535;
           $1434 = (($32) + ($1433)|0);
           HEAP8[$1434] = $$sink;
           $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $1430;$s_time$1$be = $1359;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
           break;
          }
          else if ((label|0) == 237) {
           label = 0;
           $1459 = $ixy$0 & 255;
           $1460 = $data269$0 << 8;
           $1461 = $1460 | $1459;
           $flags$11 = $flags$053;$ixy$1 = $1461;$pc$23 = $pc$21;$sp$1 = $sp$089;
          }
          else if ((label|0) == 241) {
           label = 0;
           $1468 = $ixy$0 & 65280;
           $1469 = $data269$1 | $1468;
           $flags$11 = $flags$053;$ixy$1 = $1469;$pc$23 = $pc$22;$sp$1 = $sp$089;
          }
          else if ((label|0) == 256) {
           label = 0;
           $1543 = ($280<<24>>24)==(-35);
           $iy$0$ixy$2 = $1543 ? $iy$059 : $ixy$2;
           $ixy$2$ix$0 = $1543 ? $ixy$2 : $ix$074;
           $data$4 = $data$18;$ix$1 = $ixy$2$ix$0;$iy$1 = $iy$0$ixy$2;$pc$5 = $1351;$s_time$6 = $1359;
           label = 95;
           break;
          }
          else if ((label|0) == 259) {
           label = 0;
           $1551 = ($280<<24>>24)==(-35);
           $iy$0$ixy$3 = $1551 ? $iy$059 : $ixy$3;
           $ixy$3$ix$0 = $1551 ? $ixy$3 : $ix$074;
           $data$5 = $data$19;$ix$2 = $ixy$3$ix$0;$iy$2 = $iy$0$ixy$3;$pc$6 = $1351;$s_time$7 = $1359;
           label = 98;
           break;
          }
          $1470 = ($280<<24>>24)==(-35);
          $iy$0$ixy$1 = $1470 ? $iy$059 : $ixy$1;
          $ixy$1$ix$0 = $1470 ? $ixy$1 : $ix$074;
          $flags$0$be = $flags$11;$ix$0$be = $ixy$1$ix$0;$iy$0$be = $iy$0$ixy$1;$pc$1$be = $pc$23;$s_time$1$be = $1359;$sp$0$be = $sp$1;$warning$0$off0$be = $warning$0$off0107;
         }
        } while(0);
        if ((label|0) == 6) {
         label = 0;
         $277 = (($$in) + 3)|0;
         $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $277;$s_time$1$be = $s_time$0;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
        }
        else if ((label|0) == 73) {
         label = 0;
         $423 = (($sp$089) + 65534)|0;
         $424 = $423 & 65535;
         $425 = (($32) + ($424)|0);
         __Z8set_le16Pvj($425,$data$0);
         $flags$0$be = $flags$053;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $pc$2;$s_time$1$be = $s_time$3;$sp$0$be = $424;$warning$0$off0$be = $warning$0$off0107;
        }
        else if ((label|0) == 82) {
         label = 0;
         $456 = $flags$4 & 1;
         $457 = (($456) + ($data$1))|0;
         $458 = HEAP8[$79]|0;
         $459 = $458&255;
         $460 = $459 ^ $data$1;
         $461 = $opcode$0 >>> 3;
         $462 = $461 & 2;
         $463 = ($462|0)==(0);
         $464 = (0 - ($457))|0;
         $$ = $463 ? $457 : $464;
         $465 = (($459) + ($$))|0;
         $466 = $460 ^ $465;
         $467 = $466 & 16;
         $468 = (($466) + 128)|0;
         $469 = $468 >>> 6;
         $470 = $469 & 4;
         $471 = $465 & 511;
         $472 = (($this) + ($471)|0);
         $473 = HEAP8[$472]|0;
         $474 = $473&255;
         $475 = $474 & 251;
         $476 = $475 | $462;
         $477 = $476 | $467;
         $478 = $477 | $470;
         $479 = $465&255;
         HEAP8[$79] = $479;
         $flags$0$be = $478;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $pc$3;$s_time$1$be = $s_time$4;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
        }
        else if ((label|0) == 86) {
         label = 0;
         $490 = HEAP8[$83]|0;
         $491 = $490&255;
         $492 = (($491) - ($data$2))|0;
         $493 = $data$2 & 40;
         $494 = $492 >>> 8;
         $495 = $494 & 1;
         $496 = $491 ^ $data$2;
         $497 = $492 ^ $491;
         $498 = $497 & $496;
         $499 = $498 >>> 5;
         $500 = $499 & 4;
         $501 = $496 & 16;
         $$masked = $492 & 144;
         $502 = $501 ^ $$masked;
         $503 = $492&255;
         $504 = ($503<<24>>24)==(0);
         $$8$v = $504 ? 66 : 2;
         $505 = $495 | $493;
         $506 = $505 | $502;
         $507 = $506 | $$8$v;
         $$8 = $507 | $500;
         $flags$0$be = $$8;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $pc$4;$s_time$1$be = $s_time$5;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
        }
        else if ((label|0) == 95) {
         label = 0;
         $569 = $flags$053 & 1;
         $570 = $data$4 & 15;
         $571 = (($570) + 31)|0;
         $572 = $571 & 16;
         $573 = $572 | $569;
         $574 = $data$4 & 255;
         $575 = (($this) + ($574)|0);
         $576 = HEAP8[$575]|0;
         $577 = $576&255;
         $578 = $577 & 251;
         $579 = $573 | $578;
         $580 = ($data$4|0)==(128);
         $581 = $579 | 4;
         $$9 = $580 ? $581 : $579;
         $flags$0$be = $$9;$ix$0$be = $ix$1;$iy$0$be = $iy$1;$pc$1$be = $pc$5;$s_time$1$be = $s_time$6;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
        }
        else if ((label|0) == 98) {
         label = 0;
         $595 = $flags$053 & 1;
         $596 = $data$5 & 15;
         $597 = (($596) + 1)|0;
         $598 = $597 & 16;
         $599 = $data$5 & 255;
         $600 = (($this) + ($599)|0);
         $601 = HEAP8[$600]|0;
         $602 = $601&255;
         $603 = $602 & 249;
         $604 = ($data$5|0)==(127);
         $$10$v = $604 ? 6 : 2;
         $605 = $$10$v | $595;
         $606 = $605 | $598;
         $$10 = $606 | $603;
         $flags$0$be = $$10;$ix$0$be = $ix$2;$iy$0$be = $iy$2;$pc$1$be = $pc$6;$s_time$1$be = $s_time$7;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
        }
        else if ((label|0) == 106) {
         label = 0;
         $631 = HEAP8[$100]|0;
         $632 = $631&255;
         $633 = $632 & $data$6;
         $634 = $633&255;
         HEAP8[$100] = $634;
         $635 = (($this) + ($633)|0);
         $636 = HEAP8[$635]|0;
         $637 = $636&255;
         $638 = $637 | 16;
         $flags$0$be = $638;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $pc$7;$s_time$1$be = $s_time$8;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
        }
        else if ((label|0) == 110) {
         label = 0;
         $649 = HEAP8[$105]|0;
         $650 = $649&255;
         $651 = $650 | $data$7;
         $652 = $651&255;
         HEAP8[$105] = $652;
         $653 = $651 & 255;
         $654 = (($this) + ($653)|0);
         $655 = HEAP8[$654]|0;
         $656 = $655&255;
         $flags$0$be = $656;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $pc$8;$s_time$1$be = $s_time$9;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
        }
        else if ((label|0) == 114) {
         label = 0;
         $667 = HEAP8[$110]|0;
         $668 = $667&255;
         $669 = $668 ^ $data$8;
         $670 = $669&255;
         HEAP8[$110] = $670;
         $671 = $669 & 255;
         $672 = (($this) + ($671)|0);
         $673 = HEAP8[$672]|0;
         $674 = $673&255;
         $flags$0$be = $674;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $pc$9;$s_time$1$be = $s_time$10;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
        }
        else if ((label|0) == 143) {
         label = 0;
         $831 = (($32) + ($data$9)|0);
         $832 = HEAP8[$831]|0;
         $833 = $832&255;
         $834 = $833 << 1;
         $835 = $834 & 254;
         $836 = $833 >>> 7;
         $837 = $835 | $836;
         $838 = (($this) + ($837)|0);
         $839 = HEAP8[$838]|0;
         $840 = $839&255;
         $841 = $840 | $836;
         $842 = $837&255;
         HEAP8[$831] = $842;
         $flags$0$be = $841;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $pc$10;$s_time$1$be = $s_time$11;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
        }
        else if ((label|0) == 146) {
         label = 0;
         $859 = (($32) + ($data$10)|0);
         $860 = HEAP8[$859]|0;
         $861 = $860&255;
         $862 = $861 << 1;
         $863 = $flags$053 & 1;
         $864 = $862 | $863;
         $865 = (($this) + ($864)|0);
         $866 = HEAP8[$865]|0;
         $867 = $866&255;
         $868 = $864&255;
         HEAP8[$859] = $868;
         $flags$0$be = $867;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $pc$11;$s_time$1$be = $s_time$12;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
        }
        else if ((label|0) == 149) {
         label = 0;
         $883 = (($32) + ($data$11)|0);
         $884 = HEAP8[$883]|0;
         $885 = $884&255;
         $886 = $885 << 1;
         $887 = (($this) + ($886)|0);
         $888 = HEAP8[$887]|0;
         $889 = $888&255;
         $890 = $886&255;
         HEAP8[$883] = $890;
         $flags$0$be = $889;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $pc$12;$s_time$1$be = $s_time$13;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
        }
        else if ((label|0) == 152) {
         label = 0;
         $903 = (($32) + ($data$12)|0);
         $904 = HEAP8[$903]|0;
         $905 = $904&255;
         $906 = $905 << 1;
         $907 = $906 | 1;
         $908 = (($this) + ($907)|0);
         $909 = HEAP8[$908]|0;
         $910 = $909&255;
         $911 = $907&255;
         HEAP8[$903] = $911;
         $flags$0$be = $910;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $pc$13;$s_time$1$be = $s_time$14;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
        }
        else if ((label|0) == 155) {
         label = 0;
         $925 = (($32) + ($data$13)|0);
         $926 = HEAP8[$925]|0;
         $927 = $926&255;
         $928 = $927 & 1;
         $929 = $927 << 7;
         $930 = $929 & 128;
         $931 = $927 >>> 1;
         $932 = $930 | $931;
         $933 = (($this) + ($932)|0);
         $934 = HEAP8[$933]|0;
         $935 = $934&255;
         $936 = $928 | $935;
         $937 = $932&255;
         HEAP8[$925] = $937;
         $flags$0$be = $936;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $pc$14;$s_time$1$be = $s_time$15;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
        }
        else if ((label|0) == 158) {
         label = 0;
         $955 = (($32) + ($data$14)|0);
         $956 = HEAP8[$955]|0;
         $957 = $956&255;
         $958 = $957 & 1;
         $959 = $flags$053 << 7;
         $960 = $959 & 128;
         $961 = $957 >>> 1;
         $962 = $961 | $960;
         $963 = (($this) + ($962)|0);
         $964 = HEAP8[$963]|0;
         $965 = $964&255;
         $966 = $965 | $958;
         $967 = $962&255;
         HEAP8[$955] = $967;
         $flags$0$be = $966;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $pc$15;$s_time$1$be = $s_time$16;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
        }
        else if ((label|0) == 161) {
         label = 0;
         $985 = (($32) + ($data$15)|0);
         $986 = HEAP8[$985]|0;
         $987 = $986&255;
         $988 = $987 & 1;
         $989 = $987 & 128;
         $990 = $987 >>> 1;
         $991 = $989 | $990;
         $992 = (($this) + ($991)|0);
         $993 = HEAP8[$992]|0;
         $994 = $993&255;
         $995 = $988 | $994;
         $996 = $991&255;
         HEAP8[$985] = $996;
         $flags$0$be = $995;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $pc$16;$s_time$1$be = $s_time$17;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
        }
        else if ((label|0) == 164) {
         label = 0;
         $1013 = (($32) + ($data$16)|0);
         $1014 = HEAP8[$1013]|0;
         $1015 = $1014&255;
         $1016 = $1015 & 1;
         $1017 = $1015 >>> 1;
         $1018 = (($this) + ($1017)|0);
         $1019 = HEAP8[$1018]|0;
         $1020 = $1019&255;
         $1021 = $1016 | $1020;
         $1022 = $1017&255;
         HEAP8[$1013] = $1022;
         $flags$0$be = $1021;$ix$0$be = $ix$074;$iy$0$be = $iy$059;$pc$1$be = $pc$17;$s_time$1$be = $s_time$18;$sp$0$be = $sp$089;$warning$0$off0$be = $warning$0$off0107;
        }
        $267 = (($32) + ($pc$1$be)|0);
        $268 = HEAP8[$267]|0;
        $269 = $268&255;
        $270 = (35416 + ($269)|0);
        $271 = HEAP8[$270]|0;
        $272 = $271&255;
        $273 = (($272) + ($s_time$1$be))|0;
        $274 = ($273|0)<(0);
        $275 = ($273|0)<($272|0);
        $or$cond = $274 | $275;
        if ($or$cond) {
         $$in = $pc$1$be;$278 = $273;$279 = $269;$280 = $268;$flags$053 = $flags$0$be;$ix$074 = $ix$0$be;$iy$059 = $iy$0$be;$sp$089 = $sp$0$be;$warning$0$off0107 = $warning$0$off0$be;
        } else {
         $flags$025 = $flags$0$be;$ix$033 = $ix$0$be;$iy$029 = $iy$0$be;$pc$141 = $pc$1$be;$s_time$22 = $s_time$1$be;$sp$037 = $sp$0$be;$warning$0$off048 = $warning$0$off0$be;
         label = 266;
         break;
        }
       }
       if ((label|0) == 172) {
        ___assert_fail(((35672)|0),((35680)|0),1025,((35720)|0));
        // unreachable;
       }
       else if ((label|0) == 264) {
        ___assert_fail(((35672)|0),((35680)|0),1648,((35720)|0));
        // unreachable;
       }
       else if ((label|0) == 265) {
        $1558 = $278 & 3;
        $flags$025 = $flags$053;$ix$033 = $ix$074;$iy$029 = $iy$059;$pc$141 = $$in;$s_time$22 = $1558;$sp$037 = $sp$089;$warning$0$off048 = $warning$0$off0107;
        HEAP32[$29>>2] = $s_time$22;
        $1559 = $flags$025&255;
        $1560 = (($15) + 7|0);
        HEAP8[$1560] = $1559;
        $1561 = $ix$033&65535;
        HEAP16[$39>>1] = $1561;
        $1562 = $iy$029&65535;
        HEAP16[$42>>1] = $1562;
        $1563 = $sp$037&65535;
        HEAP16[$36>>1] = $1563;
        $1564 = $pc$141&65535;
        HEAP16[$33>>1] = $1564;
        $1565 = $1;
        $1566 = $1565;
        $1567 = HEAP32[$1566>>2]|0;
        $1568 = (($1565) + 4)|0;
        $1569 = $1568;
        $1570 = HEAP32[$1569>>2]|0;
        $1571 = $18;
        $1572 = $1571;
        HEAP8[$1572]=$1567&255;HEAP8[$1572+1|0]=($1567>>8)&255;HEAP8[$1572+2|0]=($1567>>16)&255;HEAP8[$1572+3|0]=$1567>>24;
        $1573 = (($1571) + 4)|0;
        $1574 = $1573;
        HEAP8[$1574]=$1570&255;HEAP8[$1574+1|0]=($1570>>8)&255;HEAP8[$1574+2|0]=($1570>>16)&255;HEAP8[$1574+3|0]=$1570>>24;
        $1575 = $s;
        $1576 = $1575;
        $1577 = HEAP32[$1576>>2]|0;
        $1578 = (($1575) + 4)|0;
        $1579 = $1578;
        $1580 = HEAP32[$1579>>2]|0;
        $1581 = $3;
        $1582 = $1581;
        HEAP32[$1582>>2] = $1577;
        $1583 = (($1581) + 4)|0;
        $1584 = $1583;
        HEAP32[$1584>>2] = $1580;
        HEAP32[$14>>2] = $2;
        STACKTOP = sp;return ($warning$0$off048|0);
       }
       else if ((label|0) == 266) {
        HEAP32[$29>>2] = $s_time$22;
        $1559 = $flags$025&255;
        $1560 = (($15) + 7|0);
        HEAP8[$1560] = $1559;
        $1561 = $ix$033&65535;
        HEAP16[$39>>1] = $1561;
        $1562 = $iy$029&65535;
        HEAP16[$42>>1] = $1562;
        $1563 = $sp$037&65535;
        HEAP16[$36>>1] = $1563;
        $1564 = $pc$141&65535;
        HEAP16[$33>>1] = $1564;
        $1565 = $1;
        $1566 = $1565;
        $1567 = HEAP32[$1566>>2]|0;
        $1568 = (($1565) + 4)|0;
        $1569 = $1568;
        $1570 = HEAP32[$1569>>2]|0;
        $1571 = $18;
        $1572 = $1571;
        HEAP8[$1572]=$1567&255;HEAP8[$1572+1|0]=($1567>>8)&255;HEAP8[$1572+2|0]=($1567>>16)&255;HEAP8[$1572+3|0]=$1567>>24;
        $1573 = (($1571) + 4)|0;
        $1574 = $1573;
        HEAP8[$1574]=$1570&255;HEAP8[$1574+1|0]=($1570>>8)&255;HEAP8[$1574+2|0]=($1570>>16)&255;HEAP8[$1574+3|0]=$1570>>24;
        $1575 = $s;
        $1576 = $1575;
        $1577 = HEAP32[$1576>>2]|0;
        $1578 = (($1575) + 4)|0;
        $1579 = $1578;
        $1580 = HEAP32[$1579>>2]|0;
        $1581 = $3;
        $1582 = $1581;
        HEAP32[$1582>>2] = $1577;
        $1583 = (($1581) + 4)|0;
        $1584 = $1583;
        HEAP32[$1584>>2] = $1580;
        HEAP32[$14>>2] = $2;
        STACKTOP = sp;return ($warning$0$off048|0);
       }
       return 0|0;
      }
      function __ZN6Ay_Cpu12set_end_timeEl($this,$t) {
       $this = $this|0;
       $t = $t|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 520|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = ($2);
       $4 = HEAP32[$3>>2]|0;
       $5 = (($4) - ($t))|0;
       HEAP32[$3>>2] = $t;
       $6 = HEAP32[$1>>2]|0;
       $7 = (($6) + 4|0);
       $8 = HEAP32[$7>>2]|0;
       $9 = (($5) + ($8))|0;
       HEAP32[$7>>2] = $9;
       STACKTOP = sp;return;
      }
      function __Z8get_le16PKv($p) {
       $p = $p|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($p) + 1|0);
       $2 = HEAP8[$1]|0;
       $3 = $2&255;
       $4 = $3 << 8;
       $5 = HEAP8[$p]|0;
       $6 = $5&255;
       $7 = $4 | $6;
       STACKTOP = sp;return ($7|0);
      }
      function __Z8set_le16Pvj($p,$n) {
       $p = $p|0;
       $n = $n|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $n >>> 8;
       $2 = $1&255;
       $3 = (($p) + 1|0);
       HEAP8[$3] = $2;
       $4 = $n&255;
       HEAP8[$p] = $4;
       STACKTOP = sp;return;
      }
      function __ZN6Ay_EmuC2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 336|0);
       $2 = $1;
       __ZN6Ay_CpuC2Ev($2);
       $3 = ($this);
       __ZN11Classic_EmuC2Ev($3);
       $4 = $this;
       HEAP32[$4>>2] = (((35984) + 8|0));
       $5 = (($this) + 66992|0);
       __ZN6Ay_ApuC2Ev($5);
       $6 = (($this) + 920|0);
       HEAP32[$6>>2] = 0;
       $7 = $this;
       __ZN8Gme_File8set_typeEPK11gme_type_t_($7,(36152));
       $8 = $this;
       __ZN9Music_Emu15set_voice_namesEPKPKc($8,((36088)));
       __ZN11Classic_Emu15set_voice_typesEPKi($3,((36136)));
       __ZN9Music_Emu21set_silence_lookaheadEi($8,6);
       STACKTOP = sp;return;
      }
      function __ZN8Gme_File8set_typeEPK11gme_type_t_($this,$t) {
       $this = $this|0;
       $t = $t|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 4|0);
       HEAP32[$1>>2] = $t;
       STACKTOP = sp;return;
      }
      function __ZN9Music_Emu15set_voice_namesEPKPKc($this,$names) {
       $this = $this|0;
       $names = $names|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 228|0);
       HEAP32[$1>>2] = $names;
       STACKTOP = sp;return;
      }
      function __ZN11Classic_Emu15set_voice_typesEPKi($this,$t) {
       $this = $this|0;
       $t = $t|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 332|0);
       HEAP32[$1>>2] = $t;
       STACKTOP = sp;return;
      }
      function __ZN9Music_Emu21set_silence_lookaheadEi($this,$n) {
       $this = $this|0;
       $n = $n|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 284|0);
       HEAP32[$1>>2] = $n;
       STACKTOP = sp;return;
      }
      function ___clang_call_terminate($1) {
       $1 = $1|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       (___cxa_begin_catch(($1|0))|0);
       __ZSt9terminatev();
       // unreachable;
      }
      function __ZN6Ay_EmuD0Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       __ZN6Ay_EmuD2Ev($this);
       $1 = ($this);
       __ZN8Gme_FiledlEPv($1);
       STACKTOP = sp;return;
      }
      function __ZN8Gme_FiledlEPv($p) {
       $p = $p|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       _free($p);
       STACKTOP = sp;return;
      }
      function __ZN6Ay_EmuD2Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       __ZN11Classic_EmuD2Ev($1);
       STACKTOP = sp;return;
      }
      function __ZNK6Ay_Emu11track_info_EP12track_info_ti($this,$out,$track) {
       $this = $this|0;
       $out = $out|0;
       $track = $track|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 900|0);
       __ZL14copy_ay_fieldsRKN6Ay_Emu6file_tEP12track_info_ti($1,$out,$track);
       STACKTOP = sp;return (0|0);
      }
      function __ZL14copy_ay_fieldsRKN6Ay_Emu6file_tEP12track_info_ti($file,$out,$track) {
       $file = $file|0;
       $out = $out|0;
       $track = $track|0;
       var $$sum1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
       var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($out) + 528|0);
       $2 = (($file) + 8|0);
       $3 = HEAP32[$2>>2]|0;
       $4 = $track << 2;
       $5 = (($3) + ($4)|0);
       $6 = (__ZL8get_dataRKN6Ay_Emu6file_tEPKhi($file,$5,1)|0);
       __ZN8Gme_File11copy_field_EPcPKc($1,$6);
       $7 = HEAP32[$2>>2]|0;
       $$sum1 = $4 | 2;
       $8 = (($7) + ($$sum1)|0);
       $9 = (__ZL8get_dataRKN6Ay_Emu6file_tEPKhi($file,$8,6)|0);
       $10 = ($9|0)==(0|0);
       if (!($10)) {
        $11 = (($9) + 4|0);
        $12 = (__Z8get_be16PKv($11)|0);
        $13 = ($12*20)|0;
        $14 = (($out) + 4|0);
        HEAP32[$14>>2] = $13;
       }
       $15 = (($out) + 784|0);
       $16 = ($file);
       $17 = HEAP32[$16>>2]|0;
       $18 = (($17) + 12|0);
       $19 = (__ZL8get_dataRKN6Ay_Emu6file_tEPKhi($file,$18,1)|0);
       __ZN8Gme_File11copy_field_EPcPKc($15,$19);
       $20 = (($out) + 1296|0);
       $21 = HEAP32[$16>>2]|0;
       $22 = (($21) + 14|0);
       $23 = (__ZL8get_dataRKN6Ay_Emu6file_tEPKhi($file,$22,1)|0);
       __ZN8Gme_File11copy_field_EPcPKc($20,$23);
       STACKTOP = sp;return;
      }
      function __ZN6Ay_Emu9load_mem_EPKhl($this,$in,$size) {
       $this = $this|0;
       $in = $in|0;
       $size = $size|0;
       var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 900|0);
       $2 = (__ZL12parse_headerPKhlPN6Ay_Emu6file_tE($in,$size,$1)|0);
       $3 = ($2|0)==(0|0);
       if (!($3)) {
        $$0 = $2;
        STACKTOP = sp;return ($$0|0);
       }
       $4 = $this;
       $5 = ($1);
       $6 = HEAP32[$5>>2]|0;
       $7 = (($6) + 16|0);
       $8 = HEAP8[$7]|0;
       $9 = $8&255;
       $10 = (($9) + 1)|0;
       __ZN8Gme_File15set_track_countEi($4,$10);
       $11 = HEAP32[$5>>2]|0;
       $12 = (($11) + 8|0);
       $13 = HEAP8[$12]|0;
       $14 = ($13&255)>(2);
       if ($14) {
        __ZN8Gme_File11set_warningEPKc($4,(36176));
       }
       $15 = $this;
       __ZN9Music_Emu15set_voice_countEi($15,4);
       $16 = (($this) + 66992|0);
       $17 = (+__ZNK9Music_Emu4gainEv($15));
       __ZN6Ay_Apu6volumeEd($16,$17);
       $18 = ($this);
       $19 = (__ZN11Classic_Emu12setup_bufferEl($18,3546900)|0);
       $$0 = $19;
       STACKTOP = sp;return ($$0|0);
      }
      function __ZL12parse_headerPKhlPN6Ay_Emu6file_tE($in,$size,$out) {
       $in = $in|0;
       $size = $size|0;
       $out = $out|0;
       var $$ = 0, $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $in;
       $2 = ($out);
       HEAP32[$2>>2] = $1;
       $3 = (($in) + ($size)|0);
       $4 = (($out) + 4|0);
       HEAP32[$4>>2] = $3;
       $5 = ($size|0)<(20);
       if ($5) {
        $6 = HEAP32[(40024)>>2]|0;
        $$0 = $6;
        STACKTOP = sp;return ($$0|0);
       }
       $7 = (_memcmp($in,(36616),8)|0);
       $8 = ($7|0)==(0);
       if ($8) {
        $10 = (($in) + 18|0);
        $11 = (($in) + 16|0);
        $12 = HEAP8[$11]|0;
        $13 = $12&255;
        $14 = $13 << 2;
        $15 = (($14) + 4)|0;
        $16 = (__ZL8get_dataRKN6Ay_Emu6file_tEPKhi($out,$10,$15)|0);
        $17 = (($out) + 8|0);
        HEAP32[$17>>2] = $16;
        $18 = ($16|0)==(0|0);
        $$ = $18 ? (36632) : 0;
        $$0 = $$;
        STACKTOP = sp;return ($$0|0);
       } else {
        $9 = HEAP32[(40024)>>2]|0;
        $$0 = $9;
        STACKTOP = sp;return ($$0|0);
       }
       return 0|0;
      }
      function __ZN8Gme_File15set_track_countEi($this,$n) {
       $this = $this|0;
       $n = $n|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 12|0);
       HEAP32[$1>>2] = $n;
       $2 = (($this) + 8|0);
       HEAP32[$2>>2] = $n;
       STACKTOP = sp;return;
      }
      function __ZN8Gme_File11set_warningEPKc($this,$s) {
       $this = $this|0;
       $s = $s|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 16|0);
       HEAP32[$1>>2] = $s;
       STACKTOP = sp;return;
      }
      function __ZN9Music_Emu15set_voice_countEi($this,$n) {
       $this = $this|0;
       $n = $n|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 232|0);
       HEAP32[$1>>2] = $n;
       STACKTOP = sp;return;
      }
      function __ZNK9Music_Emu4gainEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0.0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 248|0);
       $2 = +HEAPF64[$1>>3];
       STACKTOP = sp;return (+$2);
      }
      function __ZN6Ay_Emu9update_eqERK9blip_eq_t($this,$eq) {
       $this = $this|0;
       $eq = $eq|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 66992|0);
       __ZN6Ay_Apu9treble_eqERK9blip_eq_t($1,$eq);
       STACKTOP = sp;return;
      }
      function __ZN6Ay_Apu9treble_eqERK9blip_eq_t($this,$eq) {
       $this = $this|0;
       $eq = $eq|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 472|0);
       __ZN10Blip_SynthILi12ELi1EE9treble_eqERK9blip_eq_t($1,$eq);
       STACKTOP = sp;return;
      }
      function __ZN6Ay_Emu9set_voiceEiP11Blip_BufferS1_S1_($this,$i,$center,u$0,u$1) {
       $this = $this|0;
       $i = $i|0;
       $center = $center|0;
       u$0 = u$0|0;
       u$1 = u$1|0;
       var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($i|0)>(2);
       if ($1) {
        $2 = (($this) + 920|0);
        HEAP32[$2>>2] = $center;
        STACKTOP = sp;return;
       } else {
        $3 = (($this) + 66992|0);
        __ZN6Ay_Apu10osc_outputEiP11Blip_Buffer($3,$i,$center);
        STACKTOP = sp;return;
       }
      }
      function __ZN6Ay_Emu10set_tempo_Ed($this,$t) {
       $this = $this|0;
       $t = +$t;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = (__ZNK11Classic_Emu10clock_rateEv($1)|0);
       $3 = (($2|0) / 50)&-1;
       $4 = (+($3|0));
       $5 = $4 / $t;
       $6 = (~~(($5)));
       $7 = (($this) + 912|0);
       HEAP32[$7>>2] = $6;
       STACKTOP = sp;return;
      }
      function __ZNK11Classic_Emu10clock_rateEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 324|0);
       $2 = HEAP32[$1>>2]|0;
       STACKTOP = sp;return ($2|0);
      }
      function __ZN6Ay_Emu12start_track_Ei($this,$track) {
       $this = $this|0;
       $track = $track|0;
       var $$ = 0, $$0 = 0, $$sum2 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0;
       var $114 = 0, $115 = 0, $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
       var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
       var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
       var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
       var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $addr$0 = 0;
       var $blocks$0 = 0, $len$0 = 0, $len$1 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = (__ZN11Classic_Emu12start_track_Ei($1,$track)|0);
       $3 = ($2|0)==(0|0);
       if (!($3)) {
        $$0 = $2;
        STACKTOP = sp;return ($$0|0);
       }
       $4 = (($this) + 1198|0);
       _memset(($4|0),-55,256)|0;
       $5 = (($this) + 1454|0);
       _memset(($5|0),-1,16128)|0;
       $6 = (($this) + 17582|0);
       _memset(($6|0),0,49152)|0;
       $7 = (($this) + 942|0);
       _memset(($7|0),-1,256)|0;
       $8 = (($this) + 66734|0);
       _memset(($8|0),-1,256)|0;
       $9 = (($this) + 900|0);
       $10 = (($this) + 908|0);
       $11 = HEAP32[$10>>2]|0;
       $12 = $track << 2;
       $$sum2 = $12 | 2;
       $13 = (($11) + ($$sum2)|0);
       $14 = (__ZL8get_dataRKN6Ay_Emu6file_tEPKhi($9,$13,14)|0);
       $15 = ($14|0)==(0|0);
       if ($15) {
        $$0 = (36200);
        STACKTOP = sp;return ($$0|0);
       }
       $16 = (($14) + 10|0);
       $17 = (__ZL8get_dataRKN6Ay_Emu6file_tEPKhi($9,$16,6)|0);
       $18 = ($17|0)==(0|0);
       if ($18) {
        $$0 = (36200);
        STACKTOP = sp;return ($$0|0);
       }
       $19 = (($14) + 12|0);
       $20 = (__ZL8get_dataRKN6Ay_Emu6file_tEPKhi($9,$19,8)|0);
       $21 = ($20|0)==(0|0);
       if ($21) {
        $$0 = (36200);
        STACKTOP = sp;return ($$0|0);
       }
       $22 = (($this) + 336|0);
       $23 = $22;
       __ZN6Ay_Cpu5resetEPv($23,$4);
       $24 = (__Z8get_be16PKv($17)|0);
       $25 = $24&65535;
       $26 = (($this) + 870|0);
       $27 = $26;
       HEAP16[$27>>1] = $25;
       $28 = (($14) + 8|0);
       $29 = HEAP8[$28]|0;
       $30 = (($this) + 876|0);
       $31 = (($this) + 881|0);
       HEAP8[$31] = $29;
       $32 = (($this) + 879|0);
       HEAP8[$32] = $29;
       $33 = (($this) + 877|0);
       HEAP8[$33] = $29;
       $34 = (($this) + 882|0);
       HEAP8[$34] = $29;
       $35 = (($14) + 9|0);
       $36 = HEAP8[$35]|0;
       $37 = (($this) + 880|0);
       HEAP8[$37] = $36;
       $38 = (($this) + 878|0);
       HEAP8[$38] = $36;
       HEAP8[$30] = $36;
       $39 = (($this) + 883|0);
       HEAP8[$39] = $36;
       $40 = (($this) + 884|0);
       $41 = $30;
       $42 = $40;
       $43 = $41;
       $44 = $43;
       $45 = HEAPU16[$44>>1]|(HEAPU16[$44+2>>1]<<16);
       $46 = (($43) + 4)|0;
       $47 = $46;
       $48 = HEAPU16[$47>>1]|(HEAPU16[$47+2>>1]<<16);
       $49 = $42;
       $50 = $49;
       HEAP16[$50>>1]=$45&65535;HEAP16[$50+2>>1]=$45>>>16;
       $51 = (($49) + 4)|0;
       $52 = $51;
       HEAP16[$52>>1]=$48&65535;HEAP16[$52+2>>1]=$48>>>16;
       $53 = $37;
       $54 = HEAP16[$53>>1]|0;
       $55 = (($this) + 874|0);
       $56 = $55;
       HEAP16[$56>>1] = $54;
       $57 = (($this) + 872|0);
       $58 = $57;
       HEAP16[$58>>1] = $54;
       $59 = (__Z8get_be16PKv($20)|0);
       $60 = ($59|0)==(0);
       if ($60) {
        $$0 = (36200);
        STACKTOP = sp;return ($$0|0);
       }
       $61 = (($17) + 2|0);
       $62 = (__Z8get_be16PKv($61)|0);
       $63 = ($62|0)==(0);
       $$ = $63 ? $59 : $62;
       $64 = $this;
       $65 = (($this) + 904|0);
       $66 = $this;
       $addr$0 = $59;$blocks$0 = $20;
       while(1) {
        $67 = (($blocks$0) + 2|0);
        $68 = (__Z8get_be16PKv($67)|0);
        $69 = (($blocks$0) + 4|0);
        $70 = (($68) + ($addr$0))|0;
        $71 = ($70>>>0)>(65536);
        if ($71) {
         __ZN8Gme_File11set_warningEPKc($64,(36224));
         $72 = (65536 - ($addr$0))|0;
         $len$0 = $72;
        } else {
         $len$0 = $68;
        }
        $73 = (__ZL8get_dataRKN6Ay_Emu6file_tEPKhi($9,$69,0)|0);
        $74 = (($blocks$0) + 6|0);
        $75 = HEAP32[$65>>2]|0;
        $76 = $75;
        $77 = $73;
        $78 = (($76) - ($77))|0;
        $79 = ($len$0>>>0)>($78>>>0);
        if ($79) {
         __ZN8Gme_File11set_warningEPKc($66,(36248));
         $80 = HEAP32[$65>>2]|0;
         $81 = $80;
         $82 = (($81) - ($77))|0;
         $len$1 = $82;
        } else {
         $len$1 = $len$0;
        }
        $83 = ((($this) + ($addr$0)|0) + 1198|0);
        _memcpy(($83|0),($73|0),($len$1|0))|0;
        $84 = HEAP32[$65>>2]|0;
        $85 = $84;
        $86 = $74;
        $87 = (($85) - ($86))|0;
        $88 = ($87|0)<(8);
        if ($88) {
         label = 12;
         break;
        }
        $90 = (__Z8get_be16PKv($74)|0);
        $91 = ($90|0)==(0);
        if ($91) {
         break;
        } else {
         $addr$0 = $90;$blocks$0 = $74;
        }
       }
       if ((label|0) == 12) {
        $89 = $this;
        __ZN8Gme_File11set_warningEPKc($89,(36248));
       }
       dest=$4+0|0; src=(36272)+0|0; stop=dest+10|0; do { HEAP8[dest]=HEAP8[src]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));;
       $92 = (($17) + 4|0);
       $93 = (__Z8get_be16PKv($92)|0);
       $94 = ($93|0)==(0);
       if (!($94)) {
        dest=$4+0|0; src=(36288)+0|0; stop=dest+13|0; do { HEAP8[dest]=HEAP8[src]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));;
        $95 = $93&255;
        $96 = (($this) + 1207|0);
        HEAP8[$96] = $95;
        $97 = $93 >>> 8;
        $98 = $97&255;
        $99 = (($this) + 1208|0);
        HEAP8[$99] = $98;
       }
       $100 = $$&255;
       $101 = (($this) + 1200|0);
       HEAP8[$101] = $100;
       $102 = $$ >>> 8;
       $103 = $102&255;
       $104 = (($this) + 1201|0);
       HEAP8[$104] = $103;
       $105 = (($this) + 1254|0);
       HEAP8[$105] = -5;
       dest=$8+0|0; src=$4+0|0; stop=dest+128|0; do { HEAP8[dest]=HEAP8[src]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));;
       $106 = (($this) + 924|0);
       HEAP32[$106>>2] = 165;
       $107 = (($this) + 928|0);
       HEAP32[$107>>2] = 0;
       $108 = (($this) + 66992|0);
       __ZN6Ay_Apu5resetEv($108);
       $109 = (($this) + 912|0);
       $110 = HEAP32[$109>>2]|0;
       $111 = (($this) + 916|0);
       HEAP32[$111>>2] = $110;
       __ZN11Classic_Emu17change_clock_rateEl($1,3546900);
       $112 = $this;
       $113 = (+__ZNK9Music_Emu5tempoEv($112));
       __ZN9Music_Emu9set_tempoEd($112,$113);
       $114 = (($this) + 940|0);
       HEAP8[$114] = 0;
       $115 = (($this) + 941|0);
       HEAP8[$115] = 0;
       $116 = (($this) + 936|0);
       HEAP32[$116>>2] = 0;
       $$0 = 0;
       STACKTOP = sp;return ($$0|0);
      }
      function __ZL8get_dataRKN6Ay_Emu6file_tEPKhi($file,$ptr,$min_size) {
       $file = $file|0;
       $ptr = $ptr|0;
       $min_size = $min_size|0;
       var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sext = 0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($file);
       $2 = HEAP32[$1>>2]|0;
       $3 = $ptr;
       $4 = $2;
       $5 = (($3) - ($4))|0;
       $6 = (($file) + 4|0);
       $7 = HEAP32[$6>>2]|0;
       $8 = $7;
       $9 = (($8) - ($4))|0;
       $10 = (($9) + -2)|0;
       $11 = ($5>>>0)>($10>>>0);
       if ($11) {
        ___assert_fail(((36504)|0),((36560)|0),52,((36600)|0));
        // unreachable;
       }
       $12 = (__Z8get_be16PKv($ptr)|0);
       $sext = $12 << 16;
       $13 = $sext >> 16;
       $14 = ($13|0)==(0);
       if ($14) {
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
       }
       $15 = (($13) + ($5))|0;
       $16 = (($9) - ($min_size))|0;
       $17 = ($15>>>0)>($16>>>0);
       if ($17) {
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
       }
       $18 = (($ptr) + ($13)|0);
       $$0 = $18;
       STACKTOP = sp;return ($$0|0);
      }
      function __Z8get_be16PKv($p) {
       $p = $p|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = HEAP8[$p]|0;
       $2 = $1&255;
       $3 = $2 << 8;
       $4 = (($p) + 1|0);
       $5 = HEAP8[$4]|0;
       $6 = $5&255;
       $7 = $3 | $6;
       STACKTOP = sp;return ($7|0);
      }
      function __ZNK9Music_Emu5tempoEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0.0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 240|0);
       $2 = +HEAPF64[$1>>3];
       STACKTOP = sp;return (+$2);
      }
      function __ZN6Ay_Emu12cpu_out_miscElji($this,$time,$addr,$data) {
       $this = $this|0;
       $time = $time|0;
       $addr = $addr|0;
       $data = $data|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
       var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 941|0);
       $2 = HEAP8[$1]|0;
       $3 = ($2<<24>>24)==(0);
       do {
        if ($3) {
         $4 = $addr & 65279;
         if ((($4|0) == 48893)) {
          $8 = (($this) + 940|0);
          HEAP8[$8] = 1;
          $9 = (($this) + 66992|0);
          $10 = (($this) + 932|0);
          $11 = HEAP32[$10>>2]|0;
          __ZN6Ay_Apu5writeEiii($9,$time,$11,$data);
          STACKTOP = sp;return;
         } else if ((($4|0) == 65277)) {
          $5 = (($this) + 940|0);
          HEAP8[$5] = 1;
          $6 = $data & 15;
          $7 = (($this) + 932|0);
          HEAP32[$7>>2] = $6;
          STACKTOP = sp;return;
         } else {
          break;
         }
        }
       } while(0);
       $12 = (($this) + 940|0);
       $13 = HEAP8[$12]|0;
       $14 = ($13<<24>>24)==(0);
       if (!($14)) {
        STACKTOP = sp;return;
       }
       $15 = $addr >>> 8;
       do {
        if ((($15|0) == 246)) {
         $16 = $data & 192;
         if ((($16|0) == 192)) {
          $17 = (($this) + 936|0);
          $18 = HEAP32[$17>>2]|0;
          $19 = $18 & 15;
          $20 = (($this) + 932|0);
          HEAP32[$20>>2] = $19;
          break;
         } else if ((($16|0) == 128)) {
          $21 = (($this) + 66992|0);
          $22 = (($this) + 932|0);
          $23 = HEAP32[$22>>2]|0;
          $24 = (($this) + 936|0);
          $25 = HEAP32[$24>>2]|0;
          __ZN6Ay_Apu5writeEiii($21,$time,$23,$25);
          break;
         } else {
          STACKTOP = sp;return;
         }
        } else if ((($15|0) == 244)) {
         $26 = (($this) + 936|0);
         HEAP32[$26>>2] = $data;
        } else {
         STACKTOP = sp;return;
        }
       } while(0);
       $27 = HEAP8[$1]|0;
       $28 = ($27<<24>>24)==(0);
       if (!($28)) {
        STACKTOP = sp;return;
       }
       HEAP8[$1] = 1;
       $29 = ($this);
       __ZN11Classic_Emu17change_clock_rateEl($29,2000000);
       $30 = $this;
       $31 = (+__ZNK9Music_Emu5tempoEv($30));
       __ZN9Music_Emu9set_tempoEd($30,$31);
       STACKTOP = sp;return;
      }
      function __ZN6Ay_Apu5writeEiii($this,$time,$addr,$data) {
       $this = $this|0;
       $time = $time|0;
       $addr = $addr|0;
       $data = $data|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN6Ay_Apu9run_untilEi($this,$time);
       __ZN6Ay_Apu11write_data_Eii($this,$addr,$data);
       STACKTOP = sp;return;
      }
      function __Z10ay_cpu_outP6Ay_Cpulji($cpu,$time,$addr,$data) {
       $cpu = $cpu|0;
       $time = $time|0;
       $addr = $addr|0;
       $data = $data|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
       var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($cpu) + -336|0);
       $2 = $1;
       $3 = $addr & 255;
       $4 = ($3|0)==(254);
       do {
        if ($4) {
         $5 = (($cpu) + 605|0);
         $6 = HEAP8[$5]|0;
         $7 = ($6<<24>>24)==(0);
         if (!($7)) {
          break;
         }
         $8 = (($cpu) + 588|0);
         $9 = $8;
         $10 = HEAP32[$9>>2]|0;
         $11 = $data & 16;
         $12 = (($cpu) + 592|0);
         $13 = $12;
         $14 = HEAP32[$13>>2]|0;
         $15 = ($14|0)==($11|0);
         if ($15) {
          STACKTOP = sp;return;
         }
         HEAP32[$13>>2] = $11;
         $16 = (0 - ($10))|0;
         HEAP32[$9>>2] = $16;
         $17 = (($cpu) + 604|0);
         HEAP8[$17] = 1;
         $18 = (($cpu) + 584|0);
         $19 = $18;
         $20 = HEAP32[$19>>2]|0;
         $21 = ($20|0)==(0|0);
         if ($21) {
          STACKTOP = sp;return;
         }
         $22 = (($cpu) + 67128|0);
         $23 = $22;
         __ZNK10Blip_SynthILi12ELi1EE6offsetEiiP11Blip_Buffer($23,$time,$10,$20);
         STACKTOP = sp;return;
        }
       } while(0);
       __ZN6Ay_Emu12cpu_out_miscElji($2,$time,$addr,$data);
       STACKTOP = sp;return;
      }
      function __Z9ay_cpu_inP6Ay_Cpuj(u$0,$addr) {
       u$0 = u$0|0;
       $addr = $addr|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       STACKTOP = sp;return 255;
      }
      function __ZN6Ay_Emu10run_clocksERii($this,$duration,u$0) {
       $this = $this|0;
       $duration = $duration|0;
       u$0 = u$0|0;
       var $$lcssa = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
       var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
       var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
       var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 336|0);
       $2 = $1;
       __ZN6Ay_Cpu8set_timeEl($2,0);
       $3 = (($this) + 940|0);
       $4 = HEAP8[$3]|0;
       $5 = (($this) + 941|0);
       $6 = HEAP8[$5]|0;
       $7 = $6 | $4;
       $8 = ($7<<24>>24)==(0);
       if ($8) {
        $9 = HEAP32[$duration>>2]|0;
        $10 = (($9|0) / 2)&-1;
        HEAP32[$duration>>2] = $10;
       }
       $11 = (__ZNK6Ay_Cpu4timeEv($2)|0);
       $12 = HEAP32[$duration>>2]|0;
       $13 = ($11|0)<($12|0);
       if (!($13)) {
        $$lcssa = $11;
        HEAP32[$duration>>2] = $$lcssa;
        $73 = (($this) + 916|0);
        $74 = HEAP32[$73>>2]|0;
        $75 = (($74) - ($$lcssa))|0;
        HEAP32[$73>>2] = $75;
        $76 = HEAP32[$duration>>2]|0;
        $77 = (0 - ($76))|0;
        __ZN6Ay_Cpu11adjust_timeEi($2,$77);
        $78 = (($this) + 66992|0);
        $79 = HEAP32[$duration>>2]|0;
        __ZN6Ay_Apu9end_frameEi($78,$79);
        STACKTOP = sp;return (0|0);
       }
       $14 = (($this) + 916|0);
       $15 = (($this) + 912|0);
       $16 = (($this) + 892|0);
       $17 = (($this) + 868|0);
       $18 = $17;
       $19 = (($this) + 893|0);
       $20 = (($this) + 870|0);
       $21 = $20;
       $22 = (($this) + 896|0);
       $23 = (($this) + 895|0);
       $24 = $12;
       while(1) {
        $25 = HEAP32[$14>>2]|0;
        $26 = (__ZL3minii($24,$25)|0);
        (__ZN6Ay_Cpu3runEl($2,$26)|0);
        $27 = (__ZNK6Ay_Cpu4timeEv($2)|0);
        $28 = HEAP32[$14>>2]|0;
        $29 = ($27|0)<($28|0);
        do {
         if (!($29)) {
          $30 = HEAP32[$15>>2]|0;
          $31 = (($30) + ($28))|0;
          HEAP32[$14>>2] = $31;
          $32 = HEAP8[$16]|0;
          $33 = ($32<<24>>24)==(0);
          if ($33) {
           break;
          }
          $34 = HEAP16[$18>>1]|0;
          $35 = $34&65535;
          $36 = ((($this) + ($35)|0) + 1198|0);
          $37 = HEAP8[$36]|0;
          $38 = ($37<<24>>24)==(118);
          if ($38) {
           $39 = (($34) + 1)<<16>>16;
           HEAP16[$18>>1] = $39;
          }
          HEAP8[$19] = 0;
          HEAP8[$16] = 0;
          $40 = HEAP16[$18>>1]|0;
          $41 = ($40&65535) >>> 8;
          $42 = $41&255;
          $43 = HEAP16[$21>>1]|0;
          $44 = (($43) + -1)<<16>>16;
          HEAP16[$21>>1] = $44;
          $45 = $44&65535;
          $46 = ((($this) + ($45)|0) + 1198|0);
          HEAP8[$46] = $42;
          $47 = HEAP16[$18>>1]|0;
          $48 = $47&255;
          $49 = HEAP16[$21>>1]|0;
          $50 = (($49) + -1)<<16>>16;
          HEAP16[$21>>1] = $50;
          $51 = $50&65535;
          $52 = ((($this) + ($51)|0) + 1198|0);
          HEAP8[$52] = $48;
          HEAP16[$18>>1] = 56;
          __ZN6Ay_Cpu11adjust_timeEi($2,12);
          $53 = HEAP8[$22]|0;
          $54 = ($53<<24>>24)==(2);
          if (!($54)) {
           break;
          }
          __ZN6Ay_Cpu11adjust_timeEi($2,6);
          $55 = HEAP8[$23]|0;
          $56 = $55&255;
          $57 = $56 << 8;
          $58 = $57 | 255;
          $59 = (($58) + 1)|0;
          $60 = $59 & 65535;
          $61 = ((($this) + ($60)|0) + 1198|0);
          $62 = HEAP8[$61]|0;
          $63 = $62&255;
          $64 = $63 << 8;
          $65 = ((($this) + ($58)|0) + 1198|0);
          $66 = HEAP8[$65]|0;
          $67 = $66&255;
          $68 = $64 | $67;
          $69 = $68&65535;
          HEAP16[$18>>1] = $69;
         }
        } while(0);
        $70 = (__ZNK6Ay_Cpu4timeEv($2)|0);
        $71 = HEAP32[$duration>>2]|0;
        $72 = ($70|0)<($71|0);
        if ($72) {
         $24 = $71;
        } else {
         $$lcssa = $70;
         break;
        }
       }
       HEAP32[$duration>>2] = $$lcssa;
       $73 = (($this) + 916|0);
       $74 = HEAP32[$73>>2]|0;
       $75 = (($74) - ($$lcssa))|0;
       HEAP32[$73>>2] = $75;
       $76 = HEAP32[$duration>>2]|0;
       $77 = (0 - ($76))|0;
       __ZN6Ay_Cpu11adjust_timeEi($2,$77);
       $78 = (($this) + 66992|0);
       $79 = HEAP32[$duration>>2]|0;
       __ZN6Ay_Apu9end_frameEi($78,$79);
       STACKTOP = sp;return (0|0);
      }
      function __ZN6Ay_Cpu8set_timeEl($this,$t) {
       $this = $this|0;
       $t = $t|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 520|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = ($2);
       $4 = HEAP32[$3>>2]|0;
       $5 = (($t) - ($4))|0;
       $6 = (($2) + 4|0);
       HEAP32[$6>>2] = $5;
       STACKTOP = sp;return;
      }
      function __ZNK6Ay_Cpu4timeEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 520|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = (($2) + 4|0);
       $4 = HEAP32[$3>>2]|0;
       $5 = ($2);
       $6 = HEAP32[$5>>2]|0;
       $7 = (($6) + ($4))|0;
       STACKTOP = sp;return ($7|0);
      }
      function __ZL3minii($x,$y) {
       $x = $x|0;
       $y = $y|0;
       var $1 = 0, $x$y = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($x|0)<($y|0);
       $x$y = $1 ? $x : $y;
       STACKTOP = sp;return ($x$y|0);
      }
      function __ZN6Ay_Cpu11adjust_timeEi($this,$delta) {
       $this = $this|0;
       $delta = $delta|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 520|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = (($2) + 4|0);
       $4 = HEAP32[$3>>2]|0;
       $5 = (($4) + ($delta))|0;
       HEAP32[$3>>2] = $5;
       STACKTOP = sp;return;
      }
      function __ZN6Ay_Apu9end_frameEi($this,$time) {
       $this = $this|0;
       $time = $time|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 48|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = ($2|0)<($time|0);
       if ($3) {
        __ZN6Ay_Apu9run_untilEi($this,$time);
       }
       $4 = HEAP32[$1>>2]|0;
       $5 = ($4|0)<($time|0);
       if ($5) {
        ___assert_fail(((36432)|0),((36456)|0),102,((36488)|0));
        // unreachable;
       } else {
        $6 = (($4) - ($time))|0;
        HEAP32[$1>>2] = $6;
        STACKTOP = sp;return;
       }
      }
      function __ZN8Gme_File15clear_playlist_Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       STACKTOP = sp;return;
      }
      function __ZN11Classic_Emu10set_bufferEP12Multi_Buffer($this,$new_buf) {
       $this = $this|0;
       $new_buf = $new_buf|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $or$cond = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 316|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = ($2|0)!=(0|0);
       $4 = ($new_buf|0)==(0|0);
       $or$cond = $3 | $4;
       if ($or$cond) {
        ___assert_fail(((36360)|0),((36376)|0),45,((36416)|0));
        // unreachable;
       } else {
        HEAP32[$1>>2] = $new_buf;
        STACKTOP = sp;return;
       }
      }
      function __ZN9Music_Emu16enable_accuracy_Eb($this,u$0) {
       $this = $this|0;
       u$0 = u$0|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       STACKTOP = sp;return;
      }
      function __ZN10Blip_SynthILi12ELi1EE9treble_eqERK9blip_eq_t($this,$eq) {
       $this = $this|0;
       $eq = $eq|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       __ZN11Blip_Synth_9treble_eqERK9blip_eq_t($1,$eq);
       STACKTOP = sp;return;
      }
      function __ZL10new_ay_emuv() {
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (__ZN8Gme_FilenwEj(68280)|0);
       $2 = ($1|0)==(0|0);
       if ($2) {
        $4 = 0;
       } else {
        $3 = $1;
        __ZN6Ay_EmuC2Ev($3);
        $4 = $3;
       }
       $5 = $4;
       STACKTOP = sp;return ($5|0);
      }
      function __ZL11new_ay_filev() {
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (__ZN8Gme_FilenwEj(328)|0);
       $2 = ($1|0)==(0|0);
       if ($2) {
        $4 = 0;
       } else {
        $3 = $1;
        __ZN7Ay_FileC1Ev($3);
        $4 = $3;
       }
       $5 = $4;
       STACKTOP = sp;return ($5|0);
      }
      function __ZN8Gme_FilenwEj($s) {
       $s = $s|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (_malloc($s)|0);
       STACKTOP = sp;return ($1|0);
      }
      function __ZN7Ay_FileC1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN7Ay_FileC2Ev($this);
       STACKTOP = sp;return;
      }
      function __ZN7Ay_FileC2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $this;
       __ZN9Gme_Info_C2Ev($1);
       $2 = $this;
       HEAP32[$2>>2] = (((36680) + 8|0));
       $3 = $this;
       __ZN8Gme_File8set_typeEPK11gme_type_t_($3,(36152));
       STACKTOP = sp;return;
      }
      function __ZN9Gme_Info_C2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       __ZN9Music_EmuC2Ev($1);
       $2 = ($this);
       HEAP32[$2>>2] = ((((44472) + 8|0)));
       STACKTOP = sp;return;
      }
      function __ZN9Gme_Info_D2Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       __ZN9Music_EmuD2Ev($1);
       STACKTOP = sp;return;
      }
      function __ZN7Ay_FileD1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN7Ay_FileD2Ev($this);
       STACKTOP = sp;return;
      }
      function __ZN7Ay_FileD0Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       __ZN7Ay_FileD1Ev($this);
       $1 = ($this);
       __ZN8Gme_FiledlEPv($1);
       STACKTOP = sp;return;
      }
      function __ZN7Ay_File9load_mem_EPKhl($this,$begin,$size) {
       $this = $this|0;
       $begin = $begin|0;
       $size = $size|0;
       var $$0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 316|0);
       $2 = (__ZL12parse_headerPKhlPN6Ay_Emu6file_tE($begin,$size,$1)|0);
       $3 = ($2|0)==(0|0);
       if (!($3)) {
        $$0 = $2;
        STACKTOP = sp;return ($$0|0);
       }
       $4 = $this;
       $5 = ($1);
       $6 = HEAP32[$5>>2]|0;
       $7 = (($6) + 16|0);
       $8 = HEAP8[$7]|0;
       $9 = $8&255;
       $10 = (($9) + 1)|0;
       __ZN8Gme_File15set_track_countEi($4,$10);
       $$0 = 0;
       STACKTOP = sp;return ($$0|0);
      }
      function __ZNK7Ay_File11track_info_EP12track_info_ti($this,$out,$track) {
       $this = $this|0;
       $out = $out|0;
       $track = $track|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 316|0);
       __ZL14copy_ay_fieldsRKN6Ay_Emu6file_tEP12track_info_ti($1,$out,$track);
       STACKTOP = sp;return (0|0);
      }
      function __ZN9Music_Emu10set_bufferEP12Multi_Buffer($this,u$0) {
       $this = $this|0;
       u$0 = u$0|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       STACKTOP = sp;return;
      }
      function __ZN7Ay_FileD2Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $this;
       __ZN9Gme_Info_D2Ev($1);
       STACKTOP = sp;return;
      }
      function __ZN9Gme_Info_D1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN9Gme_Info_D2Ev($this);
       STACKTOP = sp;return;
      }
      function __ZN9Gme_Info_D0Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       __ZN9Gme_Info_D1Ev($this);
       $1 = $this;
       __ZN8Gme_FiledlEPv($1);
       STACKTOP = sp;return;
      }
      function __ZN11Blip_BufferC2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       HEAP32[$1>>2] = 2147483647;
       $2 = (($this) + 4|0);
       $3 = (($this) + 32|0);
       $4 = $2;
       ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;HEAP32[$4+16>>2]=0|0;HEAP32[$4+20>>2]=0|0;HEAP32[$4+24>>2]=0|0;
       HEAP32[$3>>2] = 16;
       $5 = (($this) + 36|0);
       HEAP32[$5>>2] = 0;
       STACKTOP = sp;return;
      }
      function __ZN11Blip_BufferD2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 12|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = ($2|0)==(1);
       if ($3) {
        STACKTOP = sp;return;
       }
       $4 = (($this) + 8|0);
       $5 = HEAP32[$4>>2]|0;
       $6 = $5;
       _free($6);
       STACKTOP = sp;return;
      }
      function __ZN11Blip_Buffer5clearEi($this,$entire_buffer) {
       $this = $this|0;
       $entire_buffer = $entire_buffer|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 4|0);
       HEAP32[$1>>2] = 0;
       $2 = (($this) + 16|0);
       HEAP32[$2>>2] = 0;
       $3 = (($this) + 40|0);
       HEAP32[$3>>2] = 0;
       $4 = (($this) + 8|0);
       $5 = HEAP32[$4>>2]|0;
       $6 = ($5|0)==(0|0);
       if ($6) {
        STACKTOP = sp;return;
       }
       $7 = ($entire_buffer|0)==(0);
       if ($7) {
        $10 = (__ZNK11Blip_Buffer13samples_availEv($this)|0);
        $11 = $10;
       } else {
        $8 = (($this) + 12|0);
        $9 = HEAP32[$8>>2]|0;
        $11 = $9;
       }
       $12 = HEAP32[$4>>2]|0;
       $13 = $12;
       $14 = $11 << 2;
       $15 = (($14) + 72)|0;
       _memset(($13|0),0,($15|0))|0;
       STACKTOP = sp;return;
      }
      function __ZNK11Blip_Buffer13samples_availEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 4|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = $2 >>> 16;
       STACKTOP = sp;return ($3|0);
      }
      function __ZN11Blip_Buffer15set_sample_rateEli($this,$new_rate,$msec) {
       $this = $this|0;
       $new_rate = $new_rate|0;
       $msec = $msec|0;
       var $$0 = 0, $$not = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
       var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $new_size$0 = 0, $or$cond = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 12|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = ($2|0)==(1);
       if ($3) {
        ___assert_fail(((36832)|0),((36792)|0),83,((36840)|0));
        // unreachable;
       }
       $4 = ($msec|0)!=(0);
       do {
        if ($4) {
         $5 = (($msec) + 1)|0;
         $6 = Math_imul($5, $new_rate)|0;
         $7 = (($6) + 999)|0;
         $8 = ($7|0)<(65453000);
         if ($8) {
          $9 = (($7|0) / 1000)&-1;
          $new_size$0 = $9;
          break;
         } else {
          ___assert_fail(((36832)|0),((36792)|0),95,((36840)|0));
          // unreachable;
         }
        } else {
         $new_size$0 = 65453;
        }
       } while(0);
       $10 = HEAP32[$1>>2]|0;
       $11 = ($10|0)==($new_size$0|0);
       do {
        if (!($11)) {
         $12 = (($this) + 8|0);
         $13 = HEAP32[$12>>2]|0;
         $14 = $13;
         $15 = $new_size$0 << 2;
         $16 = (($15) + 72)|0;
         $17 = (_realloc($14,$16)|0);
         $18 = ($17|0)==(0|0);
         if ($18) {
          $$0 = (36856);
          STACKTOP = sp;return ($$0|0);
         } else {
          $19 = $17;
          HEAP32[$12>>2] = $19;
          break;
         }
        }
       } while(0);
       HEAP32[$1>>2] = $new_size$0;
       $20 = ($new_size$0|0)==(1);
       if ($20) {
        ___assert_fail(((36872)|0),((36792)|0),107,((36840)|0));
        // unreachable;
       }
       $21 = (($this) + 24|0);
       HEAP32[$21>>2] = $new_rate;
       $22 = ($new_size$0*1000)|0;
       $23 = (($22|0) / ($new_rate|0))&-1;
       $24 = (($23) + -1)|0;
       $25 = (($this) + 36|0);
       HEAP32[$25>>2] = $24;
       $$not = $4 ^ 1;
       $26 = ($24|0)==($msec|0);
       $or$cond = $26 | $$not;
       if (!($or$cond)) {
        ___assert_fail(((36904)|0),((36792)|0),113,((36840)|0));
        // unreachable;
       }
       $27 = (($this) + 28|0);
       $28 = HEAP32[$27>>2]|0;
       $29 = ($28|0)==(0);
       if (!($29)) {
        __ZN11Blip_Buffer10clock_rateEl($this,$28);
       }
       $30 = (($this) + 32|0);
       $31 = HEAP32[$30>>2]|0;
       __ZN11Blip_Buffer9bass_freqEi($this,$31);
       __ZN11Blip_Buffer5clearEi($this,1);
       $$0 = 0;
       STACKTOP = sp;return ($$0|0);
      }
      function __ZN11Blip_Buffer10clock_rateEl($this,$cps) {
       $this = $this|0;
       $cps = $cps|0;
       var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 28|0);
       HEAP32[$1>>2] = $cps;
       $2 = (__ZNK11Blip_Buffer17clock_rate_factorEl($this,$cps)|0);
       $3 = ($this);
       HEAP32[$3>>2] = $2;
       STACKTOP = sp;return;
      }
      function __ZN11Blip_Buffer9bass_freqEi($this,$freq) {
       $this = $this|0;
       $freq = $freq|0;
       var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$0 = 0, $f$0$phi = 0, $shift$0 = 0, $shift$1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 32|0);
       HEAP32[$1>>2] = $freq;
       $2 = ($freq|0)>(0);
       L1: do {
        if ($2) {
         $3 = $freq << 16;
         $4 = (($this) + 24|0);
         $5 = HEAP32[$4>>2]|0;
         $6 = (($3|0) / ($5|0))&-1;
         $f$0 = $6;$shift$0 = 13;
         while(1) {
          $7 = $f$0 >> 1;
          $8 = ($7|0)==(0);
          if ($8) {
           $shift$1 = $shift$0;
           break L1;
          }
          $9 = (($shift$0) + -1)|0;
          $10 = ($9|0)==(0);
          if ($10) {
           $shift$1 = 0;
           break;
          } else {
           $f$0$phi = $7;$shift$0 = $9;$f$0 = $f$0$phi;
          }
         }
        } else {
         $shift$1 = 31;
        }
       } while(0);
       $11 = (($this) + 20|0);
       HEAP32[$11>>2] = $shift$1;
       STACKTOP = sp;return;
      }
      function __ZNK11Blip_Buffer17clock_rate_factorEl($this,$rate) {
       $this = $this|0;
       $rate = $rate|0;
       var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 24|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = (+($2|0));
       $4 = (+($rate|0));
       $5 = $3 / $4;
       $6 = $5 * 65536.0;
       $7 = $6 + 0.5;
       $8 = (+Math_floor((+$7)));
       $9 = (~~(($8)));
       $10 = ($9|0)>(0);
       $11 = ($2|0)==(0);
       $or$cond = $10 | $11;
       if ($or$cond) {
        STACKTOP = sp;return ($9|0);
       } else {
        ___assert_fail(((36920)|0),((36792)|0),127,((36952)|0));
        // unreachable;
       }
       return 0|0;
      }
      function __ZN11Blip_Buffer9end_frameEi($this,$t) {
       $this = $this|0;
       $t = $t|0;
       var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = HEAP32[$1>>2]|0;
       $3 = Math_imul($2, $t)|0;
       $4 = (($this) + 4|0);
       $5 = HEAP32[$4>>2]|0;
       $6 = (($5) + ($3))|0;
       HEAP32[$4>>2] = $6;
       $7 = (__ZNK11Blip_Buffer13samples_availEv($this)|0);
       $8 = (($this) + 12|0);
       $9 = HEAP32[$8>>2]|0;
       $10 = ($7|0)>($9|0);
       if ($10) {
        ___assert_fail(((36976)|0),((36792)|0),147,((37016)|0));
        // unreachable;
       } else {
        STACKTOP = sp;return;
       }
      }
      function __ZN11Blip_Buffer14remove_silenceEl($this,$count) {
       $this = $this|0;
       $count = $count|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (__ZNK11Blip_Buffer13samples_availEv($this)|0);
       $2 = ($1|0)<($count|0);
       if ($2) {
        ___assert_fail(((37032)|0),((36792)|0),152,((37064)|0));
        // unreachable;
       } else {
        $3 = $count << 16;
        $4 = (($this) + 4|0);
        $5 = HEAP32[$4>>2]|0;
        $6 = (($5) - ($3))|0;
        HEAP32[$4>>2] = $6;
        STACKTOP = sp;return;
       }
      }
      function __ZNK11Blip_Buffer14resampled_timeEi($this,$t) {
       $this = $this|0;
       $t = $t|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = HEAP32[$1>>2]|0;
       $3 = Math_imul($2, $t)|0;
       $4 = (($this) + 4|0);
       $5 = HEAP32[$4>>2]|0;
       $6 = (($3) + ($5))|0;
       STACKTOP = sp;return ($6|0);
      }
      function __ZNK11Blip_Buffer12count_clocksEl($this,$count) {
       $this = $this|0;
       $count = $count|0;
       var $$count = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = HEAP32[$1>>2]|0;
       $3 = ($2|0)==(0);
       if ($3) {
        ___assert_fail(((36832)|0),((36792)|0),167,((37080)|0));
        // unreachable;
       } else {
        $4 = (($this) + 12|0);
        $5 = HEAP32[$4>>2]|0;
        $6 = ($5|0)<($count|0);
        $$count = $6 ? $5 : $count;
        $7 = $$count << 16;
        $8 = (($this) + 4|0);
        $9 = HEAP32[$8>>2]|0;
        $10 = (($2) + -1)|0;
        $11 = (($10) - ($9))|0;
        $12 = (($11) + ($7))|0;
        $13 = (($12>>>0) / ($2>>>0))&-1;
        STACKTOP = sp;return ($13|0);
       }
       return 0|0;
      }
      function __ZN11Blip_Buffer14remove_samplesEl($this,$count) {
       $this = $this|0;
       $count = $count|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($count|0)==(0);
       if ($1) {
        STACKTOP = sp;return;
       }
       __ZN11Blip_Buffer14remove_silenceEl($this,$count);
       $2 = (__ZNK11Blip_Buffer13samples_availEv($this)|0);
       $3 = (($2) + 18)|0;
       $4 = (($this) + 8|0);
       $5 = HEAP32[$4>>2]|0;
       $6 = $5;
       $7 = (($5) + ($count<<2)|0);
       $8 = $7;
       $9 = $3 << 2;
       _memmove(($6|0),($8|0),($9|0))|0;
       $10 = HEAP32[$4>>2]|0;
       $11 = (($10) + ($3<<2)|0);
       $12 = $11;
       $13 = $count << 2;
       _memset(($12|0),0,($13|0))|0;
       STACKTOP = sp;return;
      }
      function __ZN11Blip_Synth_C2EPsi($this,$p,$w) {
       $this = $this|0;
       $p = $p|0;
       $w = $w|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 24|0);
       HEAP32[$1>>2] = $p;
       $2 = (($this) + 28|0);
       HEAP32[$2>>2] = $w;
       $3 = (($this) + 16|0);
       HEAPF64[$3>>3] = 0.0;
       $4 = (($this) + 32|0);
       HEAP32[$4>>2] = 0;
       $5 = ($this);
       HEAP32[$5>>2] = 0;
       $6 = (($this) + 4|0);
       HEAP32[$6>>2] = 0;
       $7 = (($this) + 8|0);
       HEAP32[$7>>2] = 0;
       STACKTOP = sp;return;
      }
      function __ZNK9blip_eq_t8generateEPfi($this,$out,$count) {
       $this = $this|0;
       $out = $out|0;
       $count = $count|0;
       var $$in = 0, $$in$phi = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0;
       var $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $oversample$0 = 0.0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (+($count|0));
       $2 = 144.0 / $1;
       $3 = $2 + 0.849999999999999977796;
       $4 = (($this) + 12|0);
       $5 = HEAP32[$4>>2]|0;
       $6 = (+($5|0));
       $7 = $6 * 0.5;
       $8 = (($this) + 16|0);
       $9 = HEAP32[$8>>2]|0;
       $10 = ($9|0)==(0);
       if ($10) {
        $oversample$0 = $3;
       } else {
        $11 = (+($9|0));
        $12 = $7 / $11;
        $oversample$0 = $12;
       }
       $13 = (($this) + 8|0);
       $14 = HEAP32[$13>>2]|0;
       $15 = (+($14|0));
       $16 = $oversample$0 * $15;
       $17 = $16 / $7;
       $18 = $oversample$0 * 64.0;
       $19 = ($this);
       $20 = +HEAPF64[$19>>3];
       __ZL8gen_sincPfiddd($out,$count,$18,$20,$17);
       $21 = (($count) + -1)|0;
       $22 = (+($21|0));
       $23 = 3.141592653589793116 / $22;
       $24 = ($count|0)==(0);
       if ($24) {
        STACKTOP = sp;return;
       } else {
        $$in = $count;
       }
       while(1) {
        $25 = (($$in) + -1)|0;
        $26 = (+($25|0));
        $27 = $23 * $26;
        $28 = (+Math_cos((+$27)));
        $29 = $28;
        $30 = $29 * 0.460000008344650268555;
        $31 = 0.540000021457672119141 - $30;
        $32 = (($out) + ($25<<2)|0);
        $33 = +HEAPF32[$32>>2];
        $34 = $33 * $31;
        HEAPF32[$32>>2] = $34;
        $35 = ($25|0)==(0);
        if ($35) {
         break;
        } else {
         $$in$phi = $25;$$in = $$in$phi;
        }
       }
       STACKTOP = sp;return;
      }
      function __ZL8gen_sincPfiddd($out,$count,$oversample,$treble,$cutoff) {
       $out = $out|0;
       $count = $count|0;
       $oversample = +$oversample;
       $treble = +$treble;
       $cutoff = +$cutoff;
       var $$0 = 0.0, $$0$op = 0.0, $$01 = 0.0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0;
       var $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0;
       var $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $exitcond = 0, $i$02 = 0, $y$0 = 0.0, $y$1 = 0.0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = !($cutoff >= 0.998999999999999999111);
       $$01 = $1 ? $cutoff : 0.998999999999999999111;
       $2 = $treble < -300.0;
       $$0 = $2 ? -300.0 : $treble;
       $3 = $$0 > 5.0;
       $$0$op = $$0 * 1.22070312500000006776E-5;
       $4 = $3 ? 6.103515625E-5 : $$0$op;
       $5 = 1.0 - $$01;
       $6 = $4 / $5;
       $7 = (+Math_pow(10.0,(+$6)));
       $8 = $$01 * 4096.0;
       $9 = 4096.0 - $8;
       $10 = (+Math_pow((+$7),(+$9)));
       $11 = 3.8349519697141029248E-4 / $oversample;
       $12 = ($count|0)>(0);
       if ($12) {
        $i$02 = 0;
       } else {
        STACKTOP = sp;return;
       }
       while(1) {
        $13 = (($i$02) - ($count))|0;
        $14 = $13 << 1;
        $15 = $14 | 1;
        $16 = (+($15|0));
        $17 = $11 * $16;
        $18 = $17 * 4096.0;
        $19 = $$01 * $18;
        $20 = $19 != 0.0;
        if ($20) {
         $21 = (+Math_sin((+$19)));
         $22 = $21 / $19;
         $23 = $22 * 4096.0;
         $y$0 = $23;
        } else {
         $y$0 = 4096.0;
        }
        $24 = (+Math_cos((+$17)));
        $25 = $7 - $24;
        $26 = $25 - $24;
        $27 = $7 * $26;
        $28 = $27 + 1.0;
        $29 = $28 > 1.00000000000000003037E-13;
        if ($29) {
         $30 = $18 - $17;
         $31 = (+Math_cos((+$30)));
         $32 = $7 * $31;
         $33 = (+Math_cos((+$18)));
         $34 = $32 - $33;
         $35 = $10 * $34;
         $36 = $19 - $17;
         $37 = (+Math_cos((+$36)));
         $38 = $7 * $37;
         $39 = $35 - $38;
         $40 = (+Math_cos((+$19)));
         $41 = $40 + $39;
         $42 = $$01 * $y$0;
         $43 = $41 / $28;
         $44 = $42 + $43;
         $y$1 = $44;
        } else {
         $y$1 = $y$0;
        }
        $45 = $y$1;
        $46 = (($out) + ($i$02<<2)|0);
        HEAPF32[$46>>2] = $45;
        $47 = (($i$02) + 1)|0;
        $exitcond = ($47|0)==($count|0);
        if ($exitcond) {
         break;
        } else {
         $i$02 = $47;
        }
       }
       STACKTOP = sp;return;
      }
      function __ZN11Blip_Synth_14adjust_impulseEv($this) {
       $this = $this|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
       var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error$0$lcssa = 0, $error$02 = 0, $error$02$phi = 0, $error$1 = 0, $i$03 = 0, $i$03$phi = 0, $p$04 = 0;
       var $p$04$phi = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (__ZNK11Blip_Synth_13impulses_sizeEv($this)|0);
       $2 = (($this) + 32|0);
       $3 = HEAP32[$2>>2]|0;
       $4 = ($1|0)>(1);
       $5 = (($1) + -64)|0;
       $6 = (($this) + 24|0);
       $7 = HEAP32[$6>>2]|0;
       $8 = (($this) + 24|0);
       $9 = 63;$p$04 = 64;
       while(1) {
        $10 = (63 - ($p$04))|0;
        if ($4) {
         $11 = HEAP32[$8>>2]|0;
         $error$02 = $3;$i$03 = 1;
         while(1) {
          $12 = (($i$03) + ($9))|0;
          $13 = (($11) + ($12<<1)|0);
          $14 = HEAP16[$13>>1]|0;
          $15 = $14 << 16 >> 16;
          $16 = (($error$02) - ($15))|0;
          $17 = (($i$03) + ($10))|0;
          $18 = (($11) + ($17<<1)|0);
          $19 = HEAP16[$18>>1]|0;
          $20 = $19 << 16 >> 16;
          $21 = (($16) - ($20))|0;
          $22 = (($i$03) + 64)|0;
          $23 = ($22|0)<($1|0);
          if ($23) {
           $i$03$phi = $22;$error$02$phi = $21;$i$03 = $i$03$phi;$error$02 = $error$02$phi;
          } else {
           $error$0$lcssa = $21;
           break;
          }
         }
        } else {
         $error$0$lcssa = $3;
        }
        $24 = ($9|0)==($10|0);
        if ($24) {
         $25 = (($error$0$lcssa|0) / 2)&-1;
         $error$1 = $25;
        } else {
         $error$1 = $error$0$lcssa;
        }
        $26 = (($5) + ($9))|0;
        $27 = (($7) + ($26<<1)|0);
        $28 = HEAP16[$27>>1]|0;
        $29 = $28&65535;
        $30 = (($29) + ($error$1))|0;
        $31 = $30&65535;
        HEAP16[$27>>1] = $31;
        $32 = (($9) + -1)|0;
        $33 = ($9|0)>(31);
        if ($33) {
         $p$04$phi = $9;$9 = $32;$p$04 = $p$04$phi;
        } else {
         break;
        }
       }
       STACKTOP = sp;return;
      }
      function __ZNK11Blip_Synth_13impulses_sizeEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 28|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = $2 << 5;
       $4 = $3 | 1;
       STACKTOP = sp;return ($4|0);
      }
      function __ZN11Blip_Synth_9treble_eqERK9blip_eq_t($this,$eq) {
       $this = $this|0;
       $eq = $eq|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0;
       var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0;
       var $46 = 0.0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $9$phi = 0, $exitcond = 0, $exitcond10 = 0, $fimpulse = 0, $i$25 = 0, $i$25$phi = 0, $i$33 = 0, $i$33$phi = 0, $next$02 = 0.0, $next$02$phi = 0.0;
       var $sum$01 = 0.0, $sum$01$phi = 0.0, $total$0$lcssa = 0.0, $total$04 = 0.0, $total$04$phi = 0.0, label = 0, sp = 0;
       sp = STACKTOP;
       STACKTOP = STACKTOP + 2432|0;
       $fimpulse = sp;
       $1 = $fimpulse;
       $2 = (($this) + 28|0);
       $3 = HEAP32[$2>>2]|0;
       $4 = $3 << 5;
       $5 = (($4) + -32)|0;
       $6 = (($fimpulse) + 256|0);
       __ZNK9blip_eq_t8generateEPfi($eq,$6,$5);
       $7 = (($4) + 32)|0;
       $8 = $4 | 31;
       $9 = 63;
       while(1) {
        $10 = (($8) - ($9))|0;
        $11 = (($fimpulse) + ($10<<2)|0);
        $12 = +HEAPF32[$11>>2];
        $13 = (($7) + ($9))|0;
        $14 = (($fimpulse) + ($13<<2)|0);
        HEAPF32[$14>>2] = $12;
        $15 = (($9) + -1)|0;
        $16 = ($9|0)==(0);
        if ($16) {
         break;
        } else {
         $9$phi = $15;$9 = $9$phi;
        }
       }
       _memset(($1|0),0,256)|0;
       $17 = ($5|0)>(0);
       if ($17) {
        $18 = $3 << 5;
        $19 = (($18) + -32)|0;
        $i$25 = 0;$total$04 = 0.0;
        while(1) {
         $20 = (($i$25) + 64)|0;
         $21 = (($fimpulse) + ($20<<2)|0);
         $22 = +HEAPF32[$21>>2];
         $23 = $22;
         $24 = $total$04 + $23;
         $25 = (($i$25) + 1)|0;
         $exitcond10 = ($25|0)==($19|0);
         if ($exitcond10) {
          $total$0$lcssa = $24;
          break;
         } else {
          $total$04$phi = $24;$i$25$phi = $25;$total$04 = $total$04$phi;$i$25 = $i$25$phi;
         }
        }
       } else {
        $total$0$lcssa = 0.0;
       }
       $26 = 16384.0 / $total$0$lcssa;
       $27 = (($this) + 32|0);
       HEAP32[$27>>2] = 32768;
       $28 = (__ZNK11Blip_Synth_13impulses_sizeEv($this)|0);
       $29 = ($28|0)>(0);
       if ($29) {
        $30 = (($this) + 24|0);
        $31 = HEAP32[$30>>2]|0;
        $i$33 = 0;$next$02 = 0.0;$sum$01 = 0.0;
        while(1) {
         $32 = $next$02 - $sum$01;
         $33 = $26 * $32;
         $34 = $33 + 0.5;
         $35 = (+Math_floor((+$34)));
         $36 = (~~(($35)));
         $37 = (($31) + ($i$33<<1)|0);
         HEAP16[$37>>1] = $36;
         $38 = (($fimpulse) + ($i$33<<2)|0);
         $39 = +HEAPF32[$38>>2];
         $40 = $39;
         $41 = $sum$01 + $40;
         $42 = (($i$33) + 64)|0;
         $43 = (($fimpulse) + ($42<<2)|0);
         $44 = +HEAPF32[$43>>2];
         $45 = $44;
         $46 = $next$02 + $45;
         $47 = (($i$33) + 1)|0;
         $exitcond = ($47|0)==($28|0);
         if ($exitcond) {
          break;
         } else {
          $sum$01$phi = $41;$next$02$phi = $46;$i$33$phi = $47;$sum$01 = $sum$01$phi;$next$02 = $next$02$phi;$i$33 = $i$33$phi;
         }
        }
       }
       __ZN11Blip_Synth_14adjust_impulseEv($this);
       $48 = (($this) + 16|0);
       $49 = +HEAPF64[$48>>3];
       $50 = $49 != 0.0;
       if (!($50)) {
        STACKTOP = sp;return;
       }
       HEAPF64[$48>>3] = 0.0;
       __ZN11Blip_Synth_11volume_unitEd($this,$49);
       STACKTOP = sp;return;
      }
      function __ZN11Blip_Synth_11volume_unitEd($this,$new_unit) {
       $this = $this|0;
       $new_unit = +$new_unit;
       var $$in = 0, $$in$phi = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
       var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
       var $8 = 0.0, $9 = 0, $factor$02 = 0.0, $factor$02$phi = 0.0, $factor$1 = 0.0, $or$cond = 0, $shift$01 = 0, $shift$01$phi = 0, label = 0, sp = 0;
       sp = STACKTOP;
       STACKTOP = STACKTOP + 24|0;
       $1 = sp;
       $2 = (($this) + 16|0);
       $3 = +HEAPF64[$2>>3];
       $4 = $3 != $new_unit;
       if (!($4)) {
        STACKTOP = sp;return;
       }
       $5 = (($this) + 32|0);
       $6 = HEAP32[$5>>2]|0;
       $7 = ($6|0)==(0);
       if ($7) {
        __ZN9blip_eq_tC1Ed($1,-8.0);
        __ZN11Blip_Synth_9treble_eqERK9blip_eq_t($this,$1);
       }
       HEAPF64[$2>>3] = $new_unit;
       $8 = $new_unit * 1073741824.0;
       $9 = HEAP32[$5>>2]|0;
       $10 = (+($9|0));
       $11 = $8 / $10;
       $12 = $11 > 0.0;
       $13 = $11 < 2.0;
       $or$cond = $12 & $13;
       do {
        if ($or$cond) {
         $factor$02 = $11;$shift$01 = 0;
         while(1) {
          $14 = (($shift$01) + 1)|0;
          $15 = $factor$02 * 2.0;
          $16 = $15 < 2.0;
          if ($16) {
           $shift$01$phi = $14;$factor$02$phi = $15;$shift$01 = $shift$01$phi;$factor$02 = $factor$02$phi;
          } else {
           break;
          }
         }
         $17 = ($14|0)==(0);
         if ($17) {
          $factor$1 = $15;
          break;
         }
         $18 = HEAP32[$5>>2]|0;
         $19 = $18 >> $14;
         HEAP32[$5>>2] = $19;
         $20 = ($19|0)>(0);
         if (!($20)) {
          ___assert_fail(((37096)|0),((36792)|0),381,((37112)|0));
          // unreachable;
         }
         $21 = 1 << $shift$01;
         $22 = (($21) + 32768)|0;
         $23 = 32768 >>> $14;
         $24 = (__ZNK11Blip_Synth_13impulses_sizeEv($this)|0);
         $25 = ($24|0)==(0);
         if (!($25)) {
          $26 = (($this) + 24|0);
          $27 = HEAP32[$26>>2]|0;
          $$in = $24;
          while(1) {
           $28 = (($$in) + -1)|0;
           $29 = (($27) + ($28<<1)|0);
           $30 = HEAP16[$29>>1]|0;
           $31 = $30 << 16 >> 16;
           $32 = (($22) + ($31))|0;
           $33 = $32 >> $14;
           $34 = (($33) - ($23))|0;
           $35 = $34&65535;
           HEAP16[$29>>1] = $35;
           $36 = ($28|0)==(0);
           if ($36) {
            break;
           } else {
            $$in$phi = $28;$$in = $$in$phi;
           }
          }
         }
         __ZN11Blip_Synth_14adjust_impulseEv($this);
         $factor$1 = $15;
        } else {
         $factor$1 = $11;
        }
       } while(0);
       $37 = $factor$1 + 0.5;
       $38 = (+Math_floor((+$37)));
       $39 = (~~(($38)));
       $40 = (($this) + 8|0);
       HEAP32[$40>>2] = $39;
       STACKTOP = sp;return;
      }
      function __ZN9blip_eq_tC1Ed($this,$t) {
       $this = $this|0;
       $t = +$t;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN9blip_eq_tC2Ed($this,$t);
       STACKTOP = sp;return;
      }
      function __ZN9blip_eq_tC2Ed($this,$t) {
       $this = $this|0;
       $t = +$t;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       HEAPF64[$1>>3] = $t;
       $2 = (($this) + 8|0);
       HEAP32[$2>>2] = 0;
       $3 = (($this) + 12|0);
       HEAP32[$3>>2] = 44100;
       $4 = (($this) + 16|0);
       HEAP32[$4>>2] = 0;
       STACKTOP = sp;return;
      }
      function __ZN11Classic_EmuC2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $this;
       __ZN9Music_EmuC2Ev($1);
       $2 = $this;
       HEAP32[$2>>2] = (((37128) + 8|0));
       $3 = (($this) + 316|0);
       HEAP32[$3>>2] = 0;
       $4 = (($this) + 320|0);
       HEAP32[$4>>2] = 0;
       $5 = (($this) + 332|0);
       HEAP32[$5>>2] = 0;
       STACKTOP = sp;return;
      }
      function __ZN11Classic_EmuD0Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       __ZN11Classic_EmuD2Ev($this);
       $1 = ($this);
       __ZN8Gme_FiledlEPv($1);
       STACKTOP = sp;return;
      }
      function __ZN11Classic_EmuD2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $this;
       HEAP32[$1>>2] = (((37128) + 8|0));
       $2 = (($this) + 320|0);
       $3 = HEAP32[$2>>2]|0;
       $4 = ($3|0)==(0|0);
       if (!($4)) {
        $5 = $3;
        $6 = HEAP32[$5>>2]|0;
        $7 = (($6) + 4|0);
        $8 = HEAP32[$7>>2]|0;
        FUNCTION_TABLE_vi[$8 & 127]($3);
       }
       $9 = $this;
       __ZN9Music_EmuD2Ev($9);
       STACKTOP = sp;return;
      }
      function __ZN11Classic_Emu14set_equalizer_ERK15gme_equalizer_t($this,$eq) {
       $this = $this|0;
       $eq = $eq|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0;
       var sp = 0;
       sp = STACKTOP;
       STACKTOP = STACKTOP + 24|0;
       $1 = sp;
       $2 = $this;
       $3 = HEAP32[$2>>2]|0;
       $4 = (($3) + 76|0);
       $5 = HEAP32[$4>>2]|0;
       $6 = ($eq);
       $7 = +HEAPF64[$6>>3];
       __ZN9blip_eq_tC1Ed($1,$7);
       FUNCTION_TABLE_vii[$5 & 31]($this,$1);
       $8 = (($this) + 316|0);
       $9 = HEAP32[$8>>2]|0;
       $10 = ($9|0)==(0|0);
       if ($10) {
        STACKTOP = sp;return;
       }
       $11 = $this;
       $12 = $9;
       $13 = HEAP32[$12>>2]|0;
       $14 = (($13) + 24|0);
       $15 = HEAP32[$14>>2]|0;
       $16 = (__ZNK9Music_Emu9equalizerEv($11)|0);
       $17 = (($16) + 8|0);
       $18 = +HEAPF64[$17>>3];
       $19 = (~~(($18)));
       FUNCTION_TABLE_vii[$15 & 31]($9,$19);
       STACKTOP = sp;return;
      }
      function __ZNK9Music_Emu9equalizerEv($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 144|0);
       STACKTOP = sp;return ($1|0);
      }
      function __ZN11Classic_Emu16set_sample_rate_El($this,$rate) {
       $this = $this|0;
       $rate = $rate|0;
       var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 316|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = ($2|0)==(0|0);
       if ($3) {
        $4 = (($this) + 320|0);
        $5 = HEAP32[$4>>2]|0;
        $6 = ($5|0)==(0|0);
        do {
         if ($6) {
          $7 = (__ZN12Multi_BuffernwEj(172)|0);
          $8 = ($7|0)==(0|0);
          if (!($8)) {
           $9 = $7;
           __ZN13Stereo_BufferC2Ev($9);
           $10 = $7;
           HEAP32[$4>>2] = $10;
           break;
          }
          HEAP32[$4>>2] = 0;
          $$0 = (37224);
          STACKTOP = sp;return ($$0|0);
         }
        } while(0);
        $11 = HEAP32[$4>>2]|0;
        HEAP32[$1>>2] = $11;
       }
       $12 = HEAP32[$1>>2]|0;
       $13 = $12;
       $14 = HEAP32[$13>>2]|0;
       $15 = (($14) + 16|0);
       $16 = HEAP32[$15>>2]|0;
       $17 = (FUNCTION_TABLE_iiii[$16 & 63]($12,$rate,50)|0);
       $$0 = $17;
       STACKTOP = sp;return ($$0|0);
      }
      function __ZN12Multi_BuffernwEj($s) {
       $s = $s|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (_malloc($s)|0);
       STACKTOP = sp;return ($1|0);
      }
      function __ZN12Multi_BufferdlEPv($p) {
       $p = $p|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       _free($p);
       STACKTOP = sp;return;
      }
      function __ZN11Classic_Emu12mute_voices_Ei($this,$mask) {
       $this = $this|0;
       $mask = $mask|0;
       var $$in = 0, $$in$phi = 0, $$pr = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
       var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
       var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ch = 0, label = 0, sp = 0;
       sp = STACKTOP;
       STACKTOP = STACKTOP + 16|0;
       $ch = sp;
       $1 = $this;
       $2 = (__ZNK9Music_Emu11voice_countEv($1)|0);
       $3 = ($2|0)==(0);
       if ($3) {
        STACKTOP = sp;return;
       }
       $4 = (($this) + 316|0);
       $5 = (($this) + 332|0);
       $6 = ($ch);
       $7 = (($ch) + 4|0);
       $8 = (($ch) + 8|0);
       $9 = $this;
       $10 = (($ch) + 4|0);
       $11 = (($ch) + 8|0);
       $12 = (($ch) + 4|0);
       $13 = (($ch) + 8|0);
       $14 = $this;
       $$in = $2;
       L4: while(1) {
        $15 = (($$in) + -1)|0;
        $16 = 1 << $15;
        $17 = $16 & $mask;
        $18 = ($17|0)==(0);
        if ($18) {
         $22 = HEAP32[$4>>2]|0;
         $23 = $22;
         $24 = HEAP32[$23>>2]|0;
         $25 = (($24) + 12|0);
         $26 = HEAP32[$25>>2]|0;
         $27 = HEAP32[$5>>2]|0;
         $28 = ($27|0)==(0|0);
         if ($28) {
          $31 = 0;
         } else {
          $29 = (($27) + ($15<<2)|0);
          $30 = HEAP32[$29>>2]|0;
          $31 = $30;
         }
         FUNCTION_TABLE_viiii[$26 & 15]($ch,$22,$15,$31);
         $32 = HEAP32[$6>>2]|0;
         $33 = ($32|0)==(0|0);
         do {
          if ($33) {
           label = 11;
          } else {
           $34 = HEAP32[$12>>2]|0;
           $35 = ($34|0)==(0|0);
           if (!($35)) {
            $36 = HEAP32[$13>>2]|0;
            $37 = ($36|0)==(0|0);
            if (!($37)) {
             break;
            }
           }
           $$pr = HEAP32[$6>>2]|0;
           $38 = ($$pr|0)==(0|0);
           if ($38) {
            label = 11;
           } else {
            label = 13;
            break L4;
           }
          }
         } while(0);
         if ((label|0) == 11) {
          label = 0;
          $39 = HEAP32[$7>>2]|0;
          $40 = ($39|0)==(0|0);
          if (!($40)) {
           label = 13;
           break;
          }
          $41 = HEAP32[$8>>2]|0;
          $42 = ($41|0)==(0|0);
          if (!($42)) {
           label = 13;
           break;
          }
         }
         $43 = HEAP32[$9>>2]|0;
         $44 = (($43) + 72|0);
         $45 = HEAP32[$44>>2]|0;
         $46 = HEAP32[$6>>2]|0;
         $47 = HEAP32[$10>>2]|0;
         $48 = HEAP32[$11>>2]|0;
         FUNCTION_TABLE_viiiii[$45 & 15]($this,$15,$46,$47,$48);
        } else {
         $19 = HEAP32[$14>>2]|0;
         $20 = (($19) + 72|0);
         $21 = HEAP32[$20>>2]|0;
         FUNCTION_TABLE_viiiii[$21 & 15]($this,$15,0,0,0);
        }
        $49 = ($15|0)==(0);
        if ($49) {
         label = 16;
         break;
        } else {
         $$in$phi = $15;$$in = $$in$phi;
        }
       }
       if ((label|0) == 13) {
        ___assert_fail(((37240)|0),((37320)|0),70,((37360)|0));
        // unreachable;
       }
       else if ((label|0) == 16) {
        STACKTOP = sp;return;
       }
      }
      function __ZNK9Music_Emu11voice_countEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 232|0);
       $2 = HEAP32[$1>>2]|0;
       STACKTOP = sp;return ($2|0);
      }
      function __ZN11Classic_Emu17change_clock_rateEl($this,$rate) {
       $this = $this|0;
       $rate = $rate|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 324|0);
       HEAP32[$1>>2] = $rate;
       $2 = (($this) + 316|0);
       $3 = HEAP32[$2>>2]|0;
       $4 = $3;
       $5 = HEAP32[$4>>2]|0;
       $6 = (($5) + 20|0);
       $7 = HEAP32[$6>>2]|0;
       FUNCTION_TABLE_vii[$7 & 31]($3,$rate);
       STACKTOP = sp;return;
      }
      function __ZN11Classic_Emu12setup_bufferEl($this,$rate) {
       $this = $this|0;
       $rate = $rate|0;
       var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       __ZN11Classic_Emu17change_clock_rateEl($this,$rate);
       $1 = (($this) + 316|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = $2;
       $4 = HEAP32[$3>>2]|0;
       $5 = (($4) + 8|0);
       $6 = HEAP32[$5>>2]|0;
       $7 = $this;
       $8 = (__ZNK9Music_Emu11voice_countEv($7)|0);
       $9 = (FUNCTION_TABLE_iii[$6 & 63]($2,$8)|0);
       $10 = ($9|0)==(0|0);
       if (!($10)) {
        $$0 = $9;
        STACKTOP = sp;return ($$0|0);
       }
       $11 = (__ZNK9Music_Emu9equalizerEv($7)|0);
       __ZN9Music_Emu13set_equalizerERK15gme_equalizer_t($7,$11);
       $12 = HEAP32[$1>>2]|0;
       $13 = (__ZN12Multi_Buffer22channels_changed_countEv($12)|0);
       $14 = (($this) + 328|0);
       HEAP32[$14>>2] = $13;
       $$0 = 0;
       STACKTOP = sp;return ($$0|0);
      }
      function __ZN12Multi_Buffer22channels_changed_countEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 4|0);
       $2 = HEAP32[$1>>2]|0;
       STACKTOP = sp;return ($2|0);
      }
      function __ZN11Classic_Emu12start_track_Ei($this,$track) {
       $this = $this|0;
       $track = $track|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 316|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = $2;
       $4 = HEAP32[$3>>2]|0;
       $5 = (($4) + 28|0);
       $6 = HEAP32[$5>>2]|0;
       FUNCTION_TABLE_vi[$6 & 127]($2);
       STACKTOP = sp;return (0|0);
      }
      function __ZN11Classic_Emu5play_ElPs($this,$count,$out) {
       $this = $this|0;
       $count = $count|0;
       $out = $out|0;
       var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
       var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $clocks_emulated = 0;
       var $remain$01 = 0, $remain$01$phi = 0, label = 0, sp = 0;
       sp = STACKTOP;
       STACKTOP = STACKTOP + 8|0;
       $clocks_emulated = sp;
       $1 = ($count|0)==(0);
       if ($1) {
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
       }
       $2 = (($this) + 316|0);
       $3 = (($this) + 328|0);
       $4 = (($this) + 324|0);
       $5 = $this;
       $6 = $this;
       $remain$01 = $count;
       while(1) {
        $7 = HEAP32[$2>>2]|0;
        $8 = $7;
        $9 = HEAP32[$8>>2]|0;
        $10 = (($9) + 36|0);
        $11 = HEAP32[$10>>2]|0;
        $12 = (($count) - ($remain$01))|0;
        $13 = (($out) + ($12<<1)|0);
        $14 = (FUNCTION_TABLE_iiii[$11 & 63]($7,$13,$remain$01)|0);
        $15 = (($remain$01) - ($14))|0;
        $16 = ($remain$01|0)==($14|0);
        if (!($16)) {
         $17 = HEAP32[$3>>2]|0;
         $18 = HEAP32[$2>>2]|0;
         $19 = (__ZN12Multi_Buffer22channels_changed_countEv($18)|0);
         $20 = ($17|0)==($19|0);
         if (!($20)) {
          HEAP32[$3>>2] = $19;
          __ZN9Music_Emu13remute_voicesEv($6);
         }
         $21 = HEAP32[$2>>2]|0;
         $22 = (__ZNK12Multi_Buffer6lengthEv($21)|0);
         $23 = HEAP32[$4>>2]|0;
         $24 = Math_imul($23, $22)|0;
         $25 = (($24|0) / 1000)&-1;
         HEAP32[$clocks_emulated>>2] = $25;
         $26 = HEAP32[$5>>2]|0;
         $27 = (($26) + 80|0);
         $28 = HEAP32[$27>>2]|0;
         $29 = (FUNCTION_TABLE_iiii[$28 & 63]($this,$clocks_emulated,$22)|0);
         $30 = ($29|0)==(0|0);
         if (!($30)) {
          $$0 = $29;
          label = 11;
          break;
         }
         $31 = HEAP32[$clocks_emulated>>2]|0;
         $32 = ($31|0)==(0);
         if ($32) {
          label = 8;
          break;
         }
         $33 = HEAP32[$2>>2]|0;
         $34 = $33;
         $35 = HEAP32[$34>>2]|0;
         $36 = (($35) + 32|0);
         $37 = HEAP32[$36>>2]|0;
         FUNCTION_TABLE_vii[$37 & 31]($33,$31);
        }
        $38 = ($remain$01|0)==($14|0);
        if ($38) {
         $$0 = 0;
         label = 11;
         break;
        } else {
         $remain$01$phi = $15;$remain$01 = $remain$01$phi;
        }
       }
       if ((label|0) == 8) {
        ___assert_fail(((37376)|0),((37320)|0),114,((37392)|0));
        // unreachable;
       }
       else if ((label|0) == 11) {
        STACKTOP = sp;return ($$0|0);
       }
       return 0|0;
      }
      function __ZN9Music_Emu13remute_voicesEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 236|0);
       $2 = HEAP32[$1>>2]|0;
       __ZN9Music_Emu11mute_voicesEi($this,$2);
       STACKTOP = sp;return;
      }
      function __ZNK12Multi_Buffer6lengthEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 12|0);
       $2 = HEAP32[$1>>2]|0;
       STACKTOP = sp;return ($2|0);
      }
      function __ZN9Rom_Data_14load_rom_data_ER11Data_ReaderiPvil($this,$in,$header_size,$header_out,$fill,$pad_size) {
       $this = $this|0;
       $in = $in|0;
       $header_size = $header_size|0;
       $header_out = $header_out|0;
       $fill = $fill|0;
       $pad_size = $pad_size|0;
       var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
       var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err$01 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($pad_size) - ($header_size))|0;
       $2 = (($this) + 12|0);
       HEAP32[$2>>2] = 0;
       $3 = (($this) + 16|0);
       HEAP32[$3>>2] = 0;
       $4 = (($this) + 20|0);
       HEAP32[$4>>2] = 0;
       $5 = ($this);
       __ZN13blargg_vectorIhE5clearEv($5);
       $6 = $in;
       $7 = HEAP32[$6>>2]|0;
       $8 = (($7) + 16|0);
       $9 = HEAP32[$8>>2]|0;
       $10 = (FUNCTION_TABLE_ii[$9 & 15]($in)|0);
       $11 = (($this) + 8|0);
       HEAP32[$11>>2] = $10;
       $12 = ($10|0)>($header_size|0);
       if (!($12)) {
        $13 = HEAP32[(40024)>>2]|0;
        $$0 = $13;
        STACKTOP = sp;return ($$0|0);
       }
       $14 = (($1) + ($pad_size))|0;
       $15 = (($14) + ($10))|0;
       $16 = (__ZN13blargg_vectorIhE6resizeEj($5,$15)|0);
       $17 = ($16|0)==(0|0);
       do {
        if ($17) {
         $18 = $in;
         $19 = HEAP32[$18>>2]|0;
         $20 = (($19) + 12|0);
         $21 = HEAP32[$20>>2]|0;
         $22 = (__ZNK13blargg_vectorIhE5beginEv($5)|0);
         $23 = (($22) + ($1)|0);
         $24 = HEAP32[$11>>2]|0;
         $25 = (FUNCTION_TABLE_iiii[$21 & 63]($in,$23,$24)|0);
         $26 = ($25|0)==(0|0);
         if (!($26)) {
          $err$01 = $25;
          break;
         }
         $27 = HEAP32[$11>>2]|0;
         $28 = (($27) - ($header_size))|0;
         HEAP32[$11>>2] = $28;
         $29 = (__ZNK13blargg_vectorIhEixEj($5,$1)|0);
         _memcpy(($header_out|0),($29|0),($header_size|0))|0;
         $30 = (__ZNK13blargg_vectorIhE5beginEv($5)|0);
         $31 = $fill&255;
         _memset(($30|0),($31|0),($pad_size|0))|0;
         $32 = (__ZNK13blargg_vectorIhE3endEv($5)|0);
         $33 = (0 - ($pad_size))|0;
         $34 = (($32) + ($33)|0);
         _memset(($34|0),($31|0),($pad_size|0))|0;
         $$0 = 0;
         STACKTOP = sp;return ($$0|0);
        } else {
         $err$01 = $16;
        }
       } while(0);
       __ZN13blargg_vectorIhE5clearEv($5);
       $$0 = $err$01;
       STACKTOP = sp;return ($$0|0);
      }
      function __ZN13blargg_vectorIhE5clearEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = HEAP32[$1>>2]|0;
       HEAP32[$1>>2] = 0;
       $3 = (($this) + 4|0);
       HEAP32[$3>>2] = 0;
       _free($2);
       STACKTOP = sp;return;
      }
      function __ZN13blargg_vectorIhE6resizeEj($this,$n) {
       $this = $this|0;
       $n = $n|0;
       var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $or$cond = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = HEAP32[$1>>2]|0;
       $3 = (_realloc($2,$n)|0);
       $4 = ($3|0)!=(0|0);
       $5 = ($n|0)==(0);
       $or$cond = $4 | $5;
       if (!($or$cond)) {
        $$0 = (37224);
        STACKTOP = sp;return ($$0|0);
       }
       HEAP32[$1>>2] = $3;
       $6 = (($this) + 4|0);
       HEAP32[$6>>2] = $n;
       $$0 = 0;
       STACKTOP = sp;return ($$0|0);
      }
      function __ZNK13blargg_vectorIhE5beginEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = HEAP32[$1>>2]|0;
       STACKTOP = sp;return ($2|0);
      }
      function __ZNK13blargg_vectorIhEixEj($this,$n) {
       $this = $this|0;
       $n = $n|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 4|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = ($2>>>0)<($n>>>0);
       if ($3) {
        ___assert_fail(((37432)|0),((37448)|0),58,((37488)|0));
        // unreachable;
       } else {
        $4 = ($this);
        $5 = HEAP32[$4>>2]|0;
        $6 = (($5) + ($n)|0);
        STACKTOP = sp;return ($6|0);
       }
       return 0|0;
      }
      function __ZNK13blargg_vectorIhE3endEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = HEAP32[$1>>2]|0;
       $3 = (($this) + 4|0);
       $4 = HEAP32[$3>>2]|0;
       $5 = (($2) + ($4)|0);
       STACKTOP = sp;return ($5|0);
      }
      function __ZN9Rom_Data_9set_addr_Eli($this,$addr,$unit) {
       $this = $this|0;
       $addr = $addr|0;
       $unit = $unit|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
       var $7 = 0, $8 = 0, $9 = 0, $rounded$0 = 0, $shift$0 = 0, $shift$0$phi = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($addr) + -8)|0;
       $2 = (($1) - ($unit))|0;
       $3 = (($this) + 12|0);
       HEAP32[$3>>2] = $2;
       $4 = (($this) + 8|0);
       $5 = HEAP32[$4>>2]|0;
       $6 = (($addr) + -1)|0;
       $7 = (($6) + ($unit))|0;
       $8 = (($7) + ($5))|0;
       $9 = (($8|0) % ($unit|0))&-1;
       $10 = (($8) - ($9))|0;
       $11 = ($10|0)<(1);
       if ($11) {
        $rounded$0 = 0;
       } else {
        $12 = (($10) + -1)|0;
        $shift$0 = 0;
        while(1) {
         $13 = $12 >>> $shift$0;
         $14 = ($13|0)==(0);
         $15 = (($shift$0) + 1)|0;
         if ($14) {
          break;
         } else {
          $shift$0$phi = $15;$shift$0 = $shift$0$phi;
         }
        }
        $16 = 1 << $shift$0;
        $17 = (($16) + -1)|0;
        $18 = (($this) + 16|0);
        HEAP32[$18>>2] = $17;
        $rounded$0 = $10;
       }
       $19 = (($this) + 20|0);
       HEAP32[$19>>2] = $rounded$0;
       $20 = ($this);
       $21 = HEAP32[$3>>2]|0;
       $22 = (($rounded$0) + 8)|0;
       $23 = (($22) - ($21))|0;
       (__ZN13blargg_vectorIhE6resizeEj($20,$23)|0);
       STACKTOP = sp;return;
      }
      function __ZN11Data_Reader4readEPvl($this,$p,$s) {
       $this = $this|0;
       $p = $p|0;
       $s = $s|0;
       var $$ = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $this;
       $2 = HEAP32[$1>>2]|0;
       $3 = (($2) + 8|0);
       $4 = HEAP32[$3>>2]|0;
       $5 = (FUNCTION_TABLE_iiii[$4 & 63]($this,$p,$s)|0);
       $6 = ($5|0)==($s|0);
       if ($6) {
        STACKTOP = sp;return (0|0);
       } else {
        $7 = ($5|0)>(-1);
        $8 = ($5|0)<($s|0);
        $or$cond = $7 & $8;
        $$ = $or$cond ? (37504) : (37528);
        STACKTOP = sp;return ($$|0);
       }
       return 0|0;
      }
      function __ZN11Data_Reader4skipEl($this,$count) {
       $this = $this|0;
       $count = $count|0;
       var $$0 = 0, $$01 = 0, $$01$ = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, label = 0, sp = 0;
       sp = STACKTOP;
       STACKTOP = STACKTOP + 512|0;
       $buf = sp;
       $1 = ($buf);
       $2 = $this;
       $$01 = $count;
       while(1) {
        $3 = ($$01|0)==(0);
        if ($3) {
         $$0 = 0;
         label = 4;
         break;
        }
        $4 = ($$01|0)<(512);
        $$01$ = $4 ? $$01 : 512;
        $5 = (($$01) - ($$01$))|0;
        $6 = HEAP32[$2>>2]|0;
        $7 = (($6) + 12|0);
        $8 = HEAP32[$7>>2]|0;
        $9 = (FUNCTION_TABLE_iiii[$8 & 63]($this,$1,$$01$)|0);
        $10 = ($9|0)==(0|0);
        if ($10) {
         $$01 = $5;
        } else {
         $$0 = $9;
         label = 4;
         break;
        }
       }
       if ((label|0) == 4) {
        STACKTOP = sp;return ($$0|0);
       }
       return 0|0;
      }
      function __ZNK11File_Reader6remainEv($this) {
       $this = $this|0;
       var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $this;
       $2 = HEAP32[$1>>2]|0;
       $3 = (($2) + 24|0);
       $4 = HEAP32[$3>>2]|0;
       $5 = (FUNCTION_TABLE_ii[$4 & 15]($this)|0);
       $6 = HEAP32[$1>>2]|0;
       $7 = (($6) + 28|0);
       $8 = HEAP32[$7>>2]|0;
       $9 = (FUNCTION_TABLE_ii[$8 & 15]($this)|0);
       $10 = (($5) - ($9))|0;
       STACKTOP = sp;return ($10|0);
      }
      function __ZN11File_Reader4skipEl($this,$n) {
       $this = $this|0;
       $n = $n|0;
       var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($n|0)>(-1);
       if (!($1)) {
        ___assert_fail(((37544)|0),((37552)|0),57,((37592)|0));
        // unreachable;
       }
       $2 = ($n|0)==(0);
       if ($2) {
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
       }
       $3 = $this;
       $4 = HEAP32[$3>>2]|0;
       $5 = (($4) + 32|0);
       $6 = HEAP32[$5>>2]|0;
       $7 = $this;
       $8 = HEAP32[$7>>2]|0;
       $9 = (($8) + 28|0);
       $10 = HEAP32[$9>>2]|0;
       $11 = (FUNCTION_TABLE_ii[$10 & 15]($this)|0);
       $12 = (($11) + ($n))|0;
       $13 = (FUNCTION_TABLE_iii[$6 & 63]($this,$12)|0);
       $$0 = $13;
       STACKTOP = sp;return ($$0|0);
      }
      function __ZN13Subset_ReaderC2EP11Data_Readerl($this,$dr,$size) {
       $this = $this|0;
       $dr = $dr|0;
       $size = $size|0;
       var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $size$ = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       __ZN11Data_ReaderC2Ev($1);
       $2 = ($this);
       HEAP32[$2>>2] = ((((37600) + 8|0)));
       $3 = (($this) + 4|0);
       HEAP32[$3>>2] = $dr;
       $4 = $dr;
       $5 = HEAP32[$4>>2]|0;
       $6 = (($5) + 16|0);
       $7 = HEAP32[$6>>2]|0;
       $8 = (FUNCTION_TABLE_ii[$7 & 15]($dr)|0);
       $9 = (($this) + 8|0);
       $10 = ($8|0)>($size|0);
       $size$ = $10 ? $size : $8;
       HEAP32[$9>>2] = $size$;
       STACKTOP = sp;return;
      }
      function __ZN11Data_ReaderC2Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       HEAP32[$1>>2] = ((((37712) + 8|0)));
       STACKTOP = sp;return;
      }
      function __ZNK13Subset_Reader6remainEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 8|0);
       $2 = HEAP32[$1>>2]|0;
       STACKTOP = sp;return ($2|0);
      }
      function __ZN13Subset_Reader10read_availEPvl($this,$p,$s) {
       $this = $this|0;
       $p = $p|0;
       $s = $s|0;
       var $$s = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 8|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = ($2|0)<($s|0);
       $$s = $3 ? $2 : $s;
       $4 = (($2) - ($$s))|0;
       HEAP32[$1>>2] = $4;
       $5 = (($this) + 4|0);
       $6 = HEAP32[$5>>2]|0;
       $7 = $6;
       $8 = HEAP32[$7>>2]|0;
       $9 = (($8) + 8|0);
       $10 = HEAP32[$9>>2]|0;
       $11 = (FUNCTION_TABLE_iiii[$10 & 63]($6,$p,$$s)|0);
       STACKTOP = sp;return ($11|0);
      }
      function __ZN16Remaining_ReaderC2EPKvlP11Data_Reader($this,$h,$size,$r) {
       $this = $this|0;
       $h = $h|0;
       $size = $size|0;
       $r = $r|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       __ZN11Data_ReaderC2Ev($1);
       $2 = ($this);
       HEAP32[$2>>2] = ((((37632) + 8|0)));
       $3 = (($this) + 4|0);
       HEAP32[$3>>2] = $h;
       $4 = (($h) + ($size)|0);
       $5 = (($this) + 8|0);
       HEAP32[$5>>2] = $4;
       $6 = (($this) + 12|0);
       HEAP32[$6>>2] = $r;
       STACKTOP = sp;return;
      }
      function __ZNK16Remaining_Reader6remainEv($this) {
       $this = $this|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 8|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = (($this) + 4|0);
       $4 = HEAP32[$3>>2]|0;
       $5 = $2;
       $6 = $4;
       $7 = (($5) - ($6))|0;
       $8 = (($this) + 12|0);
       $9 = HEAP32[$8>>2]|0;
       $10 = $9;
       $11 = HEAP32[$10>>2]|0;
       $12 = (($11) + 16|0);
       $13 = HEAP32[$12>>2]|0;
       $14 = (FUNCTION_TABLE_ii[$13 & 15]($9)|0);
       $15 = (($7) + ($14))|0;
       STACKTOP = sp;return ($15|0);
      }
      function __ZN16Remaining_Reader10read_firstEPvl($this,$out,$count) {
       $this = $this|0;
       $out = $out|0;
       $count = $count|0;
       var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count$ = 0, $first$1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 8|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = (($this) + 4|0);
       $4 = HEAP32[$3>>2]|0;
       $5 = $2;
       $6 = $4;
       $7 = (($5) - ($6))|0;
       $8 = ($2|0)==($4|0);
       if ($8) {
        $first$1 = $7;
        STACKTOP = sp;return ($first$1|0);
       }
       $9 = ($7|0)>($count|0);
       $count$ = $9 ? $count : $7;
       $10 = (($4) + ($count$)|0);
       HEAP32[$3>>2] = $10;
       _memcpy(($out|0),($4|0),($count$|0))|0;
       $first$1 = $count$;
       STACKTOP = sp;return ($first$1|0);
      }
      function __ZN16Remaining_Reader10read_availEPvl($this,$out,$count) {
       $this = $this|0;
       $out = $out|0;
       $count = $count|0;
       var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $second$0 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (__ZN16Remaining_Reader10read_firstEPvl($this,$out,$count)|0);
       $2 = (($count) - ($1))|0;
       $3 = ($1|0)==($count|0);
       do {
        if ($3) {
         $second$0 = $2;
        } else {
         $4 = (($this) + 12|0);
         $5 = HEAP32[$4>>2]|0;
         $6 = $5;
         $7 = HEAP32[$6>>2]|0;
         $8 = (($7) + 8|0);
         $9 = HEAP32[$8>>2]|0;
         $10 = (($out) + ($1)|0);
         $11 = (FUNCTION_TABLE_iiii[$9 & 63]($5,$10,$2)|0);
         $12 = ($11|0)<(1);
         if ($12) {
          $$0 = $11;
         } else {
          $second$0 = $11;
          break;
         }
         STACKTOP = sp;return ($$0|0);
        }
       } while(0);
       $13 = (($second$0) + ($1))|0;
       $$0 = $13;
       STACKTOP = sp;return ($$0|0);
      }
      function __ZN16Remaining_Reader4readEPvl($this,$out,$count) {
       $this = $this|0;
       $out = $out|0;
       $count = $count|0;
       var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (__ZN16Remaining_Reader10read_firstEPvl($this,$out,$count)|0);
       $2 = ($1|0)==($count|0);
       if ($2) {
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
       }
       $3 = (($count) - ($1))|0;
       $4 = (($this) + 12|0);
       $5 = HEAP32[$4>>2]|0;
       $6 = $5;
       $7 = HEAP32[$6>>2]|0;
       $8 = (($7) + 12|0);
       $9 = HEAP32[$8>>2]|0;
       $10 = (($out) + ($1)|0);
       $11 = (FUNCTION_TABLE_iiii[$9 & 63]($5,$10,$3)|0);
       $$0 = $11;
       STACKTOP = sp;return ($$0|0);
      }
      function __ZN15Mem_File_ReaderC2EPKvl($this,$p,$s) {
       $this = $this|0;
       $p = $p|0;
       $s = $s|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       __ZN11File_ReaderC2Ev($1);
       $2 = ($this);
       HEAP32[$2>>2] = ((((37664) + 8|0)));
       $3 = (($this) + 4|0);
       HEAP32[$3>>2] = $p;
       $4 = (($this) + 8|0);
       HEAP32[$4>>2] = $s;
       $5 = (($this) + 12|0);
       HEAP32[$5>>2] = 0;
       STACKTOP = sp;return;
      }
      function __ZN11File_ReaderC2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       __ZN11Data_ReaderC2Ev($1);
       $2 = ($this);
       HEAP32[$2>>2] = ((((37840) + 8|0)));
       STACKTOP = sp;return;
      }
      function __ZNK15Mem_File_Reader4sizeEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 8|0);
       $2 = HEAP32[$1>>2]|0;
       STACKTOP = sp;return ($2|0);
      }
      function __ZN15Mem_File_Reader10read_availEPvl($this,$p,$s) {
       $this = $this|0;
       $p = $p|0;
       $s = $s|0;
       var $$s = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = $this;
       $3 = HEAP32[$2>>2]|0;
       $4 = (($3) + 16|0);
       $5 = HEAP32[$4>>2]|0;
       $6 = (FUNCTION_TABLE_ii[$5 & 15]($1)|0);
       $7 = ($6|0)<($s|0);
       $$s = $7 ? $6 : $s;
       $8 = (($this) + 4|0);
       $9 = HEAP32[$8>>2]|0;
       $10 = (($this) + 12|0);
       $11 = HEAP32[$10>>2]|0;
       $12 = (($9) + ($11)|0);
       _memcpy(($p|0),($12|0),($$s|0))|0;
       $13 = HEAP32[$10>>2]|0;
       $14 = (($13) + ($$s))|0;
       HEAP32[$10>>2] = $14;
       STACKTOP = sp;return ($$s|0);
      }
      function __ZNK15Mem_File_Reader4tellEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 12|0);
       $2 = HEAP32[$1>>2]|0;
       STACKTOP = sp;return ($2|0);
      }
      function __ZN15Mem_File_Reader4seekEl($this,$n) {
       $this = $this|0;
       $n = $n|0;
       var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 8|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = ($2|0)<($n|0);
       if ($3) {
        $$0 = (37504);
       } else {
        $4 = (($this) + 12|0);
        HEAP32[$4>>2] = $n;
        $$0 = 0;
       }
       STACKTOP = sp;return ($$0|0);
      }
      function __ZN11Data_ReaderD1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       STACKTOP = sp;return;
      }
      function __ZN11Data_ReaderD0Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $this;
       __ZdlPv($1);
       STACKTOP = sp;return;
      }
      function __ZN13Subset_ReaderD1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       STACKTOP = sp;return;
      }
      function __ZN13Subset_ReaderD0Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $this;
       __ZdlPv($1);
       STACKTOP = sp;return;
      }
      function __ZN16Remaining_ReaderD1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       STACKTOP = sp;return;
      }
      function __ZN16Remaining_ReaderD0Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $this;
       __ZdlPv($1);
       STACKTOP = sp;return;
      }
      function __ZN11File_ReaderD1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       STACKTOP = sp;return;
      }
      function __ZN11File_ReaderD0Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $this;
       __ZdlPv($1);
       STACKTOP = sp;return;
      }
      function __ZN15Mem_File_ReaderD1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       STACKTOP = sp;return;
      }
      function __ZN15Mem_File_ReaderD0Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $this;
       __ZdlPv($1);
       STACKTOP = sp;return;
      }
      function __ZN14Dual_ResamplerC2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       HEAP32[$1>>2] = ((((37960) + 8|0)));
       $2 = (($this) + 4|0);
       __ZN13blargg_vectorIsEC1Ev($2);
       $3 = (($this) + 12|0);
       HEAP32[$3>>2] = 0;
       $4 = (($this) + 16|0);
       HEAP32[$4>>2] = -1;
       $5 = (($this) + 20|0);
       HEAP32[$5>>2] = -1;
       $6 = (($this) + 24|0);
       HEAP32[$6>>2] = 0;
       $7 = (($this) + 32|0);
       __ZN13Fir_ResamplerILi12EEC1Ev($7);
       STACKTOP = sp;return;
      }
      function __ZN13blargg_vectorIsEC1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN13blargg_vectorIsEC2Ev($this);
       STACKTOP = sp;return;
      }
      function __ZN13Fir_ResamplerILi12EEC1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN13Fir_ResamplerILi12EEC2Ev($this);
       STACKTOP = sp;return;
      }
      function __ZN13blargg_vectorIsED1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN13blargg_vectorIsED2Ev($this);
       STACKTOP = sp;return;
      }
      function __ZN14Dual_ResamplerD0Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       __ZN14Dual_ResamplerD2Ev($this);
       $1 = $this;
       __ZdlPv($1);
       STACKTOP = sp;return;
      }
      function __ZN14Dual_ResamplerD2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       HEAP32[$1>>2] = ((((37960) + 8|0)));
       $2 = (($this) + 32|0);
       __ZN13Fir_ResamplerILi12EED1Ev($2);
       $3 = (($this) + 4|0);
       __ZN13blargg_vectorIsED1Ev($3);
       STACKTOP = sp;return;
      }
      function __ZN13Fir_ResamplerILi12EED1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN13Fir_ResamplerILi12EED2Ev($this);
       STACKTOP = sp;return;
      }
      function __ZN14Dual_Resampler5resetEi($this,$pairs) {
       $this = $this|0;
       $pairs = $pairs|0;
       var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 4|0);
       $2 = $pairs >> 2;
       $3 = (($2) + ($pairs))|0;
       $4 = $3 << 1;
       $5 = (__ZN13blargg_vectorIsE6resizeEj($1,$4)|0);
       $6 = ($5|0)==(0|0);
       if (!($6)) {
        $$0 = $5;
        STACKTOP = sp;return ($$0|0);
       }
       __ZN14Dual_Resampler6resizeEi($this,$pairs);
       $7 = (($this) + 16|0);
       $8 = HEAP32[$7>>2]|0;
       $9 = $8 >> 2;
       $10 = (($9) + ($8))|0;
       $11 = (($this) + 24|0);
       HEAP32[$11>>2] = $10;
       $12 = (($this) + 32|0);
       $13 = $12;
       $14 = (__ZN14Fir_Resampler_11buffer_sizeEi($13,$10)|0);
       $$0 = $14;
       STACKTOP = sp;return ($$0|0);
      }
      function __ZN13blargg_vectorIsE6resizeEj($this,$n) {
       $this = $this|0;
       $n = $n|0;
       var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = HEAP32[$1>>2]|0;
       $3 = $2;
       $4 = $n << 1;
       $5 = (_realloc($3,$4)|0);
       $6 = ($5|0)!=(0|0);
       $7 = ($n|0)==(0);
       $or$cond = $6 | $7;
       if (!($or$cond)) {
        $$0 = (38184);
        STACKTOP = sp;return ($$0|0);
       }
       $8 = $5;
       HEAP32[$1>>2] = $8;
       $9 = (($this) + 4|0);
       HEAP32[$9>>2] = $n;
       $$0 = 0;
       STACKTOP = sp;return ($$0|0);
      }
      function __ZN14Dual_Resampler6resizeEi($this,$pairs) {
       $this = $this|0;
       $pairs = $pairs|0;
       var $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $pairs << 1;
       $2 = (($this) + 12|0);
       $3 = HEAP32[$2>>2]|0;
       $4 = ($3|0)==($1|0);
       if ($4) {
        STACKTOP = sp;return;
       }
       $5 = (($this) + 4|0);
       $6 = (__ZNK13blargg_vectorIsE4sizeEv($5)|0);
       $7 = ($1>>>0)>($6>>>0);
       if ($7) {
        STACKTOP = sp;return;
       }
       HEAP32[$2>>2] = $1;
       $8 = (+($pairs|0));
       $9 = (($this) + 32|0);
       $10 = $9;
       $11 = (+__ZNK14Fir_Resampler_5ratioEv($10));
       $12 = $8 * $11;
       $13 = (~~(($12)));
       $14 = $13 << 1;
       $15 = (($14) + 2)|0;
       $16 = (($this) + 16|0);
       HEAP32[$16>>2] = $15;
       __ZN14Dual_Resampler5clearEv($this);
       STACKTOP = sp;return;
      }
      function __ZNK13blargg_vectorIsE4sizeEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 4|0);
       $2 = HEAP32[$1>>2]|0;
       STACKTOP = sp;return ($2|0);
      }
      function __ZNK14Fir_Resampler_5ratioEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0.0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 40|0);
       $2 = +HEAPF64[$1>>3];
       STACKTOP = sp;return (+$2);
      }
      function __ZN14Dual_Resampler5clearEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 12|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = (($this) + 20|0);
       HEAP32[$3>>2] = $2;
       $4 = (($this) + 32|0);
       $5 = $4;
       __ZN14Fir_Resampler_5clearEv($5);
       STACKTOP = sp;return;
      }
      function __ZN14Dual_Resampler11play_frame_ER11Blip_BufferPs($this,$blip_buf,$out) {
       $this = $this|0;
       $blip_buf = $blip_buf|0;
       $out = $out|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
       var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 12|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = $2 >> 1;
       $4 = (__ZNK11Blip_Buffer12count_clocksEl($blip_buf,$3)|0);
       $5 = (($this) + 16|0);
       $6 = HEAP32[$5>>2]|0;
       $7 = (($this) + 32|0);
       $8 = $7;
       $9 = (__ZNK14Fir_Resampler_7writtenEv($8)|0);
       $10 = (($6) - ($9))|0;
       $11 = $this;
       $12 = HEAP32[$11>>2]|0;
       $13 = (($12) + 8|0);
       $14 = HEAP32[$13>>2]|0;
       $15 = (__ZN14Fir_Resampler_6bufferEv($8)|0);
       $16 = (FUNCTION_TABLE_iiiii[$14 & 7]($this,$4,$10,$15)|0);
       $17 = (($this) + 24|0);
       $18 = HEAP32[$17>>2]|0;
       $19 = ($16|0)<($18|0);
       if (!($19)) {
        ___assert_fail(((37984)|0),((38016)|0),65,((38064)|0));
        // unreachable;
       }
       __ZN11Blip_Buffer9end_frameEi($blip_buf,$4);
       $20 = (__ZNK11Blip_Buffer13samples_availEv($blip_buf)|0);
       $21 = ($20|0)==($3|0);
       if (!($21)) {
        ___assert_fail(((38080)|0),((38016)|0),68,((38064)|0));
        // unreachable;
       }
       __ZN14Fir_Resampler_5writeEl($8,$16);
       $22 = (($this) + 4|0);
       $23 = (__ZNK13blargg_vectorIsE5beginEv($22)|0);
       $24 = HEAP32[$1>>2]|0;
       $25 = (__ZN13Fir_ResamplerILi12EE4readEPsl($7,$23,$24)|0);
       $26 = HEAP32[$1>>2]|0;
       $27 = ($25|0)==($26|0);
       if ($27) {
        __ZN14Dual_Resampler11mix_samplesER11Blip_BufferPs($this,$blip_buf,$out);
        __ZN11Blip_Buffer14remove_samplesEl($blip_buf,$3);
        STACKTOP = sp;return;
       } else {
        ___assert_fail(((38120)|0),((38016)|0),73,((38064)|0));
        // unreachable;
       }
      }
      function __ZNK14Fir_Resampler_7writtenEv($this) {
       $this = $this|0;
       var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 8|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = ($this);
       $4 = (($this) + 24|0);
       $5 = HEAP32[$4>>2]|0;
       $6 = (__ZNK13blargg_vectorIsEixEj($3,$5)|0);
       $7 = $2;
       $8 = $6;
       $9 = (($7) - ($8))|0;
       $10 = $9 >> 1;
       STACKTOP = sp;return ($10|0);
      }
      function __ZN14Fir_Resampler_6bufferEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 8|0);
       $2 = HEAP32[$1>>2]|0;
       STACKTOP = sp;return ($2|0);
      }
      function __ZN14Fir_Resampler_5writeEl($this,$count) {
       $this = $this|0;
       $count = $count|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 8|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = (($2) + ($count<<1)|0);
       HEAP32[$1>>2] = $3;
       $4 = ($this);
       $5 = (__ZNK13blargg_vectorIsE3endEv($4)|0);
       $6 = ($3>>>0)>($5>>>0);
       if ($6) {
        ___assert_fail(((38272)|0),((38296)|0),96,((38336)|0));
        // unreachable;
       } else {
        STACKTOP = sp;return;
       }
      }
      function __ZN13Fir_ResamplerILi12EE4readEPsl($this,$out_begin,$count) {
       $this = $this|0;
       $out_begin = $out_begin|0;
       $count = $count|0;
       var $$0 = 0, $$0$phi = 0, $$sum = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
       var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
       var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
       var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
       var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
       var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
       var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
       var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
       var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
       var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
       var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $imp$0 = 0, $imp$2 = 0, $in$0 = 0, $in$1 = 0, $out$0 = 0, $out$1 = 0;
       var $remain$0 = 0, $remain$1 = 0, $remain$2 = 0, $scevgep = 0, $skip$0 = 0, $skip$1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $this;
       $2 = (__ZNK13blargg_vectorIsE5beginEv($1)|0);
       $3 = (($this) + 8|0);
       $4 = $3;
       $5 = HEAP32[$4>>2]|0;
       $6 = (($this) + 28|0);
       $7 = $6;
       $8 = (($this) + 16|0);
       $9 = $8;
       $10 = HEAP32[$9>>2]|0;
       $11 = (($this) + 12|0);
       $12 = $11;
       $13 = HEAP32[$12>>2]|0;
       $14 = (($13) - ($10))|0;
       $15 = (($this) + 32|0);
       $16 = $15;
       $17 = HEAP32[$16>>2]|0;
       $18 = $5;
       $19 = $2;
       $20 = (($18) - ($19))|0;
       $21 = ($20|0)>(46);
       if (!($21)) {
        $in$1 = $2;$out$1 = $out_begin;$remain$2 = $14;
        $197 = HEAP32[$12>>2]|0;
        $198 = (($197) - ($remain$2))|0;
        HEAP32[$9>>2] = $198;
        $199 = HEAP32[$4>>2]|0;
        $200 = $199;
        $201 = $in$1;
        $202 = (($200) - ($201))|0;
        $203 = $202 >> 1;
        $204 = (__ZNK13blargg_vectorIsEixEj($1,$203)|0);
        HEAP32[$4>>2] = $204;
        $205 = (__ZNK13blargg_vectorIsE5beginEv($1)|0);
        $206 = $205;
        $207 = $in$1;
        _memmove(($206|0),($207|0),($202|0))|0;
        $208 = $out$1;
        $209 = $out_begin;
        $210 = (($208) - ($209))|0;
        $211 = $210 >> 1;
        STACKTOP = sp;return ($211|0);
       }
       $22 = HEAP32[$7>>2]|0;
       $23 = $count >> 1;
       $24 = ((($this) + (($10*24)|0)|0) + 52|0);
       $25 = $22 >>> $10;
       $26 = (($5) + -48|0);
       $27 = (($this) + 52|0);
       $$0 = $23;$imp$0 = $24;$in$0 = $2;$out$0 = $out_begin;$remain$0 = $14;$skip$0 = $25;
       while(1) {
        $28 = (($$0) + -1)|0;
        $29 = ($$0|0)<(1);
        if ($29) {
         $in$1 = $in$0;$out$1 = $out$0;$remain$2 = $remain$0;
         label = 7;
         break;
        }
        $30 = HEAP16[$imp$0>>1]|0;
        $31 = $30 << 16 >> 16;
        $32 = HEAP16[$in$0>>1]|0;
        $33 = $32 << 16 >> 16;
        $34 = Math_imul($33, $31)|0;
        $35 = (($in$0) + 2|0);
        $36 = HEAP16[$35>>1]|0;
        $37 = $36 << 16 >> 16;
        $38 = Math_imul($37, $31)|0;
        $39 = (($imp$0) + 2|0);
        $40 = HEAP16[$39>>1]|0;
        $41 = $40 << 16 >> 16;
        $42 = (($imp$0) + 4|0);
        $43 = (($in$0) + 4|0);
        $44 = HEAP16[$43>>1]|0;
        $45 = $44 << 16 >> 16;
        $46 = Math_imul($45, $41)|0;
        $47 = (($34) + ($46))|0;
        $48 = (($in$0) + 6|0);
        $49 = HEAP16[$48>>1]|0;
        $50 = $49 << 16 >> 16;
        $51 = Math_imul($50, $41)|0;
        $52 = (($38) + ($51))|0;
        $53 = (($in$0) + 8|0);
        $54 = HEAP16[$42>>1]|0;
        $55 = $54 << 16 >> 16;
        $56 = HEAP16[$53>>1]|0;
        $57 = $56 << 16 >> 16;
        $58 = Math_imul($57, $55)|0;
        $59 = (($58) + ($47))|0;
        $60 = (($in$0) + 10|0);
        $61 = HEAP16[$60>>1]|0;
        $62 = $61 << 16 >> 16;
        $63 = Math_imul($62, $55)|0;
        $64 = (($63) + ($52))|0;
        $65 = (($imp$0) + 6|0);
        $66 = HEAP16[$65>>1]|0;
        $67 = $66 << 16 >> 16;
        $68 = (($imp$0) + 8|0);
        $69 = (($in$0) + 12|0);
        $70 = HEAP16[$69>>1]|0;
        $71 = $70 << 16 >> 16;
        $72 = Math_imul($71, $67)|0;
        $73 = (($59) + ($72))|0;
        $74 = (($in$0) + 14|0);
        $75 = HEAP16[$74>>1]|0;
        $76 = $75 << 16 >> 16;
        $77 = Math_imul($76, $67)|0;
        $78 = (($64) + ($77))|0;
        $79 = (($in$0) + 16|0);
        $80 = HEAP16[$68>>1]|0;
        $81 = $80 << 16 >> 16;
        $82 = HEAP16[$79>>1]|0;
        $83 = $82 << 16 >> 16;
        $84 = Math_imul($83, $81)|0;
        $85 = (($84) + ($73))|0;
        $86 = (($in$0) + 18|0);
        $87 = HEAP16[$86>>1]|0;
        $88 = $87 << 16 >> 16;
        $89 = Math_imul($88, $81)|0;
        $90 = (($89) + ($78))|0;
        $91 = (($imp$0) + 10|0);
        $92 = HEAP16[$91>>1]|0;
        $93 = $92 << 16 >> 16;
        $94 = (($imp$0) + 12|0);
        $95 = (($in$0) + 20|0);
        $96 = HEAP16[$95>>1]|0;
        $97 = $96 << 16 >> 16;
        $98 = Math_imul($97, $93)|0;
        $99 = (($85) + ($98))|0;
        $100 = (($in$0) + 22|0);
        $101 = HEAP16[$100>>1]|0;
        $102 = $101 << 16 >> 16;
        $103 = Math_imul($102, $93)|0;
        $104 = (($90) + ($103))|0;
        $105 = (($in$0) + 24|0);
        $106 = HEAP16[$94>>1]|0;
        $107 = $106 << 16 >> 16;
        $108 = HEAP16[$105>>1]|0;
        $109 = $108 << 16 >> 16;
        $110 = Math_imul($109, $107)|0;
        $111 = (($110) + ($99))|0;
        $112 = (($in$0) + 26|0);
        $113 = HEAP16[$112>>1]|0;
        $114 = $113 << 16 >> 16;
        $115 = Math_imul($114, $107)|0;
        $116 = (($115) + ($104))|0;
        $117 = (($imp$0) + 14|0);
        $118 = HEAP16[$117>>1]|0;
        $119 = $118 << 16 >> 16;
        $120 = (($imp$0) + 16|0);
        $121 = (($in$0) + 28|0);
        $122 = HEAP16[$121>>1]|0;
        $123 = $122 << 16 >> 16;
        $124 = Math_imul($123, $119)|0;
        $125 = (($111) + ($124))|0;
        $126 = (($in$0) + 30|0);
        $127 = HEAP16[$126>>1]|0;
        $128 = $127 << 16 >> 16;
        $129 = Math_imul($128, $119)|0;
        $130 = (($116) + ($129))|0;
        $131 = (($in$0) + 32|0);
        $132 = HEAP16[$120>>1]|0;
        $133 = $132 << 16 >> 16;
        $134 = HEAP16[$131>>1]|0;
        $135 = $134 << 16 >> 16;
        $136 = Math_imul($135, $133)|0;
        $137 = (($136) + ($125))|0;
        $138 = (($in$0) + 34|0);
        $139 = HEAP16[$138>>1]|0;
        $140 = $139 << 16 >> 16;
        $141 = Math_imul($140, $133)|0;
        $142 = (($141) + ($130))|0;
        $143 = (($imp$0) + 18|0);
        $144 = HEAP16[$143>>1]|0;
        $145 = $144 << 16 >> 16;
        $146 = (($imp$0) + 20|0);
        $147 = (($in$0) + 36|0);
        $148 = HEAP16[$147>>1]|0;
        $149 = $148 << 16 >> 16;
        $150 = Math_imul($149, $145)|0;
        $151 = (($137) + ($150))|0;
        $152 = (($in$0) + 38|0);
        $153 = HEAP16[$152>>1]|0;
        $154 = $153 << 16 >> 16;
        $155 = Math_imul($154, $145)|0;
        $156 = (($142) + ($155))|0;
        $157 = (($in$0) + 40|0);
        $158 = HEAP16[$146>>1]|0;
        $159 = $158 << 16 >> 16;
        $160 = HEAP16[$157>>1]|0;
        $161 = $160 << 16 >> 16;
        $162 = Math_imul($161, $159)|0;
        $163 = (($162) + ($151))|0;
        $164 = (($in$0) + 42|0);
        $165 = HEAP16[$164>>1]|0;
        $166 = $165 << 16 >> 16;
        $167 = Math_imul($166, $159)|0;
        $168 = (($167) + ($156))|0;
        $169 = (($imp$0) + 22|0);
        $170 = HEAP16[$169>>1]|0;
        $171 = $170 << 16 >> 16;
        $172 = (($in$0) + 44|0);
        $173 = HEAP16[$172>>1]|0;
        $174 = $173 << 16 >> 16;
        $175 = Math_imul($174, $171)|0;
        $176 = (($163) + ($175))|0;
        $177 = (($in$0) + 46|0);
        $178 = HEAP16[$177>>1]|0;
        $179 = $178 << 16 >> 16;
        $180 = Math_imul($179, $171)|0;
        $181 = (($168) + ($180))|0;
        $scevgep = (($imp$0) + 24|0);
        $182 = (($remain$0) + -1)|0;
        $183 = $176 >>> 15;
        $184 = $181 >>> 15;
        $185 = $skip$0 << 1;
        $186 = $185 & 2;
        $187 = $skip$0 >>> 1;
        $$sum = (($186) + ($17))|0;
        $188 = (($in$0) + ($$sum<<1)|0);
        $189 = ($182|0)==(0);
        if ($189) {
         $190 = HEAP32[$7>>2]|0;
         $191 = HEAP32[$12>>2]|0;
         $imp$2 = $27;$remain$1 = $191;$skip$1 = $190;
        } else {
         $imp$2 = $scevgep;$remain$1 = $182;$skip$1 = $187;
        }
        $192 = $183&65535;
        HEAP16[$out$0>>1] = $192;
        $193 = $184&65535;
        $194 = (($out$0) + 2|0);
        HEAP16[$194>>1] = $193;
        $195 = (($out$0) + 4|0);
        $196 = ($188>>>0)>($26>>>0);
        if ($196) {
         $in$1 = $188;$out$1 = $195;$remain$2 = $remain$1;
         label = 7;
         break;
        } else {
         $$0$phi = $28;$imp$0 = $imp$2;$in$0 = $188;$out$0 = $195;$remain$0 = $remain$1;$skip$0 = $skip$1;$$0 = $$0$phi;
        }
       }
       if ((label|0) == 7) {
        $197 = HEAP32[$12>>2]|0;
        $198 = (($197) - ($remain$2))|0;
        HEAP32[$9>>2] = $198;
        $199 = HEAP32[$4>>2]|0;
        $200 = $199;
        $201 = $in$1;
        $202 = (($200) - ($201))|0;
        $203 = $202 >> 1;
        $204 = (__ZNK13blargg_vectorIsEixEj($1,$203)|0);
        HEAP32[$4>>2] = $204;
        $205 = (__ZNK13blargg_vectorIsE5beginEv($1)|0);
        $206 = $205;
        $207 = $in$1;
        _memmove(($206|0),($207|0),($202|0))|0;
        $208 = $out$1;
        $209 = $out_begin;
        $210 = (($208) - ($209))|0;
        $211 = $210 >> 1;
        STACKTOP = sp;return ($211|0);
       }
       return 0|0;
      }
      function __ZNK13blargg_vectorIsE5beginEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = HEAP32[$1>>2]|0;
       STACKTOP = sp;return ($2|0);
      }
      function __ZN14Dual_Resampler11mix_samplesER11Blip_BufferPs($this,$blip_buf,$out) {
       $this = $this|0;
       $blip_buf = $blip_buf|0;
       $out = $out|0;
       var $$03 = 0, $$in = 0, $$in$phi = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
       var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $in$02 = 0, $l$0 = 0, $r$0 = 0, $sext = 0, $sext1 = 0;
       var $sn = 0, label = 0, sp = 0;
       sp = STACKTOP;
       STACKTOP = STACKTOP + 8|0;
       $sn = sp;
       $1 = (__ZN11Blip_Reader5beginER11Blip_Buffer($sn,$blip_buf)|0);
       $2 = (($this) + 12|0);
       $3 = HEAP32[$2>>2]|0;
       $4 = $3 >> 1;
       $5 = ($4|0)==(0);
       if ($5) {
        __ZN11Blip_Reader3endER11Blip_Buffer($sn,$blip_buf);
        STACKTOP = sp;return;
       }
       $6 = (($this) + 4|0);
       $7 = (__ZNK13blargg_vectorIsE5beginEv($6)|0);
       $$03 = $out;$$in = $4;$in$02 = $7;
       while(1) {
        $8 = (($$in) + -1)|0;
        $9 = (__ZNK11Blip_Reader4readEv($sn)|0);
        $10 = HEAP16[$in$02>>1]|0;
        $11 = $10 << 16 >> 16;
        $12 = $11 << 1;
        $13 = (($12) + ($9))|0;
        $sext = $13 << 16;
        $14 = $sext >> 16;
        $15 = ($14|0)==($13|0);
        if ($15) {
         $l$0 = $13;
        } else {
         $16 = $13 >> 24;
         $17 = (32767 - ($16))|0;
         $l$0 = $17;
        }
        __ZN11Blip_Reader4nextEi($sn,$1);
        $18 = (($in$02) + 2|0);
        $19 = HEAP16[$18>>1]|0;
        $20 = $19 << 16 >> 16;
        $21 = $20 << 1;
        $22 = (($21) + ($9))|0;
        $sext1 = $22 << 16;
        $23 = $sext1 >> 16;
        $24 = ($23|0)==($22|0);
        if ($24) {
         $r$0 = $22;
        } else {
         $25 = $22 >> 24;
         $26 = (32767 - ($25))|0;
         $r$0 = $26;
        }
        $27 = (($in$02) + 4|0);
        $28 = $l$0&65535;
        HEAP16[$$03>>1] = $28;
        $29 = $r$0&65535;
        $30 = (($$03) + 2|0);
        HEAP16[$30>>1] = $29;
        $31 = (($$03) + 4|0);
        $32 = ($8|0)==(0);
        if ($32) {
         break;
        } else {
         $$in$phi = $8;$$03 = $31;$in$02 = $27;$$in = $$in$phi;
        }
       }
       __ZN11Blip_Reader3endER11Blip_Buffer($sn,$blip_buf);
       STACKTOP = sp;return;
      }
      function __ZN14Dual_Resampler9dual_playElPsR11Blip_Buffer($this,$count,$out,$blip_buf) {
       $this = $this|0;
       $count = $count|0;
       $out = $out|0;
       $blip_buf = $blip_buf|0;
       var $$0$lcssa = 0, $$0$ph = 0, $$01$lcssa = 0, $$01$ph = 0, $$012 = 0, $$012$phi = 0, $$03 = 0, $$03$phi = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
       var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count$ = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 12|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = (($this) + 20|0);
       $4 = HEAP32[$3>>2]|0;
       $5 = (($2) - ($4))|0;
       $6 = ($2|0)==($4|0);
       if ($6) {
        $$0$ph = $count;$$01$ph = $out;
       } else {
        $7 = ($5|0)>($count|0);
        $count$ = $7 ? $count : $5;
        $8 = (($count) - ($count$))|0;
        $9 = $out;
        $10 = (($this) + 4|0);
        $11 = (__ZNK13blargg_vectorIsEixEj($10,$4)|0);
        $12 = $11;
        $13 = $count$ << 1;
        _memcpy(($9|0),($12|0),($13|0))|0;
        $14 = (($out) + ($count$<<1)|0);
        $15 = HEAP32[$3>>2]|0;
        $16 = (($15) + ($count$))|0;
        HEAP32[$3>>2] = $16;
        $$0$ph = $8;$$01$ph = $14;
       }
       $17 = HEAP32[$1>>2]|0;
       $18 = ($$0$ph|0)<($17|0);
       if ($18) {
        $$0$lcssa = $$0$ph;$$01$lcssa = $$01$ph;
       } else {
        $$012 = $$01$ph;$$03 = $$0$ph;
        while(1) {
         __ZN14Dual_Resampler11play_frame_ER11Blip_BufferPs($this,$blip_buf,$$012);
         $19 = HEAP32[$1>>2]|0;
         $20 = (($$012) + ($19<<1)|0);
         $21 = (($$03) - ($19))|0;
         $22 = ($21|0)<($19|0);
         if ($22) {
          $$0$lcssa = $21;$$01$lcssa = $20;
          break;
         } else {
          $$03$phi = $21;$$012$phi = $20;$$03 = $$03$phi;$$012 = $$012$phi;
         }
        }
       }
       $23 = ($$0$lcssa|0)==(0);
       if ($23) {
        STACKTOP = sp;return;
       }
       $24 = (($this) + 4|0);
       $25 = (__ZNK13blargg_vectorIsE5beginEv($24)|0);
       __ZN14Dual_Resampler11play_frame_ER11Blip_BufferPs($this,$blip_buf,$25);
       HEAP32[$3>>2] = $$0$lcssa;
       $26 = $$01$lcssa;
       $27 = (__ZNK13blargg_vectorIsE5beginEv($24)|0);
       $28 = $27;
       $29 = $$0$lcssa << 1;
       _memcpy(($26|0),($28|0),($29|0))|0;
       STACKTOP = sp;return;
      }
      function __ZNK13blargg_vectorIsEixEj($this,$n) {
       $this = $this|0;
       $n = $n|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 4|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = ($2>>>0)<($n>>>0);
       if ($3) {
        ___assert_fail(((38200)|0),((38216)|0),58,((38256)|0));
        // unreachable;
       } else {
        $4 = ($this);
        $5 = HEAP32[$4>>2]|0;
        $6 = (($5) + ($n<<1)|0);
        STACKTOP = sp;return ($6|0);
       }
       return 0|0;
      }
      function __ZN11Blip_Reader5beginER11Blip_Buffer($this,$blip_buf) {
       $this = $this|0;
       $blip_buf = $blip_buf|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($blip_buf) + 8|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = ($this);
       HEAP32[$3>>2] = $2;
       $4 = (($blip_buf) + 16|0);
       $5 = HEAP32[$4>>2]|0;
       $6 = (($this) + 4|0);
       HEAP32[$6>>2] = $5;
       $7 = (($blip_buf) + 20|0);
       $8 = HEAP32[$7>>2]|0;
       STACKTOP = sp;return ($8|0);
      }
      function __ZNK11Blip_Reader4readEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 4|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = $2 >> 14;
       STACKTOP = sp;return ($3|0);
      }
      function __ZN11Blip_Reader4nextEi($this,$bass_shift) {
       $this = $this|0;
       $bass_shift = $bass_shift|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = HEAP32[$1>>2]|0;
       $3 = (($2) + 4|0);
       HEAP32[$1>>2] = $3;
       $4 = HEAP32[$2>>2]|0;
       $5 = (($this) + 4|0);
       $6 = HEAP32[$5>>2]|0;
       $7 = $6 >> $bass_shift;
       $8 = (($6) + ($4))|0;
       $9 = (($8) - ($7))|0;
       HEAP32[$5>>2] = $9;
       STACKTOP = sp;return;
      }
      function __ZN11Blip_Reader3endER11Blip_Buffer($this,$b) {
       $this = $this|0;
       $b = $b|0;
       var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 4|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = (($b) + 16|0);
       HEAP32[$3>>2] = $2;
       STACKTOP = sp;return;
      }
      function __ZN13blargg_vectorIsED2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = HEAP32[$1>>2]|0;
       $3 = $2;
       _free($3);
       STACKTOP = sp;return;
      }
      function __ZN13Fir_ResamplerILi12EEC2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $this;
       $2 = (($this) + 52|0);
       __ZN14Fir_Resampler_C2EiPs($1,12,$2);
       STACKTOP = sp;return;
      }
      function __ZN13blargg_vectorIsEC2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       HEAP32[$1>>2] = 0;
       $2 = (($this) + 4|0);
       HEAP32[$2>>2] = 0;
       STACKTOP = sp;return;
      }
      function __ZNK13blargg_vectorIsE3endEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = HEAP32[$1>>2]|0;
       $3 = (($this) + 4|0);
       $4 = HEAP32[$3>>2]|0;
       $5 = (($2) + ($4<<1)|0);
       STACKTOP = sp;return ($5|0);
      }
      function __ZN13Fir_ResamplerILi12EED2Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $this;
       __ZN14Fir_Resampler_D2Ev($1);
       STACKTOP = sp;return;
      }
      function __ZN12Multi_Buffer15set_sample_rateEli($this,$rate,$msec) {
       $this = $this|0;
       $rate = $rate|0;
       $msec = $msec|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 8|0);
       HEAP32[$1>>2] = $rate;
       $2 = (($this) + 12|0);
       HEAP32[$2>>2] = $msec;
       STACKTOP = sp;return (0|0);
      }
      function __ZN14Effects_Buffer8config_tC2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       HEAPF64[$1>>3] = -0.150000005960464477539;
       $2 = (($this) + 8|0);
       HEAPF64[$2>>3] = 0.150000005960464477539;
       $3 = (($this) + 32|0);
       HEAPF64[$3>>3] = 88.0;
       $4 = (($this) + 48|0);
       HEAPF64[$4>>3] = 0.119999997317790985107;
       $5 = (($this) + 16|0);
       HEAPF64[$5>>3] = 61.0;
       $6 = (($this) + 24|0);
       HEAPF64[$6>>3] = 0.100000001490116119385;
       $7 = (($this) + 40|0);
       HEAPF64[$7>>3] = 18.0;
       $8 = (($this) + 56|0);
       HEAP8[$8] = 0;
       STACKTOP = sp;return;
      }
      function __ZN14Effects_Buffer9set_depthEd($this,$d) {
       $this = $this|0;
       $d = +$d;
       var $1 = 0.0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0.0, $4 = 0.0;
       var $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $c = 0, $f$0 = 0.0, label = 0, sp = 0;
       sp = STACKTOP;
       STACKTOP = STACKTOP + 64|0;
       $c = sp;
       $1 = $d;
       $2 = $c;
       __ZN14Effects_Buffer8config_tC2Ev($c);
       $3 = $1 * -0.600000023841857910156;
       $4 = $3;
       $5 = ($c);
       HEAPF64[$5>>3] = $4;
       $6 = $1 * 0.600000023841857910156;
       $7 = $6;
       $8 = (($c) + 8|0);
       HEAPF64[$8>>3] = $7;
       $9 = (($c) + 32|0);
       HEAPF64[$9>>3] = 88.0;
       $10 = (($c) + 16|0);
       HEAPF64[$10>>3] = 61.0;
       $11 = $1 > 0.5;
       $f$0 = $11 ? 0.5 : $1;
       $12 = $f$0 * 0.5;
       $13 = $12;
       $14 = (($c) + 48|0);
       HEAPF64[$14>>3] = $13;
       $15 = $f$0 * 0.300000011920928955078;
       $16 = $15;
       $17 = (($c) + 24|0);
       HEAPF64[$17>>3] = $16;
       $18 = (($c) + 40|0);
       HEAPF64[$18>>3] = 18.0;
       $19 = $d > 0.0;
       $20 = (($c) + 56|0);
       $21 = $19&1;
       HEAP8[$20] = $21;
       $22 = $this;
       $23 = HEAP32[$22>>2]|0;
       $24 = (($23) + 44|0);
       $25 = HEAP32[$24>>2]|0;
       FUNCTION_TABLE_vii[$25 & 31]($this,$c);
       STACKTOP = sp;return;
      }
      function __ZN14Effects_BufferC2Eb($this,$center_only) {
       $this = $this|0;
       $center_only = $center_only|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $5$phi = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       __ZN12Multi_BufferC2Ei($1,2);
       $2 = ($this);
       HEAP32[$2>>2] = ((((38344) + 8|0)));
       $3 = (($this) + 20|0);
       $4 = (($this) + 328|0);
       $5 = $3;
       while(1) {
        __ZN11Blip_BufferC2Ev($5);
        $6 = (($5) + 44|0);
        $7 = ($6|0)==($4|0);
        if ($7) {
         break;
        } else {
         $5$phi = $6;$5 = $5$phi;
        }
       }
       $8 = (($this) + 368|0);
       __ZN14Effects_Buffer8config_tC2Ev($8);
       $9 = (($this) + 448|0);
       __ZN13blargg_vectorIsEC1Ev($9);
       $10 = (($this) + 456|0);
       __ZN13blargg_vectorIsEC1Ev($10);
       $11 = $center_only ? 3 : 7;
       $12 = (($this) + 440|0);
       HEAP32[$12>>2] = $11;
       $13 = (($this) + 468|0);
       HEAP32[$13>>2] = 0;
       $14 = (($this) + 464|0);
       HEAP32[$14>>2] = 0;
       $15 = (($this) + 432|0);
       HEAP32[$15>>2] = 0;
       $16 = (($this) + 436|0);
       HEAP32[$16>>2] = 0;
       $17 = (($this) + 444|0);
       HEAP8[$17] = 0;
       __ZN14Effects_Buffer9set_depthEd($this,0.0);
       STACKTOP = sp;return;
      }
      function __ZN14Effects_BufferD0Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       __ZN14Effects_BufferD2Ev($this);
       $1 = $this;
       __ZN12Multi_BufferdlEPv($1);
       STACKTOP = sp;return;
      }
      function __ZN14Effects_BufferD2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $6$phi = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       HEAP32[$1>>2] = ((((38344) + 8|0)));
       $2 = (($this) + 456|0);
       __ZN13blargg_vectorIsED1Ev($2);
       $3 = (($this) + 448|0);
       __ZN13blargg_vectorIsED1Ev($3);
       $4 = (($this) + 20|0);
       $5 = (($this) + 328|0);
       $6 = $5;
       while(1) {
        $7 = (($6) + -44|0);
        __ZN11Blip_BufferD2Ev($7);
        $8 = ($7|0)==($4|0);
        if ($8) {
         break;
        } else {
         $6$phi = $7;$6 = $6$phi;
        }
       }
       STACKTOP = sp;return;
      }
      function __ZN14Effects_Buffer15set_sample_rateEli($this,$rate,$msec) {
       $this = $this|0;
       $rate = $rate|0;
       $msec = $msec|0;
       var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
       var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, $i$01$phi = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 456|0);
       $2 = (__ZNK13blargg_vectorIsE4sizeEv($1)|0);
       $3 = ($2|0)==(0);
       do {
        if ($3) {
         $4 = (__ZN13blargg_vectorIsE6resizeEj($1,4096)|0);
         $5 = ($4|0)==(0|0);
         if ($5) {
          break;
         } else {
          $$0 = $4;
         }
         STACKTOP = sp;return ($$0|0);
        }
       } while(0);
       $6 = (($this) + 448|0);
       $7 = (__ZNK13blargg_vectorIsE4sizeEv($6)|0);
       $8 = ($7|0)==(0);
       do {
        if ($8) {
         $9 = (__ZN13blargg_vectorIsE6resizeEj($6,16384)|0);
         $10 = ($9|0)==(0|0);
         if ($10) {
          break;
         } else {
          $$0 = $9;
         }
         STACKTOP = sp;return ($$0|0);
        }
       } while(0);
       $11 = (($this) + 440|0);
       $12 = HEAP32[$11>>2]|0;
       $13 = ($12|0)>(0);
       L9: do {
        if ($13) {
         $i$01 = 0;
         while(1) {
          $16 = ((($this) + (($i$01*44)|0)|0) + 20|0);
          $17 = (__ZN11Blip_Buffer15set_sample_rateEli($16,$rate,$msec)|0);
          $18 = ($17|0)==(0|0);
          $19 = (($i$01) + 1)|0;
          if (!($18)) {
           $$0 = $17;
           break;
          }
          $14 = HEAP32[$11>>2]|0;
          $15 = ($19|0)<($14|0);
          if ($15) {
           $i$01$phi = $19;$i$01 = $i$01$phi;
          } else {
           break L9;
          }
         }
         STACKTOP = sp;return ($$0|0);
        }
       } while(0);
       $20 = $this;
       $21 = HEAP32[$20>>2]|0;
       $22 = (($21) + 44|0);
       $23 = HEAP32[$22>>2]|0;
       $24 = (($this) + 368|0);
       FUNCTION_TABLE_vii[$23 & 31]($this,$24);
       $25 = $this;
       $26 = HEAP32[$25>>2]|0;
       $27 = (($26) + 28|0);
       $28 = HEAP32[$27>>2]|0;
       FUNCTION_TABLE_vi[$28 & 127]($this);
       $29 = ($this);
       $30 = (($this) + 20|0);
       $31 = (__ZNK11Blip_Buffer11sample_rateEv($30)|0);
       $32 = (__ZNK11Blip_Buffer6lengthEv($30)|0);
       (__ZN12Multi_Buffer15set_sample_rateEli($29,$31,$32)|0);
       $$0 = 0;
       STACKTOP = sp;return ($$0|0);
      }
      function __ZNK11Blip_Buffer11sample_rateEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 24|0);
       $2 = HEAP32[$1>>2]|0;
       STACKTOP = sp;return ($2|0);
      }
      function __ZNK11Blip_Buffer6lengthEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 36|0);
       $2 = HEAP32[$1>>2]|0;
       STACKTOP = sp;return ($2|0);
      }
      function __ZN14Effects_Buffer10clock_rateEl($this,$rate) {
       $this = $this|0;
       $rate = $rate|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $i$01 = 0, $i$01$phi = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 440|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = ($2|0)>(0);
       if ($3) {
        $i$01 = 0;
       } else {
        STACKTOP = sp;return;
       }
       while(1) {
        $4 = ((($this) + (($i$01*44)|0)|0) + 20|0);
        __ZN11Blip_Buffer10clock_rateEl($4,$rate);
        $5 = (($i$01) + 1)|0;
        $6 = HEAP32[$1>>2]|0;
        $7 = ($5|0)<($6|0);
        if ($7) {
         $i$01$phi = $5;$i$01 = $i$01$phi;
        } else {
         break;
        }
       }
       STACKTOP = sp;return;
      }
      function __ZN14Effects_Buffer9bass_freqEi($this,$freq) {
       $this = $this|0;
       $freq = $freq|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $i$01 = 0, $i$01$phi = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 440|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = ($2|0)>(0);
       if ($3) {
        $i$01 = 0;
       } else {
        STACKTOP = sp;return;
       }
       while(1) {
        $4 = ((($this) + (($i$01*44)|0)|0) + 20|0);
        __ZN11Blip_Buffer9bass_freqEi($4,$freq);
        $5 = (($i$01) + 1)|0;
        $6 = HEAP32[$1>>2]|0;
        $7 = ($5|0)<($6|0);
        if ($7) {
         $i$01$phi = $5;$i$01 = $i$01$phi;
        } else {
         break;
        }
       }
       STACKTOP = sp;return;
      }
      function __ZN14Effects_Buffer5clearEv($this) {
       $this = $this|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0;
       var $i$01$phi = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 432|0);
       HEAP32[$1>>2] = 0;
       $2 = (($this) + 436|0);
       HEAP32[$2>>2] = 0;
       $3 = (($this) + 456|0);
       $4 = (__ZNK13blargg_vectorIsE4sizeEv($3)|0);
       $5 = ($4|0)==(0);
       if (!($5)) {
        $6 = (__ZNK13blargg_vectorIsEixEj($3,0)|0);
        $7 = $6;
        _memset(($7|0),0,8192)|0;
       }
       $8 = (($this) + 448|0);
       $9 = (__ZNK13blargg_vectorIsE4sizeEv($8)|0);
       $10 = ($9|0)==(0);
       if (!($10)) {
        $11 = (__ZNK13blargg_vectorIsEixEj($8,0)|0);
        $12 = $11;
        _memset(($12|0),0,32768)|0;
       }
       $13 = (($this) + 440|0);
       $14 = HEAP32[$13>>2]|0;
       $15 = ($14|0)>(0);
       if ($15) {
        $i$01 = 0;
       } else {
        STACKTOP = sp;return;
       }
       while(1) {
        $16 = ((($this) + (($i$01*44)|0)|0) + 20|0);
        __ZN11Blip_Buffer5clearEi($16,1);
        $17 = (($i$01) + 1)|0;
        $18 = HEAP32[$13>>2]|0;
        $19 = ($17|0)<($18|0);
        if ($19) {
         $i$01$phi = $17;$i$01 = $i$01$phi;
        } else {
         break;
        }
       }
       STACKTOP = sp;return;
      }
      function __ZN14Effects_Buffer6configERKNS_8config_tE($this,$cfg) {
       $this = $this|0;
       $cfg = $cfg|0;
       var $$neg2 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
       var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0;
       var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0;
       var $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0;
       var $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
       var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
       var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
       sp = STACKTOP;
       $1 = ($this);
       __ZN12Multi_Buffer16channels_changedEv($1);
       $2 = (($this) + 368|0);
       $3 = (($this) + 424|0);
       $4 = HEAP8[$3]|0;
       $5 = ($4<<24>>24)==(0);
       do {
        if ($5) {
         $6 = (($cfg) + 56|0);
         $7 = HEAP8[$6]|0;
         $8 = ($7<<24>>24)==(0);
         if ($8) {
          break;
         }
         $9 = (($this) + 456|0);
         $10 = (__ZNK13blargg_vectorIsE4sizeEv($9)|0);
         $11 = ($10|0)==(0);
         if ($11) {
          break;
         }
         $12 = (__ZNK13blargg_vectorIsEixEj($9,0)|0);
         $13 = $12;
         _memset(($13|0),0,8192)|0;
         $14 = (($this) + 448|0);
         $15 = (__ZNK13blargg_vectorIsEixEj($14,0)|0);
         $16 = $15;
         _memset(($16|0),0,32768)|0;
        }
       } while(0);
       $17 = $2;
       $18 = $cfg;
       dest=$17+0|0; src=$18+0|0; stop=dest+56|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));;HEAP8[$17+56|0]=HEAP8[$18+56|0]|0;
       $19 = HEAP8[$3]|0;
       $20 = ($19<<24>>24)==(0);
       if ($20) {
        $103 = (($this) + 20|0);
        $104 = (($this) + 64|0);
        $105 = (($this) + 108|0);
        $106 = (($this) + 328|0);
        HEAP32[$106>>2] = $103;
        $107 = (($this) + 332|0);
        HEAP32[$107>>2] = $104;
        $108 = (($this) + 336|0);
        HEAP32[$108>>2] = $105;
        $109 = (($this) + 340|0);
        HEAP32[$109>>2] = $103;
        $110 = (($this) + 344|0);
        HEAP32[$110>>2] = $104;
        $111 = (($this) + 348|0);
        HEAP32[$111>>2] = $105;
        $112 = (($this) + 352|0);
        HEAP32[$112>>2] = $103;
        $113 = (($this) + 356|0);
        HEAP32[$113>>2] = $104;
        $114 = (($this) + 360|0);
        HEAP32[$114>>2] = $105;
       } else {
        $21 = ($2);
        $22 = +HEAPF64[$21>>3];
        $23 = $22 * 32768.0;
        $24 = $23 + 0.5;
        $25 = (~~(($24)));
        $26 = (32768 - ($25))|0;
        $27 = (($this) + 472|0);
        HEAP32[$27>>2] = $26;
        $28 = (65536 - ($26))|0;
        $29 = (($this) + 476|0);
        HEAP32[$29>>2] = $28;
        $30 = (($this) + 376|0);
        $31 = +HEAPF64[$30>>3];
        $32 = $31 * 32768.0;
        $33 = $32 + 0.5;
        $34 = (~~(($33)));
        $35 = (32768 - ($34))|0;
        $36 = (($this) + 480|0);
        HEAP32[$36>>2] = $35;
        $37 = (65536 - ($35))|0;
        $38 = (($this) + 484|0);
        HEAP32[$38>>2] = $37;
        $39 = (($this) + 416|0);
        $40 = +HEAPF64[$39>>3];
        $41 = $40 * 32768.0;
        $42 = $41 + 0.5;
        $43 = (~~(($42)));
        $44 = (($this) + 508|0);
        HEAP32[$44>>2] = $43;
        $45 = (($this) + 392|0);
        $46 = +HEAPF64[$45>>3];
        $47 = $46 * 32768.0;
        $48 = $47 + 0.5;
        $49 = (~~(($48)));
        $50 = (($this) + 496|0);
        HEAP32[$50>>2] = $49;
        $51 = (($this) + 408|0);
        $52 = +HEAPF64[$51>>3];
        $53 = $52 * 5.00000000000000010408E-4;
        $54 = (__ZNK12Multi_Buffer11sample_rateEv($1)|0);
        $55 = (+($54|0));
        $56 = $53 * $55;
        $57 = (~~(($56)));
        $58 = (($this) + 400|0);
        $59 = +HEAPF64[$58>>3];
        $60 = $59 * 0.00100000000000000002082;
        $61 = $55 * $60;
        $62 = (~~(($61)));
        $63 = (($62) - ($57))|0;
        $64 = $63 << 1;
        $65 = (16384 - ($64))|0;
        $66 = (__Z9pin_rangeiii($65,16382,0)|0);
        $67 = (($this) + 500|0);
        HEAP32[$67>>2] = $66;
        $68 = (($62) + ($57))|0;
        $69 = $68 << 1;
        $70 = (16385 - ($69))|0;
        $71 = (__Z9pin_rangeiii($70,16383,1)|0);
        $72 = (($this) + 504|0);
        HEAP32[$72>>2] = $71;
        $73 = (($this) + 384|0);
        $74 = +HEAPF64[$73>>3];
        $75 = $74 * 0.00100000000000000002082;
        $76 = (__ZNK12Multi_Buffer11sample_rateEv($1)|0);
        $77 = (+($76|0));
        $78 = $75 * $77;
        $79 = (~~(($78)));
        $80 = (($57) + 4095)|0;
        $81 = (($80) - ($79))|0;
        $82 = (__Z9pin_rangeiii($81,4095,0)|0);
        $83 = (($this) + 488|0);
        HEAP32[$83>>2] = $82;
        $$neg2 = (4095 - ($57))|0;
        $84 = (($$neg2) - ($79))|0;
        $85 = (__Z9pin_rangeiii($84,4095,0)|0);
        $86 = (($this) + 492|0);
        HEAP32[$86>>2] = $85;
        $87 = (($this) + 20|0);
        $88 = (($this) + 328|0);
        HEAP32[$88>>2] = $87;
        $89 = (($this) + 152|0);
        $90 = (($this) + 332|0);
        HEAP32[$90>>2] = $89;
        $91 = (($this) + 196|0);
        $92 = (($this) + 336|0);
        HEAP32[$92>>2] = $91;
        $93 = (($this) + 64|0);
        $94 = (($this) + 340|0);
        HEAP32[$94>>2] = $93;
        $95 = (($this) + 344|0);
        HEAP32[$95>>2] = $89;
        $96 = (($this) + 348|0);
        HEAP32[$96>>2] = $91;
        $97 = (($this) + 108|0);
        $98 = (($this) + 352|0);
        HEAP32[$98>>2] = $97;
        $99 = (($this) + 240|0);
        $100 = (($this) + 356|0);
        HEAP32[$100>>2] = $99;
        $101 = (($this) + 284|0);
        $102 = (($this) + 360|0);
        HEAP32[$102>>2] = $101;
       }
       $115 = (($this) + 440|0);
       $116 = HEAP32[$115>>2]|0;
       $117 = ($116|0)<(7);
       if (!($117)) {
        STACKTOP = sp;return;
       }
       $118 = (($this) + 328|0);
       $119 = HEAP32[$118>>2]|0;
       $120 = (($this) + 332|0);
       HEAP32[$120>>2] = $119;
       $121 = HEAP32[$118>>2]|0;
       $122 = (($this) + 336|0);
       HEAP32[$122>>2] = $121;
       $123 = (($this) + 340|0);
       $124 = HEAP32[$123>>2]|0;
       $125 = (($this) + 344|0);
       HEAP32[$125>>2] = $124;
       $126 = HEAP32[$123>>2]|0;
       $127 = (($this) + 348|0);
       HEAP32[$127>>2] = $126;
       $128 = (($this) + 352|0);
       $129 = HEAP32[$128>>2]|0;
       $130 = (($this) + 356|0);
       HEAP32[$130>>2] = $129;
       $131 = HEAP32[$128>>2]|0;
       $132 = (($this) + 360|0);
       HEAP32[$132>>2] = $131;
       STACKTOP = sp;return;
      }
      function __ZN12Multi_Buffer16channels_changedEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 4|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = (($2) + 1)|0;
       HEAP32[$1>>2] = $3;
       STACKTOP = sp;return;
      }
      function __ZNK12Multi_Buffer11sample_rateEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 8|0);
       $2 = HEAP32[$1>>2]|0;
       STACKTOP = sp;return ($2|0);
      }
      function __Z9pin_rangeiii($n,$max,$min) {
       $n = $n|0;
       $max = $max|0;
       $min = $min|0;
       var $$0 = 0, $1 = 0, $2 = 0, $max$n = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($n|0)<($min|0);
       if ($1) {
        $$0 = $min;
       } else {
        $2 = ($n|0)>($max|0);
        $max$n = $2 ? $max : $n;
        $$0 = $max$n;
       }
       STACKTOP = sp;return ($$0|0);
      }
      function __ZN14Effects_Buffer7channelEii($agg$result,$this,$i,$type) {
       $agg$result = $agg$result|0;
       $this = $this|0;
       $i = $i|0;
       $type = $type|0;
       var $$ = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $out$0 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($type|0)==(0);
       do {
        if ($1) {
         $2 = (($i|0) % 5)&-1;
         $3 = ($2|0)>(2);
         $$ = $3 ? 2 : $2;
         $out$0 = $$;
        } else {
         $4 = $type & 512;
         $5 = ($4|0)==(0);
         if (!($5)) {
          $out$0 = 2;
          break;
         }
         $6 = $type & 255;
         $7 = (($6>>>0) % 3)&-1;
         $8 = ($7|0)==(0);
         $9 = $type & 1;
         $$1 = $8 ? 2 : $9;
         $out$0 = $$1;
        }
       } while(0);
       $10 = ((($this) + (($out$0*12)|0)|0) + 328|0);
       $11 = $agg$result;
       $12 = $10;
       ;HEAP32[$11+0>>2]=HEAP32[$12+0>>2]|0;HEAP32[$11+4>>2]=HEAP32[$12+4>>2]|0;HEAP32[$11+8>>2]=HEAP32[$12+8>>2]|0;
       STACKTOP = sp;return;
      }
      function __ZN14Effects_Buffer9end_frameEi($this,$clock_count) {
       $this = $this|0;
       $clock_count = $clock_count|0;
       var $$lcssa = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
       var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bufs_used$0$lcssa = 0, $bufs_used$02 = 0, $bufs_used$02$phi = 0, $i$01 = 0, $i$01$phi = 0, $or$cond = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 440|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = ($2|0)>(0);
       if ($3) {
        $bufs_used$02 = 0;$i$01 = 0;
        while(1) {
         $4 = ((($this) + (($i$01*44)|0)|0) + 20|0);
         $5 = (__ZN11Blip_Buffer14clear_modifiedEv($4)|0);
         $6 = $5 << $i$01;
         $7 = $6 | $bufs_used$02;
         __ZN11Blip_Buffer9end_frameEi($4,$clock_count);
         $8 = (($i$01) + 1)|0;
         $9 = HEAP32[$1>>2]|0;
         $10 = ($8|0)<($9|0);
         if ($10) {
          $i$01$phi = $8;$bufs_used$02$phi = $7;$i$01 = $i$01$phi;$bufs_used$02 = $bufs_used$02$phi;
         } else {
          $$lcssa = $9;$bufs_used$0$lcssa = $7;
          break;
         }
        }
       } else {
        $$lcssa = $2;$bufs_used$0$lcssa = 0;
       }
       $11 = (($this) + 424|0);
       $12 = HEAP8[$11]|0;
       $13 = ($12<<24>>24)!=(0);
       $14 = $13 ? 120 : 6;
       $15 = $14 & $bufs_used$0$lcssa;
       $16 = ($15|0)!=(0);
       $17 = ($$lcssa|0)==(7);
       $or$cond = $16 & $17;
       if ($or$cond) {
        $18 = (($this) + 20|0);
        $19 = (__ZNK11Blip_Buffer13samples_availEv($18)|0);
        $20 = (($19) + 8)|0;
        $21 = (($this) + 432|0);
        HEAP32[$21>>2] = $20;
       }
       $22 = (($this) + 444|0);
       $23 = HEAP8[$22]|0;
       $24 = ($23<<24>>24)==(0);
       do {
        if ($24) {
         $25 = HEAP8[$11]|0;
         $26 = ($25<<24>>24)==(0);
         if (!($26)) {
          break;
         }
         $31 = HEAP8[$11]|0;
         HEAP8[$22] = $31;
         STACKTOP = sp;return;
        }
       } while(0);
       $27 = (($this) + 20|0);
       $28 = (__ZNK11Blip_Buffer13samples_availEv($27)|0);
       $29 = (($28) + 8)|0;
       $30 = (($this) + 436|0);
       HEAP32[$30>>2] = $29;
       $31 = HEAP8[$11]|0;
       HEAP8[$22] = $31;
       STACKTOP = sp;return;
      }
      function __ZN11Blip_Buffer14clear_modifiedEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 40|0);
       $2 = HEAP32[$1>>2]|0;
       HEAP32[$1>>2] = 0;
       STACKTOP = sp;return ($2|0);
      }
      function __ZNK14Effects_Buffer13samples_availEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 20|0);
       $2 = (__ZNK11Blip_Buffer13samples_availEv($1)|0);
       $3 = $2 << 1;
       STACKTOP = sp;return ($3|0);
      }
      function __ZN14Effects_Buffer12read_samplesEPsl($this,$out,$total_samples) {
       $this = $this|0;
       $out = $out|0;
       $total_samples = $total_samples|0;
       var $$ = 0, $$04 = 0, $$2 = 0, $$remain$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
       var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
       var $8 = 0, $9 = 0, $active_bufs$0 = 0, $count$1 = 0, $i$03 = 0, $remain$15 = 0, $storemerge = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $total_samples & 1;
       $2 = ($1|0)==(0);
       if (!($2)) {
        ___assert_fail(((38400)|0),((38424)|0),251,((38472)|0));
        // unreachable;
       }
       $3 = (($this) + 20|0);
       $4 = (__ZNK11Blip_Buffer13samples_availEv($3)|0);
       $5 = $total_samples >> 1;
       $6 = ($4|0)>($5|0);
       $$ = $6 ? $5 : $4;
       $7 = ($$|0)==(0);
       if ($7) {
        $38 = $$ << 1;
        STACKTOP = sp;return ($38|0);
       }
       $8 = (($this) + 440|0);
       $9 = (($this) + 436|0);
       $10 = (($this) + 432|0);
       $11 = (($this) + 432|0);
       $12 = (($this) + 432|0);
       $$04 = $out;$remain$15 = $$;
       while(1) {
        $14 = HEAP32[$8>>2]|0;
        $15 = HEAP32[$9>>2]|0;
        $16 = ($15|0)==(0);
        do {
         if ($16) {
          $20 = HEAP32[$10>>2]|0;
          $21 = ($20|0)==(0);
          if ($21) {
           __ZN14Effects_Buffer8mix_monoEPsl($this,$$04,$remain$15);
           $active_bufs$0 = 1;$count$1 = $remain$15;
           break;
          } else {
           __ZN14Effects_Buffer10mix_stereoEPsl($this,$$04,$remain$15);
           $active_bufs$0 = 3;$count$1 = $remain$15;
           break;
          }
         } else {
          $17 = ($remain$15|0)>($15|0);
          $$remain$1 = $17 ? $15 : $remain$15;
          $18 = HEAP32[$12>>2]|0;
          $19 = ($18|0)==(0);
          if ($19) {
           __ZN14Effects_Buffer17mix_mono_enhancedEPsl($this,$$04,$$remain$1);
           $active_bufs$0 = 3;$count$1 = $$remain$1;
           break;
          } else {
           __ZN14Effects_Buffer12mix_enhancedEPsl($this,$$04,$$remain$1);
           $active_bufs$0 = $14;$count$1 = $$remain$1;
           break;
          }
         }
        } while(0);
        $22 = $count$1 << 1;
        $23 = (($$04) + ($22<<1)|0);
        $24 = (($remain$15) - ($count$1))|0;
        $25 = HEAP32[$11>>2]|0;
        $26 = (($25) - ($count$1))|0;
        $27 = ($26|0)<(0);
        $$2 = $27 ? 0 : $26;
        HEAP32[$11>>2] = $$2;
        $28 = HEAP32[$9>>2]|0;
        $29 = (($28) - ($count$1))|0;
        $30 = ($29|0)<(0);
        $storemerge = $30 ? 0 : $29;
        HEAP32[$9>>2] = $storemerge;
        $31 = HEAP32[$8>>2]|0;
        $32 = ($31|0)>(0);
        if ($32) {
         $i$03 = 0;
         while(1) {
          $33 = ($i$03|0)<($active_bufs$0|0);
          $34 = ((($this) + (($i$03*44)|0)|0) + 20|0);
          if ($33) {
           __ZN11Blip_Buffer14remove_samplesEl($34,$count$1);
          } else {
           __ZN11Blip_Buffer14remove_silenceEl($34,$count$1);
          }
          $35 = (($i$03) + 1)|0;
          $36 = HEAP32[$8>>2]|0;
          $37 = ($35|0)<($36|0);
          if ($37) {
           $i$03 = $35;
          } else {
           break;
          }
         }
        }
        $13 = ($remain$15|0)==($count$1|0);
        if ($13) {
         break;
        } else {
         $$04 = $23;$remain$15 = $24;
        }
       }
       $38 = $$ << 1;
       STACKTOP = sp;return ($38|0);
      }
      function __ZN14Effects_Buffer12mix_enhancedEPsl($this,$out_,$count) {
       $this = $this|0;
       $out_ = $out_|0;
       $count = $count|0;
       var $$in = 0, $$in$phi = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
       var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
       var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
       var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
       var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
       var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
       var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
       var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
       var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $center_reader_accum$0$lcssa = 0, $center_reader_accum$016 = 0, $center_reader_accum$016$phi = 0, $center_reader_buf$017 = 0, $center_reader_buf$017$phi = 0;
       var $echo_pos$0$lcssa = 0, $echo_pos$011 = 0, $echo_pos$011$phi = 0, $l1_reader_accum$0$lcssa = 0, $l1_reader_accum$014 = 0, $l1_reader_accum$014$phi = 0, $l1_reader_buf$015 = 0, $l1_reader_buf$015$phi = 0, $l2_reader_accum$0$lcssa = 0, $l2_reader_accum$02 = 0, $l2_reader_accum$02$phi = 0, $l2_reader_buf$09 = 0, $l2_reader_buf$09$phi = 0, $left$0 = 0, $out$018 = 0, $r1_reader_accum$0$lcssa = 0, $r1_reader_accum$010 = 0, $r1_reader_accum$010$phi = 0, $r1_reader_buf$013 = 0, $r1_reader_buf$013$phi = 0;
       var $r2_reader_accum$0$lcssa = 0, $r2_reader_accum$04 = 0, $r2_reader_accum$04$phi = 0, $r2_reader_buf$03 = 0, $r2_reader_buf$03$phi = 0, $reverb_pos$0$lcssa = 0, $reverb_pos$012 = 0, $reverb_pos$012$phi = 0, $sext = 0, $sext1 = 0, $sq1_reader_accum$0$lcssa = 0, $sq1_reader_accum$06 = 0, $sq1_reader_accum$06$phi = 0, $sq1_reader_buf$05 = 0, $sq1_reader_buf$05$phi = 0, $sq2_reader_accum$0$lcssa = 0, $sq2_reader_accum$08 = 0, $sq2_reader_accum$08$phi = 0, $sq2_reader_buf$07 = 0, $sq2_reader_buf$07$phi = 0;
       var $storemerge = 0, $storemerge$in = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 128|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = (($this) + 124|0);
       $4 = HEAP32[$3>>2]|0;
       $5 = (($this) + 168|0);
       $6 = HEAP32[$5>>2]|0;
       $7 = (($this) + 212|0);
       $8 = HEAP32[$7>>2]|0;
       $9 = (($this) + 256|0);
       $10 = HEAP32[$9>>2]|0;
       $11 = (($this) + 300|0);
       $12 = HEAP32[$11>>2]|0;
       $13 = (($this) + 36|0);
       $14 = HEAP32[$13>>2]|0;
       $15 = (($this) + 80|0);
       $16 = HEAP32[$15>>2]|0;
       $17 = (($this) + 448|0);
       $18 = (__ZNK13blargg_vectorIsE5beginEv($17)|0);
       $19 = (($this) + 456|0);
       $20 = (__ZNK13blargg_vectorIsE5beginEv($19)|0);
       $21 = (($this) + 468|0);
       $22 = HEAP32[$21>>2]|0;
       $23 = (($this) + 464|0);
       $24 = HEAP32[$23>>2]|0;
       $25 = ($count|0)==(0);
       if ($25) {
        $center_reader_accum$0$lcssa = $4;$echo_pos$0$lcssa = $22;$l1_reader_accum$0$lcssa = $6;$l2_reader_accum$0$lcssa = $10;$r1_reader_accum$0$lcssa = $8;$r2_reader_accum$0$lcssa = $12;$reverb_pos$0$lcssa = $24;$sq1_reader_accum$0$lcssa = $14;$sq2_reader_accum$0$lcssa = $16;
        HEAP32[$23>>2] = $reverb_pos$0$lcssa;
        HEAP32[$21>>2] = $echo_pos$0$lcssa;
        HEAP32[$5>>2] = $l1_reader_accum$0$lcssa;
        HEAP32[$7>>2] = $r1_reader_accum$0$lcssa;
        HEAP32[$9>>2] = $l2_reader_accum$0$lcssa;
        HEAP32[$11>>2] = $r2_reader_accum$0$lcssa;
        HEAP32[$13>>2] = $sq1_reader_accum$0$lcssa;
        HEAP32[$15>>2] = $sq2_reader_accum$0$lcssa;
        HEAP32[$3>>2] = $center_reader_accum$0$lcssa;
        STACKTOP = sp;return;
       }
       $26 = (($this) + 72|0);
       $27 = (($this) + 28|0);
       $28 = (($this) + 292|0);
       $29 = (($this) + 248|0);
       $30 = (($this) + 204|0);
       $31 = (($this) + 160|0);
       $32 = (($this) + 116|0);
       $33 = HEAP32[$26>>2]|0;
       $34 = HEAP32[$27>>2]|0;
       $35 = HEAP32[$28>>2]|0;
       $36 = HEAP32[$29>>2]|0;
       $37 = HEAP32[$30>>2]|0;
       $38 = HEAP32[$31>>2]|0;
       $39 = HEAP32[$32>>2]|0;
       $40 = (($this) + 472|0);
       $41 = HEAP32[$40>>2]|0;
       $42 = (($this) + 480|0);
       $43 = HEAP32[$42>>2]|0;
       $44 = (($this) + 500|0);
       $45 = HEAP32[$44>>2]|0;
       $46 = (($this) + 476|0);
       $47 = HEAP32[$46>>2]|0;
       $48 = (($this) + 484|0);
       $49 = HEAP32[$48>>2]|0;
       $50 = (($this) + 504|0);
       $51 = HEAP32[$50>>2]|0;
       $52 = (($this) + 508|0);
       $53 = HEAP32[$52>>2]|0;
       $54 = (($this) + 496|0);
       $55 = HEAP32[$54>>2]|0;
       $56 = (($this) + 488|0);
       $57 = HEAP32[$56>>2]|0;
       $58 = (($this) + 492|0);
       $59 = HEAP32[$58>>2]|0;
       $$in = $count;$center_reader_accum$016 = $4;$center_reader_buf$017 = $39;$echo_pos$011 = $22;$l1_reader_accum$014 = $6;$l1_reader_buf$015 = $38;$l2_reader_accum$02 = $10;$l2_reader_buf$09 = $36;$out$018 = $out_;$r1_reader_accum$010 = $8;$r1_reader_buf$013 = $37;$r2_reader_accum$04 = $12;$r2_reader_buf$03 = $35;$reverb_pos$012 = $24;$sq1_reader_accum$06 = $14;$sq1_reader_buf$05 = $34;$sq2_reader_accum$08 = $16;$sq2_reader_buf$07 = $33;
       while(1) {
        $60 = (($$in) + -1)|0;
        $61 = $sq1_reader_accum$06 >> 14;
        $62 = $sq2_reader_accum$08 >> 14;
        $63 = (($sq1_reader_buf$05) + 4|0);
        $64 = HEAP32[$sq1_reader_buf$05>>2]|0;
        $65 = $sq1_reader_accum$06 >> $2;
        $66 = (($64) - ($65))|0;
        $67 = (($66) + ($sq1_reader_accum$06))|0;
        $68 = (($sq2_reader_buf$07) + 4|0);
        $69 = HEAP32[$sq2_reader_buf$07>>2]|0;
        $70 = $sq2_reader_accum$08 >> $2;
        $71 = (($69) - ($70))|0;
        $72 = (($71) + ($sq2_reader_accum$08))|0;
        $73 = Math_imul($41, $61)|0;
        $74 = $73 >> 15;
        $75 = Math_imul($43, $62)|0;
        $76 = $75 >> 15;
        $77 = $l1_reader_accum$014 >> 14;
        $78 = (($45) + ($reverb_pos$012))|0;
        $79 = $78 & 16383;
        $80 = (($18) + ($79<<1)|0);
        $81 = HEAP16[$80>>1]|0;
        $82 = $81 << 16 >> 16;
        $83 = (($74) + ($77))|0;
        $84 = (($83) + ($76))|0;
        $85 = (($84) + ($82))|0;
        $86 = Math_imul($47, $61)|0;
        $87 = $86 >> 15;
        $88 = Math_imul($49, $62)|0;
        $89 = $88 >> 15;
        $90 = $r1_reader_accum$010 >> 14;
        $91 = (($51) + ($reverb_pos$012))|0;
        $92 = $91 & 16383;
        $93 = (($18) + ($92<<1)|0);
        $94 = HEAP16[$93>>1]|0;
        $95 = $94 << 16 >> 16;
        $96 = (($87) + ($90))|0;
        $97 = (($96) + ($89))|0;
        $98 = (($97) + ($95))|0;
        $99 = (($l1_reader_buf$015) + 4|0);
        $100 = HEAP32[$l1_reader_buf$015>>2]|0;
        $101 = $l1_reader_accum$014 >> $2;
        $102 = (($100) - ($101))|0;
        $103 = (($102) + ($l1_reader_accum$014))|0;
        $104 = (($r1_reader_buf$013) + 4|0);
        $105 = HEAP32[$r1_reader_buf$013>>2]|0;
        $106 = $r1_reader_accum$010 >> $2;
        $107 = (($105) - ($106))|0;
        $108 = (($107) + ($r1_reader_accum$010))|0;
        $109 = Math_imul($53, $85)|0;
        $110 = $109 >>> 15;
        $111 = $110&65535;
        $112 = (($18) + ($reverb_pos$012<<1)|0);
        HEAP16[$112>>1] = $111;
        $113 = Math_imul($53, $98)|0;
        $114 = $113 >>> 15;
        $115 = $114&65535;
        $116 = (($reverb_pos$012) + 1)|0;
        $117 = (($18) + ($116<<1)|0);
        HEAP16[$117>>1] = $115;
        $118 = (($reverb_pos$012) + 2)|0;
        $119 = $118 & 16383;
        $120 = $center_reader_accum$016 >> 14;
        $121 = (($center_reader_buf$017) + 4|0);
        $122 = HEAP32[$center_reader_buf$017>>2]|0;
        $123 = $center_reader_accum$016 >> $2;
        $124 = (($122) - ($123))|0;
        $125 = (($124) + ($center_reader_accum$016))|0;
        $126 = $l2_reader_accum$02 >> 14;
        $127 = (($57) + ($echo_pos$011))|0;
        $128 = $127 & 4095;
        $129 = (($20) + ($128<<1)|0);
        $130 = HEAP16[$129>>1]|0;
        $131 = $130 << 16 >> 16;
        $132 = Math_imul($131, $55)|0;
        $133 = $132 >> 15;
        $134 = (($120) + ($126))|0;
        $135 = (($134) + ($85))|0;
        $136 = (($135) + ($133))|0;
        $137 = $r2_reader_accum$04 >> 14;
        $138 = (($59) + ($echo_pos$011))|0;
        $139 = $138 & 4095;
        $140 = (($20) + ($139<<1)|0);
        $141 = HEAP16[$140>>1]|0;
        $142 = $141 << 16 >> 16;
        $143 = Math_imul($142, $55)|0;
        $144 = $143 >> 15;
        $145 = (($120) + ($137))|0;
        $146 = (($145) + ($98))|0;
        $147 = (($146) + ($144))|0;
        $148 = (($l2_reader_buf$09) + 4|0);
        $149 = HEAP32[$l2_reader_buf$09>>2]|0;
        $150 = $l2_reader_accum$02 >> $2;
        $151 = (($149) - ($150))|0;
        $152 = (($151) + ($l2_reader_accum$02))|0;
        $153 = (($r2_reader_buf$03) + 4|0);
        $154 = HEAP32[$r2_reader_buf$03>>2]|0;
        $155 = $r2_reader_accum$04 >> $2;
        $156 = (($154) - ($155))|0;
        $157 = (($156) + ($r2_reader_accum$04))|0;
        $158 = $120&65535;
        $159 = (($20) + ($echo_pos$011<<1)|0);
        HEAP16[$159>>1] = $158;
        $160 = (($echo_pos$011) + 1)|0;
        $161 = $160 & 4095;
        $sext = $136 << 16;
        $162 = $sext >> 16;
        $163 = ($162|0)==($136|0);
        if ($163) {
         $left$0 = $136;
        } else {
         $164 = $136 >> 24;
         $165 = (32767 - ($164))|0;
         $left$0 = $165;
        }
        $166 = $left$0&65535;
        HEAP16[$out$018>>1] = $166;
        $167 = (($out$018) + 2|0);
        $168 = (($out$018) + 4|0);
        $sext1 = $147 << 16;
        $169 = $sext1 >> 16;
        $170 = ($169|0)==($147|0);
        if ($170) {
         $storemerge$in = $147;
        } else {
         $171 = $147 >> 24;
         $172 = (32767 - ($171))|0;
         $storemerge$in = $172;
        }
        $storemerge = $storemerge$in&65535;
        HEAP16[$167>>1] = $storemerge;
        $173 = ($60|0)==(0);
        if ($173) {
         $center_reader_accum$0$lcssa = $125;$echo_pos$0$lcssa = $161;$l1_reader_accum$0$lcssa = $103;$l2_reader_accum$0$lcssa = $152;$r1_reader_accum$0$lcssa = $108;$r2_reader_accum$0$lcssa = $157;$reverb_pos$0$lcssa = $119;$sq1_reader_accum$0$lcssa = $67;$sq2_reader_accum$0$lcssa = $72;
         break;
        } else {
         $sq2_reader_buf$07$phi = $68;$sq2_reader_accum$08$phi = $72;$sq1_reader_buf$05$phi = $63;$sq1_reader_accum$06$phi = $67;$reverb_pos$012$phi = $119;$r2_reader_buf$03$phi = $153;$r2_reader_accum$04$phi = $157;$r1_reader_buf$013$phi = $104;$r1_reader_accum$010$phi = $108;$l2_reader_buf$09$phi = $148;$l2_reader_accum$02$phi = $152;$l1_reader_buf$015$phi = $99;$l1_reader_accum$014$phi = $103;$echo_pos$011$phi = $161;$center_reader_buf$017$phi = $121;$center_reader_accum$016$phi = $125;$$in$phi = $60;$out$018 = $168;$sq2_reader_buf$07 = $sq2_reader_buf$07$phi;$sq2_reader_accum$08 = $sq2_reader_accum$08$phi;$sq1_reader_buf$05 = $sq1_reader_buf$05$phi;$sq1_reader_accum$06 = $sq1_reader_accum$06$phi;$reverb_pos$012 = $reverb_pos$012$phi;$r2_reader_buf$03 = $r2_reader_buf$03$phi;$r2_reader_accum$04 = $r2_reader_accum$04$phi;$r1_reader_buf$013 = $r1_reader_buf$013$phi;$r1_reader_accum$010 = $r1_reader_accum$010$phi;$l2_reader_buf$09 = $l2_reader_buf$09$phi;$l2_reader_accum$02 = $l2_reader_accum$02$phi;$l1_reader_buf$015 = $l1_reader_buf$015$phi;$l1_reader_accum$014 = $l1_reader_accum$014$phi;$echo_pos$011 = $echo_pos$011$phi;$center_reader_buf$017 = $center_reader_buf$017$phi;$center_reader_accum$016 = $center_reader_accum$016$phi;$$in = $$in$phi;
        }
       }
       HEAP32[$23>>2] = $reverb_pos$0$lcssa;
       HEAP32[$21>>2] = $echo_pos$0$lcssa;
       HEAP32[$5>>2] = $l1_reader_accum$0$lcssa;
       HEAP32[$7>>2] = $r1_reader_accum$0$lcssa;
       HEAP32[$9>>2] = $l2_reader_accum$0$lcssa;
       HEAP32[$11>>2] = $r2_reader_accum$0$lcssa;
       HEAP32[$13>>2] = $sq1_reader_accum$0$lcssa;
       HEAP32[$15>>2] = $sq2_reader_accum$0$lcssa;
       HEAP32[$3>>2] = $center_reader_accum$0$lcssa;
       STACKTOP = sp;return;
      }
      function __ZN14Effects_Buffer17mix_mono_enhancedEPsl($this,$out_,$count) {
       $this = $this|0;
       $out_ = $out_|0;
       $count = $count|0;
       var $$in = 0, $$in$phi = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
       var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
       var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
       var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
       var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
       var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
       var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $center_reader_accum$0$lcssa = 0, $center_reader_accum$08 = 0, $center_reader_accum$08$phi = 0, $center_reader_buf$09 = 0, $center_reader_buf$09$phi = 0, $echo_pos$0$lcssa = 0, $echo_pos$03 = 0, $echo_pos$03$phi = 0, $left$0 = 0;
       var $out$010 = 0, $reverb_pos$0$lcssa = 0, $reverb_pos$04 = 0, $reverb_pos$04$phi = 0, $sext = 0, $sext1 = 0, $sq1_reader_accum$0$lcssa = 0, $sq1_reader_accum$06 = 0, $sq1_reader_accum$06$phi = 0, $sq1_reader_buf$07 = 0, $sq1_reader_buf$07$phi = 0, $sq2_reader_accum$0$lcssa = 0, $sq2_reader_accum$02 = 0, $sq2_reader_accum$02$phi = 0, $sq2_reader_buf$05 = 0, $sq2_reader_buf$05$phi = 0, $storemerge = 0, $storemerge$in = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 128|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = (($this) + 124|0);
       $4 = HEAP32[$3>>2]|0;
       $5 = (($this) + 36|0);
       $6 = HEAP32[$5>>2]|0;
       $7 = (($this) + 80|0);
       $8 = HEAP32[$7>>2]|0;
       $9 = (($this) + 448|0);
       $10 = (__ZNK13blargg_vectorIsE5beginEv($9)|0);
       $11 = (($this) + 456|0);
       $12 = (__ZNK13blargg_vectorIsE5beginEv($11)|0);
       $13 = (($this) + 468|0);
       $14 = HEAP32[$13>>2]|0;
       $15 = (($this) + 464|0);
       $16 = HEAP32[$15>>2]|0;
       $17 = ($count|0)==(0);
       if ($17) {
        $center_reader_accum$0$lcssa = $4;$echo_pos$0$lcssa = $14;$reverb_pos$0$lcssa = $16;$sq1_reader_accum$0$lcssa = $6;$sq2_reader_accum$0$lcssa = $8;
        HEAP32[$15>>2] = $reverb_pos$0$lcssa;
        HEAP32[$13>>2] = $echo_pos$0$lcssa;
        HEAP32[$5>>2] = $sq1_reader_accum$0$lcssa;
        HEAP32[$7>>2] = $sq2_reader_accum$0$lcssa;
        HEAP32[$3>>2] = $center_reader_accum$0$lcssa;
        STACKTOP = sp;return;
       }
       $18 = (($this) + 72|0);
       $19 = (($this) + 28|0);
       $20 = (($this) + 116|0);
       $21 = HEAP32[$18>>2]|0;
       $22 = HEAP32[$19>>2]|0;
       $23 = HEAP32[$20>>2]|0;
       $24 = (($this) + 472|0);
       $25 = HEAP32[$24>>2]|0;
       $26 = (($this) + 480|0);
       $27 = HEAP32[$26>>2]|0;
       $28 = (($this) + 500|0);
       $29 = HEAP32[$28>>2]|0;
       $30 = (($this) + 476|0);
       $31 = HEAP32[$30>>2]|0;
       $32 = (($this) + 484|0);
       $33 = HEAP32[$32>>2]|0;
       $34 = (($this) + 504|0);
       $35 = HEAP32[$34>>2]|0;
       $36 = (($this) + 508|0);
       $37 = HEAP32[$36>>2]|0;
       $38 = (($this) + 496|0);
       $39 = HEAP32[$38>>2]|0;
       $40 = (($this) + 488|0);
       $41 = HEAP32[$40>>2]|0;
       $42 = (($this) + 492|0);
       $43 = HEAP32[$42>>2]|0;
       $$in = $count;$center_reader_accum$08 = $4;$center_reader_buf$09 = $23;$echo_pos$03 = $14;$out$010 = $out_;$reverb_pos$04 = $16;$sq1_reader_accum$06 = $6;$sq1_reader_buf$07 = $22;$sq2_reader_accum$02 = $8;$sq2_reader_buf$05 = $21;
       while(1) {
        $44 = (($$in) + -1)|0;
        $45 = $sq1_reader_accum$06 >> 14;
        $46 = $sq2_reader_accum$02 >> 14;
        $47 = (($sq1_reader_buf$07) + 4|0);
        $48 = HEAP32[$sq1_reader_buf$07>>2]|0;
        $49 = $sq1_reader_accum$06 >> $2;
        $50 = (($48) - ($49))|0;
        $51 = (($50) + ($sq1_reader_accum$06))|0;
        $52 = (($sq2_reader_buf$05) + 4|0);
        $53 = HEAP32[$sq2_reader_buf$05>>2]|0;
        $54 = $sq2_reader_accum$02 >> $2;
        $55 = (($53) - ($54))|0;
        $56 = (($55) + ($sq2_reader_accum$02))|0;
        $57 = Math_imul($25, $45)|0;
        $58 = $57 >> 15;
        $59 = Math_imul($27, $46)|0;
        $60 = $59 >> 15;
        $61 = (($60) + ($58))|0;
        $62 = (($29) + ($reverb_pos$04))|0;
        $63 = $62 & 16383;
        $64 = (($10) + ($63<<1)|0);
        $65 = HEAP16[$64>>1]|0;
        $66 = $65 << 16 >> 16;
        $67 = (($61) + ($66))|0;
        $68 = Math_imul($31, $45)|0;
        $69 = $68 >> 15;
        $70 = Math_imul($33, $46)|0;
        $71 = $70 >> 15;
        $72 = (($71) + ($69))|0;
        $73 = (($35) + ($reverb_pos$04))|0;
        $74 = $73 & 16383;
        $75 = (($10) + ($74<<1)|0);
        $76 = HEAP16[$75>>1]|0;
        $77 = $76 << 16 >> 16;
        $78 = (($72) + ($77))|0;
        $79 = Math_imul($37, $67)|0;
        $80 = $79 >>> 15;
        $81 = $80&65535;
        $82 = (($10) + ($reverb_pos$04<<1)|0);
        HEAP16[$82>>1] = $81;
        $83 = Math_imul($78, $37)|0;
        $84 = $83 >>> 15;
        $85 = $84&65535;
        $86 = (($reverb_pos$04) + 1)|0;
        $87 = (($10) + ($86<<1)|0);
        HEAP16[$87>>1] = $85;
        $88 = (($reverb_pos$04) + 2)|0;
        $89 = $88 & 16383;
        $90 = $center_reader_accum$08 >> 14;
        $91 = (($center_reader_buf$09) + 4|0);
        $92 = HEAP32[$center_reader_buf$09>>2]|0;
        $93 = $center_reader_accum$08 >> $2;
        $94 = (($92) - ($93))|0;
        $95 = (($94) + ($center_reader_accum$08))|0;
        $96 = (($67) + ($90))|0;
        $97 = (($41) + ($echo_pos$03))|0;
        $98 = $97 & 4095;
        $99 = (($12) + ($98<<1)|0);
        $100 = HEAP16[$99>>1]|0;
        $101 = $100 << 16 >> 16;
        $102 = Math_imul($101, $39)|0;
        $103 = $102 >> 15;
        $104 = (($96) + ($103))|0;
        $105 = (($78) + ($90))|0;
        $106 = (($43) + ($echo_pos$03))|0;
        $107 = $106 & 4095;
        $108 = (($12) + ($107<<1)|0);
        $109 = HEAP16[$108>>1]|0;
        $110 = $109 << 16 >> 16;
        $111 = Math_imul($110, $39)|0;
        $112 = $111 >> 15;
        $113 = (($105) + ($112))|0;
        $114 = $90&65535;
        $115 = (($12) + ($echo_pos$03<<1)|0);
        HEAP16[$115>>1] = $114;
        $116 = (($echo_pos$03) + 1)|0;
        $117 = $116 & 4095;
        $sext = $104 << 16;
        $118 = $sext >> 16;
        $119 = ($118|0)==($104|0);
        if ($119) {
         $left$0 = $104;
        } else {
         $120 = $104 >> 24;
         $121 = (32767 - ($120))|0;
         $left$0 = $121;
        }
        $122 = $left$0&65535;
        HEAP16[$out$010>>1] = $122;
        $123 = (($out$010) + 2|0);
        $124 = (($out$010) + 4|0);
        $sext1 = $113 << 16;
        $125 = $sext1 >> 16;
        $126 = ($125|0)==($113|0);
        if ($126) {
         $storemerge$in = $113;
        } else {
         $127 = $113 >> 24;
         $128 = (32767 - ($127))|0;
         $storemerge$in = $128;
        }
        $storemerge = $storemerge$in&65535;
        HEAP16[$123>>1] = $storemerge;
        $129 = ($44|0)==(0);
        if ($129) {
         $center_reader_accum$0$lcssa = $95;$echo_pos$0$lcssa = $117;$reverb_pos$0$lcssa = $89;$sq1_reader_accum$0$lcssa = $51;$sq2_reader_accum$0$lcssa = $56;
         break;
        } else {
         $sq2_reader_buf$05$phi = $52;$sq2_reader_accum$02$phi = $56;$sq1_reader_buf$07$phi = $47;$sq1_reader_accum$06$phi = $51;$reverb_pos$04$phi = $89;$echo_pos$03$phi = $117;$center_reader_buf$09$phi = $91;$center_reader_accum$08$phi = $95;$$in$phi = $44;$out$010 = $124;$sq2_reader_buf$05 = $sq2_reader_buf$05$phi;$sq2_reader_accum$02 = $sq2_reader_accum$02$phi;$sq1_reader_buf$07 = $sq1_reader_buf$07$phi;$sq1_reader_accum$06 = $sq1_reader_accum$06$phi;$reverb_pos$04 = $reverb_pos$04$phi;$echo_pos$03 = $echo_pos$03$phi;$center_reader_buf$09 = $center_reader_buf$09$phi;$center_reader_accum$08 = $center_reader_accum$08$phi;$$in = $$in$phi;
        }
       }
       HEAP32[$15>>2] = $reverb_pos$0$lcssa;
       HEAP32[$13>>2] = $echo_pos$0$lcssa;
       HEAP32[$5>>2] = $sq1_reader_accum$0$lcssa;
       HEAP32[$7>>2] = $sq2_reader_accum$0$lcssa;
       HEAP32[$3>>2] = $center_reader_accum$0$lcssa;
       STACKTOP = sp;return;
      }
      function __ZN14Effects_Buffer10mix_stereoEPsl($this,$out_,$count) {
       $this = $this|0;
       $out_ = $out_|0;
       $count = $count|0;
       var $$in = 0, $$in$phi = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
       var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
       var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c_reader_accum$0$lcssa = 0, $c_reader_accum$03 = 0, $c_reader_accum$03$phi = 0, $c_reader_buf$02 = 0, $c_reader_buf$02$phi = 0, $l_reader_accum$0$lcssa = 0, $l_reader_accum$05 = 0, $l_reader_accum$05$phi = 0, $l_reader_buf$04 = 0, $l_reader_buf$04$phi = 0;
       var $left$0 = 0, $out$08 = 0, $r_reader_accum$0$lcssa = 0, $r_reader_accum$07 = 0, $r_reader_accum$07$phi = 0, $r_reader_buf$06 = 0, $r_reader_buf$06$phi = 0, $sext = 0, $sext1 = 0, $storemerge = 0, $storemerge$in = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 40|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = (($this) + 36|0);
       $4 = HEAP32[$3>>2]|0;
       $5 = (($this) + 80|0);
       $6 = HEAP32[$5>>2]|0;
       $7 = (($this) + 124|0);
       $8 = HEAP32[$7>>2]|0;
       $9 = ($count|0)==(0);
       if ($9) {
        $c_reader_accum$0$lcssa = $4;$l_reader_accum$0$lcssa = $6;$r_reader_accum$0$lcssa = $8;
        HEAP32[$7>>2] = $r_reader_accum$0$lcssa;
        HEAP32[$5>>2] = $l_reader_accum$0$lcssa;
        HEAP32[$3>>2] = $c_reader_accum$0$lcssa;
        STACKTOP = sp;return;
       }
       $10 = (($this) + 116|0);
       $11 = (($this) + 72|0);
       $12 = (($this) + 28|0);
       $13 = HEAP32[$10>>2]|0;
       $14 = HEAP32[$11>>2]|0;
       $15 = HEAP32[$12>>2]|0;
       $$in = $count;$c_reader_accum$03 = $4;$c_reader_buf$02 = $15;$l_reader_accum$05 = $6;$l_reader_buf$04 = $14;$out$08 = $out_;$r_reader_accum$07 = $8;$r_reader_buf$06 = $13;
       while(1) {
        $16 = (($$in) + -1)|0;
        $17 = $c_reader_accum$03 >> 14;
        $18 = (($c_reader_buf$02) + 4|0);
        $19 = HEAP32[$c_reader_buf$02>>2]|0;
        $20 = $c_reader_accum$03 >> $2;
        $21 = (($19) - ($20))|0;
        $22 = (($21) + ($c_reader_accum$03))|0;
        $23 = $l_reader_accum$05 >> 14;
        $24 = (($23) + ($17))|0;
        $25 = $r_reader_accum$07 >> 14;
        $26 = (($25) + ($17))|0;
        $27 = (($l_reader_buf$04) + 4|0);
        $28 = HEAP32[$l_reader_buf$04>>2]|0;
        $29 = $l_reader_accum$05 >> $2;
        $30 = (($28) - ($29))|0;
        $31 = (($30) + ($l_reader_accum$05))|0;
        $32 = (($r_reader_buf$06) + 4|0);
        $33 = HEAP32[$r_reader_buf$06>>2]|0;
        $34 = $r_reader_accum$07 >> $2;
        $35 = (($33) - ($34))|0;
        $36 = (($35) + ($r_reader_accum$07))|0;
        $sext = $24 << 16;
        $37 = $sext >> 16;
        $38 = ($37|0)==($24|0);
        if ($38) {
         $left$0 = $24;
        } else {
         $39 = $24 >> 24;
         $40 = (32767 - ($39))|0;
         $left$0 = $40;
        }
        $41 = $left$0&65535;
        HEAP16[$out$08>>1] = $41;
        $42 = (($out$08) + 2|0);
        $43 = (($out$08) + 4|0);
        $sext1 = $26 << 16;
        $44 = $sext1 >> 16;
        $45 = ($44|0)==($26|0);
        if ($45) {
         $storemerge$in = $26;
        } else {
         $46 = $26 >> 24;
         $47 = (32767 - ($46))|0;
         $storemerge$in = $47;
        }
        $storemerge = $storemerge$in&65535;
        HEAP16[$42>>1] = $storemerge;
        $48 = ($16|0)==(0);
        if ($48) {
         $c_reader_accum$0$lcssa = $22;$l_reader_accum$0$lcssa = $31;$r_reader_accum$0$lcssa = $36;
         break;
        } else {
         $r_reader_buf$06$phi = $32;$r_reader_accum$07$phi = $36;$l_reader_buf$04$phi = $27;$l_reader_accum$05$phi = $31;$c_reader_buf$02$phi = $18;$c_reader_accum$03$phi = $22;$$in$phi = $16;$out$08 = $43;$r_reader_buf$06 = $r_reader_buf$06$phi;$r_reader_accum$07 = $r_reader_accum$07$phi;$l_reader_buf$04 = $l_reader_buf$04$phi;$l_reader_accum$05 = $l_reader_accum$05$phi;$c_reader_buf$02 = $c_reader_buf$02$phi;$c_reader_accum$03 = $c_reader_accum$03$phi;$$in = $$in$phi;
        }
       }
       HEAP32[$7>>2] = $r_reader_accum$0$lcssa;
       HEAP32[$5>>2] = $l_reader_accum$0$lcssa;
       HEAP32[$3>>2] = $c_reader_accum$0$lcssa;
       STACKTOP = sp;return;
      }
      function __ZN14Effects_Buffer8mix_monoEPsl($this,$out_,$count) {
       $this = $this|0;
       $out_ = $out_|0;
       $count = $count|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
       var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
       var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c_reader_accum$0$lcssa = 0, $c_reader_accum$05 = 0, $c_reader_accum$05$phi = 0, $c_reader_accum$1 = 0;
       var $c_reader_buf$0$lcssa = 0, $c_reader_buf$04 = 0, $c_reader_buf$04$phi = 0, $cs0$0 = 0, $cs1$0 = 0, $n$06 = 0, $out$0$lcssa = 0, $out$03 = 0, $scevgep = 0, $scevgep11 = 0, $sext = 0, $sext1 = 0, $sext2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 40|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = (($this) + 28|0);
       $4 = HEAP32[$3>>2]|0;
       $5 = (($this) + 36|0);
       $6 = HEAP32[$5>>2]|0;
       $7 = $count >> 1;
       $8 = ($7|0)==(0);
       if ($8) {
        $c_reader_accum$0$lcssa = $6;$c_reader_buf$0$lcssa = $4;$out$0$lcssa = $out_;
       } else {
        $9 = $7 << 2;
        $10 = $7 << 1;
        $c_reader_accum$05 = $6;$c_reader_buf$04 = $4;$n$06 = $7;$out$03 = $out_;
        while(1) {
         $11 = $c_reader_accum$05 >> 14;
         $12 = (($c_reader_buf$04) + 4|0);
         $13 = HEAP32[$c_reader_buf$04>>2]|0;
         $14 = $c_reader_accum$05 >> $2;
         $15 = (($13) - ($14))|0;
         $16 = (($15) + ($c_reader_accum$05))|0;
         $17 = $16 >> 14;
         $18 = (($c_reader_buf$04) + 8|0);
         $19 = HEAP32[$12>>2]|0;
         $20 = $16 >> $2;
         $21 = (($16) + ($19))|0;
         $22 = (($21) - ($20))|0;
         $sext1 = $11 << 16;
         $23 = $sext1 >> 16;
         $24 = ($23|0)==($11|0);
         if ($24) {
          $cs0$0 = $11;
         } else {
          $25 = $c_reader_accum$05 >> 31;
          $26 = (32767 - ($25))|0;
          $cs0$0 = $26;
         }
         $27 = $cs0$0 & 65535;
         $28 = $cs0$0 << 16;
         $29 = $27 | $28;
         $30 = $out$03;
         HEAP32[$30>>2] = $29;
         $sext2 = $17 << 16;
         $31 = $sext2 >> 16;
         $32 = ($31|0)==($17|0);
         if ($32) {
          $cs1$0 = $17;
         } else {
          $33 = $16 >> 31;
          $34 = (32767 - ($33))|0;
          $cs1$0 = $34;
         }
         $35 = $cs1$0 & 65535;
         $36 = $cs1$0 << 16;
         $37 = $35 | $36;
         $38 = (($out$03) + 4|0);
         $39 = $38;
         HEAP32[$39>>2] = $37;
         $40 = (($out$03) + 8|0);
         $41 = (($n$06) + -1)|0;
         $42 = ($41|0)==(0);
         if ($42) {
          break;
         } else {
          $c_reader_buf$04$phi = $18;$c_reader_accum$05$phi = $22;$n$06 = $41;$out$03 = $40;$c_reader_buf$04 = $c_reader_buf$04$phi;$c_reader_accum$05 = $c_reader_accum$05$phi;
         }
        }
        $scevgep = (($out_) + ($9<<1)|0);
        $scevgep11 = (($4) + ($10<<2)|0);
        $c_reader_accum$0$lcssa = $22;$c_reader_buf$0$lcssa = $scevgep11;$out$0$lcssa = $scevgep;
       }
       $43 = $count & 1;
       $44 = ($43|0)==(0);
       if ($44) {
        $c_reader_accum$1 = $c_reader_accum$0$lcssa;
        HEAP32[$5>>2] = $c_reader_accum$1;
        STACKTOP = sp;return;
       }
       $45 = $c_reader_accum$0$lcssa >> 14;
       $46 = HEAP32[$c_reader_buf$0$lcssa>>2]|0;
       $47 = $c_reader_accum$0$lcssa >> $2;
       $48 = (($46) - ($47))|0;
       $49 = (($48) + ($c_reader_accum$0$lcssa))|0;
       $50 = $45&65535;
       HEAP16[$out$0$lcssa>>1] = $50;
       $51 = (($out$0$lcssa) + 2|0);
       HEAP16[$51>>1] = $50;
       $sext = $45 << 16;
       $52 = $sext >> 16;
       $53 = ($52|0)==($45|0);
       if ($53) {
        $c_reader_accum$1 = $49;
        HEAP32[$5>>2] = $c_reader_accum$1;
        STACKTOP = sp;return;
       }
       $54 = $c_reader_accum$0$lcssa >> 31;
       $55 = (32767 - ($54))|0;
       $56 = $55&65535;
       HEAP16[$out$0$lcssa>>1] = $56;
       HEAP16[$51>>1] = $56;
       $c_reader_accum$1 = $49;
       HEAP32[$5>>2] = $c_reader_accum$1;
       STACKTOP = sp;return;
      }
      function __ZN14Fir_Resampler_C2EiPs($this,$width,$impulses_) {
       $this = $this|0;
       $width = $width|0;
       $impulses_ = $impulses_|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       __ZN13blargg_vectorIsEC1Ev($1);
       $2 = (($this) + 20|0);
       HEAP32[$2>>2] = $width;
       $3 = (($this) + 24|0);
       $4 = $width << 1;
       $5 = (($4) + -2)|0;
       HEAP32[$3>>2] = $5;
       $6 = (($this) + 48|0);
       HEAP32[$6>>2] = $impulses_;
       $7 = (($this) + 8|0);
       HEAP32[$7>>2] = 0;
       $8 = (($this) + 12|0);
       HEAP32[$8>>2] = 1;
       $9 = (($this) + 16|0);
       HEAP32[$9>>2] = 0;
       $10 = (($this) + 28|0);
       HEAP32[$10>>2] = 0;
       $11 = (($this) + 32|0);
       HEAP32[$11>>2] = 2;
       $12 = (($this) + 40|0);
       HEAPF64[$12>>3] = 1.0;
       STACKTOP = sp;return;
      }
      function __ZN14Fir_Resampler_D2Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       __ZN13blargg_vectorIsED1Ev($1);
       STACKTOP = sp;return;
      }
      function __ZN14Fir_Resampler_5clearEv($this) {
       $this = $this|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 16|0);
       HEAP32[$1>>2] = 0;
       $2 = ($this);
       $3 = (__ZNK13blargg_vectorIsE4sizeEv($2)|0);
       $4 = ($3|0)==(0);
       if ($4) {
        STACKTOP = sp;return;
       }
       $5 = (($this) + 24|0);
       $6 = HEAP32[$5>>2]|0;
       $7 = (__ZNK13blargg_vectorIsEixEj($2,$6)|0);
       $8 = (($this) + 8|0);
       HEAP32[$8>>2] = $7;
       $9 = (__ZNK13blargg_vectorIsE5beginEv($2)|0);
       $10 = $9;
       $11 = HEAP32[$5>>2]|0;
       $12 = $11 << 1;
       _memset(($10|0),0,($12|0))|0;
       STACKTOP = sp;return;
      }
      function __ZN14Fir_Resampler_11buffer_sizeEi($this,$new_size) {
       $this = $this|0;
       $new_size = $new_size|0;
       var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = (($this) + 24|0);
       $3 = HEAP32[$2>>2]|0;
       $4 = (($3) + ($new_size))|0;
       $5 = (__ZN13blargg_vectorIsE6resizeEj($1,$4)|0);
       $6 = ($5|0)==(0|0);
       if (!($6)) {
        $$0 = $5;
        STACKTOP = sp;return ($$0|0);
       }
       __ZN14Fir_Resampler_5clearEv($this);
       $$0 = 0;
       STACKTOP = sp;return ($$0|0);
      }
      function __ZN14Fir_Resampler_10time_ratioEddd($this,$new_factor,$rolloff,$gain) {
       $this = $this|0;
       $new_factor = +$new_factor;
       $rolloff = +$rolloff;
       $gain = +$gain;
       var $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0;
       var $28 = 0.0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0;
       var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, $exitcond = 0, $fstep$06 = 0.0, $fstep$1 = 0.0, $i$02 = 0, $least_error$05 = 0.0, $least_error$1 = 0.0, $pos$04 = 0.0;
       var $pos$04$phi = 0.0, $pos1$01 = 0.0, $pos1$1 = 0.0, $r$03 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 40|0);
       HEAPF64[$1>>3] = $new_factor;
       $2 = (($this) + 12|0);
       HEAP32[$2>>2] = -1;
       $3 = +HEAPF64[$1>>3];
       $fstep$06 = 0.0;$least_error$05 = 2.0;$pos$04 = 0.0;$r$03 = 1;
       while(1) {
        $4 = $pos$04 + $3;
        $5 = $4 + 0.5;
        $6 = (+Math_floor((+$5)));
        $7 = $4 - $6;
        $8 = (+Math_abs((+$7)));
        $9 = $8 < $least_error$05;
        if ($9) {
         HEAP32[$2>>2] = $r$03;
         $10 = (+($r$03|0));
         $11 = $6 / $10;
         $fstep$1 = $11;$least_error$1 = $8;
        } else {
         $fstep$1 = $fstep$06;$least_error$1 = $least_error$05;
        }
        $12 = (($r$03) + 1)|0;
        $exitcond = ($12|0)==(33);
        if ($exitcond) {
         break;
        } else {
         $pos$04$phi = $4;$fstep$06 = $fstep$1;$least_error$05 = $least_error$1;$r$03 = $12;$pos$04 = $pos$04$phi;
        }
       }
       $13 = (($this) + 28|0);
       HEAP32[$13>>2] = 0;
       $14 = (+Math_floor((+$fstep$1)));
       $15 = (~~(($14)));
       $16 = $15 << 1;
       $17 = (($this) + 32|0);
       HEAP32[$17>>2] = $16;
       HEAPF64[$1>>3] = $fstep$1;
       $18 = (+_fmod((+$fstep$1),1.0));
       $19 = +HEAPF64[$1>>3];
       $20 = $19 < 1.0;
       if ($20) {
        $22 = 1.0;
       } else {
        $21 = 1.0 / $19;
        $22 = $21;
       }
       $23 = (($this) + 36|0);
       HEAP32[$23>>2] = 0;
       $24 = HEAP32[$2>>2]|0;
       $25 = ($24|0)>(0);
       if (!($25)) {
        __ZN14Fir_Resampler_5clearEv($this);
        $53 = +HEAPF64[$1>>3];
        STACKTOP = sp;return (+$53);
       }
       $26 = (($this) + 20|0);
       $27 = $gain * 32767.0;
       $28 = $27 * $22;
       $29 = (($this) + 48|0);
       $i$02 = 0;$pos1$01 = 0.0;
       while(1) {
        $30 = HEAP32[$26>>2]|0;
        $31 = (+($30|0));
        $32 = $22 * $31;
        $33 = $32 + 1.0;
        $34 = (~~(($33)));
        $35 = $34 & -2;
        $36 = HEAP32[$29>>2]|0;
        $37 = Math_imul($30, $i$02)|0;
        $38 = (($36) + ($37<<1)|0);
        __ZL8gen_sincdidddiPs($rolloff,$35,$pos1$01,$22,$28,$30,$38);
        $39 = $18 + $pos1$01;
        $40 = HEAP32[$17>>2]|0;
        $41 = HEAP32[$23>>2]|0;
        $42 = (($41) + ($40))|0;
        HEAP32[$23>>2] = $42;
        $43 = !($39 >= 0.999999900000000052635);
        if ($43) {
         $pos1$1 = $39;
        } else {
         $44 = $39 + -1.0;
         $45 = 1 << $i$02;
         $46 = HEAP32[$13>>2]|0;
         $47 = $46 | $45;
         HEAP32[$13>>2] = $47;
         $48 = HEAP32[$23>>2]|0;
         $49 = (($48) + 1)|0;
         HEAP32[$23>>2] = $49;
         $pos1$1 = $44;
        }
        $50 = (($i$02) + 1)|0;
        $51 = HEAP32[$2>>2]|0;
        $52 = ($50|0)<($51|0);
        if ($52) {
         $i$02 = $50;$pos1$01 = $pos1$1;
        } else {
         break;
        }
       }
       __ZN14Fir_Resampler_5clearEv($this);
       $53 = +HEAPF64[$1>>3];
       STACKTOP = sp;return (+$53);
      }
      function __ZL8gen_sincdidddiPs($rolloff,$width,$offset,$spacing,$scale,$count,$out) {
       $rolloff = +$rolloff;
       $width = $width|0;
       $offset = +$offset;
       $spacing = +$spacing;
       $scale = +$scale;
       $count = $count|0;
       $out = $out|0;
       var $$013 = 0, $$013$phi = 0, $$in = 0, $$in$phi = 0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0;
       var $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0.0, $40 = 0.0, $41 = 0;
       var $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $angle$02 = 0.0, $storemerge = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $spacing * 0.0122718463030851293594;
       $2 = (+($width|0));
       $3 = 512.0 / $2;
       $4 = (+Math_pow((+$rolloff),256.0));
       $5 = $scale * 0.001953125;
       $6 = ($count|0)==(0);
       if ($6) {
        STACKTOP = sp;return;
       }
       $7 = (($count|0) / 2)&-1;
       $8 = (($7) + -1)|0;
       $9 = (+($8|0));
       $10 = $9 + $offset;
       $11 = $1 * $10;
       $12 = -$11;
       $13 = $4 * $rolloff;
       $14 = $rolloff * $rolloff;
       $$013 = $out;$$in = $count;$angle$02 = $12;
       while(1) {
        $15 = (($$in) + -1)|0;
        $16 = (($$013) + 2|0);
        $17 = $3 * $angle$02;
        $18 = (+Math_abs((+$17)));
        $19 = $18 < 3.141592653589793116;
        if ($19) {
         $20 = (+Math_cos((+$angle$02)));
         $21 = $20 * $rolloff;
         $22 = 1.0 - $21;
         $23 = $angle$02 * 256.0;
         $24 = (+Math_cos((+$23)));
         $25 = $4 * $24;
         $26 = $22 - $25;
         $27 = $angle$02 * 255.0;
         $28 = (+Math_cos((+$27)));
         $29 = $13 * $28;
         $30 = $26 + $29;
         $31 = $22 - $21;
         $32 = $14 + $31;
         $33 = $5 * $30;
         $34 = $33 / $32;
         $35 = $34 - $5;
         $36 = (+Math_cos((+$17)));
         $37 = $36 * $35;
         $38 = $35 + $37;
         $39 = (~~(($38)));
         $storemerge = $39;
        } else {
         $storemerge = 0;
        }
        HEAP16[$$013>>1] = $storemerge;
        $40 = $1 + $angle$02;
        $41 = ($15|0)==(0);
        if ($41) {
         break;
        } else {
         $$in$phi = $15;$$013$phi = $16;$angle$02 = $40;$$in = $$in$phi;$$013 = $$013$phi;
        }
       }
       STACKTOP = sp;return;
      }
      function __ZN14Fir_Resampler_10skip_inputEl($this,$count) {
       $this = $this|0;
       $count = $count|0;
       var $$count = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
       var $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 8|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = ($this);
       $4 = (__ZNK13blargg_vectorIsE5beginEv($3)|0);
       $5 = $2;
       $6 = $4;
       $7 = (($5) - ($6))|0;
       $8 = $7 >> 1;
       $9 = (($this) + 20|0);
       $10 = HEAP32[$9>>2]|0;
       $11 = $10 << 1;
       $12 = (($8) - ($11))|0;
       $13 = ($12|0)<($count|0);
       $$count = $13 ? $12 : $count;
       $14 = (($8) - ($$count))|0;
       $15 = (__ZNK13blargg_vectorIsEixEj($3,$14)|0);
       HEAP32[$1>>2] = $15;
       $16 = (__ZNK13blargg_vectorIsE5beginEv($3)|0);
       $17 = $16;
       $18 = (__ZNK13blargg_vectorIsEixEj($3,$$count)|0);
       $19 = $18;
       $20 = $14 << 1;
       _memmove(($17|0),($19|0),($20|0))|0;
       STACKTOP = sp;return ($$count|0);
      }
      function __ZN6Gb_ApuC2Ev($this) {
       $this = $this|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
       var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 376|0);
       __ZN10Blip_SynthILi12ELi1EEC1Ev($1);
       $2 = (($this) + 1192|0);
       __ZN10Blip_SynthILi8ELi1EEC1Ev($2);
       $3 = (($this) + 96|0);
       HEAP32[$3>>2] = $1;
       $4 = (($this) + 164|0);
       HEAP32[$4>>2] = $1;
       $5 = (($this) + 228|0);
       HEAP32[$5>>2] = $2;
       $6 = (($this) + 320|0);
       HEAP32[$6>>2] = $2;
       $7 = (($this) + 44|0);
       $8 = ($this);
       HEAP32[$8>>2] = $7;
       $9 = (($this) + 112|0);
       $10 = (($this) + 4|0);
       HEAP32[$10>>2] = $9;
       $11 = (($this) + 180|0);
       $12 = (($this) + 8|0);
       HEAP32[$12>>2] = $11;
       $13 = (($this) + 268|0);
       $14 = (($this) + 12|0);
       HEAP32[$14>>2] = $13;
       $15 = ($this);
       $16 = HEAP32[$15>>2]|0;
       $17 = (($this) + 328|0);
       $18 = (($16) + 24|0);
       HEAP32[$18>>2] = $17;
       $19 = (($this) + 4|0);
       $20 = $16;
       ;HEAP32[$20+0>>2]=0|0;HEAP32[$20+4>>2]=0|0;HEAP32[$20+8>>2]=0|0;HEAP32[$20+12>>2]=0|0;HEAP32[$20+16>>2]=0|0;
       $21 = HEAP32[$19>>2]|0;
       $22 = (($this) + 333|0);
       $23 = (($21) + 24|0);
       HEAP32[$23>>2] = $22;
       $24 = (($this) + 8|0);
       $25 = $21;
       ;HEAP32[$25+0>>2]=0|0;HEAP32[$25+4>>2]=0|0;HEAP32[$25+8>>2]=0|0;HEAP32[$25+12>>2]=0|0;HEAP32[$25+16>>2]=0|0;
       $26 = HEAP32[$24>>2]|0;
       $27 = (($this) + 338|0);
       $28 = (($26) + 24|0);
       HEAP32[$28>>2] = $27;
       $29 = (($this) + 12|0);
       $30 = $26;
       ;HEAP32[$30+0>>2]=0|0;HEAP32[$30+4>>2]=0|0;HEAP32[$30+8>>2]=0|0;HEAP32[$30+12>>2]=0|0;HEAP32[$30+16>>2]=0|0;
       $31 = HEAP32[$29>>2]|0;
       $32 = (($this) + 343|0);
       $33 = (($31) + 24|0);
       HEAP32[$33>>2] = $32;
       $34 = $31;
       ;HEAP32[$34+0>>2]=0|0;HEAP32[$34+4>>2]=0|0;HEAP32[$34+8>>2]=0|0;HEAP32[$34+12>>2]=0|0;HEAP32[$34+16>>2]=0|0;
       __ZN6Gb_Apu9set_tempoEd($this,1.0);
       __ZN6Gb_Apu6volumeEd($this,1.0);
       __ZN6Gb_Apu5resetEv($this);
       STACKTOP = sp;return;
      }
      function __ZN10Blip_SynthILi8ELi1EEC1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN10Blip_SynthILi8ELi1EEC2Ev($this);
       STACKTOP = sp;return;
      }
      function __ZN6Gb_Apu9set_tempoEd($this,$t) {
       $this = $this|0;
       $t = +$t;
       var $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, $storemerge = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 24|0);
       $2 = $t != 1.0;
       if ($2) {
        $3 = 16384.0 / $t;
        $4 = (~~(($3)));
        $storemerge = $4;
       } else {
        $storemerge = 16384;
       }
       HEAP32[$1>>2] = $storemerge;
       STACKTOP = sp;return;
      }
      function __ZN6Gb_Apu6volumeEd($this,$vol) {
       $this = $this|0;
       $vol = +$vol;
       var $1 = 0.0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $vol * 6.2500000000000001301E-4;
       $2 = (($this) + 32|0);
       HEAPF64[$2>>3] = $1;
       __ZN6Gb_Apu13update_volumeEv($this);
       STACKTOP = sp;return;
      }
      function __ZN6Gb_Apu5resetEv($this) {
       $this = $this|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
       sp = STACKTOP;
       $1 = (($this) + 16|0);
       HEAP32[$1>>2] = 0;
       $2 = (($this) + 20|0);
       HEAP32[$2>>2] = 0;
       $3 = (($this) + 40|0);
       HEAP32[$3>>2] = 0;
       $4 = (($this) + 44|0);
       __ZN9Gb_Square5resetEv($4);
       $5 = (($this) + 112|0);
       __ZN9Gb_Square5resetEv($5);
       $6 = (($this) + 180|0);
       __ZN6Gb_Osc5resetEv($6);
       $7 = (($this) + 268|0);
       __ZN6Gb_Env5resetEv($7);
       $8 = (($this) + 324|0);
       HEAP32[$8>>2] = 1;
       $9 = (($this) + 232|0);
       HEAP32[$9>>2] = 0;
       $10 = (($this) + 348|0);
       HEAP8[$10] = 119;
       __ZN6Gb_Apu13update_volumeEv($this);
       $11 = (($this) + 350|0);
       HEAP8[$11] = 1;
       __ZN6Gb_Apu14write_registerEiji($this,0,65318,0);
       $12 = (($this) + 236|0);
       dest=$12+0|0; src=(38680)+0|0; stop=dest+32|0; do { HEAP8[dest]=HEAP8[src]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));;
       STACKTOP = sp;return;
      }
      function __ZN6Gb_Apu9treble_eqERK9blip_eq_t($this,$eq) {
       $this = $this|0;
       $eq = $eq|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 376|0);
       __ZN10Blip_SynthILi12ELi1EE9treble_eqERK9blip_eq_t($1,$eq);
       $2 = (($this) + 1192|0);
       __ZN10Blip_SynthILi8ELi1EE9treble_eqERK9blip_eq_t($2,$eq);
       STACKTOP = sp;return;
      }
      function __ZN10Blip_SynthILi8ELi1EE9treble_eqERK9blip_eq_t($this,$eq) {
       $this = $this|0;
       $eq = $eq|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       __ZN11Blip_Synth_9treble_eqERK9blip_eq_t($1,$eq);
       STACKTOP = sp;return;
      }
      function __ZN6Gb_Apu10osc_outputEiP11Blip_BufferS1_S1_($this,$index,$center,$left,$right) {
       $this = $this|0;
       $index = $index|0;
       $center = $center|0;
       $left = $left|0;
       $right = $right|0;
       var $$not = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond1 = 0, $or$cond1$not = 0, $or$cond3 = 0, $or$cond4 = 0, $or$cond5 = 0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($index>>>0)<(4);
       if (!($1)) {
        ___assert_fail(((38528)|0),((38560)|0),59,((38600)|0));
        // unreachable;
       }
       $$not = ($center|0)==(0|0);
       $2 = ($left|0)==(0|0);
       $or$cond = $$not | $2;
       $3 = ($right|0)==(0|0);
       $or$cond1 = $or$cond | $3;
       $or$cond1$not = $or$cond1 ^ 1;
       $or$cond3 = $$not & $2;
       $or$cond4 = $or$cond3 & $3;
       $or$cond5 = $or$cond4 | $or$cond1$not;
       if ($or$cond5) {
        $4 = (($this) + ($index<<2)|0);
        $5 = HEAP32[$4>>2]|0;
        $6 = (($5) + 4|0);
        HEAP32[$6>>2] = $right;
        $7 = (($5) + 8|0);
        HEAP32[$7>>2] = $left;
        $8 = (($5) + 12|0);
        HEAP32[$8>>2] = $center;
        $9 = (($5) + 20|0);
        $10 = HEAP32[$9>>2]|0;
        $11 = (($5) + ($10<<2)|0);
        $12 = HEAP32[$11>>2]|0;
        $13 = (($5) + 16|0);
        HEAP32[$13>>2] = $12;
        STACKTOP = sp;return;
       } else {
        ___assert_fail(((38616)|0),((38560)|0),60,((38600)|0));
        // unreachable;
       }
      }
      function __ZN6Gb_Apu13update_volumeEv($this) {
       $this = $this|0;
       var $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 348|0);
       $2 = HEAP8[$1]|0;
       $3 = $2&255;
       $4 = $3 & 7;
       $5 = $3 >>> 4;
       $6 = $5 & 7;
       $7 = (__ZL3maxii($4,$6)|0);
       $8 = (($7) + 1)|0;
       $9 = (+($8|0));
       $10 = (($this) + 32|0);
       $11 = +HEAPF64[$10>>3];
       $12 = $11 * $9;
       $13 = (($this) + 376|0);
       __ZN10Blip_SynthILi12ELi1EE6volumeEd($13,$12);
       $14 = (($this) + 1192|0);
       __ZN10Blip_SynthILi8ELi1EE6volumeEd($14,$12);
       STACKTOP = sp;return;
      }
      function __ZL3maxii($x,$y) {
       $x = $x|0;
       $y = $y|0;
       var $1 = 0, $x$y = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($y|0)<($x|0);
       $x$y = $1 ? $x : $y;
       STACKTOP = sp;return ($x$y|0);
      }
      function __ZN10Blip_SynthILi8ELi1EE6volumeEd($this,$v) {
       $this = $this|0;
       $v = +$v;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       __ZN11Blip_Synth_11volume_unitEd($1,$v);
       STACKTOP = sp;return;
      }
      function __ZN6Gb_Env5resetEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 48|0);
       HEAP32[$1>>2] = 0;
       $2 = ($this);
       __ZN6Gb_Osc5resetEv($2);
       STACKTOP = sp;return;
      }
      function __ZN6Gb_Apu14write_registerEiji($this,$time,$addr,$data) {
       $this = $this|0;
       $time = $time|0;
       $addr = $addr|0;
       $data = $data|0;
       var $$lobit = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
       var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
       var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
       var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
       var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
       var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
       var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
       var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
       var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
       var $addr$off = 0, $exitcond = 0, $i4$06 = 0, $or$cond = 0, $or$cond2 = 0, $or$cond2$1 = 0, $or$cond2$2 = 0, $or$cond2$3 = 0, $or$cond3 = 0, $or$cond3$not = 0, $or$cond5 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($data>>>0)<(256);
       if (!($1)) {
        ___assert_fail(((38808)|0),((38560)|0),202,((38832)|0));
        // unreachable;
       }
       $2 = (($addr) + -65296)|0;
       $3 = ($2>>>0)>(47);
       if ($3) {
        STACKTOP = sp;return;
       }
       __ZN6Gb_Apu9run_untilEi($this,$time);
       $4 = ((($this) + ($2)|0) + 328|0);
       $5 = HEAP8[$4]|0;
       $6 = $data&255;
       HEAP8[$4] = $6;
       $7 = ($addr>>>0)<(65316);
       if ($7) {
        $8 = (($2|0) / 5)&-1;
        __ZN6Gb_Apu9write_oscEiii($this,$8,$2,$data);
        STACKTOP = sp;return;
       }
       $9 = $5&255;
       $10 = ($addr|0)!=(65316);
       $11 = ($9|0)==($data|0);
       $or$cond = $10 | $11;
       if (!($or$cond)) {
        $12 = (($this) + 1192|0);
        $13 = ($this);
        $14 = HEAP32[$13>>2]|0;
        $15 = (($14) + 32|0);
        $16 = HEAP32[$15>>2]|0;
        HEAP32[$15>>2] = 0;
        $17 = ($16|0)==(0);
        do {
         if (!($17)) {
          $18 = (($14) + 44|0);
          $19 = HEAP32[$18>>2]|0;
          $20 = ($19|0)==(0);
          if ($20) {
           break;
          }
          $21 = (($14) + 16|0);
          $22 = HEAP32[$21>>2]|0;
          $23 = ($22|0)==(0|0);
          if ($23) {
           break;
          }
          $24 = (0 - ($16))|0;
          __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($12,$time,$24,$22);
         }
        } while(0);
        $25 = (($this) + 4|0);
        $26 = HEAP32[$25>>2]|0;
        $27 = (($26) + 32|0);
        $28 = HEAP32[$27>>2]|0;
        HEAP32[$27>>2] = 0;
        $29 = ($28|0)==(0);
        do {
         if (!($29)) {
          $146 = (($26) + 44|0);
          $147 = HEAP32[$146>>2]|0;
          $148 = ($147|0)==(0);
          if ($148) {
           break;
          }
          $149 = (($26) + 16|0);
          $150 = HEAP32[$149>>2]|0;
          $151 = ($150|0)==(0|0);
          if ($151) {
           break;
          }
          $152 = (0 - ($28))|0;
          __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($12,$time,$152,$150);
         }
        } while(0);
        $153 = (($this) + 8|0);
        $154 = HEAP32[$153>>2]|0;
        $155 = (($154) + 32|0);
        $156 = HEAP32[$155>>2]|0;
        HEAP32[$155>>2] = 0;
        $157 = ($156|0)==(0);
        do {
         if (!($157)) {
          $158 = (($154) + 44|0);
          $159 = HEAP32[$158>>2]|0;
          $160 = ($159|0)==(0);
          if ($160) {
           break;
          }
          $161 = (($154) + 16|0);
          $162 = HEAP32[$161>>2]|0;
          $163 = ($162|0)==(0|0);
          if ($163) {
           break;
          }
          $164 = (0 - ($156))|0;
          __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($12,$time,$164,$162);
         }
        } while(0);
        $165 = (($this) + 12|0);
        $166 = HEAP32[$165>>2]|0;
        $167 = (($166) + 32|0);
        $168 = HEAP32[$167>>2]|0;
        HEAP32[$167>>2] = 0;
        $169 = ($168|0)==(0);
        do {
         if (!($169)) {
          $170 = (($166) + 44|0);
          $171 = HEAP32[$170>>2]|0;
          $172 = ($171|0)==(0);
          if ($172) {
           break;
          }
          $173 = (($166) + 16|0);
          $174 = HEAP32[$173>>2]|0;
          $175 = ($174|0)==(0|0);
          if ($175) {
           break;
          }
          $176 = (0 - ($168))|0;
          __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($12,$time,$176,$174);
         }
        } while(0);
        $177 = (($this) + 192|0);
        $178 = HEAP32[$177>>2]|0;
        $179 = ($178|0)==(0|0);
        if (!($179)) {
         $30 = (($this) + 1192|0);
         __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($30,$time,30,$178);
        }
        __ZN6Gb_Apu13update_volumeEv($this);
        $31 = HEAP32[$177>>2]|0;
        $32 = ($31|0)==(0|0);
        if ($32) {
         STACKTOP = sp;return;
        }
        $33 = (($this) + 1192|0);
        __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($33,$time,-30,$31);
        STACKTOP = sp;return;
       }
       $34 = ($addr|0)!=(65318);
       $addr$off = (($addr) + -65317)|0;
       $35 = ($addr$off>>>0)<(2);
       if (!($35)) {
        $87 = ($addr>>>0)>(65327);
        if (!($87)) {
         STACKTOP = sp;return;
        }
        $88 = $addr << 1;
        $89 = $88 & 30;
        $90 = $data >>> 4;
        $91 = $90&255;
        $92 = ((($this) + ($89)|0) + 236|0);
        HEAP8[$92] = $91;
        $93 = $data & 15;
        $94 = $93&255;
        $95 = $89 | 1;
        $96 = ((($this) + ($95)|0) + 236|0);
        HEAP8[$96] = $94;
        STACKTOP = sp;return;
       }
       $36 = (($this) + 350|0);
       $37 = HEAP8[$36]|0;
       $$lobit = ($37<<24>>24) >> 7;
       $38 = $$lobit << 24 >> 24;
       $39 = (($this) + 349|0);
       $40 = HEAP8[$39]|0;
       $41 = $40&255;
       $42 = $41 & $38;
       $43 = (($this) + 1192|0);
       $44 = ($this);
       $45 = HEAP32[$44>>2]|0;
       $46 = (($45) + 44|0);
       $47 = HEAP32[$46>>2]|0;
       $48 = $47 & $38;
       HEAP32[$46>>2] = $48;
       $49 = (($45) + 16|0);
       $50 = HEAP32[$49>>2]|0;
       $51 = $42 >>> 3;
       $52 = $51 & 2;
       $53 = $42 & 1;
       $54 = $52 | $53;
       $55 = (($45) + 20|0);
       HEAP32[$55>>2] = $54;
       $56 = (($45) + ($54<<2)|0);
       $57 = HEAP32[$56>>2]|0;
       HEAP32[$49>>2] = $57;
       $58 = ($57|0)==($50|0);
       do {
        if (!($58)) {
         $59 = (($45) + 32|0);
         $60 = HEAP32[$59>>2]|0;
         HEAP32[$59>>2] = 0;
         $61 = ($60|0)==(0);
         $62 = ($50|0)==(0|0);
         $or$cond2 = $61 | $62;
         if ($or$cond2) {
          break;
         }
         $63 = (0 - ($60))|0;
         __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($43,$time,$63,$50);
        }
       } while(0);
       $64 = (($this) + 4|0);
       $65 = HEAP32[$64>>2]|0;
       $66 = (($65) + 44|0);
       $67 = HEAP32[$66>>2]|0;
       $68 = $67 & $38;
       HEAP32[$66>>2] = $68;
       $69 = $42 >>> 1;
       $70 = (($65) + 16|0);
       $71 = HEAP32[$70>>2]|0;
       $72 = $42 >>> 4;
       $73 = $72 & 2;
       $74 = $69 & 1;
       $75 = $73 | $74;
       $76 = (($65) + 20|0);
       HEAP32[$76>>2] = $75;
       $77 = (($65) + ($75<<2)|0);
       $78 = HEAP32[$77>>2]|0;
       HEAP32[$70>>2] = $78;
       $79 = ($78|0)==($71|0);
       do {
        if (!($79)) {
         $97 = (($65) + 32|0);
         $98 = HEAP32[$97>>2]|0;
         HEAP32[$97>>2] = 0;
         $99 = ($98|0)==(0);
         $100 = ($71|0)==(0|0);
         $or$cond2$1 = $99 | $100;
         if ($or$cond2$1) {
          break;
         }
         $101 = (0 - ($98))|0;
         __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($43,$time,$101,$71);
        }
       } while(0);
       $102 = (($this) + 8|0);
       $103 = HEAP32[$102>>2]|0;
       $104 = (($103) + 44|0);
       $105 = HEAP32[$104>>2]|0;
       $106 = $105 & $38;
       HEAP32[$104>>2] = $106;
       $107 = $42 >>> 2;
       $108 = (($103) + 16|0);
       $109 = HEAP32[$108>>2]|0;
       $110 = $42 >>> 5;
       $111 = $110 & 2;
       $112 = $107 & 1;
       $113 = $111 | $112;
       $114 = (($103) + 20|0);
       HEAP32[$114>>2] = $113;
       $115 = (($103) + ($113<<2)|0);
       $116 = HEAP32[$115>>2]|0;
       HEAP32[$108>>2] = $116;
       $117 = ($116|0)==($109|0);
       do {
        if (!($117)) {
         $118 = (($103) + 32|0);
         $119 = HEAP32[$118>>2]|0;
         HEAP32[$118>>2] = 0;
         $120 = ($119|0)==(0);
         $121 = ($109|0)==(0|0);
         $or$cond2$2 = $120 | $121;
         if ($or$cond2$2) {
          break;
         }
         $122 = (0 - ($119))|0;
         __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($43,$time,$122,$109);
        }
       } while(0);
       $123 = (($this) + 12|0);
       $124 = HEAP32[$123>>2]|0;
       $125 = (($124) + 44|0);
       $126 = HEAP32[$125>>2]|0;
       $127 = $126 & $38;
       HEAP32[$125>>2] = $127;
       $128 = $42 >>> 3;
       $129 = (($124) + 16|0);
       $130 = HEAP32[$129>>2]|0;
       $131 = $42 >>> 6;
       $132 = $131 & 2;
       $133 = $128 & 1;
       $134 = $132 | $133;
       $135 = (($124) + 20|0);
       HEAP32[$135>>2] = $134;
       $136 = (($124) + ($134<<2)|0);
       $137 = HEAP32[$136>>2]|0;
       HEAP32[$129>>2] = $137;
       $138 = ($137|0)==($130|0);
       do {
        if (!($138)) {
         $139 = (($124) + 32|0);
         $140 = HEAP32[$139>>2]|0;
         HEAP32[$139>>2] = 0;
         $141 = ($140|0)==(0);
         $142 = ($130|0)==(0|0);
         $or$cond2$3 = $141 | $142;
         if ($or$cond2$3) {
          break;
         }
         $143 = (0 - ($140))|0;
         __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($43,$time,$143,$130);
        }
       } while(0);
       $or$cond3 = $34 | $11;
       $or$cond3$not = $or$cond3 ^ 1;
       $144 = $data & 128;
       $145 = ($144|0)==(0);
       $or$cond5 = $145 & $or$cond3$not;
       if ($or$cond5) {
        $i4$06 = 0;
       } else {
        STACKTOP = sp;return;
       }
       while(1) {
        $80 = ($i4$06|0)==(22);
        if ($80) {
         $81 = (($i4$06) + 1)|0;
         $i4$06 = $81;
         continue;
        } else {
         $82 = (($i4$06) + 65296)|0;
         $83 = (38848 + ($i4$06)|0);
         $84 = HEAP8[$83]|0;
         $85 = $84&255;
         __ZN6Gb_Apu14write_registerEiji($this,$time,$82,$85);
         $86 = (($i4$06) + 1)|0;
         $exitcond = ($86|0)==(32);
         if ($exitcond) {
          break;
         } else {
          $i4$06 = $86;
          continue;
         }
        }
       }
       STACKTOP = sp;return;
      }
      function __ZN6Gb_Apu9run_untilEi($this,$end_time) {
       $this = $this|0;
       $end_time = $end_time|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
       var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
       var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0;
       var $end_time$ = 0, $exitcond = 0, $i$01 = 0, $playing$0 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 20|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = ($2|0)>($end_time|0);
       if ($3) {
        ___assert_fail(((38696)|0),((38560)|0),131,((38720)|0));
        // unreachable;
       }
       $4 = ($2|0)==($end_time|0);
       if ($4) {
        STACKTOP = sp;return;
       }
       $5 = (($this) + 16|0);
       $6 = (($this) + 44|0);
       $7 = (($this) + 112|0);
       $8 = (($this) + 180|0);
       $9 = (($this) + 268|0);
       $10 = (($this) + 24|0);
       $11 = (($this) + 44|0);
       $12 = ($11);
       $13 = (($this) + 112|0);
       $14 = ($13);
       $15 = (($this) + 180|0);
       $16 = (($this) + 268|0);
       $17 = ($16);
       $18 = (($this) + 40|0);
       $19 = ($11);
       $20 = ($13);
       $21 = ($16);
       while(1) {
        $22 = HEAP32[$5>>2]|0;
        $23 = ($22|0)>($end_time|0);
        $end_time$ = $23 ? $end_time : $22;
        $i$01 = 0;
        L9: while(1) {
         $24 = (($this) + ($i$01<<2)|0);
         $25 = HEAP32[$24>>2]|0;
         $26 = (($25) + 16|0);
         $27 = HEAP32[$26>>2]|0;
         $28 = ($27|0)==(0|0);
         do {
          if (!($28)) {
           __ZN11Blip_Buffer12set_modifiedEv($27);
           $29 = (($25) + 44|0);
           $30 = HEAP32[$29>>2]|0;
           $31 = ($30|0)==(0);
           do {
            if ($31) {
             $playing$0 = 0;
            } else {
             $32 = (($25) + 36|0);
             $33 = HEAP32[$32>>2]|0;
             $34 = ($33|0)==(0);
             if ($34) {
              $playing$0 = 0;
              break;
             }
             $35 = (($25) + 24|0);
             $36 = HEAP32[$35>>2]|0;
             $37 = (($36) + 4|0);
             $38 = HEAP8[$37]|0;
             $39 = $38 & 64;
             $40 = ($39<<24>>24)==(0);
             if (!($40)) {
              $41 = (($25) + 40|0);
              $42 = HEAP32[$41>>2]|0;
              $43 = ($42|0)==(0);
              if ($43) {
               $playing$0 = 0;
               break;
              }
             }
             $playing$0 = -1;
            }
           } while(0);
           if ((($i$01|0) == 0)) {
            $44 = HEAP32[$1>>2]|0;
            __ZN9Gb_Square3runEiii($6,$44,$end_time$,$playing$0);
           } else if ((($i$01|0) == 2)) {
            $46 = HEAP32[$1>>2]|0;
            __ZN7Gb_Wave3runEiii($8,$46,$end_time$,$playing$0);
           } else if ((($i$01|0) == 3)) {
            label = 16;
            break L9;
           } else if ((($i$01|0) == 1)) {
            $45 = HEAP32[$1>>2]|0;
            __ZN9Gb_Square3runEiii($7,$45,$end_time$,$playing$0);
           } else {
            break;
           }
           $48 = (($i$01) + 1)|0;
           $i$01 = $48;
           continue L9;
          }
         } while(0);
         $49 = (($i$01) + 1)|0;
         $exitcond = ($49|0)==(4);
         if ($exitcond) {
          break;
         } else {
          $i$01 = $49;
         }
        }
        if ((label|0) == 16) {
         label = 0;
         $47 = HEAP32[$1>>2]|0;
         __ZN8Gb_Noise3runEiii($9,$47,$end_time$,$playing$0);
        }
        HEAP32[$1>>2] = $end_time$;
        $50 = ($end_time$|0)==($end_time|0);
        if ($50) {
         break;
        }
        $51 = HEAP32[$10>>2]|0;
        $52 = HEAP32[$5>>2]|0;
        $53 = (($52) + ($51))|0;
        HEAP32[$5>>2] = $53;
        __ZN6Gb_Osc12clock_lengthEv($12);
        __ZN6Gb_Osc12clock_lengthEv($14);
        __ZN6Gb_Osc12clock_lengthEv($15);
        __ZN6Gb_Osc12clock_lengthEv($17);
        $54 = HEAP32[$18>>2]|0;
        $55 = (($54) + 1)|0;
        $56 = $55 & 3;
        HEAP32[$18>>2] = $56;
        $57 = ($56|0)==(0);
        if ($57) {
         __ZN6Gb_Env14clock_envelopeEv($19);
         __ZN6Gb_Env14clock_envelopeEv($20);
         __ZN6Gb_Env14clock_envelopeEv($21);
        }
        $58 = HEAP32[$18>>2]|0;
        $59 = $58 & 1;
        $60 = ($59|0)==(0);
        if ($60) {
         continue;
        }
        __ZN9Gb_Square11clock_sweepEv($11);
       }
       STACKTOP = sp;return;
      }
      function __ZN6Gb_Apu9end_frameEi($this,$end_time) {
       $this = $this|0;
       $end_time = $end_time|0;
       var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 20|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = ($2|0)<($end_time|0);
       if ($3) {
        __ZN6Gb_Apu9run_untilEi($this,$end_time);
       }
       $4 = (($this) + 16|0);
       $5 = HEAP32[$4>>2]|0;
       $6 = ($5|0)<($end_time|0);
       if ($6) {
        ___assert_fail(((38736)|0),((38560)|0),193,((38768)|0));
        // unreachable;
       }
       $7 = (($5) - ($end_time))|0;
       HEAP32[$4>>2] = $7;
       $8 = HEAP32[$1>>2]|0;
       $9 = ($8|0)<($end_time|0);
       if ($9) {
        ___assert_fail(((38784)|0),((38560)|0),196,((38768)|0));
        // unreachable;
       } else {
        $10 = (($8) - ($end_time))|0;
        HEAP32[$1>>2] = $10;
        STACKTOP = sp;return;
       }
      }
      function __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($this,$t,$delta,$buf) {
       $this = $this|0;
       $t = $t|0;
       $delta = $delta|0;
       $buf = $buf|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($buf);
       $2 = HEAP32[$1>>2]|0;
       $3 = Math_imul($2, $t)|0;
       $4 = (($buf) + 4|0);
       $5 = HEAP32[$4>>2]|0;
       $6 = (($3) + ($5))|0;
       __ZNK10Blip_SynthILi8ELi1EE16offset_resampledEjiP11Blip_Buffer($this,$6,$delta,$buf);
       STACKTOP = sp;return;
      }
      function __ZN6Gb_Apu13read_registerEij($this,$time,$addr) {
       $this = $this|0;
       $time = $time|0;
       $addr = $addr|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
       var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
       var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
       var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $data$1 = 0, $data$1$1 = 0, $data$1$2 = 0, $data$2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       __ZN6Gb_Apu9run_untilEi($this,$time);
       $1 = (($addr) + -65296)|0;
       $2 = ($1>>>0)<(48);
       if (!($2)) {
        ___assert_fail(((38880)|0),((38560)|0),291,((38920)|0));
        // unreachable;
       }
       $3 = ((($this) + ($1)|0) + 328|0);
       $4 = HEAP8[$3]|0;
       $5 = $4&255;
       $6 = ($addr|0)==(65318);
       if (!($6)) {
        $data$2 = $5;
        STACKTOP = sp;return ($data$2|0);
       }
       $7 = $5 & 128;
       $8 = $7 | 112;
       $9 = ($this);
       $10 = HEAP32[$9>>2]|0;
       $11 = (($10) + 44|0);
       $12 = HEAP32[$11>>2]|0;
       $13 = ($12|0)==(0);
       do {
        if ($13) {
         $data$1 = $8;
        } else {
         $14 = (($10) + 40|0);
         $15 = HEAP32[$14>>2]|0;
         $16 = ($15|0)==(0);
         if ($16) {
          $17 = (($10) + 24|0);
          $18 = HEAP32[$17>>2]|0;
          $19 = (($18) + 4|0);
          $20 = HEAP8[$19]|0;
          $21 = $20 & 64;
          $22 = ($21<<24>>24)==(0);
          if (!($22)) {
           $data$1 = $8;
           break;
          }
         }
         $23 = $7 | 113;
         $data$1 = $23;
        }
       } while(0);
       $24 = (($this) + 4|0);
       $25 = HEAP32[$24>>2]|0;
       $26 = (($25) + 44|0);
       $27 = HEAP32[$26>>2]|0;
       $28 = ($27|0)==(0);
       do {
        if ($28) {
         $data$1$1 = $data$1;
        } else {
         $29 = (($25) + 40|0);
         $30 = HEAP32[$29>>2]|0;
         $31 = ($30|0)==(0);
         if ($31) {
          $32 = (($25) + 24|0);
          $33 = HEAP32[$32>>2]|0;
          $34 = (($33) + 4|0);
          $35 = HEAP8[$34]|0;
          $36 = $35 & 64;
          $37 = ($36<<24>>24)==(0);
          if (!($37)) {
           $data$1$1 = $data$1;
           break;
          }
         }
         $38 = $data$1 | 2;
         $data$1$1 = $38;
        }
       } while(0);
       $39 = (($this) + 8|0);
       $40 = HEAP32[$39>>2]|0;
       $41 = (($40) + 44|0);
       $42 = HEAP32[$41>>2]|0;
       $43 = ($42|0)==(0);
       do {
        if ($43) {
         $data$1$2 = $data$1$1;
        } else {
         $44 = (($40) + 40|0);
         $45 = HEAP32[$44>>2]|0;
         $46 = ($45|0)==(0);
         if ($46) {
          $47 = (($40) + 24|0);
          $48 = HEAP32[$47>>2]|0;
          $49 = (($48) + 4|0);
          $50 = HEAP8[$49]|0;
          $51 = $50 & 64;
          $52 = ($51<<24>>24)==(0);
          if (!($52)) {
           $data$1$2 = $data$1$1;
           break;
          }
         }
         $53 = $data$1$1 | 4;
         $data$1$2 = $53;
        }
       } while(0);
       $54 = (($this) + 12|0);
       $55 = HEAP32[$54>>2]|0;
       $56 = (($55) + 44|0);
       $57 = HEAP32[$56>>2]|0;
       $58 = ($57|0)==(0);
       if ($58) {
        $data$2 = $data$1$2;
        STACKTOP = sp;return ($data$2|0);
       }
       $59 = (($55) + 40|0);
       $60 = HEAP32[$59>>2]|0;
       $61 = ($60|0)==(0);
       do {
        if ($61) {
         $62 = (($55) + 24|0);
         $63 = HEAP32[$62>>2]|0;
         $64 = (($63) + 4|0);
         $65 = HEAP8[$64]|0;
         $66 = $65 & 64;
         $67 = ($66<<24>>24)==(0);
         if ($67) {
          break;
         } else {
          $data$2 = $data$1$2;
         }
         STACKTOP = sp;return ($data$2|0);
        }
       } while(0);
       $68 = $data$1$2 | 8;
       $data$2 = $68;
       STACKTOP = sp;return ($data$2|0);
      }
      function __ZNK10Blip_SynthILi8ELi1EE16offset_resampledEjiP11Blip_Buffer($this,$time,$delta,$blip_buf) {
       $this = $this|0;
       $time = $time|0;
       $delta = $delta|0;
       $blip_buf = $blip_buf|0;
       var $$sum = 0, $$sum1 = 0, $$sum11 = 0, $$sum1213 = 0, $$sum14 = 0, $$sum1516 = 0, $$sum17 = 0, $$sum18 = 0, $$sum2 = 0, $$sum3 = 0, $$sum45 = 0, $$sum6 = 0, $$sum7 = 0, $$sum8 = 0, $$sum910 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
       var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
       var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
       var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0;
       var $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $time >>> 16;
       $2 = (($blip_buf) + 12|0);
       $3 = HEAP32[$2>>2]|0;
       $4 = ($1|0)<($3|0);
       if ($4) {
        $5 = (($this) + 8|0);
        $6 = HEAP32[$5>>2]|0;
        $7 = Math_imul($6, $delta)|0;
        $8 = (($blip_buf) + 8|0);
        $9 = HEAP32[$8>>2]|0;
        $10 = $time >>> 10;
        $11 = $10 & 63;
        $$sum = (64 - ($11))|0;
        $12 = ((($this) + ($$sum<<1)|0) + 40|0);
        $13 = HEAP16[$12>>1]|0;
        $14 = $13 << 16 >> 16;
        $15 = Math_imul($14, $7)|0;
        $$sum1 = (($1) + 4)|0;
        $16 = (($9) + ($$sum1<<2)|0);
        $17 = HEAP32[$16>>2]|0;
        $18 = (($15) + ($17))|0;
        $$sum2 = (($$sum) + 64)|0;
        $19 = ((($this) + ($$sum2<<1)|0) + 40|0);
        $20 = HEAP16[$19>>1]|0;
        $21 = $20 << 16 >> 16;
        $22 = Math_imul($21, $7)|0;
        $$sum3 = (($1) + 5)|0;
        $23 = (($9) + ($$sum3<<2)|0);
        $24 = HEAP32[$23>>2]|0;
        $25 = (($22) + ($24))|0;
        $$sum45 = $$sum | 128;
        $26 = ((($this) + ($$sum45<<1)|0) + 40|0);
        $27 = HEAP16[$26>>1]|0;
        $28 = $27 << 16 >> 16;
        HEAP32[$16>>2] = $18;
        HEAP32[$23>>2] = $25;
        $29 = Math_imul($28, $7)|0;
        $$sum6 = (($1) + 6)|0;
        $30 = (($9) + ($$sum6<<2)|0);
        $31 = HEAP32[$30>>2]|0;
        $32 = (($29) + ($31))|0;
        $$sum7 = (($$sum) + 192)|0;
        $33 = ((($this) + ($$sum7<<1)|0) + 40|0);
        $34 = HEAP16[$33>>1]|0;
        $35 = $34 << 16 >> 16;
        $36 = Math_imul($35, $7)|0;
        $$sum8 = (($1) + 7)|0;
        $37 = (($9) + ($$sum8<<2)|0);
        $38 = HEAP32[$37>>2]|0;
        $39 = (($36) + ($38))|0;
        $40 = ((($this) + ($11<<1)|0) + 40|0);
        $$sum910 = $11 | 192;
        $41 = ((($this) + ($$sum910<<1)|0) + 40|0);
        $42 = HEAP16[$41>>1]|0;
        $43 = $42 << 16 >> 16;
        HEAP32[$30>>2] = $32;
        HEAP32[$37>>2] = $39;
        $44 = Math_imul($43, $7)|0;
        $$sum11 = (($1) + 8)|0;
        $45 = (($9) + ($$sum11<<2)|0);
        $46 = HEAP32[$45>>2]|0;
        $47 = (($44) + ($46))|0;
        $$sum1213 = $11 | 128;
        $48 = ((($this) + ($$sum1213<<1)|0) + 40|0);
        $49 = HEAP16[$48>>1]|0;
        $50 = $49 << 16 >> 16;
        $51 = Math_imul($50, $7)|0;
        $$sum14 = (($1) + 9)|0;
        $52 = (($9) + ($$sum14<<2)|0);
        $53 = HEAP32[$52>>2]|0;
        $54 = (($51) + ($53))|0;
        $$sum1516 = $11 | 64;
        $55 = ((($this) + ($$sum1516<<1)|0) + 40|0);
        $56 = HEAP16[$55>>1]|0;
        $57 = $56 << 16 >> 16;
        HEAP32[$45>>2] = $47;
        HEAP32[$52>>2] = $54;
        $58 = Math_imul($57, $7)|0;
        $$sum17 = (($1) + 10)|0;
        $59 = (($9) + ($$sum17<<2)|0);
        $60 = HEAP32[$59>>2]|0;
        $61 = (($58) + ($60))|0;
        $62 = HEAP16[$40>>1]|0;
        $63 = $62 << 16 >> 16;
        $64 = Math_imul($63, $7)|0;
        $$sum18 = (($1) + 11)|0;
        $65 = (($9) + ($$sum18<<2)|0);
        $66 = HEAP32[$65>>2]|0;
        $67 = (($64) + ($66))|0;
        HEAP32[$59>>2] = $61;
        HEAP32[$65>>2] = $67;
        STACKTOP = sp;return;
       } else {
        ___assert_fail(((38936)|0),((39008)|0),342,((39048)|0));
        // unreachable;
       }
      }
      function __ZN10Blip_SynthILi8ELi1EEC2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = (($this) + 40|0);
       __ZN11Blip_Synth_C2EPsi($1,$2,8);
       STACKTOP = sp;return;
      }
      function __ZN7Gbs_Emu8cpu_readEj($this,$addr) {
       $this = $this|0;
       $addr = $addr|0;
       var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($addr) + -65296)|0;
       $2 = ($1>>>0)<(48);
       if ($2) {
        $3 = (($this) + 25136|0);
        $4 = (__ZNK7Gbs_Emu5clockEv($this)|0);
        $5 = (__ZN6Gb_Apu13read_registerEij($3,$4,$addr)|0);
        STACKTOP = sp;return ($5|0);
       } else {
        $6 = (($this) + 336|0);
        $7 = $6;
        $8 = (__ZN6Gb_Cpu8get_codeEj($7,$addr)|0);
        $9 = HEAP8[$8]|0;
        $10 = $9&255;
        STACKTOP = sp;return ($10|0);
       }
       return 0|0;
      }
      function __ZN6Gb_Cpu8get_codeEj($this,$addr) {
       $this = $this|0;
       $addr = $addr|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $addr >>> 13;
       $2 = (($this) + 20|0);
       $3 = HEAP32[$2>>2]|0;
       $4 = (($3) + ($1<<2)|0);
       $5 = HEAP32[$4>>2]|0;
       $6 = $addr & 8191;
       $7 = (($5) + ($6)|0);
       STACKTOP = sp;return ($7|0);
      }
      function __ZNK7Gbs_Emu5clockEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 424|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = (($this) + 336|0);
       $4 = $3;
       $5 = (__ZNK6Gb_Cpu6remainEv($4)|0);
       $6 = (($2) - ($5))|0;
       STACKTOP = sp;return ($6|0);
      }
      function __ZN7Gbs_Emu9cpu_writeEji($this,$addr,$data) {
       $this = $this|0;
       $addr = $addr|0;
       $data = $data|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($addr) + -40960)|0;
       $2 = ($1>>>0)<(24576);
       do {
        if ($2) {
         $3 = $data&255;
         $4 = ((($this) + ($1)|0) + 548|0);
         HEAP8[$4] = $3;
         $5 = $addr ^ 57344;
         $6 = ($5>>>0)<(8064);
         if (!($6)) {
          break;
         }
         $7 = (($addr) + -65296)|0;
         $8 = ($7>>>0)<(48);
         if ($8) {
          $9 = (($this) + 25136|0);
          $10 = (__ZNK7Gbs_Emu5clockEv($this)|0);
          __ZN6Gb_Apu14write_registerEiji($9,$10,$addr,$data);
          break;
         }
         $11 = $addr ^ 65286;
         $12 = ($11>>>0)<(2);
         if ($12) {
          __ZN7Gbs_Emu12update_timerEv($this);
          break;
         }
         $13 = ($addr|0)==(65280);
         if ($13) {
          HEAP8[$4] = 0;
          break;
         } else {
          HEAP8[$4] = -1;
          break;
         }
        } else {
         $14 = $addr ^ 8192;
         $15 = ($14>>>0)<(8192);
         if (!($15)) {
          break;
         }
         __ZN7Gbs_Emu8set_bankEi($this,$data);
        }
       } while(0);
       STACKTOP = sp;return;
      }
      function __ZN6Gb_Cpu5resetEPv($this,$unmapped) {
       $this = $this|0;
       $unmapped = $unmapped|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 24|0);
       $2 = (($this) + 20|0);
       HEAP32[$2>>2] = $1;
       $3 = (($this) + 60|0);
       HEAP32[$3>>2] = 0;
       __ZN6Gb_Cpu13set_code_pageEiPh($this,0,$unmapped);
       __ZN6Gb_Cpu13set_code_pageEiPh($this,1,$unmapped);
       __ZN6Gb_Cpu13set_code_pageEiPh($this,2,$unmapped);
       __ZN6Gb_Cpu13set_code_pageEiPh($this,3,$unmapped);
       __ZN6Gb_Cpu13set_code_pageEiPh($this,4,$unmapped);
       __ZN6Gb_Cpu13set_code_pageEiPh($this,5,$unmapped);
       __ZN6Gb_Cpu13set_code_pageEiPh($this,6,$unmapped);
       __ZN6Gb_Cpu13set_code_pageEiPh($this,7,$unmapped);
       __ZN6Gb_Cpu13set_code_pageEiPh($this,8,$unmapped);
       $4 = ($this);
       ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
       __Z24blargg_verify_byte_orderv();
       STACKTOP = sp;return;
      }
      function __ZN6Gb_Cpu13set_code_pageEiPh($this,$i,$p) {
       $this = $this|0;
       $i = $i|0;
       $p = $p|0;
       var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 20|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = (($2) + ($i<<2)|0);
       HEAP32[$3>>2] = $p;
       STACKTOP = sp;return;
      }
      function __Z24blargg_verify_byte_orderv() {
       var $1 = 0, $2 = 0, $3 = 0, $i = 0, label = 0, sp = 0;
       sp = STACKTOP;
       STACKTOP = STACKTOP + 8|0;
       $i = sp;
       HEAP32[$i>>2] = 1;
       $1 = $i;
       $2 = HEAP8[$1]|0;
       $3 = ($2<<24>>24)==(0);
       if ($3) {
        ___assert_fail(((39192)|0),((39224)|0),62,((39264)|0));
        // unreachable;
       } else {
        STACKTOP = sp;return;
       }
      }
      function __ZN6Gb_Cpu8map_codeEjjPv($this,$start,$size,$data) {
       $this = $this|0;
       $start = $start|0;
       $size = $size|0;
       $data = $data|0;
       var $$in = 0, $$in$phi = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $start & 8191;
       $2 = ($1|0)==(0);
       if (!($2)) {
        ___assert_fail(((39072)|0),((39096)|0),74,((39136)|0));
        // unreachable;
       }
       $3 = $size & 8191;
       $4 = ($3|0)==(0);
       if (!($4)) {
        ___assert_fail(((39152)|0),((39096)|0),75,((39136)|0));
        // unreachable;
       }
       $5 = $start >>> 13;
       $6 = $size >>> 13;
       $7 = ($6|0)==(0);
       if ($7) {
        STACKTOP = sp;return;
       } else {
        $$in = $6;
       }
       while(1) {
        $8 = (($$in) + -1)|0;
        $9 = (($8) + ($5))|0;
        $10 = $8 << 13;
        $11 = (($data) + ($10)|0);
        __ZN6Gb_Cpu13set_code_pageEiPh($this,$9,$11);
        $12 = ($8|0)==(0);
        if ($12) {
         break;
        } else {
         $$in$phi = $8;$$in = $$in$phi;
        }
       }
       STACKTOP = sp;return;
      }
      function __ZN6Gb_Cpu3runEl($this,$cycle_count) {
       $this = $this|0;
       $cycle_count = $cycle_count|0;
       var $$ = 0, $$$v = 0, $$1 = 0, $$2 = 0, $$2$v = 0, $$3 = 0, $$flags$1 = 0, $$in32 = 0, $$sum = 0, $$sum24 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
       var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
       var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
       var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
       var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
       var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
       var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
       var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
       var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
       var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
       var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
       var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
       var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
       var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0;
       var $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0;
       var $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0;
       var $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0;
       var $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0;
       var $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0;
       var $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0;
       var $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0;
       var $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0;
       var $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0;
       var $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0;
       var $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0;
       var $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0;
       var $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0;
       var $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0;
       var $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0;
       var $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0;
       var $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0;
       var $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0;
       var $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0;
       var $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0;
       var $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0;
       var $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0;
       var $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0;
       var $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0;
       var $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0;
       var $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0;
       var $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0;
       var $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0;
       var $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0;
       var $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $data$0 = 0;
       var $data$1 = 0, $data$10 = 0, $data$11 = 0, $data$12 = 0, $data$13 = 0, $data$14 = 0, $data$15 = 0, $data$16 = 0, $data$17 = 0, $data$18 = 0, $data$19 = 0, $data$2 = 0, $data$3 = 0, $data$4 = 0, $data$5 = 0, $data$6 = 0, $data$7 = 0, $data$8 = 0, $data$9 = 0, $flags$0$be = 0;
       var $flags$012 = 0, $flags$025 = 0, $flags$1 = 0, $flags$3 = 0, $flags$4 = 0, $flags$5 = 0, $op$0 = 0, $op$1 = 0, $op$2 = 0, $op$3 = 0, $op$4 = 0, $op$5 = 0, $pc$0$be = 0, $pc$020 = 0, $pc$1 = 0, $pc$10 = 0, $pc$11 = 0, $pc$12 = 0, $pc$13 = 0, $pc$14 = 0;
       var $pc$15 = 0, $pc$16 = 0, $pc$17 = 0, $pc$18 = 0, $pc$19 = 0, $pc$2 = 0, $pc$20 = 0, $pc$21 = 0, $pc$22 = 0, $pc$23 = 0, $pc$24 = 0, $pc$25 = 0, $pc$3 = 0, $pc$4 = 0, $pc$5 = 0, $pc$6 = 0, $pc$7 = 0, $pc$8 = 0, $pc$9 = 0, $prev$0 = 0;
       var $prev$1 = 0, $s = 0, $sp$0$be = 0, $sp$016 = 0, $sp$026 = 0, $sp$1 = 0, $temp$0 = 0, $temp2$0 = 0, $temp6$0 = 0, $temp7$0 = 0, $temp8$0 = 0, $temp8$1 = 0, $temp8$2 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
       sp = STACKTOP;
       STACKTOP = STACKTOP + 48|0;
       $s = sp;
       $1 = sp + 40|0;
       $2 = (($cycle_count) + 4)|0;
       $3 = $2 >>> 2;
       $4 = (($this) + 24|0);
       $5 = (($this) + 60|0);
       HEAP32[$5>>2] = $3;
       $6 = $s;
       $7 = (($this) + 20|0);
       HEAP32[$7>>2] = $s;
       $8 = $4;
       dest=$6+0|0; src=$8+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));;
       $9 = $1;
       $10 = $this;
       $11 = $10;
       $12 = $11;
       $13 = HEAPU8[$12]|(HEAPU8[$12+1|0]<<8)|(HEAPU8[$12+2|0]<<16)|(HEAPU8[$12+3|0]<<24);
       $14 = (($11) + 4)|0;
       $15 = $14;
       $16 = HEAPU8[$15]|(HEAPU8[$15+1|0]<<8)|(HEAPU8[$15+2|0]<<16)|(HEAPU8[$15+3|0]<<24);
       $17 = $1;
       $18 = $17;
       HEAP32[$18>>2] = $13;
       $19 = (($17) + 4)|0;
       $20 = $19;
       HEAP32[$20>>2] = $16;
       $21 = (($this) + 8|0);
       $22 = HEAP32[$21>>2]|0;
       $23 = (($this) + 12|0);
       $24 = HEAP16[$23>>1]|0;
       $25 = $24&65535;
       $26 = (($this) + 7|0);
       $27 = HEAP8[$26]|0;
       $28 = $27&255;
       $29 = $22 >>> 13;
       $30 = (($s) + ($29<<2)|0);
       $31 = HEAP32[$30>>2]|0;
       $32 = $22 & 8191;
       $33 = (($31) + ($32)|0);
       $34 = HEAP8[$33]|0;
       $35 = (($s) + 36|0);
       $36 = HEAP32[$35>>2]|0;
       $37 = (($36) + -1)|0;
       HEAP32[$35>>2] = $37;
       $38 = ($37|0)==(0);
       if ($38) {
        $flags$012 = $28;$pc$020 = $22;$sp$016 = $25;
        $856 = $1;
        $857 = $856;
        $858 = HEAP32[$857>>2]|0;
        $859 = (($856) + 4)|0;
        $860 = $859;
        $861 = HEAP32[$860>>2]|0;
        $862 = $10;
        $863 = $862;
        HEAP8[$863]=$858&255;HEAP8[$863+1|0]=($858>>8)&255;HEAP8[$863+2|0]=($858>>16)&255;HEAP8[$863+3|0]=$858>>24;
        $864 = (($862) + 4)|0;
        $865 = $864;
        HEAP8[$865]=$861&255;HEAP8[$865+1|0]=($861>>8)&255;HEAP8[$865+2|0]=($861>>16)&255;HEAP8[$865+3|0]=$861>>24;
        HEAP32[$21>>2] = $pc$020;
        $866 = $sp$016&65535;
        HEAP16[$23>>1] = $866;
        $867 = $flags$012&255;
        HEAP8[$26] = $867;
        HEAP32[$7>>2] = $4;
        dest=$8+0|0; src=$6+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));;
        $868 = HEAP32[$35>>2]|0;
        $869 = ($868|0)>(0);
        STACKTOP = sp;return ($869|0);
       }
       $$sum24 = (($32) + 1)|0;
       $39 = $34&255;
       $40 = (($31) + ($$sum24)|0);
       $41 = $1;
       $42 = (($41) + 4|0);
       $43 = (($9) + 6|0);
       $44 = ($this);
       $45 = (($44) + 88|0);
       $46 = $45;
       $47 = ($this);
       $48 = $1;
       $49 = $1;
       $50 = $1;
       $51 = (($50) + 4|0);
       $52 = $1;
       $53 = (($52) + 2|0);
       $54 = $1;
       $55 = (($54) + 4|0);
       $56 = $1;
       $57 = (($56) + 4|0);
       $58 = ($this);
       $59 = (($58) + -336|0);
       $60 = $59;
       $61 = (($9) + 6|0);
       $62 = $1;
       $63 = $1;
       $64 = (($63) + 4|0);
       $65 = $1;
       $66 = ($this);
       $67 = (($66) + 88|0);
       $68 = $67;
       $69 = ($this);
       $70 = ($this);
       $71 = (($70) + -336|0);
       $72 = $71;
       $73 = ($this);
       $74 = (($73) + -336|0);
       $75 = $74;
       $76 = ($this);
       $77 = (($76) + -336|0);
       $78 = $77;
       $79 = ($this);
       $80 = (($79) + -336|0);
       $81 = $80;
       $82 = $1;
       $83 = (($82) + 4|0);
       $84 = ($this);
       $85 = (($84) + 88|0);
       $86 = $85;
       $87 = ($this);
       $88 = $1;
       $89 = $1;
       $90 = (($89) + 4|0);
       $91 = ($this);
       $92 = (($91) + -336|0);
       $93 = $92;
       $94 = ($this);
       $95 = (($94) + -336|0);
       $96 = $95;
       $97 = $1;
       $98 = $1;
       $99 = $1;
       $100 = (($99) + 4|0);
       $101 = ($this);
       $102 = (($101) + -336|0);
       $103 = $102;
       $104 = $1;
       $105 = $1;
       $106 = (($105) + 4|0);
       $107 = ($this);
       $108 = (($107) + -336|0);
       $109 = $108;
       $110 = $1;
       $111 = $1;
       $112 = (($111) + 4|0);
       $113 = ($this);
       $114 = (($113) + -336|0);
       $115 = $114;
       $116 = $1;
       $117 = $1;
       $118 = $1;
       $119 = (($118) + 4|0);
       $120 = ($this);
       $121 = (($120) + -336|0);
       $122 = $121;
       $123 = (($9) + 6|0);
       $124 = (($9) + 6|0);
       $125 = $1;
       $126 = $1;
       $127 = ($this);
       $128 = (($127) + -336|0);
       $129 = $128;
       $130 = ($this);
       $131 = (($130) + -336|0);
       $132 = $131;
       $133 = $1;
       $134 = (($133) + 4|0);
       $135 = $1;
       $136 = (($9) + 6|0);
       $137 = ($this);
       $138 = (($137) + -336|0);
       $139 = $138;
       $140 = $1;
       $141 = $1;
       $142 = (($141) + 4|0);
       $143 = $1;
       $144 = $1;
       $145 = (($144) + 2|0);
       $146 = $1;
       $147 = (($146) + 4|0);
       $148 = (($9) + 1|0);
       $149 = $1;
       $150 = (($9) + 3|0);
       $151 = (($9) + 2|0);
       $152 = (($9) + 5|0);
       $153 = (($9) + 4|0);
       $154 = $1;
       $155 = (($154) + 4|0);
       $156 = ($this);
       $157 = (($156) + -336|0);
       $158 = $157;
       $159 = (($9) + 6|0);
       $160 = $1;
       $161 = $1;
       $162 = $1;
       $163 = (($162) + 4|0);
       $164 = ($this);
       $165 = (($164) + -336|0);
       $166 = $165;
       $167 = ($this);
       $168 = (($167) + -336|0);
       $169 = $168;
       $170 = $1;
       $171 = $1;
       $172 = (($171) + 4|0);
       $173 = ($this);
       $174 = (($173) + -336|0);
       $175 = $174;
       $176 = ($this);
       $177 = (($176) + -336|0);
       $178 = $177;
       $179 = $1;
       $180 = $1;
       $181 = (($180) + 4|0);
       $182 = $1;
       $183 = (($182) + 4|0);
       $184 = $1;
       $185 = $1;
       $186 = (($185) + 4|0);
       $187 = ($this);
       $188 = (($187) + -336|0);
       $189 = $188;
       $190 = (($9) + 6|0);
       $191 = $1;
       $192 = $1;
       $193 = (($192) + 4|0);
       $194 = ($this);
       $195 = (($194) + -336|0);
       $196 = $195;
       $197 = $1;
       $198 = $1;
       $199 = (($198) + 4|0);
       $200 = ($this);
       $201 = (($200) + -336|0);
       $202 = $201;
       $203 = (($9) + 6|0);
       $204 = $1;
       $205 = $1;
       $206 = (($205) + 4|0);
       $207 = ($this);
       $208 = (($207) + -336|0);
       $209 = $208;
       $210 = $1;
       $211 = $1;
       $212 = (($9) + 6|0);
       $213 = (($9) + 6|0);
       $214 = $1;
       $215 = (($214) + 4|0);
       $216 = ($this);
       $217 = (($216) + -336|0);
       $218 = $217;
       $219 = $1;
       $220 = (($9) + 6|0);
       $221 = (($9) + 6|0);
       $222 = $1;
       $223 = (($222) + 4|0);
       $224 = ($this);
       $225 = (($224) + -336|0);
       $226 = $225;
       $227 = $1;
       $228 = (($9) + 6|0);
       $229 = $1;
       $230 = (($229) + 4|0);
       $231 = ($this);
       $232 = (($231) + -336|0);
       $233 = $232;
       $234 = (($9) + 6|0);
       $235 = $1;
       $236 = (($9) + 7|0);
       $237 = ($this);
       $238 = (($237) + -336|0);
       $239 = $238;
       $240 = ($this);
       $241 = (($240) + -336|0);
       $242 = $241;
       $243 = $1;
       $244 = $1;
       $245 = (($244) + 2|0);
       $246 = $1;
       $247 = (($246) + 4|0);
       $248 = (($9) + 6|0);
       $249 = (($this) + 16|0);
       $250 = $1;
       $251 = (($250) + 4|0);
       $252 = (($9) + 6|0);
       $$in32 = $22;$253 = $39;$254 = $34;$255 = $40;$flags$025 = $28;$sp$026 = $25;
       L4: while(1) {
        $256 = (($$in32) + 1)|0;
        $257 = HEAP8[$255]|0;
        $258 = $257&255;
        L6: do {
         switch ($253|0) {
         case 32:  {
          $259 = (($$in32) + 2)|0;
          $260 = $flags$025 & 128;
          $261 = ($260|0)==(0);
          if (!($261)) {
           $flags$0$be = $flags$025;$pc$0$be = $259;$sp$0$be = $sp$026;
           break L6;
          }
          $262 = $257 << 24 >> 24;
          $263 = (($262) + ($259))|0;
          $264 = $263 & 65535;
          $flags$0$be = $flags$025;$pc$0$be = $264;$sp$0$be = $sp$026;
          break;
         }
         case 251: case 243: case 127: case 109: case 100: case 91: case 82: case 73: case 64: case 0:  {
          $flags$0$be = $flags$025;$pc$0$be = $256;$sp$0$be = $sp$026;
          break;
         }
         case 33:  {
          $276 = (__Z8get_le16PKv($255)|0);
          $277 = $276&65535;
          HEAP16[$42>>1] = $277;
          $278 = (($$in32) + 3)|0;
          $flags$0$be = $flags$025;$pc$0$be = $278;$sp$0$be = $sp$026;
          break;
         }
         case 40:  {
          $279 = (($$in32) + 2)|0;
          $280 = $flags$025 & 128;
          $281 = ($280|0)==(0);
          if ($281) {
           $flags$0$be = $flags$025;$pc$0$be = $279;$sp$0$be = $sp$026;
           break L6;
          }
          $282 = $257 << 24 >> 24;
          $283 = (($282) + ($279))|0;
          $284 = $283 & 65535;
          $flags$0$be = $flags$025;$pc$0$be = $284;$sp$0$be = $sp$026;
          break;
         }
         case 240:  {
          $285 = $258 | 65280;
          $286 = (($$in32) + 2)|0;
          $pc$1 = $286;$temp$0 = $285;
          label = 17;
          break;
         }
         case 242:  {
          $287 = HEAP8[$48]|0;
          $288 = $287&255;
          $289 = $288 | 65280;
          $pc$1 = $256;$temp$0 = $289;
          label = 17;
          break;
         }
         case 10:  {
          $290 = HEAP16[$49>>1]|0;
          $291 = $290&65535;
          $pc$1 = $256;$temp$0 = $291;
          label = 17;
          break;
         }
         case 58:  {
          $292 = HEAP16[$51>>1]|0;
          $293 = $292&65535;
          $294 = (($293) + 65535)|0;
          $295 = $294&65535;
          HEAP16[$51>>1] = $295;
          $pc$1 = $256;$temp$0 = $293;
          label = 17;
          break;
         }
         case 26:  {
          $296 = HEAP16[$53>>1]|0;
          $297 = $296&65535;
          $pc$1 = $256;$temp$0 = $297;
          label = 17;
          break;
         }
         case 42:  {
          $298 = HEAP16[$55>>1]|0;
          $299 = $298&65535;
          $300 = (($299) + 1)|0;
          $301 = $300&65535;
          HEAP16[$55>>1] = $301;
          $pc$1 = $256;$temp$0 = $299;
          label = 17;
          break;
         }
         case 250:  {
          $302 = (__Z8get_le16PKv($255)|0);
          $303 = (($$in32) + 3)|0;
          $pc$1 = $303;$temp$0 = $302;
          label = 17;
          break;
         }
         case 190:  {
          $320 = HEAP16[$57>>1]|0;
          $321 = $320&65535;
          $322 = (__ZN7Gbs_Emu8cpu_readEj($60,$321)|0);
          $data$0 = $322;$pc$2 = $256;
          label = 22;
          break;
         }
         case 189: case 188: case 187: case 186: case 185: case 184:  {
          $323 = $253 & 7;
          $324 = $323 ^ 1;
          $325 = (($62) + ($324)|0);
          $326 = HEAP8[$325]|0;
          $327 = $326&255;
          $data$0 = $327;$pc$2 = $256;
          label = 22;
          break;
         }
         case 254:  {
          $328 = (($$in32) + 2)|0;
          $data$0 = $258;$pc$2 = $328;
          label = 22;
          break;
         }
         case 126: case 110: case 102: case 94: case 86: case 78: case 70:  {
          $341 = HEAP16[$64>>1]|0;
          $342 = $341&65535;
          $343 = $342 & 8191;
          $344 = $342 >>> 13;
          $345 = (($s) + ($344<<2)|0);
          $346 = HEAP32[$345>>2]|0;
          $347 = (($346) + ($343)|0);
          $348 = HEAP8[$347]|0;
          $349 = $253 >>> 3;
          $350 = $349 & 7;
          $351 = $350 ^ 1;
          $352 = (($65) + ($351)|0);
          HEAP8[$352] = $348;
          $353 = (($342) + -65296)|0;
          $354 = ($353>>>0)<(48);
          if (!($354)) {
           $flags$0$be = $flags$025;$pc$0$be = $256;$sp$0$be = $sp$026;
           break L6;
          }
          $355 = (($69) + 24800|0);
          $356 = $355;
          $357 = HEAP32[$68>>2]|0;
          $358 = HEAP32[$35>>2]|0;
          $359 = $358 << 2;
          $360 = (($357) - ($359))|0;
          $361 = (__ZN6Gb_Apu13read_registerEij($356,$360,$342)|0);
          $362 = $361&255;
          HEAP8[$352] = $362;
          $flags$0$be = $flags$025;$pc$0$be = $256;$sp$0$be = $sp$026;
          break;
         }
         case 196:  {
          $363 = (($$in32) + 3)|0;
          $364 = $flags$025 & 128;
          $365 = ($364|0)==(0);
          if ($365) {
           $pc$4 = $363;
           label = 27;
          } else {
           $flags$0$be = $flags$025;$pc$0$be = $363;$sp$0$be = $sp$026;
          }
          break;
         }
         case 205:  {
          $pc$5 = $256;
          label = 28;
          break;
         }
         case 200:  {
          $375 = $flags$025 & 128;
          $376 = ($375|0)==(0);
          if ($376) {
           $flags$0$be = $flags$025;$pc$0$be = $256;$sp$0$be = $sp$026;
          } else {
           label = 31;
          }
          break;
         }
         case 217: case 201:  {
          label = 31;
          break;
         }
         case 203:  {
          $384 = (($$in32) + 2)|0;
          L27: do {
           switch ($258|0) {
           case 126: case 118: case 110: case 102: case 94: case 86: case 78: case 70:  {
            $385 = HEAP16[$83>>1]|0;
            $386 = $385&65535;
            $387 = $386 & 8191;
            $388 = $386 >>> 13;
            $389 = (($s) + ($388<<2)|0);
            $390 = HEAP32[$389>>2]|0;
            $391 = (($390) + ($387)|0);
            $392 = HEAP8[$391]|0;
            $393 = $392&255;
            $394 = (($386) + -65296)|0;
            $395 = ($394>>>0)<(48);
            if (!($395)) {
             $temp2$0 = $393;
             label = 36;
             break L27;
            }
            $396 = (($87) + 24800|0);
            $397 = $396;
            $398 = HEAP32[$86>>2]|0;
            $399 = HEAP32[$35>>2]|0;
            $400 = $399 << 2;
            $401 = (($398) - ($400))|0;
            $402 = (__ZN6Gb_Apu13read_registerEij($397,$401,$386)|0);
            $temp2$0 = $402;
            label = 36;
            break;
           }
           case 127: case 125: case 124: case 123: case 122: case 121: case 120: case 119: case 117: case 116: case 115: case 114: case 113: case 112: case 111: case 109: case 108: case 107: case 106: case 105: case 104: case 103: case 101: case 100: case 99: case 98: case 97: case 96: case 95: case 93: case 92: case 91: case 90: case 89: case 88: case 87: case 85: case 84: case 83: case 82: case 81: case 80: case 79: case 77: case 76: case 75: case 74: case 73: case 72: case 71: case 69: case 68: case 67: case 66: case 65: case 64:  {
            $403 = $258 & 7;
            $404 = $403 ^ 1;
            $405 = (($88) + ($404)|0);
            $406 = HEAP8[$405]|0;
            $407 = $406&255;
            $temp2$0 = $407;
            label = 36;
            break;
           }
           case 254: case 246: case 238: case 230: case 222: case 214: case 206: case 198: case 190: case 182: case 174: case 166: case 158: case 150: case 142: case 134:  {
            $416 = HEAP16[$90>>1]|0;
            $417 = $416&65535;
            $418 = (__ZN7Gbs_Emu8cpu_readEj($96,$417)|0);
            $419 = $258 >>> 3;
            $420 = $419 & 7;
            $421 = 1 << $420;
            $422 = $421 ^ -1;
            $423 = $418 & $422;
            $424 = $258 & 64;
            $425 = ($424|0)==(0);
            $$1 = $425 ? 0 : $421;
            $426 = HEAP16[$90>>1]|0;
            $427 = $426&65535;
            $428 = $423 | $$1;
            __ZN7Gbs_Emu9cpu_writeEji($93,$427,$428);
            $flags$0$be = $flags$025;$pc$0$be = $384;$sp$0$be = $sp$026;
            break L6;
            break;
           }
           case 255: case 253: case 252: case 251: case 250: case 249: case 248: case 247: case 245: case 244: case 243: case 242: case 241: case 240: case 239: case 237: case 236: case 235: case 234: case 233: case 232: case 231: case 229: case 228: case 227: case 226: case 225: case 224: case 223: case 221: case 220: case 219: case 218: case 217: case 216: case 215: case 213: case 212: case 211: case 210: case 209: case 208: case 207: case 205: case 204: case 203: case 202: case 201: case 200: case 199: case 197: case 196: case 195: case 194: case 193: case 192:  {
            $429 = $258 >>> 3;
            $430 = $429 & 7;
            $431 = 1 << $430;
            $432 = $258 & 7;
            $433 = $432 ^ 1;
            $434 = (($97) + ($433)|0);
            $435 = HEAP8[$434]|0;
            $436 = $435&255;
            $437 = $436 | $431;
            $438 = $437&255;
            HEAP8[$434] = $438;
            $flags$0$be = $flags$025;$pc$0$be = $384;$sp$0$be = $sp$026;
            break L6;
            break;
           }
           case 191: case 189: case 188: case 187: case 186: case 185: case 184: case 183: case 181: case 180: case 179: case 178: case 177: case 176: case 175: case 173: case 172: case 171: case 170: case 169: case 168: case 167: case 165: case 164: case 163: case 162: case 161: case 160: case 159: case 157: case 156: case 155: case 154: case 153: case 152: case 151: case 149: case 148: case 147: case 146: case 145: case 144: case 143: case 141: case 140: case 139: case 138: case 137: case 136: case 135: case 133: case 132: case 131: case 130: case 129: case 128:  {
            $439 = $258 >>> 3;
            $440 = $439 & 7;
            $441 = 1 << $440;
            $442 = $441 ^ 255;
            $443 = $258 & 7;
            $444 = $443 ^ 1;
            $445 = (($98) + ($444)|0);
            $446 = HEAP8[$445]|0;
            $447 = $446&255;
            $448 = $447 & $442;
            $449 = $448&255;
            HEAP8[$445] = $449;
            $flags$0$be = $flags$025;$pc$0$be = $384;$sp$0$be = $sp$026;
            break L6;
            break;
           }
           case 54:  {
            $450 = HEAP16[$100>>1]|0;
            $451 = $450&65535;
            $452 = (__ZN7Gbs_Emu8cpu_readEj($103,$451)|0);
            $temp6$0 = $452;
            label = 42;
            break;
           }
           case 55: case 53: case 52: case 51: case 50: case 49: case 48:  {
            $453 = $258 & 7;
            $454 = $453 ^ 1;
            $455 = (($104) + ($454)|0);
            $456 = HEAP8[$455]|0;
            $457 = $456&255;
            $temp6$0 = $457;
            label = 42;
            break;
           }
           case 38: case 22: case 6:  {
            $461 = HEAP16[$106>>1]|0;
            $462 = $461&65535;
            $463 = (__ZN7Gbs_Emu8cpu_readEj($109,$462)|0);
            $data$5 = $258;$op$1 = $463;$pc$7 = $384;
            label = 51;
            break L6;
            break;
           }
           case 23: case 21: case 20: case 19: case 18: case 17: case 16: case 7: case 5: case 4: case 3: case 2: case 1: case 0: case 39: case 37: case 36: case 35: case 34: case 33: case 32:  {
            $464 = $258 & 7;
            $465 = $464 ^ 1;
            $466 = (($110) + ($465)|0);
            $467 = HEAP8[$466]|0;
            $468 = $467&255;
            $data$5 = $258;$op$1 = $468;$pc$7 = $384;
            label = 51;
            break L6;
            break;
           }
           case 62:  {
            $469 = (($258) + 16)|0;
            $data$3 = $469;
            label = 46;
            break;
           }
           case 46: case 14: case 30:  {
            $data$3 = $258;
            label = 46;
            break;
           }
           case 63: case 61: case 60: case 59: case 58: case 57: case 56:  {
            $473 = (($258) + 16)|0;
            $data$4 = $473;
            label = 48;
            break;
           }
           case 47: case 45: case 44: case 43: case 42: case 41: case 40: case 15: case 13: case 12: case 11: case 10: case 9: case 8: case 31: case 29: case 28: case 27: case 26: case 25: case 24:  {
            $data$4 = $258;
            label = 48;
            break;
           }
           default: {
            label = 49;
            break L4;
           }
           }
          } while(0);
          if ((label|0) == 36) {
           label = 0;
           $408 = $258 >>> 3;
           $409 = $408 & 7;
           $410 = $409 ^ 7;
           $411 = $flags$025 & -225;
           $412 = $411 | 160;
           $413 = $temp2$0 << $410;
           $414 = $413 & 128;
           $415 = $414 ^ $412;
           $flags$0$be = $415;$pc$0$be = $384;$sp$0$be = $sp$026;
           break L6;
          }
          else if ((label|0) == 42) {
           label = 0;
           $458 = $temp6$0 >> 4;
           $459 = $temp6$0 << 4;
           $460 = $458 | $459;
           $data$7 = $258;$flags$1 = 0;$op$4 = $460;$pc$9 = $384;
           label = 58;
           break L6;
          }
          else if ((label|0) == 46) {
           label = 0;
           $470 = HEAP16[$112>>1]|0;
           $471 = $470&65535;
           $472 = (__ZN7Gbs_Emu8cpu_readEj($115,$471)|0);
           $data$6 = $data$3;$op$2 = $472;$pc$8 = $384;
           label = 54;
           break L6;
          }
          else if ((label|0) == 48) {
           label = 0;
           $474 = $data$4 & 7;
           $475 = $474 ^ 1;
           $476 = (($116) + ($475)|0);
           $477 = HEAP8[$476]|0;
           $478 = $477&255;
           $data$6 = $data$4;$op$2 = $478;$pc$8 = $384;
           label = 54;
           break L6;
          }
          break;
         }
         case 23: case 7:  {
          $479 = HEAP8[$123]|0;
          $480 = $479&255;
          $data$5 = $253;$op$1 = $480;$pc$7 = $256;
          label = 51;
          break;
         }
         case 31: case 15:  {
          $492 = HEAP8[$124]|0;
          $493 = $492&255;
          $data$6 = $253;$op$2 = $493;$pc$8 = $256;
          label = 54;
          break;
         }
         case 119: case 117: case 116: case 115: case 114: case 113: case 112:  {
          $515 = $253 & 7;
          $516 = $515 ^ 1;
          $517 = (($125) + ($516)|0);
          $518 = HEAP8[$517]|0;
          $519 = $518&255;
          $flags$3 = $flags$025;$op$5 = $519;$pc$10 = $256;
          label = 61;
          break;
         }
         case 125: case 124: case 123: case 122: case 121: case 120: case 111: case 108: case 107: case 106: case 105: case 104: case 103: case 101: case 99: case 98: case 97: case 96: case 95: case 93: case 92: case 90: case 89: case 88: case 87: case 85: case 84: case 83: case 81: case 80: case 79: case 77: case 76: case 75: case 74: case 72: case 71: case 69: case 68: case 67: case 66: case 65:  {
          $523 = $253 & 7;
          $524 = $523 ^ 1;
          $525 = (($126) + ($524)|0);
          $526 = HEAP8[$525]|0;
          $527 = $253 >>> 3;
          $528 = $527 & 7;
          $529 = $528 ^ 1;
          $530 = (($126) + ($529)|0);
          HEAP8[$530] = $526;
          $flags$0$be = $flags$025;$pc$0$be = $256;$sp$0$be = $sp$026;
          break;
         }
         case 8:  {
          $531 = (__Z8get_le16PKv($255)|0);
          $532 = (($$in32) + 3)|0;
          $533 = $sp$026 & 255;
          __ZN7Gbs_Emu9cpu_writeEji($129,$531,$533);
          $534 = (($531) + 1)|0;
          $535 = $sp$026 >>> 8;
          __ZN7Gbs_Emu9cpu_writeEji($132,$534,$535);
          $flags$0$be = $flags$025;$pc$0$be = $532;$sp$0$be = $sp$026;
          break;
         }
         case 249:  {
          $536 = HEAP16[$134>>1]|0;
          $537 = $536&65535;
          $flags$0$be = $flags$025;$pc$0$be = $256;$sp$0$be = $537;
          break;
         }
         case 49:  {
          $538 = (__Z8get_le16PKv($255)|0);
          $539 = (($$in32) + 3)|0;
          $flags$0$be = $flags$025;$pc$0$be = $539;$sp$0$be = $538;
          break;
         }
         case 17: case 1:  {
          $540 = (__Z8get_le16PKv($255)|0);
          $541 = $540&65535;
          $542 = $253 >>> 4;
          $543 = (($135) + ($542<<1)|0);
          HEAP16[$543>>1] = $541;
          $544 = (($$in32) + 3)|0;
          $flags$0$be = $flags$025;$pc$0$be = $544;$sp$0$be = $sp$026;
          break;
         }
         case 224:  {
          $545 = $258 | 65280;
          $546 = (($$in32) + 2)|0;
          $pc$11 = $546;$temp7$0 = $545;
          label = 74;
          break;
         }
         case 226:  {
          $547 = HEAP8[$140]|0;
          $548 = $547&255;
          $549 = $548 | 65280;
          $pc$11 = $256;$temp7$0 = $549;
          label = 74;
          break;
         }
         case 50:  {
          $550 = HEAP16[$142>>1]|0;
          $551 = $550&65535;
          $552 = (($551) + 65535)|0;
          $553 = $552&65535;
          HEAP16[$142>>1] = $553;
          $pc$11 = $256;$temp7$0 = $551;
          label = 74;
          break;
         }
         case 2:  {
          $554 = HEAP16[$143>>1]|0;
          $555 = $554&65535;
          $pc$11 = $256;$temp7$0 = $555;
          label = 74;
          break;
         }
         case 18:  {
          $556 = HEAP16[$145>>1]|0;
          $557 = $556&65535;
          $pc$11 = $256;$temp7$0 = $557;
          label = 74;
          break;
         }
         case 34:  {
          $558 = HEAP16[$147>>1]|0;
          $559 = $558&65535;
          $560 = (($559) + 1)|0;
          $561 = $560&65535;
          HEAP16[$147>>1] = $561;
          $pc$11 = $256;$temp7$0 = $559;
          label = 74;
          break;
         }
         case 234:  {
          $562 = (__Z8get_le16PKv($255)|0);
          $563 = (($$in32) + 3)|0;
          $pc$11 = $563;$temp7$0 = $562;
          label = 74;
          break;
         }
         case 6:  {
          HEAP8[$148] = $257;
          $566 = (($$in32) + 2)|0;
          $flags$0$be = $flags$025;$pc$0$be = $566;$sp$0$be = $sp$026;
          break;
         }
         case 14:  {
          HEAP8[$149] = $257;
          $567 = (($$in32) + 2)|0;
          $flags$0$be = $flags$025;$pc$0$be = $567;$sp$0$be = $sp$026;
          break;
         }
         case 22:  {
          HEAP8[$150] = $257;
          $568 = (($$in32) + 2)|0;
          $flags$0$be = $flags$025;$pc$0$be = $568;$sp$0$be = $sp$026;
          break;
         }
         case 30:  {
          HEAP8[$151] = $257;
          $569 = (($$in32) + 2)|0;
          $flags$0$be = $flags$025;$pc$0$be = $569;$sp$0$be = $sp$026;
          break;
         }
         case 38:  {
          HEAP8[$152] = $257;
          $570 = (($$in32) + 2)|0;
          $flags$0$be = $flags$025;$pc$0$be = $570;$sp$0$be = $sp$026;
          break;
         }
         case 46:  {
          HEAP8[$153] = $257;
          $571 = (($$in32) + 2)|0;
          $flags$0$be = $flags$025;$pc$0$be = $571;$sp$0$be = $sp$026;
          break;
         }
         case 54:  {
          $572 = HEAP16[$155>>1]|0;
          $573 = $572&65535;
          __ZN7Gbs_Emu9cpu_writeEji($158,$573,$258);
          $574 = (($$in32) + 2)|0;
          $flags$0$be = $flags$025;$pc$0$be = $574;$sp$0$be = $sp$026;
          break;
         }
         case 62:  {
          HEAP8[$159] = $257;
          $575 = (($$in32) + 2)|0;
          $flags$0$be = $flags$025;$pc$0$be = $575;$sp$0$be = $sp$026;
          break;
         }
         case 35: case 19: case 3:  {
          $576 = $253 >>> 4;
          $577 = (($160) + ($576<<1)|0);
          $578 = HEAP16[$577>>1]|0;
          $579 = (($578) + 1)<<16>>16;
          HEAP16[$577>>1] = $579;
          $flags$0$be = $flags$025;$pc$0$be = $256;$sp$0$be = $sp$026;
          break;
         }
         case 51:  {
          $580 = (($sp$026) + 1)|0;
          $581 = $580 & 65535;
          $flags$0$be = $flags$025;$pc$0$be = $256;$sp$0$be = $581;
          break;
         }
         case 43: case 27: case 11:  {
          $582 = $253 >>> 4;
          $583 = (($161) + ($582<<1)|0);
          $584 = HEAP16[$583>>1]|0;
          $585 = (($584) + -1)<<16>>16;
          HEAP16[$583>>1] = $585;
          $flags$0$be = $flags$025;$pc$0$be = $256;$sp$0$be = $sp$026;
          break;
         }
         case 59:  {
          $586 = (($sp$026) + 65535)|0;
          $587 = $586 & 65535;
          $flags$0$be = $flags$025;$pc$0$be = $256;$sp$0$be = $587;
          break;
         }
         case 52:  {
          $588 = HEAP16[$163>>1]|0;
          $589 = $588&65535;
          $590 = (__ZN7Gbs_Emu8cpu_readEj($166,$589)|0);
          $591 = (($590) + 1)|0;
          $592 = $591 & 255;
          __ZN7Gbs_Emu9cpu_writeEji($169,$589,$592);
          $data$8 = $591;
          label = 89;
          break;
         }
         case 60: case 44: case 36: case 28: case 20: case 12: case 4:  {
          $593 = $253 >>> 3;
          $594 = $593 & 7;
          $595 = $594 ^ 1;
          $596 = (($170) + ($595)|0);
          $597 = HEAP8[$596]|0;
          $598 = $597&255;
          $599 = (($598) + 1)|0;
          $600 = $599&255;
          HEAP8[$596] = $600;
          $data$8 = $599;
          label = 89;
          break;
         }
         case 53:  {
          $609 = HEAP16[$172>>1]|0;
          $610 = $609&65535;
          $611 = (__ZN7Gbs_Emu8cpu_readEj($175,$610)|0);
          $612 = (($611) + -1)|0;
          $613 = $612 & 255;
          __ZN7Gbs_Emu9cpu_writeEji($178,$610,$613);
          $data$9 = $612;
          label = 92;
          break;
         }
         case 61: case 45: case 37: case 29: case 21: case 13: case 5:  {
          $614 = $253 >>> 3;
          $615 = $614 & 7;
          $616 = $615 ^ 1;
          $617 = (($179) + ($616)|0);
          $618 = HEAP8[$617]|0;
          $619 = $618&255;
          $620 = (($619) + -1)|0;
          $621 = $620&255;
          HEAP8[$617] = $621;
          $data$9 = $620;
          label = 92;
          break;
         }
         case 248:  {
          $629 = $257 << 24 >> 24;
          $630 = (($$in32) + 2)|0;
          $631 = (($629) + ($sp$026))|0;
          $flags$4 = 0;$pc$12 = $630;$prev$0 = $sp$026;$temp8$1 = $631;
          label = 97;
          break;
         }
         case 232:  {
          $632 = $257 << 24 >> 24;
          $633 = (($$in32) + 2)|0;
          $634 = (($632) + ($sp$026))|0;
          $635 = $634 & 65535;
          $flags$5 = 0;$pc$13 = $633;$prev$1 = $sp$026;$sp$1 = $635;$temp8$2 = $634;
          label = 98;
          break;
         }
         case 41: case 25: case 9:  {
          $636 = $253 >>> 4;
          $637 = (($184) + ($636<<1)|0);
          $638 = HEAP16[$637>>1]|0;
          $639 = $638&65535;
          $temp8$0 = $639;
          label = 96;
          break;
         }
         case 57:  {
          $temp8$0 = $sp$026;
          label = 96;
          break;
         }
         case 134:  {
          $654 = HEAP16[$186>>1]|0;
          $655 = $654&65535;
          $656 = (__ZN7Gbs_Emu8cpu_readEj($189,$655)|0);
          $data$10 = $656;$pc$14 = $256;
          label = 102;
          break;
         }
         case 135: case 133: case 132: case 131: case 130: case 129: case 128:  {
          $657 = $253 & 7;
          $658 = $657 ^ 1;
          $659 = (($191) + ($658)|0);
          $660 = HEAP8[$659]|0;
          $661 = $660&255;
          $data$10 = $661;$pc$14 = $256;
          label = 102;
          break;
         }
         case 198:  {
          $662 = (($$in32) + 2)|0;
          $data$10 = $258;$pc$14 = $662;
          label = 102;
          break;
         }
         case 142:  {
          $677 = HEAP16[$193>>1]|0;
          $678 = $677&65535;
          $679 = (__ZN7Gbs_Emu8cpu_readEj($196,$678)|0);
          $data$11 = $679;$pc$15 = $256;
          label = 106;
          break;
         }
         case 143: case 141: case 140: case 139: case 138: case 137: case 136:  {
          $680 = $253 & 7;
          $681 = $680 ^ 1;
          $682 = (($197) + ($681)|0);
          $683 = HEAP8[$682]|0;
          $684 = $683&255;
          $data$11 = $684;$pc$15 = $256;
          label = 106;
          break;
         }
         case 206:  {
          $685 = (($$in32) + 2)|0;
          $data$11 = $258;$pc$15 = $685;
          label = 106;
          break;
         }
         case 150:  {
          $690 = HEAP16[$199>>1]|0;
          $691 = $690&65535;
          $692 = (__ZN7Gbs_Emu8cpu_readEj($202,$691)|0);
          $data$12 = $692;$pc$16 = $256;
          label = 110;
          break;
         }
         case 151: case 149: case 148: case 147: case 146: case 145: case 144:  {
          $693 = $253 & 7;
          $694 = $693 ^ 1;
          $695 = (($204) + ($694)|0);
          $696 = HEAP8[$695]|0;
          $697 = $696&255;
          $data$12 = $697;$pc$16 = $256;
          label = 110;
          break;
         }
         case 214:  {
          $698 = (($$in32) + 2)|0;
          $data$12 = $258;$pc$16 = $698;
          label = 110;
          break;
         }
         case 158:  {
          $703 = HEAP16[$206>>1]|0;
          $704 = $703&65535;
          $705 = (__ZN7Gbs_Emu8cpu_readEj($209,$704)|0);
          $data$13 = $705;$pc$17 = $256;
          label = 114;
          break;
         }
         case 159: case 157: case 156: case 155: case 154: case 153: case 152:  {
          $706 = $253 & 7;
          $707 = $706 ^ 1;
          $708 = (($210) + ($707)|0);
          $709 = HEAP8[$708]|0;
          $710 = $709&255;
          $data$13 = $710;$pc$17 = $256;
          label = 114;
          break;
         }
         case 222:  {
          $711 = (($$in32) + 2)|0;
          $data$13 = $258;$pc$17 = $711;
          label = 114;
          break;
         }
         case 165: case 164: case 163: case 162: case 161: case 160:  {
          $716 = $253 & 7;
          $717 = $716 ^ 1;
          $718 = (($211) + ($717)|0);
          $719 = HEAP8[$718]|0;
          $720 = $719&255;
          $data$15 = $720;$pc$19 = $256;
          label = 118;
          break;
         }
         case 166:  {
          $721 = HEAP16[$215>>1]|0;
          $722 = $721&65535;
          $723 = (__ZN7Gbs_Emu8cpu_readEj($218,$722)|0);
          $data$14 = $723;$pc$18 = $$in32;
          label = 117;
          break;
         }
         case 230:  {
          $data$14 = $258;$pc$18 = $256;
          label = 117;
          break;
         }
         case 167:  {
          $pc$20 = $256;
          label = 119;
          break;
         }
         case 181: case 180: case 179: case 178: case 177: case 176:  {
          $735 = $253 & 7;
          $736 = $735 ^ 1;
          $737 = (($219) + ($736)|0);
          $738 = HEAP8[$737]|0;
          $739 = $738&255;
          $data$17 = $739;$pc$22 = $256;
          label = 123;
          break;
         }
         case 182:  {
          $740 = HEAP16[$223>>1]|0;
          $741 = $740&65535;
          $742 = (__ZN7Gbs_Emu8cpu_readEj($226,$741)|0);
          $data$16 = $742;$pc$21 = $$in32;
          label = 122;
          break;
         }
         case 246:  {
          $data$16 = $258;$pc$21 = $256;
          label = 122;
          break;
         }
         case 183:  {
          $pc$23 = $256;
          label = 124;
          break;
         }
         case 173: case 172: case 171: case 170: case 169: case 168:  {
          $753 = $253 & 7;
          $754 = $753 ^ 1;
          $755 = (($227) + ($754)|0);
          $756 = HEAP8[$755]|0;
          $757 = $756&255;
          $data$19 = $757;$pc$25 = $256;
          label = 128;
          break;
         }
         case 174:  {
          $758 = HEAP16[$230>>1]|0;
          $759 = $758&65535;
          $760 = (__ZN7Gbs_Emu8cpu_readEj($233,$759)|0);
          $data$18 = $760;$pc$24 = $$in32;
          label = 127;
          break;
         }
         case 238:  {
          $data$18 = $258;$pc$24 = $256;
          label = 127;
          break;
         }
         case 175:  {
          HEAP8[$234] = 0;
          $flags$0$be = 128;$pc$0$be = $256;$sp$0$be = $sp$026;
          break;
         }
         case 225: case 209: case 193: case 241:  {
          $769 = (__ZN7Gbs_Emu8cpu_readEj($239,$sp$026)|0);
          $770 = (($sp$026) + 1)|0;
          $771 = (__ZN7Gbs_Emu8cpu_readEj($242,$770)|0);
          $772 = $771 << 8;
          $773 = (($772) + ($769))|0;
          $774 = $773&65535;
          $775 = $253 >>> 4;
          $776 = $775 & 3;
          $777 = (($235) + ($776<<1)|0);
          HEAP16[$777>>1] = $774;
          $778 = (($sp$026) + 2)|0;
          $779 = $778 & 65535;
          $780 = ($254<<24>>24)==(-15);
          if (!($780)) {
           $flags$0$be = $flags$025;$pc$0$be = $256;$sp$0$be = $779;
           break L6;
          }
          $781 = HEAP8[$236]|0;
          $782 = $781&255;
          $783 = $782 & 240;
          $flags$0$be = $783;$pc$0$be = $256;$sp$0$be = $779;
          break;
         }
         case 197:  {
          $784 = HEAP16[$243>>1]|0;
          $785 = $784&65535;
          $data$2 = $785;$pc$6 = $256;
          label = 29;
          break;
         }
         case 213:  {
          $786 = HEAP16[$245>>1]|0;
          $787 = $786&65535;
          $data$2 = $787;$pc$6 = $256;
          label = 29;
          break;
         }
         case 229:  {
          $788 = HEAP16[$247>>1]|0;
          $789 = $788&65535;
          $data$2 = $789;$pc$6 = $256;
          label = 29;
          break;
         }
         case 245:  {
          $790 = $flags$025 << 8;
          $791 = HEAP8[$248]|0;
          $792 = $791&255;
          $793 = $792 | $790;
          $data$2 = $793;$pc$6 = $256;
          label = 29;
          break;
         }
         case 255:  {
          $794 = ($256|0)==(61454);
          if ($794) {
           $flags$012 = $flags$025;$pc$020 = $$in32;$sp$016 = $sp$026;
           label = 161;
           break L4;
          } else {
           label = 137;
          }
          break;
         }
         case 247: case 239: case 231: case 223: case 215: case 207: case 199:  {
          label = 137;
          break;
         }
         case 204:  {
          $798 = (($$in32) + 3)|0;
          $799 = $flags$025 & 128;
          $800 = ($799|0)==(0);
          if ($800) {
           $flags$0$be = $flags$025;$pc$0$be = $798;$sp$0$be = $sp$026;
          } else {
           $pc$4 = $798;
           label = 27;
          }
          break;
         }
         case 212:  {
          $801 = (($$in32) + 3)|0;
          $802 = $flags$025 & 16;
          $803 = ($802|0)==(0);
          if ($803) {
           $pc$4 = $801;
           label = 27;
          } else {
           $flags$0$be = $flags$025;$pc$0$be = $801;$sp$0$be = $sp$026;
          }
          break;
         }
         case 220:  {
          $804 = (($$in32) + 3)|0;
          $805 = $flags$025 & 16;
          $806 = ($805|0)==(0);
          if ($806) {
           $flags$0$be = $flags$025;$pc$0$be = $804;$sp$0$be = $sp$026;
          } else {
           $pc$4 = $804;
           label = 27;
          }
          break;
         }
         case 192:  {
          $807 = $flags$025 & 128;
          $808 = ($807|0)==(0);
          if ($808) {
           label = 31;
          } else {
           $flags$0$be = $flags$025;$pc$0$be = $256;$sp$0$be = $sp$026;
          }
          break;
         }
         case 208:  {
          $809 = $flags$025 & 16;
          $810 = ($809|0)==(0);
          if ($810) {
           label = 31;
          } else {
           $flags$0$be = $flags$025;$pc$0$be = $256;$sp$0$be = $sp$026;
          }
          break;
         }
         case 216:  {
          $811 = $flags$025 & 16;
          $812 = ($811|0)==(0);
          if ($812) {
           $flags$0$be = $flags$025;$pc$0$be = $256;$sp$0$be = $sp$026;
          } else {
           label = 31;
          }
          break;
         }
         case 24:  {
          $813 = (($$in32) + 2)|0;
          $814 = $257 << 24 >> 24;
          $815 = (($813) + ($814))|0;
          $816 = $815 & 65535;
          $flags$0$be = $flags$025;$pc$0$be = $816;$sp$0$be = $sp$026;
          break;
         }
         case 48:  {
          $817 = (($$in32) + 2)|0;
          $818 = $flags$025 & 16;
          $819 = ($818|0)==(0);
          if (!($819)) {
           $flags$0$be = $flags$025;$pc$0$be = $817;$sp$0$be = $sp$026;
           break L6;
          }
          $820 = $257 << 24 >> 24;
          $821 = (($820) + ($817))|0;
          $822 = $821 & 65535;
          $flags$0$be = $flags$025;$pc$0$be = $822;$sp$0$be = $sp$026;
          break;
         }
         case 56:  {
          $823 = (($$in32) + 2)|0;
          $824 = $flags$025 & 16;
          $825 = ($824|0)==(0);
          if ($825) {
           $flags$0$be = $flags$025;$pc$0$be = $823;$sp$0$be = $sp$026;
           break L6;
          }
          $826 = $257 << 24 >> 24;
          $827 = (($826) + ($823))|0;
          $828 = $827 & 65535;
          $flags$0$be = $flags$025;$pc$0$be = $828;$sp$0$be = $sp$026;
          break;
         }
         case 233:  {
          $829 = HEAP16[$251>>1]|0;
          $830 = $829&65535;
          $flags$0$be = $flags$025;$pc$0$be = $830;$sp$0$be = $sp$026;
          break;
         }
         case 195:  {
          $831 = (__Z8get_le16PKv($255)|0);
          $flags$0$be = $flags$025;$pc$0$be = $831;$sp$0$be = $sp$026;
          break;
         }
         case 194:  {
          $832 = (($$in32) + 3)|0;
          $833 = $flags$025 & 128;
          $834 = ($833|0)==(0);
          if ($834) {
           label = 153;
          } else {
           $flags$0$be = $flags$025;$pc$0$be = $832;$sp$0$be = $sp$026;
          }
          break;
         }
         case 202:  {
          $835 = (($$in32) + 3)|0;
          $836 = $flags$025 & 128;
          $837 = ($836|0)==(0);
          if ($837) {
           $flags$0$be = $flags$025;$pc$0$be = $835;$sp$0$be = $sp$026;
          } else {
           label = 153;
          }
          break;
         }
         case 210:  {
          $839 = (($$in32) + 3)|0;
          $840 = $flags$025 & 16;
          $841 = ($840|0)==(0);
          if ($841) {
           label = 153;
          } else {
           $flags$0$be = $flags$025;$pc$0$be = $839;$sp$0$be = $sp$026;
          }
          break;
         }
         case 218:  {
          $842 = (($$in32) + 3)|0;
          $843 = $flags$025 & 16;
          $844 = ($843|0)==(0);
          if ($844) {
           $flags$0$be = $flags$025;$pc$0$be = $842;$sp$0$be = $sp$026;
          } else {
           label = 153;
          }
          break;
         }
         case 47:  {
          $845 = HEAP8[$252]|0;
          $846 = $845&255;
          $847 = $846 ^ 255;
          $848 = $847&255;
          HEAP8[$252] = $848;
          $849 = $flags$025 | 96;
          $flags$0$be = $849;$pc$0$be = $256;$sp$0$be = $sp$026;
          break;
         }
         case 63:  {
          $850 = $flags$025 & -97;
          $851 = $850 ^ 16;
          $flags$0$be = $851;$pc$0$be = $256;$sp$0$be = $sp$026;
          break;
         }
         case 55:  {
          $852 = $flags$025 & -113;
          $853 = $852 | 16;
          $flags$0$be = $853;$pc$0$be = $256;$sp$0$be = $sp$026;
          break;
         }
         case 118: case 237: case 191: case 39: case 16: case 252: case 253: case 244: case 236: case 235: case 228: case 227: case 219: case 211: case 221:  {
          label = 159;
          break L4;
          break;
         }
         default: {
          label = 160;
          break L4;
         }
         }
        } while(0);
        do {
         if ((label|0) == 17) {
          label = 0;
          $304 = $temp$0 & 8191;
          $305 = $temp$0 >>> 13;
          $306 = (($s) + ($305<<2)|0);
          $307 = HEAP32[$306>>2]|0;
          $308 = (($307) + ($304)|0);
          $309 = HEAP8[$308]|0;
          HEAP8[$43] = $309;
          $310 = (($temp$0) + -65296)|0;
          $311 = ($310>>>0)<(48);
          if (!($311)) {
           $flags$0$be = $flags$025;$pc$0$be = $pc$1;$sp$0$be = $sp$026;
           break;
          }
          $312 = (($47) + 24800|0);
          $313 = $312;
          $314 = HEAP32[$46>>2]|0;
          $315 = HEAP32[$35>>2]|0;
          $316 = $315 << 2;
          $317 = (($314) - ($316))|0;
          $318 = (__ZN6Gb_Apu13read_registerEij($313,$317,$temp$0)|0);
          $319 = $318&255;
          HEAP8[$43] = $319;
          $flags$0$be = $flags$025;$pc$0$be = $pc$1;$sp$0$be = $sp$026;
         }
         else if ((label|0) == 22) {
          label = 0;
          $329 = HEAP8[$61]|0;
          $330 = $329&255;
          $331 = (($330) - ($data$0))|0;
          $data$1 = $331;$op$0 = $330;$pc$3 = $pc$2;
          label = 23;
         }
         else if ((label|0) == 27) {
          label = 0;
          $366 = (($pc$4) + -2)|0;
          $pc$5 = $366;
          label = 28;
         }
         else if ((label|0) == 31) {
          label = 0;
          $377 = (__ZN7Gbs_Emu8cpu_readEj($78,$sp$026)|0);
          $378 = (($sp$026) + 1)|0;
          $379 = (__ZN7Gbs_Emu8cpu_readEj($81,$378)|0);
          $380 = $379 << 8;
          $381 = (($380) + ($377))|0;
          $382 = (($sp$026) + 2)|0;
          $383 = $382 & 65535;
          $flags$0$be = $flags$025;$pc$0$be = $381;$sp$0$be = $383;
         }
         else if ((label|0) == 51) {
          label = 0;
          $481 = $op$1 << 1;
          $482 = $data$5 & $flags$025;
          $483 = $482 >>> 4;
          $484 = $483 & 1;
          $485 = $484 | $481;
          $486 = $op$1 >>> 3;
          $487 = $486 & 16;
          $488 = ($data$5>>>0)<(16);
          if (!($488)) {
           $data$7 = $data$5;$flags$1 = $487;$op$4 = $485;$pc$9 = $pc$7;
           label = 58;
           break;
          }
          $489 = $op$1 >>> 7;
          $490 = $489 & 16777215;
          $491 = $485 | $490;
          $data$7 = $data$5;$flags$1 = $487;$op$4 = $491;$pc$9 = $pc$7;
          label = 58;
         }
         else if ((label|0) == 54) {
          label = 0;
          $494 = $data$6 & $flags$025;
          $495 = $494 << 4;
          $496 = $495 | $op$2;
          $497 = $op$2 << 4;
          $498 = $497 & 16;
          $499 = ($data$6>>>0)<(16);
          if ($499) {
           $500 = $496 << 8;
           $501 = $500 | $496;
           $op$3 = $501;
          } else {
           $op$3 = $496;
          }
          $502 = $op$3 >>> 1;
          $503 = $data$6 & 32;
          $504 = ($503|0)==(0);
          if ($504) {
           $data$7 = $data$6;$flags$1 = $498;$op$4 = $502;$pc$9 = $pc$8;
           label = 58;
           break;
          }
          $505 = $op$3 & 128;
          $506 = $502 | $505;
          $data$7 = $data$6;$flags$1 = $498;$op$4 = $506;$pc$9 = $pc$8;
          label = 58;
         }
         else if ((label|0) == 74) {
          label = 0;
          $564 = HEAP8[$136]|0;
          $565 = $564&255;
          __ZN7Gbs_Emu9cpu_writeEji($139,$temp7$0,$565);
          $flags$0$be = $flags$025;$pc$0$be = $pc$11;$sp$0$be = $sp$026;
         }
         else if ((label|0) == 89) {
          label = 0;
          $601 = $flags$025 & 16;
          $602 = $data$8 & 15;
          $603 = (($602) + 63)|0;
          $604 = $603 & 32;
          $605 = $data$8 >>> 1;
          $606 = $605 & 128;
          $607 = $606 | $601;
          $608 = $607 | $604;
          $flags$0$be = $608;$pc$0$be = $256;$sp$0$be = $sp$026;
         }
         else if ((label|0) == 92) {
          label = 0;
          $622 = $flags$025 & 16;
          $623 = $data$9 & 15;
          $624 = (($623) + 49)|0;
          $625 = $624 & 32;
          $626 = $625 | $622;
          $627 = $data$9 & 255;
          $628 = ($627|0)==(0);
          $$2$v = $628 ? 192 : 64;
          $$2 = $626 | $$2$v;
          $flags$0$be = $$2;$pc$0$be = $256;$sp$0$be = $sp$026;
         }
         else if ((label|0) == 96) {
          label = 0;
          $640 = HEAP16[$183>>1]|0;
          $641 = $640&65535;
          $642 = (($641) + ($temp8$0))|0;
          $643 = $flags$025 & 128;
          $flags$4 = $643;$pc$12 = $256;$prev$0 = $641;$temp8$1 = $642;
          label = 97;
         }
         else if ((label|0) == 106) {
          label = 0;
          $686 = $flags$025 >>> 4;
          $687 = $686 & 1;
          $688 = (($data$11) + ($687))|0;
          $689 = $688 & 255;
          $data$10 = $689;$pc$14 = $pc$15;
          label = 102;
         }
         else if ((label|0) == 114) {
          label = 0;
          $712 = $flags$025 >>> 4;
          $713 = $712 & 1;
          $714 = (($data$13) + ($713))|0;
          $715 = $714 & 255;
          $data$12 = $715;$pc$16 = $pc$17;
          label = 110;
         }
         else if ((label|0) == 117) {
          label = 0;
          $724 = (($pc$18) + 1)|0;
          $data$15 = $data$14;$pc$19 = $724;
          label = 118;
         }
         else if ((label|0) == 122) {
          label = 0;
          $743 = (($pc$21) + 1)|0;
          $data$17 = $data$16;$pc$22 = $743;
          label = 123;
         }
         else if ((label|0) == 127) {
          label = 0;
          $761 = (($pc$24) + 1)|0;
          $data$19 = $data$18;$pc$25 = $761;
          label = 128;
         }
         else if ((label|0) == 137) {
          label = 0;
          $795 = $253 & 56;
          $796 = HEAP32[$249>>2]|0;
          $797 = (($796) + ($795))|0;
          $data$2 = $256;$pc$6 = $797;
          label = 29;
         }
         else if ((label|0) == 153) {
          label = 0;
          $838 = (__Z8get_le16PKv($255)|0);
          $flags$0$be = $flags$025;$pc$0$be = $838;$sp$0$be = $sp$026;
         }
        } while(0);
        do {
         if ((label|0) == 28) {
          label = 0;
          $367 = (($pc$5) + 2)|0;
          $368 = (__Z8get_le16PKv($255)|0);
          $data$2 = $367;$pc$6 = $368;
          label = 29;
         }
         else if ((label|0) == 58) {
          label = 0;
          $507 = $data$7 & 7;
          $508 = $op$4 & 255;
          $509 = ($508|0)==(0);
          $510 = $flags$1 | 128;
          $$flags$1 = $509 ? $510 : $flags$1;
          $511 = ($507|0)==(6);
          if ($511) {
           $flags$3 = $$flags$1;$op$5 = $op$4;$pc$10 = $pc$9;
           label = 61;
           break;
          }
          $512 = $op$4&255;
          $513 = $507 ^ 1;
          $514 = (($117) + ($513)|0);
          HEAP8[$514] = $512;
          $flags$0$be = $$flags$1;$pc$0$be = $pc$9;$sp$0$be = $sp$026;
         }
         else if ((label|0) == 97) {
          label = 0;
          $644 = $temp8$1&65535;
          HEAP16[$181>>1] = $644;
          $flags$5 = $flags$4;$pc$13 = $pc$12;$prev$1 = $prev$0;$sp$1 = $sp$026;$temp8$2 = $temp8$1;
          label = 98;
         }
         else if ((label|0) == 102) {
          label = 0;
          $663 = HEAP8[$190]|0;
          $664 = $663&255;
          $665 = (($664) + ($data$10))|0;
          $666 = $665 & 15;
          $667 = $664 & 15;
          $668 = (($666) - ($667))|0;
          $669 = $668 & 32;
          $670 = $665 >>> 4;
          $671 = $670 & 16;
          $672 = $669 | $671;
          $673 = $665&255;
          HEAP8[$190] = $673;
          $674 = $665 & 255;
          $675 = ($674|0)==(0);
          $676 = $672 | 128;
          $$3 = $675 ? $676 : $672;
          $flags$0$be = $$3;$pc$0$be = $pc$14;$sp$0$be = $sp$026;
         }
         else if ((label|0) == 110) {
          label = 0;
          $699 = HEAP8[$203]|0;
          $700 = $699&255;
          $701 = (($700) - ($data$12))|0;
          $702 = $701&255;
          HEAP8[$203] = $702;
          $data$1 = $701;$op$0 = $700;$pc$3 = $pc$16;
          label = 23;
         }
         else if ((label|0) == 118) {
          label = 0;
          $725 = HEAP8[$212]|0;
          $726 = $725&255;
          $727 = $726 & $data$15;
          $728 = $727&255;
          HEAP8[$212] = $728;
          $pc$20 = $pc$19;
          label = 119;
         }
         else if ((label|0) == 123) {
          label = 0;
          $744 = HEAP8[$220]|0;
          $745 = $744&255;
          $746 = $745 | $data$17;
          $747 = $746&255;
          HEAP8[$220] = $747;
          $pc$23 = $pc$22;
          label = 124;
         }
         else if ((label|0) == 128) {
          label = 0;
          $762 = HEAP8[$228]|0;
          $763 = $762&255;
          $764 = $763 ^ $data$19;
          $765 = $764&255;
          HEAP8[$228] = $765;
          $766 = (($764) + 511)|0;
          $767 = $766 >>> 1;
          $768 = $767 & 128;
          $flags$0$be = $768;$pc$0$be = $pc$25;$sp$0$be = $sp$026;
         }
        } while(0);
        if ((label|0) == 23) {
         label = 0;
         $332 = $op$0 & 15;
         $333 = $data$1 & 15;
         $334 = (($332) - ($333))|0;
         $335 = $334 & 32;
         $336 = $data$1 >>> 4;
         $337 = $336 & 16;
         $338 = $data$1 & 255;
         $339 = ($338|0)==(0);
         $$$v = $339 ? 192 : 64;
         $340 = $$$v | $337;
         $$ = $340 | $335;
         $flags$0$be = $$;$pc$0$be = $pc$3;$sp$0$be = $sp$026;
        }
        else if ((label|0) == 29) {
         label = 0;
         $369 = (($sp$026) + 65535)|0;
         $370 = $369 & 65535;
         $371 = $data$2 >>> 8;
         __ZN7Gbs_Emu9cpu_writeEji($75,$370,$371);
         $372 = (($sp$026) + 65534)|0;
         $373 = $372 & 65535;
         $374 = $data$2 & 255;
         __ZN7Gbs_Emu9cpu_writeEji($72,$373,$374);
         $flags$0$be = $flags$025;$pc$0$be = $pc$6;$sp$0$be = $373;
        }
        else if ((label|0) == 61) {
         label = 0;
         $520 = HEAP16[$119>>1]|0;
         $521 = $520&65535;
         $522 = $op$5 & 255;
         __ZN7Gbs_Emu9cpu_writeEji($122,$521,$522);
         $flags$0$be = $flags$3;$pc$0$be = $pc$10;$sp$0$be = $sp$026;
        }
        else if ((label|0) == 98) {
         label = 0;
         $645 = $temp8$2 >>> 12;
         $646 = $645 & 16;
         $647 = $flags$5 | $646;
         $648 = $temp8$2 & 4095;
         $649 = $prev$1 & 4095;
         $650 = (($648) - ($649))|0;
         $651 = $650 >>> 7;
         $652 = $651 & 32;
         $653 = $647 | $652;
         $flags$0$be = $653;$pc$0$be = $pc$13;$sp$0$be = $sp$1;
        }
        else if ((label|0) == 119) {
         label = 0;
         $729 = HEAP8[$213]|0;
         $730 = $729&255;
         $731 = (($730) + 511)|0;
         $732 = $731 >>> 1;
         $733 = $732 & 128;
         $734 = $733 | 32;
         $flags$0$be = $734;$pc$0$be = $pc$20;$sp$0$be = $sp$026;
        }
        else if ((label|0) == 124) {
         label = 0;
         $748 = HEAP8[$221]|0;
         $749 = $748&255;
         $750 = (($749) + 511)|0;
         $751 = $750 >>> 1;
         $752 = $751 & 128;
         $flags$0$be = $752;$pc$0$be = $pc$23;$sp$0$be = $sp$026;
        }
        $265 = $pc$0$be >>> 13;
        $266 = (($s) + ($265<<2)|0);
        $267 = HEAP32[$266>>2]|0;
        $268 = $pc$0$be & 8191;
        $269 = (($267) + ($268)|0);
        $$sum = (($268) + 1)|0;
        $270 = (($267) + ($$sum)|0);
        $271 = HEAP8[$269]|0;
        $272 = $271&255;
        $273 = HEAP32[$35>>2]|0;
        $274 = (($273) + -1)|0;
        HEAP32[$35>>2] = $274;
        $275 = ($274|0)==(0);
        if ($275) {
         $flags$012 = $flags$0$be;$pc$020 = $pc$0$be;$sp$016 = $sp$0$be;
         label = 161;
         break;
        } else {
         $$in32 = $pc$0$be;$253 = $272;$254 = $271;$255 = $270;$flags$025 = $flags$0$be;$sp$026 = $sp$0$be;
        }
       }
       if ((label|0) == 49) {
        ___assert_fail(((39176)|0),((39096)|0),452,((39184)|0));
        // unreachable;
       }
       else if ((label|0) == 159) {
        $854 = HEAP32[$35>>2]|0;
        $855 = (($854) + 1)|0;
        HEAP32[$35>>2] = $855;
        $flags$012 = $flags$025;$pc$020 = $$in32;$sp$016 = $sp$026;
        $856 = $1;
        $857 = $856;
        $858 = HEAP32[$857>>2]|0;
        $859 = (($856) + 4)|0;
        $860 = $859;
        $861 = HEAP32[$860>>2]|0;
        $862 = $10;
        $863 = $862;
        HEAP8[$863]=$858&255;HEAP8[$863+1|0]=($858>>8)&255;HEAP8[$863+2|0]=($858>>16)&255;HEAP8[$863+3|0]=$858>>24;
        $864 = (($862) + 4)|0;
        $865 = $864;
        HEAP8[$865]=$861&255;HEAP8[$865+1|0]=($861>>8)&255;HEAP8[$865+2|0]=($861>>16)&255;HEAP8[$865+3|0]=$861>>24;
        HEAP32[$21>>2] = $pc$020;
        $866 = $sp$016&65535;
        HEAP16[$23>>1] = $866;
        $867 = $flags$012&255;
        HEAP8[$26] = $867;
        HEAP32[$7>>2] = $4;
        dest=$8+0|0; src=$6+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));;
        $868 = HEAP32[$35>>2]|0;
        $869 = ($868|0)>(0);
        STACKTOP = sp;return ($869|0);
       }
       else if ((label|0) == 160) {
        ___assert_fail(((39176)|0),((39096)|0),1041,((39184)|0));
        // unreachable;
       }
       else if ((label|0) == 161) {
        $856 = $1;
        $857 = $856;
        $858 = HEAP32[$857>>2]|0;
        $859 = (($856) + 4)|0;
        $860 = $859;
        $861 = HEAP32[$860>>2]|0;
        $862 = $10;
        $863 = $862;
        HEAP8[$863]=$858&255;HEAP8[$863+1|0]=($858>>8)&255;HEAP8[$863+2|0]=($858>>16)&255;HEAP8[$863+3|0]=$858>>24;
        $864 = (($862) + 4)|0;
        $865 = $864;
        HEAP8[$865]=$861&255;HEAP8[$865+1|0]=($861>>8)&255;HEAP8[$865+2|0]=($861>>16)&255;HEAP8[$865+3|0]=$861>>24;
        HEAP32[$21>>2] = $pc$020;
        $866 = $sp$016&65535;
        HEAP16[$23>>1] = $866;
        $867 = $flags$012&255;
        HEAP8[$26] = $867;
        HEAP32[$7>>2] = $4;
        dest=$8+0|0; src=$6+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));;
        $868 = HEAP32[$35>>2]|0;
        $869 = ($868|0)>(0);
        STACKTOP = sp;return ($869|0);
       }
       return 0|0;
      }
      function __ZNK6Gb_Cpu6remainEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 20|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = (($2) + 36|0);
       $4 = HEAP32[$3>>2]|0;
       $5 = $4 << 2;
       STACKTOP = sp;return ($5|0);
      }
      function __ZN6Gb_Osc5resetEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 28|0);
       HEAP32[$1>>2] = 0;
       $2 = (($this) + 32|0);
       HEAP32[$2>>2] = 0;
       $3 = (($this) + 40|0);
       HEAP32[$3>>2] = 0;
       $4 = (($this) + 20|0);
       HEAP32[$4>>2] = 3;
       $5 = (($this) + 12|0);
       $6 = HEAP32[$5>>2]|0;
       $7 = (($this) + 16|0);
       HEAP32[$7>>2] = $6;
       STACKTOP = sp;return;
      }
      function __ZN6Gb_Osc12clock_lengthEv($this) {
       $this = $this|0;
       var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 24|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = (($2) + 4|0);
       $4 = HEAP8[$3]|0;
       $5 = $4 & 64;
       $6 = ($5<<24>>24)==(0);
       if ($6) {
        STACKTOP = sp;return;
       }
       $7 = (($this) + 40|0);
       $8 = HEAP32[$7>>2]|0;
       $9 = ($8|0)==(0);
       if ($9) {
        STACKTOP = sp;return;
       }
       $10 = (($8) + -1)|0;
       HEAP32[$7>>2] = $10;
       STACKTOP = sp;return;
      }
      function __ZN6Gb_Env14clock_envelopeEv($this) {
       $this = $this|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
       var $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 48|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = ($2|0)==(0);
       if ($3) {
        STACKTOP = sp;return;
       }
       $4 = (($2) + -1)|0;
       HEAP32[$1>>2] = $4;
       $5 = ($4|0)==(0);
       if (!($5)) {
        STACKTOP = sp;return;
       }
       $6 = (($this) + 24|0);
       $7 = HEAP32[$6>>2]|0;
       $8 = (($7) + 2|0);
       $9 = HEAP8[$8]|0;
       $10 = $9&255;
       $11 = $10 & 7;
       HEAP32[$1>>2] = $11;
       $12 = (($this) + 36|0);
       $13 = HEAP32[$12>>2]|0;
       $14 = (($13) + -1)|0;
       $15 = HEAP32[$6>>2]|0;
       $16 = (($15) + 2|0);
       $17 = HEAP8[$16]|0;
       $18 = $17&255;
       $19 = $18 >>> 2;
       $20 = $19 & 2;
       $21 = (($14) + ($20))|0;
       $22 = ($21>>>0)<(15);
       if (!($22)) {
        STACKTOP = sp;return;
       }
       HEAP32[$12>>2] = $21;
       STACKTOP = sp;return;
      }
      function __ZN6Gb_Env14write_registerEii($this,$reg,$data) {
       $this = $this|0;
       $reg = $reg|0;
       $data = $data|0;
       var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
       var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       do {
        if ((($reg|0) == 1)) {
         $1 = (($this) + 24|0);
         $2 = HEAP32[$1>>2]|0;
         $3 = (($2) + 1|0);
         $4 = HEAP8[$3]|0;
         $5 = $4&255;
         $6 = $5 & 63;
         $7 = (64 - ($6))|0;
         $8 = (($this) + 40|0);
         HEAP32[$8>>2] = $7;
         $$0 = 0;
        } else if ((($reg|0) == 2)) {
         $9 = ($data>>>0)>(15);
         if ($9) {
          $$0 = 0;
          break;
         }
         $10 = (($this) + 44|0);
         HEAP32[$10>>2] = 0;
         $$0 = 0;
        } else if ((($reg|0) == 4)) {
         $11 = $data & 128;
         $12 = ($11|0)==(0);
         if ($12) {
          $$0 = 0;
          break;
         }
         $13 = (($this) + 24|0);
         $14 = HEAP32[$13>>2]|0;
         $15 = (($14) + 2|0);
         $16 = HEAP8[$15]|0;
         $17 = $16&255;
         $18 = $17 & 7;
         $19 = (($this) + 48|0);
         HEAP32[$19>>2] = $18;
         $20 = HEAP32[$13>>2]|0;
         $21 = (($20) + 2|0);
         $22 = HEAP8[$21]|0;
         $23 = $22&255;
         $24 = $23 >>> 4;
         $25 = (($this) + 36|0);
         HEAP32[$25>>2] = $24;
         $26 = (($this) + 44|0);
         HEAP32[$26>>2] = 1;
         $27 = (($this) + 40|0);
         $28 = HEAP32[$27>>2]|0;
         $29 = ($28|0)==(0);
         if (!($29)) {
          $$0 = 1;
          break;
         }
         HEAP32[$27>>2] = 64;
         $$0 = 1;
        } else {
         $$0 = 0;
        }
       } while(0);
       STACKTOP = sp;return ($$0|0);
      }
      function __ZN9Gb_Square5resetEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 64|0);
       HEAP32[$1>>2] = 0;
       $2 = (($this) + 60|0);
       HEAP32[$2>>2] = 0;
       $3 = (($this) + 56|0);
       HEAP32[$3>>2] = 0;
       $4 = ($this);
       __ZN6Gb_Env5resetEv($4);
       STACKTOP = sp;return;
      }
      function __ZN9Gb_Square11clock_sweepEv($this) {
       $this = $this|0;
       var $$ = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
       var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 24|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = HEAP8[$2]|0;
       $4 = $3&255;
       $5 = $4 >>> 4;
       $6 = $5 & 7;
       $7 = ($6|0)==(0);
       if ($7) {
        STACKTOP = sp;return;
       }
       $8 = (($this) + 56|0);
       $9 = HEAP32[$8>>2]|0;
       $10 = ($9|0)==(0);
       if ($10) {
        STACKTOP = sp;return;
       }
       $11 = (($9) + -1)|0;
       HEAP32[$8>>2] = $11;
       $12 = ($11|0)==(0);
       if (!($12)) {
        STACKTOP = sp;return;
       }
       HEAP32[$8>>2] = $6;
       $13 = (($this) + 60|0);
       $14 = HEAP32[$13>>2]|0;
       $15 = $14&255;
       $16 = HEAP32[$1>>2]|0;
       $17 = (($16) + 3|0);
       HEAP8[$17] = $15;
       $18 = HEAP32[$1>>2]|0;
       $19 = (($18) + 4|0);
       $20 = HEAP8[$19]|0;
       $21 = $20&255;
       $22 = $21 & 248;
       $23 = HEAP32[$13>>2]|0;
       $24 = $23 >>> 8;
       $25 = $24 & 7;
       $26 = $25 | $22;
       $27 = $26&255;
       HEAP8[$19] = $27;
       $28 = HEAP32[$13>>2]|0;
       $29 = HEAP32[$1>>2]|0;
       $30 = HEAP8[$29]|0;
       $31 = $30&255;
       $32 = $31 & 7;
       $33 = $28 >> $32;
       $34 = $31 & 8;
       $35 = ($34|0)==(0);
       $36 = (0 - ($33))|0;
       $$ = $35 ? $33 : $36;
       $37 = (($$) + ($28))|0;
       HEAP32[$13>>2] = $37;
       $38 = ($37|0)<(0);
       if ($38) {
        HEAP32[$13>>2] = 0;
        STACKTOP = sp;return;
       }
       $39 = ($37|0)>(2047);
       if (!($39)) {
        STACKTOP = sp;return;
       }
       HEAP32[$8>>2] = 0;
       HEAP32[$13>>2] = 2048;
       STACKTOP = sp;return;
      }
      function __ZN9Gb_Square3runEiii($this,$time,$end_time,$playing) {
       $this = $this|0;
       $time = $time|0;
       $end_time = $end_time|0;
       $playing = $playing|0;
       var $$ = 0, $$$ = 0, $$1 = 0, $$2 = 0, $$playing = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
       var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
       var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
       var $delta1$0 = 0, $delta1$1 = 0, $end_time$ = 0, $or$cond = 0, $phase$0 = 0, $phase$0$phi = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 60|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = ($2|0)==(2048);
       $$playing = $3 ? 0 : $playing;
       $4 = ($this);
       $5 = (($this) + 24|0);
       $6 = HEAP32[$5>>2]|0;
       $7 = (($6) + 1|0);
       $8 = HEAP8[$7]|0;
       $9 = $8&255;
       $10 = $9 >>> 6;
       $11 = (39296 + ($10)|0);
       $12 = HEAP8[$11]|0;
       $13 = $12&255;
       $14 = (($this) + 36|0);
       $15 = HEAP32[$14>>2]|0;
       $16 = $15 & $$playing;
       $17 = (($this) + 64|0);
       $18 = HEAP32[$17>>2]|0;
       $19 = ($18|0)<($13|0);
       $20 = (0 - ($16))|0;
       $$ = $19 ? $16 : $20;
       $21 = (__ZNK6Gb_Osc9frequencyEv($4)|0);
       $22 = (($21) + -1)|0;
       $23 = ($22>>>0)>(2040);
       $24 = $15 >> 1;
       $$$ = $23 ? $24 : $$;
       $25 = (($this) + 32|0);
       $26 = HEAP32[$25>>2]|0;
       $27 = ($$$|0)==($26|0);
       if (!($27)) {
        $28 = (($$$) - ($26))|0;
        HEAP32[$25>>2] = $$$;
        $29 = (($this) + 52|0);
        $30 = HEAP32[$29>>2]|0;
        $31 = (($this) + 16|0);
        $32 = HEAP32[$31>>2]|0;
        __ZNK10Blip_SynthILi12ELi1EE6offsetEiiP11Blip_Buffer($30,$time,$28,$32);
       }
       $33 = (($this) + 28|0);
       $34 = HEAP32[$33>>2]|0;
       $35 = (($34) + ($time))|0;
       $36 = ($$playing|0)==(0);
       $37 = $23 | $36;
       $end_time$ = $37 ? $end_time : $35;
       $38 = ($end_time$|0)<($end_time|0);
       if (!($38)) {
        $$2 = $end_time$;
        $55 = (($$2) - ($end_time))|0;
        HEAP32[$33>>2] = $55;
        STACKTOP = sp;return;
       }
       $39 = (2048 - ($21))|0;
       $40 = $39 << 2;
       $41 = (($this) + 16|0);
       $42 = HEAP32[$41>>2]|0;
       $43 = HEAP32[$17>>2]|0;
       $44 = $$$ << 1;
       $45 = (($this) + 52|0);
       $$1 = $end_time$;$delta1$0 = $44;$phase$0 = $43;
       while(1) {
        $46 = (($phase$0) + 1)|0;
        $47 = $46 & 7;
        $48 = ($47|0)==(0);
        $49 = ($47|0)==($13|0);
        $or$cond = $48 | $49;
        if ($or$cond) {
         $50 = (0 - ($delta1$0))|0;
         $51 = HEAP32[$45>>2]|0;
         __ZNK10Blip_SynthILi12ELi1EE13offset_inlineEiiP11Blip_Buffer($51,$$1,$50,$42);
         $delta1$1 = $50;
        } else {
         $delta1$1 = $delta1$0;
        }
        $52 = (($$1) + ($40))|0;
        $53 = ($52|0)<($end_time|0);
        if ($53) {
         $phase$0$phi = $47;$$1 = $52;$delta1$0 = $delta1$1;$phase$0 = $phase$0$phi;
        } else {
         break;
        }
       }
       HEAP32[$17>>2] = $47;
       $54 = $delta1$1 >> 1;
       HEAP32[$25>>2] = $54;
       $$2 = $52;
       $55 = (($$2) - ($end_time))|0;
       HEAP32[$33>>2] = $55;
       STACKTOP = sp;return;
      }
      function __ZNK6Gb_Osc9frequencyEv($this) {
       $this = $this|0;
       var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 24|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = (($2) + 4|0);
       $4 = HEAP8[$3]|0;
       $5 = $4&255;
       $6 = $5 << 8;
       $7 = $6 & 1792;
       $8 = (($2) + 3|0);
       $9 = HEAP8[$8]|0;
       $10 = $9&255;
       $11 = $7 | $10;
       STACKTOP = sp;return ($11|0);
      }
      function __ZNK10Blip_SynthILi12ELi1EE13offset_inlineEiiP11Blip_Buffer($this,$t,$delta,$buf) {
       $this = $this|0;
       $t = $t|0;
       $delta = $delta|0;
       $buf = $buf|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($buf);
       $2 = HEAP32[$1>>2]|0;
       $3 = Math_imul($2, $t)|0;
       $4 = (($buf) + 4|0);
       $5 = HEAP32[$4>>2]|0;
       $6 = (($3) + ($5))|0;
       __ZNK10Blip_SynthILi12ELi1EE16offset_resampledEjiP11Blip_Buffer($this,$6,$delta,$buf);
       STACKTOP = sp;return;
      }
      function __ZN8Gb_Noise3runEiii($this,$time,$end_time,$playing) {
       $this = $this|0;
       $time = $time|0;
       $end_time = $end_time|0;
       $playing = $playing|0;
       var $$ = 0, $$1 = 0, $$1$phi = 0, $$2 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
       var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
       var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
       var $7 = 0, $8 = 0, $9 = 0, $bits$0 = 0, $bits$1 = 0, $delta1$0 = 0, $delta1$1 = 0, $end_time$ = 0, $resampled_time$0 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 36|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = $2 & $playing;
       $4 = (($this) + 24|0);
       $5 = HEAP32[$4>>2]|0;
       $6 = (($5) + 3|0);
       $7 = HEAP8[$6]|0;
       $8 = $7&255;
       $9 = $8 & 8;
       $10 = (13 - ($9))|0;
       $11 = (($this) + 56|0);
       $12 = HEAP32[$11>>2]|0;
       $13 = 2 << $10;
       $14 = $13 & $12;
       $15 = ($14|0)==(0);
       $16 = (0 - ($3))|0;
       $$ = $15 ? $3 : $16;
       $17 = (($this) + 32|0);
       $18 = HEAP32[$17>>2]|0;
       $19 = ($$|0)==($18|0);
       if (!($19)) {
        $20 = (($$) - ($18))|0;
        HEAP32[$17>>2] = $$;
        $21 = (($this) + 52|0);
        $22 = HEAP32[$21>>2]|0;
        $23 = (($this) + 16|0);
        $24 = HEAP32[$23>>2]|0;
        __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($22,$time,$20,$24);
       }
       $25 = (($this) + 28|0);
       $26 = HEAP32[$25>>2]|0;
       $27 = (($26) + ($time))|0;
       $28 = ($playing|0)==(0);
       $end_time$ = $28 ? $end_time : $27;
       $29 = ($end_time$|0)<($end_time|0);
       if (!($29)) {
        $$2 = $end_time$;
        $59 = (($$2) - ($end_time))|0;
        HEAP32[$25>>2] = $59;
        STACKTOP = sp;return;
       }
       $30 = HEAP32[$4>>2]|0;
       $31 = (($30) + 3|0);
       $32 = HEAP8[$31]|0;
       $33 = $32&255;
       $34 = $33 & 7;
       $35 = (39304 + ($34)|0);
       $36 = HEAP8[$35]|0;
       $37 = $36&255;
       $38 = $33 >>> 4;
       $39 = $37 << $38;
       $40 = (($this) + 16|0);
       $41 = HEAP32[$40>>2]|0;
       $42 = (__ZNK11Blip_Buffer18resampled_durationEi($41,$39)|0);
       $43 = (__ZNK11Blip_Buffer14resampled_timeEi($41,$end_time$)|0);
       $44 = HEAP32[$11>>2]|0;
       $45 = $$ << 1;
       $46 = (($this) + 52|0);
       $$1 = $end_time$;$bits$0 = $44;$delta1$0 = $45;$resampled_time$0 = $43;
       while(1) {
        $47 = $bits$0 >>> $10;
        $48 = (($47) + 1)|0;
        $49 = (($$1) + ($39))|0;
        $50 = $bits$0 << 1;
        $51 = $48 & 2;
        $52 = ($51|0)==(0);
        if ($52) {
         $bits$1 = $50;$delta1$1 = $delta1$0;
        } else {
         $53 = (0 - ($delta1$0))|0;
         $54 = $50 | 1;
         $55 = HEAP32[$46>>2]|0;
         __ZNK10Blip_SynthILi8ELi1EE16offset_resampledEjiP11Blip_Buffer($55,$resampled_time$0,$53,$41);
         $bits$1 = $54;$delta1$1 = $53;
        }
        $56 = (($resampled_time$0) + ($42))|0;
        $57 = ($49|0)<($end_time|0);
        if ($57) {
         $$1$phi = $49;$bits$0 = $bits$1;$delta1$0 = $delta1$1;$resampled_time$0 = $56;$$1 = $$1$phi;
        } else {
         break;
        }
       }
       HEAP32[$11>>2] = $bits$1;
       $58 = $delta1$1 >> 1;
       HEAP32[$17>>2] = $58;
       $$2 = $49;
       $59 = (($$2) - ($end_time))|0;
       HEAP32[$25>>2] = $59;
       STACKTOP = sp;return;
      }
      function __ZNK11Blip_Buffer18resampled_durationEi($this,$t) {
       $this = $this|0;
       $t = $t|0;
       var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = HEAP32[$1>>2]|0;
       $3 = Math_imul($2, $t)|0;
       STACKTOP = sp;return ($3|0);
      }
      function __ZN7Gb_Wave3runEiii($this,$time,$end_time,$playing) {
       $this = $this|0;
       $time = $time|0;
       $end_time = $end_time|0;
       $playing = $playing|0;
       var $$01 = 0, $$1 = 0, $$2 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
       var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
       var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $amp$0 = 0, $end_time$ = 0, $wave_pos$0 = 0, $wave_pos$0$in = 0, $wave_pos$0$in$in = 0, $wave_pos$0$in$in$phi = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = (($this) + 36|0);
       $3 = HEAP32[$2>>2]|0;
       $4 = (($3) + 7)|0;
       $5 = $4 & 7;
       $6 = (($this) + 52|0);
       $7 = HEAP32[$6>>2]|0;
       $8 = ((($this) + ($7)|0) + 56|0);
       $9 = HEAP8[$8]|0;
       $10 = $9&255;
       $11 = $10 >>> $5;
       $12 = $11 & $playing;
       $13 = $12 << 1;
       $14 = (__ZNK6Gb_Osc9frequencyEv($1)|0);
       $15 = (($14) + -1)|0;
       $16 = ($15>>>0)>(2044);
       if ($16) {
        $17 = 30 >>> $5;
        $18 = $17 & $playing;
        $$01 = 0;$amp$0 = $18;
       } else {
        $$01 = $playing;$amp$0 = $13;
       }
       $19 = (($this) + 32|0);
       $20 = HEAP32[$19>>2]|0;
       $21 = ($amp$0|0)==($20|0);
       if (!($21)) {
        $22 = (($amp$0) - ($20))|0;
        HEAP32[$19>>2] = $amp$0;
        $23 = (($this) + 48|0);
        $24 = HEAP32[$23>>2]|0;
        $25 = (($this) + 16|0);
        $26 = HEAP32[$25>>2]|0;
        __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($24,$time,$22,$26);
       }
       $27 = (($this) + 28|0);
       $28 = HEAP32[$27>>2]|0;
       $29 = (($28) + ($time))|0;
       $30 = ($$01|0)==(0);
       $end_time$ = $30 ? $end_time : $29;
       $31 = ($end_time$|0)<($end_time|0);
       if (!($31)) {
        $$2 = $end_time$;
        $49 = (($$2) - ($end_time))|0;
        HEAP32[$27>>2] = $49;
        STACKTOP = sp;return;
       }
       $32 = (($this) + 16|0);
       $33 = HEAP32[$32>>2]|0;
       $34 = (2048 - ($14))|0;
       $35 = $34 << 1;
       $36 = HEAP32[$6>>2]|0;
       $37 = (($this) + 48|0);
       $$1 = $end_time$;$wave_pos$0$in$in = $36;
       while(1) {
        $wave_pos$0$in = (($wave_pos$0$in$in) + 1)|0;
        $wave_pos$0 = $wave_pos$0$in & 31;
        $38 = ((($this) + ($wave_pos$0)|0) + 56|0);
        $39 = HEAP8[$38]|0;
        $40 = $39&255;
        $41 = $40 >>> $5;
        $42 = $41 << 1;
        $43 = HEAP32[$19>>2]|0;
        $44 = ($42|0)==($43|0);
        if (!($44)) {
         $45 = (($42) - ($43))|0;
         HEAP32[$19>>2] = $42;
         $46 = HEAP32[$37>>2]|0;
         __ZNK10Blip_SynthILi8ELi1EE13offset_inlineEiiP11Blip_Buffer($46,$$1,$45,$33);
        }
        $47 = (($$1) + ($35))|0;
        $48 = ($47|0)<($end_time|0);
        if ($48) {
         $wave_pos$0$in$in$phi = $wave_pos$0;$$1 = $47;$wave_pos$0$in$in = $wave_pos$0$in$in$phi;
        } else {
         break;
        }
       }
       HEAP32[$6>>2] = $wave_pos$0;
       $$2 = $47;
       $49 = (($$2) - ($end_time))|0;
       HEAP32[$27>>2] = $49;
       STACKTOP = sp;return;
      }
      function __ZNK10Blip_SynthILi8ELi1EE13offset_inlineEiiP11Blip_Buffer($this,$t,$delta,$buf) {
       $this = $this|0;
       $t = $t|0;
       $delta = $delta|0;
       $buf = $buf|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($buf);
       $2 = HEAP32[$1>>2]|0;
       $3 = Math_imul($2, $t)|0;
       $4 = (($buf) + 4|0);
       $5 = HEAP32[$4>>2]|0;
       $6 = (($3) + ($5))|0;
       __ZNK10Blip_SynthILi8ELi1EE16offset_resampledEjiP11Blip_Buffer($this,$6,$delta,$buf);
       STACKTOP = sp;return;
      }
      function __ZN6Gb_Apu9write_oscEiii($this,$index,$reg,$data) {
       $this = $this|0;
       $index = $index|0;
       $reg = $reg|0;
       $data = $data|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
       var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond2 = 0, $sq$0 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = Math_imul($index, -5)|0;
       $2 = (($1) + ($reg))|0;
       $3 = (($this) + 112|0);
       if ((($index|0) == 0)) {
        $4 = (($this) + 44|0);
        $sq$0 = $4;
       } else if ((($index|0) == 1)) {
        $sq$0 = $3;
       } else if ((($index|0) == 2)) {
        $20 = (($this) + 180|0);
        __ZN7Gb_Wave14write_registerEii($20,$2,$data);
        STACKTOP = sp;return;
       } else if ((($index|0) == 3)) {
        $21 = (($this) + 268|0);
        $22 = (__ZN6Gb_Env14write_registerEii($21,$2,$data)|0);
        if (!($22)) {
         STACKTOP = sp;return;
        }
        $23 = (($this) + 324|0);
        HEAP32[$23>>2] = 32767;
        STACKTOP = sp;return;
       } else {
        STACKTOP = sp;return;
       }
       $5 = ($sq$0);
       $6 = (__ZN6Gb_Env14write_registerEii($5,$2,$data)|0);
       $7 = ($index|0)==(0);
       $or$cond = $6 & $7;
       if (!($or$cond)) {
        STACKTOP = sp;return;
       }
       $8 = (($this) + 44|0);
       $9 = ($8);
       $10 = (__ZNK6Gb_Osc9frequencyEv($9)|0);
       $11 = (($this) + 104|0);
       HEAP32[$11>>2] = $10;
       $12 = (($this) + 328|0);
       $13 = HEAP8[$12]|0;
       $14 = $13&255;
       $15 = $14 & 112;
       $16 = ($15|0)==(0);
       $17 = $14 & 7;
       $18 = ($17|0)==(0);
       $or$cond2 = $16 | $18;
       if ($or$cond2) {
        STACKTOP = sp;return;
       }
       $19 = (($this) + 100|0);
       HEAP32[$19>>2] = 1;
       __ZN9Gb_Square11clock_sweepEv($8);
       STACKTOP = sp;return;
      }
      function __ZN7Gb_Wave14write_registerEii($this,$reg,$data) {
       $this = $this|0;
       $reg = $reg|0;
       $data = $data|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0;
       var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       do {
        if ((($reg|0) == 1)) {
         $4 = (($this) + 24|0);
         $5 = HEAP32[$4>>2]|0;
         $6 = (($5) + 1|0);
         $7 = HEAP8[$6]|0;
         $8 = $7&255;
         $9 = (256 - ($8))|0;
         $10 = (($this) + 40|0);
         HEAP32[$10>>2] = $9;
        } else if ((($reg|0) == 0)) {
         $1 = $data & 128;
         $2 = ($1|0)==(0);
         if (!($2)) {
          break;
         }
         $3 = (($this) + 44|0);
         HEAP32[$3>>2] = 0;
        } else if ((($reg|0) == 2)) {
         $11 = $data >>> 5;
         $12 = $11 & 3;
         $13 = (($this) + 36|0);
         HEAP32[$13>>2] = $12;
        } else if ((($reg|0) == 4)) {
         $14 = $data & 128;
         $15 = (($this) + 24|0);
         $16 = HEAP32[$15>>2]|0;
         $17 = HEAP8[$16]|0;
         $18 = $17&255;
         $19 = $14 & $18;
         $20 = ($19|0)==(0);
         if ($20) {
          break;
         }
         $21 = (($this) + 52|0);
         HEAP32[$21>>2] = 0;
         $22 = (($this) + 44|0);
         HEAP32[$22>>2] = 1;
         $23 = (($this) + 40|0);
         $24 = HEAP32[$23>>2]|0;
         $25 = ($24|0)==(0);
         if (!($25)) {
          break;
         }
         HEAP32[$23>>2] = 256;
        }
       } while(0);
       STACKTOP = sp;return;
      }
      function __ZN9Music_Emu14make_equalizerEdd($agg$result,$treble,$bass) {
       $agg$result = $agg$result|0;
       $treble = +$treble;
       $bass = +$bass;
       var $1 = 0, $2 = 0, $3 = 0, dest = 0, label = 0, sp = 0, stop = 0;
       sp = STACKTOP;
       $1 = $agg$result;
       dest=$1+0|0; stop=dest+80|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));;
       $2 = ($agg$result);
       HEAPF64[$2>>3] = $treble;
       $3 = (($agg$result) + 8|0);
       HEAPF64[$3>>3] = $bass;
       STACKTOP = sp;return;
      }
      function __ZN7Gbs_EmuC2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       STACKTOP = STACKTOP + 80|0;
       $1 = sp;
       $2 = (($this) + 336|0);
       $3 = $2;
       __ZN6Gb_CpuC2Ev($3);
       $4 = ($this);
       __ZN11Classic_EmuC2Ev($4);
       $5 = $this;
       HEAP32[$5>>2] = (((39312) + 8|0));
       $6 = (($this) + 400|0);
       __ZN8Rom_DataILi16384EEC1Ev($6);
       $7 = (($this) + 25136|0);
       __ZN6Gb_ApuC2Ev($7);
       $8 = $this;
       __ZN8Gme_File8set_typeEPK11gme_type_t_($8,(39496));
       $9 = $this;
       __ZN9Music_Emu15set_voice_namesEPKPKc($9,((39416)));
       __ZN11Classic_Emu15set_voice_typesEPKi($4,((39480)));
       __ZN9Music_Emu21set_silence_lookaheadEi($9,6);
       __ZN9Music_Emu23set_max_initial_silenceEi($9,21);
       __ZN9Music_Emu8set_gainEd($9,1.19999999999999995559);
       __ZN9Music_Emu14make_equalizerEdd($1,-1.0,120.0);
       __ZN9Music_Emu13set_equalizerERK15gme_equalizer_t($9,$1);
       STACKTOP = sp;return;
      }
      function __ZN6Gb_CpuC2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 16|0);
       HEAP32[$1>>2] = 0;
       $2 = (($this) + 24|0);
       $3 = (($this) + 20|0);
       HEAP32[$3>>2] = $2;
       STACKTOP = sp;return;
      }
      function __ZN8Rom_DataILi16384EEC1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN8Rom_DataILi16384EEC2Ev($this);
       STACKTOP = sp;return;
      }
      function __ZN9Music_Emu23set_max_initial_silenceEi($this,$n) {
       $this = $this|0;
       $n = $n|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 224|0);
       HEAP32[$1>>2] = $n;
       STACKTOP = sp;return;
      }
      function __ZN9Music_Emu8set_gainEd($this,$g) {
       $this = $this|0;
       $g = +$g;
       var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (__ZNK9Music_Emu11sample_rateEv($this)|0);
       $2 = ($1|0)==(0);
       if ($2) {
        $3 = (($this) + 248|0);
        HEAPF64[$3>>3] = $g;
        STACKTOP = sp;return;
       } else {
        ___assert_fail(((39912)|0),((39928)|0),228,((39968)|0));
        // unreachable;
       }
      }
      function __ZN8Rom_DataILi16384EED1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN8Rom_DataILi16384EED2Ev($this);
       STACKTOP = sp;return;
      }
      function __ZN7Gbs_EmuD0Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       __ZN7Gbs_EmuD2Ev($this);
       $1 = ($this);
       __ZN8Gme_FiledlEPv($1);
       STACKTOP = sp;return;
      }
      function __ZN7Gbs_EmuD2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $this;
       HEAP32[$1>>2] = (((39312) + 8|0));
       $2 = (($this) + 400|0);
       __ZN8Rom_DataILi16384EED1Ev($2);
       $3 = ($this);
       __ZN11Classic_EmuD2Ev($3);
       STACKTOP = sp;return;
      }
      function __ZN7Gbs_Emu6unloadEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 400|0);
       __ZN8Rom_DataILi16384EE5clearEv($1);
       $2 = $this;
       __ZN9Music_Emu6unloadEv($2);
       STACKTOP = sp;return;
      }
      function __ZN8Rom_DataILi16384EE5clearEv($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       __ZN13blargg_vectorIhE5clearEv($1);
       STACKTOP = sp;return;
      }
      function __ZNK7Gbs_Emu11track_info_EP12track_info_ti($this,$out,u$0) {
       $this = $this|0;
       $out = $out|0;
       u$0 = u$0|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 436|0);
       __ZL15copy_gbs_fieldsRKN7Gbs_Emu8header_tEP12track_info_t($1,$out);
       STACKTOP = sp;return (0|0);
      }
      function __ZL15copy_gbs_fieldsRKN7Gbs_Emu8header_tEP12track_info_t($h,$out) {
       $h = $h|0;
       $out = $out|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($out) + 272|0);
       $2 = (($h) + 16|0);
       __ZN8Gme_File11copy_field_EPcPKci($1,$2,32);
       $3 = (($out) + 784|0);
       $4 = (($h) + 48|0);
       __ZN8Gme_File11copy_field_EPcPKci($3,$4,32);
       $5 = (($out) + 1040|0);
       $6 = (($h) + 80|0);
       __ZN8Gme_File11copy_field_EPcPKci($5,$6,32);
       STACKTOP = sp;return;
      }
      function __ZN7Gbs_Emu5load_ER11Data_Reader($this,$in) {
       $this = $this|0;
       $in = $in|0;
       var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
       var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 400|0);
       $2 = (($this) + 436|0);
       $3 = (__ZN8Rom_DataILi16384EE4loadER11Data_ReaderiPvi($1,$in,112,$2,0)|0);
       $4 = ($3|0)==(0|0);
       if (!($4)) {
        $$0 = $3;
        STACKTOP = sp;return ($$0|0);
       }
       $5 = $this;
       $6 = (($this) + 440|0);
       $7 = HEAP8[$6]|0;
       $8 = $7&255;
       __ZN8Gme_File15set_track_countEi($5,$8);
       $9 = (__ZL16check_gbs_headerPKv($2)|0);
       $10 = ($9|0)==(0|0);
       if (!($10)) {
        $$0 = $9;
        STACKTOP = sp;return ($$0|0);
       }
       $11 = (($this) + 439|0);
       $12 = HEAP8[$11]|0;
       $13 = ($12<<24>>24)==(1);
       if (!($13)) {
        __ZN8Gme_File11set_warningEPKc($5,(39520));
       }
       $14 = (($this) + 451|0);
       $15 = HEAP8[$14]|0;
       $16 = $15 & 120;
       $17 = ($16<<24>>24)==(0);
       if (!($17)) {
        __ZN8Gme_File11set_warningEPKc($5,(39544));
       }
       $18 = (($this) + 442|0);
       $19 = (__Z8get_le16PKv($18)|0);
       $20 = (($this) + 443|0);
       $21 = HEAP8[$20]|0;
       $22 = (($this) + 445|0);
       $23 = HEAP8[$22]|0;
       $24 = $23 | $21;
       $25 = (($this) + 447|0);
       $26 = HEAP8[$25]|0;
       $27 = $24 | $26;
       $28 = ($27<<24>>24)<(0);
       $29 = ($19>>>0)<(1024);
       $or$cond = $28 | $29;
       if ($or$cond) {
        __ZN8Gme_File11set_warningEPKc($5,(39568));
       }
       $30 = $this;
       __ZN9Music_Emu15set_voice_countEi($30,4);
       $31 = (($this) + 25136|0);
       $32 = (+__ZNK9Music_Emu4gainEv($30));
       __ZN6Gb_Apu6volumeEd($31,$32);
       $33 = ($this);
       $34 = (__ZN11Classic_Emu12setup_bufferEl($33,4194304)|0);
       $$0 = $34;
       STACKTOP = sp;return ($$0|0);
      }
      function __ZN8Rom_DataILi16384EE4loadER11Data_ReaderiPvi($this,$in,$header_size,$header_out,$fill) {
       $this = $this|0;
       $in = $in|0;
       $header_size = $header_size|0;
       $header_out = $header_out|0;
       $fill = $fill|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = (__ZN9Rom_Data_14load_rom_data_ER11Data_ReaderiPvil($1,$in,$header_size,$header_out,$fill,16392)|0);
       STACKTOP = sp;return ($2|0);
      }
      function __ZL16check_gbs_headerPKv($header) {
       $header = $header|0;
       var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (_memcmp($header,(39776),3)|0);
       $2 = ($1|0)==(0);
       $3 = HEAP32[(40024)>>2]|0;
       $$0 = $2 ? 0 : $3;
       STACKTOP = sp;return ($$0|0);
      }
      function __ZN7Gbs_Emu9update_eqERK9blip_eq_t($this,$eq) {
       $this = $this|0;
       $eq = $eq|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 25136|0);
       __ZN6Gb_Apu9treble_eqERK9blip_eq_t($1,$eq);
       STACKTOP = sp;return;
      }
      function __ZN7Gbs_Emu9set_voiceEiP11Blip_BufferS1_S1_($this,$i,$c,$l,$r) {
       $this = $this|0;
       $i = $i|0;
       $c = $c|0;
       $l = $l|0;
       $r = $r|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 25136|0);
       __ZN6Gb_Apu10osc_outputEiP11Blip_BufferS1_S1_($1,$i,$c,$l,$r);
       STACKTOP = sp;return;
      }
      function __ZN7Gbs_Emu8set_bankEi($this,$n) {
       $this = $this|0;
       $n = $n|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 400|0);
       $2 = $n << 14;
       $3 = (__ZNK8Rom_DataILi16384EE9mask_addrEl($1,$2)|0);
       $4 = ($3|0)==(0);
       do {
        if ($4) {
         $5 = (__ZNK8Rom_DataILi16384EE4sizeEv($1)|0);
         $6 = ($5|0)>(16384);
         if (!($6)) {
          break;
         }
         STACKTOP = sp;return;
        }
       } while(0);
       $7 = (($this) + 336|0);
       $8 = $7;
       $9 = (__ZN8Rom_DataILi16384EE7at_addrEl($1,$3)|0);
       __ZN6Gb_Cpu8map_codeEjjPv($8,16384,16384,$9);
       STACKTOP = sp;return;
      }
      function __ZNK8Rom_DataILi16384EE9mask_addrEl($this,$addr) {
       $this = $this|0;
       $addr = $addr|0;
       var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 16|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = $2 & $addr;
       STACKTOP = sp;return ($3|0);
      }
      function __ZNK8Rom_DataILi16384EE4sizeEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 20|0);
       $2 = HEAP32[$1>>2]|0;
       STACKTOP = sp;return ($2|0);
      }
      function __ZN8Rom_DataILi16384EE7at_addrEl($this,$addr) {
       $this = $this|0;
       $addr = $addr|0;
       var $$ = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (__ZNK8Rom_DataILi16384EE9mask_addrEl($this,$addr)|0);
       $2 = (($this) + 12|0);
       $3 = HEAP32[$2>>2]|0;
       $4 = (($1) - ($3))|0;
       $5 = ($this);
       $6 = (__ZNK13blargg_vectorIhE4sizeEv($5)|0);
       $7 = (($6) + -16392)|0;
       $8 = ($4>>>0)>($7>>>0);
       $$ = $8 ? 0 : $4;
       $9 = (__ZNK13blargg_vectorIhEixEj($5,$$)|0);
       STACKTOP = sp;return ($9|0);
      }
      function __ZN7Gbs_Emu12update_timerEv($this) {
       $this = $this|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0;
       var $28 = 0.0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 451|0);
       $2 = HEAP8[$1]|0;
       $3 = $2&255;
       $4 = $3 & 4;
       $5 = ($4|0)==(0);
       if ($5) {
        $21 = (($this) + 428|0);
        HEAP32[$21>>2] = 70224;
       } else {
        $6 = (($this) + 24875|0);
        $7 = HEAP8[$6]|0;
        $8 = $7&255;
        $9 = $8 & 3;
        $10 = (39600 + ($9)|0);
        $11 = HEAP8[$10]|0;
        $12 = $11&255;
        $13 = $3 >>> 7;
        $14 = (($12) - ($13))|0;
        $15 = (($this) + 24874|0);
        $16 = HEAP8[$15]|0;
        $17 = $16&255;
        $18 = (256 - ($17))|0;
        $19 = $18 << $14;
        $20 = (($this) + 428|0);
        HEAP32[$20>>2] = $19;
       }
       $22 = $this;
       $23 = (+__ZNK9Music_Emu5tempoEv($22));
       $24 = $23 != 1.0;
       if (!($24)) {
        STACKTOP = sp;return;
       }
       $25 = (($this) + 428|0);
       $26 = HEAP32[$25>>2]|0;
       $27 = (+($26|0));
       $28 = $27 / $23;
       $29 = (~~(($28)));
       HEAP32[$25>>2] = $29;
       STACKTOP = sp;return;
      }
      function __ZN7Gbs_Emu7cpu_jsrEj($this,$addr) {
       $this = $this|0;
       $addr = $addr|0;
       var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 344|0);
       $2 = $1;
       HEAP32[$2>>2] = $addr;
       $3 = (($this) + 348|0);
       $4 = $3;
       $5 = HEAP16[$4>>1]|0;
       $6 = (($5) + -1)<<16>>16;
       HEAP16[$4>>1] = $6;
       $7 = $6&65535;
       __ZN7Gbs_Emu9cpu_writeEji($this,$7,240);
       $8 = HEAP16[$4>>1]|0;
       $9 = (($8) + -1)<<16>>16;
       HEAP16[$4>>1] = $9;
       $10 = $9&65535;
       __ZN7Gbs_Emu9cpu_writeEji($this,$10,13);
       STACKTOP = sp;return;
      }
      function __ZN7Gbs_Emu10set_tempo_Ed($this,$t) {
       $this = $this|0;
       $t = +$t;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 25136|0);
       __ZN6Gb_Apu9set_tempoEd($1,$t);
       __ZN7Gbs_Emu12update_timerEv($this);
       STACKTOP = sp;return;
      }
      function __ZN7Gbs_Emu12start_track_Ei($this,$track) {
       $this = $this|0;
       $track = $track|0;
       var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
       var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
       var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, $i$01$phi = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = (__ZN11Classic_Emu12start_track_Ei($1,$track)|0);
       $3 = ($2|0)==(0|0);
       if (!($3)) {
        $$0 = $2;
        STACKTOP = sp;return ($$0|0);
       }
       $4 = (($this) + 548|0);
       _memset(($4|0),0,16384)|0;
       $5 = (($this) + 16932|0);
       _memset(($5|0),-1,8064)|0;
       $6 = (($this) + 24996|0);
       _memset(($6|0),0,136)|0;
       $7 = (($this) + 24868|0);
       HEAP8[$7] = 0;
       $8 = (($this) + 25136|0);
       __ZN6Gb_Apu5resetEv($8);
       $i$01 = 0;
       while(1) {
        $9 = (($i$01) + 65296)|0;
        $10 = (39608 + ($i$01)|0);
        $11 = HEAP8[$10]|0;
        $12 = $11&255;
        __ZN6Gb_Apu14write_registerEiji($8,0,$9,$12);
        $13 = (($i$01) + 1)|0;
        $exitcond = ($13|0)==(48);
        if ($exitcond) {
         break;
        } else {
         $i$01$phi = $13;$i$01 = $i$01$phi;
        }
       }
       $14 = (($this) + 442|0);
       $15 = (__Z8get_le16PKv($14)|0);
       $16 = (($this) + 400|0);
       __ZN8Rom_DataILi16384EE8set_addrEl($16,$15);
       $17 = (($this) + 336|0);
       $18 = $17;
       $19 = (($this) + 352|0);
       $20 = $19;
       HEAP32[$20>>2] = $15;
       $21 = (__ZN8Rom_DataILi16384EE8unmappedEv($16)|0);
       __ZN6Gb_Cpu5resetEPv($18,$21);
       __ZN6Gb_Cpu8map_codeEjjPv($18,40960,24576,$4);
       $22 = (__ZN8Rom_DataILi16384EE7at_addrEl($16,0)|0);
       __ZN6Gb_Cpu8map_codeEjjPv($18,0,16384,$22);
       $23 = (__ZNK8Rom_DataILi16384EE4sizeEv($16)|0);
       $24 = ($23|0)>(16384);
       $25 = $24&1;
       __ZN7Gbs_Emu8set_bankEi($this,$25);
       $26 = (($this) + 450|0);
       $27 = HEAP8[$26]|0;
       $28 = (($this) + 24874|0);
       HEAP8[$28] = $27;
       $29 = (($this) + 451|0);
       $30 = HEAP8[$29]|0;
       $31 = (($this) + 24875|0);
       HEAP8[$31] = $30;
       __ZN7Gbs_Emu12update_timerEv($this);
       $32 = (($this) + 428|0);
       $33 = HEAP32[$32>>2]|0;
       $34 = (($this) + 432|0);
       HEAP32[$34>>2] = $33;
       $35 = $track&255;
       $36 = (($this) + 342|0);
       HEAP8[$36] = $35;
       $37 = (($this) + 344|0);
       $38 = $37;
       HEAP32[$38>>2] = 61453;
       $39 = (($this) + 448|0);
       $40 = (__Z8get_le16PKv($39)|0);
       $41 = $40&65535;
       $42 = (($this) + 348|0);
       $43 = $42;
       HEAP16[$43>>1] = $41;
       $44 = (($this) + 424|0);
       HEAP32[$44>>2] = 0;
       $45 = (($this) + 444|0);
       $46 = (__Z8get_le16PKv($45)|0);
       __ZN7Gbs_Emu7cpu_jsrEj($this,$46);
       $$0 = 0;
       STACKTOP = sp;return ($$0|0);
      }
      function __ZN8Rom_DataILi16384EE8set_addrEl($this,$addr) {
       $this = $this|0;
       $addr = $addr|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       __ZN9Rom_Data_9set_addr_Eli($1,$addr,16384);
       STACKTOP = sp;return;
      }
      function __ZN8Rom_DataILi16384EE8unmappedEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = (__ZNK13blargg_vectorIhE5beginEv($1)|0);
       STACKTOP = sp;return ($2|0);
      }
      function __ZN7Gbs_Emu10run_clocksERii($this,$duration,u$0) {
       $this = $this|0;
       $duration = $duration|0;
       u$0 = u$0|0;
       var $$ = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
       var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
       var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 424|0);
       HEAP32[$1>>2] = 0;
       $2 = HEAP32[$duration>>2]|0;
       $3 = ($2|0)>(0);
       L1: do {
        if ($3) {
         $4 = (($this) + 336|0);
         $5 = $4;
         $6 = (($this) + 344|0);
         $7 = $6;
         $8 = (($this) + 432|0);
         $9 = (($this) + 428|0);
         $10 = (($this) + 446|0);
         $11 = $this;
         $12 = $2;$13 = 0;
         L3: while(1) {
          $14 = (($12) - ($13))|0;
          HEAP32[$1>>2] = $12;
          $15 = (__ZN6Gb_Cpu3runEl($5,$14)|0);
          $16 = (__ZNK6Gb_Cpu6remainEv($5)|0);
          $17 = HEAP32[$1>>2]|0;
          $18 = (($17) - ($16))|0;
          HEAP32[$1>>2] = $18;
          do {
           if ($15) {
            $19 = HEAP32[$7>>2]|0;
            $20 = ($19|0)==(61453);
            if (!($20)) {
             $32 = ($19|0)>(65535);
             if ($32) {
              $33 = $19 & 65535;
              HEAP32[$7>>2] = $33;
              break;
             } else {
              __ZN8Gme_File11set_warningEPKc($11,(39656));
              $34 = HEAP32[$7>>2]|0;
              $35 = (($34) + 1)|0;
              $36 = $35 & 65535;
              HEAP32[$7>>2] = $36;
              $37 = HEAP32[$1>>2]|0;
              $38 = (($37) + 6)|0;
              HEAP32[$1>>2] = $38;
              break;
             }
            }
            $21 = HEAP32[$8>>2]|0;
            $22 = HEAP32[$duration>>2]|0;
            $23 = ($21|0)>($22|0);
            if ($23) {
             break L3;
            }
            $24 = ($18|0)<($21|0);
            if ($24) {
             HEAP32[$1>>2] = $21;
            }
            $25 = HEAP32[$9>>2]|0;
            $26 = HEAP32[$8>>2]|0;
            $27 = (($26) + ($25))|0;
            HEAP32[$8>>2] = $27;
            $28 = (__Z8get_le16PKv($10)|0);
            __ZN7Gbs_Emu7cpu_jsrEj($this,$28);
           }
          } while(0);
          $29 = HEAP32[$1>>2]|0;
          $30 = HEAP32[$duration>>2]|0;
          $31 = ($29|0)<($30|0);
          if ($31) {
           $12 = $30;$13 = $29;
          } else {
           break L1;
          }
         }
         HEAP32[$1>>2] = $22;
        }
       } while(0);
       $39 = HEAP32[$1>>2]|0;
       HEAP32[$duration>>2] = $39;
       $40 = HEAP32[$1>>2]|0;
       $41 = (($this) + 432|0);
       $42 = HEAP32[$41>>2]|0;
       $43 = (($42) - ($40))|0;
       $44 = ($43|0)<(0);
       $$ = $44 ? 0 : $43;
       HEAP32[$41>>2] = $$;
       $45 = (($this) + 25136|0);
       $46 = HEAP32[$1>>2]|0;
       __ZN6Gb_Apu9end_frameEi($45,$46);
       STACKTOP = sp;return (0|0);
      }
      function __ZNK13blargg_vectorIhE4sizeEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 4|0);
       $2 = HEAP32[$1>>2]|0;
       STACKTOP = sp;return ($2|0);
      }
      function __ZL11new_gbs_emuv() {
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (__ZN8Gme_FilenwEj(26888)|0);
       $2 = ($1|0)==(0|0);
       if ($2) {
        $4 = 0;
       } else {
        $3 = $1;
        __ZN7Gbs_EmuC2Ev($3);
        $4 = $3;
       }
       $5 = $4;
       STACKTOP = sp;return ($5|0);
      }
      function __ZL12new_gbs_filev() {
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (__ZN8Gme_FilenwEj(432)|0);
       $2 = ($1|0)==(0|0);
       if ($2) {
        $4 = 0;
       } else {
        $3 = $1;
        __ZN8Gbs_FileC1Ev($3);
        $4 = $3;
       }
       $5 = $4;
       STACKTOP = sp;return ($5|0);
      }
      function __ZN8Gbs_FileC1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN8Gbs_FileC2Ev($this);
       STACKTOP = sp;return;
      }
      function __ZN8Gbs_FileC2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $this;
       __ZN9Gme_Info_C2Ev($1);
       $2 = $this;
       HEAP32[$2>>2] = (((39800) + 8|0));
       $3 = $this;
       __ZN8Gme_File8set_typeEPK11gme_type_t_($3,(39496));
       STACKTOP = sp;return;
      }
      function __ZN8Gbs_FileD1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN8Gbs_FileD2Ev($this);
       STACKTOP = sp;return;
      }
      function __ZN8Gbs_FileD0Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       __ZN8Gbs_FileD1Ev($this);
       $1 = ($this);
       __ZN8Gme_FiledlEPv($1);
       STACKTOP = sp;return;
      }
      function __ZN8Gbs_File5load_ER11Data_Reader($this,$in) {
       $this = $this|0;
       $in = $in|0;
       var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $in;
       $2 = HEAP32[$1>>2]|0;
       $3 = (($2) + 12|0);
       $4 = HEAP32[$3>>2]|0;
       $5 = (($this) + 316|0);
       $6 = (FUNCTION_TABLE_iiii[$4 & 63]($in,$5,112)|0);
       $7 = ($6|0)==(0|0);
       if ($7) {
        $11 = $this;
        $12 = (($this) + 320|0);
        $13 = HEAP8[$12]|0;
        $14 = $13&255;
        __ZN8Gme_File15set_track_countEi($11,$14);
        $15 = (__ZL16check_gbs_headerPKv($5)|0);
        $$0 = $15;
        STACKTOP = sp;return ($$0|0);
       } else {
        $8 = ($6|0)==((37504)|0);
        $9 = HEAP32[(40024)>>2]|0;
        $10 = $8 ? $9 : $6;
        $$0 = $10;
        STACKTOP = sp;return ($$0|0);
       }
       return 0|0;
      }
      function __ZNK8Gbs_File11track_info_EP12track_info_ti($this,$out,u$0) {
       $this = $this|0;
       $out = $out|0;
       u$0 = u$0|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 316|0);
       __ZL15copy_gbs_fieldsRKN7Gbs_Emu8header_tEP12track_info_t($1,$out);
       STACKTOP = sp;return (0|0);
      }
      function __ZN8Gbs_FileD2Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $this;
       __ZN9Gme_Info_D2Ev($1);
       STACKTOP = sp;return;
      }
      function __ZN8Rom_DataILi16384EED2Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       __ZN9Rom_Data_D2Ev($1);
       STACKTOP = sp;return;
      }
      function __ZN9Rom_Data_D2Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       __ZN13blargg_vectorIhED1Ev($1);
       STACKTOP = sp;return;
      }
      function __ZN13blargg_vectorIhED1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN13blargg_vectorIhED2Ev($this);
       STACKTOP = sp;return;
      }
      function __ZN13blargg_vectorIhED2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = HEAP32[$1>>2]|0;
       _free($2);
       STACKTOP = sp;return;
      }
      function __ZNK9Music_Emu11sample_rateEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 256|0);
       $2 = HEAP32[$1>>2]|0;
       STACKTOP = sp;return ($2|0);
      }
      function __ZN8Rom_DataILi16384EEC2Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       __ZN9Rom_Data_C2Ev($1);
       STACKTOP = sp;return;
      }
      function __ZN9Rom_Data_C2Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       __ZN13blargg_vectorIhEC1Ev($1);
       STACKTOP = sp;return;
      }
      function __ZN13blargg_vectorIhEC1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN13blargg_vectorIhEC2Ev($this);
       STACKTOP = sp;return;
      }
      function __ZN13blargg_vectorIhEC2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       HEAP32[$1>>2] = 0;
       $2 = (($this) + 4|0);
       HEAP32[$2>>2] = 0;
       STACKTOP = sp;return;
      }
      function __ZN8Gme_File14clear_playlistEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 28|0);
       __ZN12M3u_Playlist5clearEv($1);
       $2 = $this;
       $3 = HEAP32[$2>>2]|0;
       $4 = (($3) + 32|0);
       $5 = HEAP32[$4>>2]|0;
       FUNCTION_TABLE_vi[$5 & 127]($this);
       $6 = (($this) + 12|0);
       $7 = HEAP32[$6>>2]|0;
       $8 = (($this) + 8|0);
       HEAP32[$8>>2] = $7;
       STACKTOP = sp;return;
      }
      function __ZN12M3u_Playlist5clearEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 16|0);
       HEAP32[$1>>2] = 0;
       $2 = ($this);
       __ZN13blargg_vectorIN12M3u_Playlist7entry_tEE5clearEv($2);
       $3 = (($this) + 8|0);
       __ZN13blargg_vectorIcE5clearEv($3);
       STACKTOP = sp;return;
      }
      function __ZN8Gme_File6unloadEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       __ZN8Gme_File14clear_playlistEv($this);
       $1 = (($this) + 8|0);
       HEAP32[$1>>2] = 0;
       $2 = (($this) + 12|0);
       HEAP32[$2>>2] = 0;
       $3 = (($this) + 132|0);
       __ZN13blargg_vectorIhE5clearEv($3);
       STACKTOP = sp;return;
      }
      function __ZN8Gme_FileC2Ev($this) {
       $this = $this|0;
       var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       HEAP32[$1>>2] = ((((40032) + 8|0)));
       $2 = (($this) + 28|0);
       __ZN12M3u_PlaylistC1Ev($2);
       $3 = (($this) + 132|0);
       __ZN13blargg_vectorIhEC1Ev($3);
       $4 = (($this) + 4|0);
       HEAP32[$4>>2] = 0;
       $5 = (($this) + 20|0);
       HEAP32[$5>>2] = 0;
       $6 = (($this) + 24|0);
       HEAP32[$6>>2] = 0;
       $7 = $this;
       $8 = HEAP32[$7>>2]|0;
       $9 = (($8) + 8|0);
       $10 = HEAP32[$9>>2]|0;
       FUNCTION_TABLE_vi[$10 & 127]($this);
       __Z24blargg_verify_byte_orderv();
       STACKTOP = sp;return;
      }
      function __ZN12M3u_PlaylistC1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN12M3u_PlaylistC2Ev($this);
       STACKTOP = sp;return;
      }
      function __ZN12M3u_PlaylistD1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN12M3u_PlaylistD2Ev($this);
       STACKTOP = sp;return;
      }
      function __ZN8Gme_FileD0Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       __ZN8Gme_FileD2Ev($this);
       $1 = $this;
       __ZN8Gme_FiledlEPv($1);
       STACKTOP = sp;return;
      }
      function __ZN8Gme_FileD2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       HEAP32[$1>>2] = ((((40032) + 8|0)));
       $2 = (($this) + 24|0);
       $3 = HEAP32[$2>>2]|0;
       $4 = ($3|0)==(0|0);
       if (!($4)) {
        $5 = (($this) + 20|0);
        $6 = HEAP32[$5>>2]|0;
        FUNCTION_TABLE_vi[$3 & 127]($6);
       }
       $7 = (($this) + 132|0);
       __ZN13blargg_vectorIhED1Ev($7);
       $8 = (($this) + 28|0);
       __ZN12M3u_PlaylistD1Ev($8);
       STACKTOP = sp;return;
      }
      function __ZN8Gme_File9load_mem_EPKhl($this,$data,$size) {
       $this = $this|0;
       $data = $data|0;
       $size = $size|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $in = 0, label = 0, sp = 0;
       sp = STACKTOP;
       STACKTOP = STACKTOP + 16|0;
       $in = sp;
       $1 = (($this) + 132|0);
       $2 = (__ZNK13blargg_vectorIhE5beginEv($1)|0);
       $3 = ($2|0)==($data|0);
       if ($3) {
        ___assert_fail(((40080)|0),((40112)|0),55,((40152)|0));
        // unreachable;
       } else {
        __ZN15Mem_File_ReaderC2EPKvl($in,$data,$size);
        $4 = $this;
        $5 = HEAP32[$4>>2]|0;
        $6 = (($5) + 12|0);
        $7 = HEAP32[$6>>2]|0;
        $8 = ($in);
        $9 = (FUNCTION_TABLE_iii[$7 & 63]($this,$8)|0);
        STACKTOP = sp;return ($9|0);
       }
       return 0|0;
      }
      function __ZN8Gme_File5load_ER11Data_Reader($this,$in) {
       $this = $this|0;
       $in = $in|0;
       var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
       var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 132|0);
       $2 = $in;
       $3 = HEAP32[$2>>2]|0;
       $4 = (($3) + 16|0);
       $5 = HEAP32[$4>>2]|0;
       $6 = (FUNCTION_TABLE_ii[$5 & 15]($in)|0);
       $7 = (__ZN13blargg_vectorIhE6resizeEj($1,$6)|0);
       $8 = ($7|0)==(0|0);
       if (!($8)) {
        $$0 = $7;
        STACKTOP = sp;return ($$0|0);
       }
       $9 = $in;
       $10 = HEAP32[$9>>2]|0;
       $11 = (($10) + 12|0);
       $12 = HEAP32[$11>>2]|0;
       $13 = (__ZNK13blargg_vectorIhE5beginEv($1)|0);
       $14 = (__ZNK13blargg_vectorIhE4sizeEv($1)|0);
       $15 = (FUNCTION_TABLE_iiii[$12 & 63]($in,$13,$14)|0);
       $16 = ($15|0)==(0|0);
       if (!($16)) {
        $$0 = $15;
        STACKTOP = sp;return ($$0|0);
       }
       $17 = $this;
       $18 = HEAP32[$17>>2]|0;
       $19 = (($18) + 16|0);
       $20 = HEAP32[$19>>2]|0;
       $21 = (__ZNK13blargg_vectorIhE5beginEv($1)|0);
       $22 = (__ZNK13blargg_vectorIhE4sizeEv($1)|0);
       $23 = (FUNCTION_TABLE_iiii[$20 & 63]($this,$21,$22)|0);
       $$0 = $23;
       STACKTOP = sp;return ($$0|0);
      }
      function __ZN8Gme_File8pre_loadEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $this;
       $2 = HEAP32[$1>>2]|0;
       $3 = (($2) + 8|0);
       $4 = HEAP32[$3>>2]|0;
       FUNCTION_TABLE_vi[$4 & 127]($this);
       STACKTOP = sp;return;
      }
      function __ZN8Gme_File10post_load_Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       STACKTOP = sp;return;
      }
      function __ZN8Gme_File9post_loadEPKc($this,$err) {
       $this = $this|0;
       $err = $err|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (__ZNK8Gme_File11track_countEv($this)|0);
       $2 = ($1|0)==(0);
       if ($2) {
        $3 = (__ZNK8Gme_File4typeEv($this)|0);
        $4 = (($3) + 4|0);
        $5 = HEAP32[$4>>2]|0;
        __ZN8Gme_File15set_track_countEi($this,$5);
       }
       $6 = ($err|0)==(0|0);
       $7 = $this;
       $8 = HEAP32[$7>>2]|0;
       if ($6) {
        $9 = (($8) + 28|0);
        $10 = HEAP32[$9>>2]|0;
        FUNCTION_TABLE_vi[$10 & 127]($this);
        STACKTOP = sp;return ($err|0);
       } else {
        $11 = (($8) + 8|0);
        $12 = HEAP32[$11>>2]|0;
        FUNCTION_TABLE_vi[$12 & 127]($this);
        STACKTOP = sp;return ($err|0);
       }
       return 0|0;
      }
      function __ZNK8Gme_File11track_countEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 8|0);
       $2 = HEAP32[$1>>2]|0;
       STACKTOP = sp;return ($2|0);
      }
      function __ZNK8Gme_File4typeEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 4|0);
       $2 = HEAP32[$1>>2]|0;
       STACKTOP = sp;return ($2|0);
      }
      function __ZN8Gme_File4loadER11Data_Reader($this,$in) {
       $this = $this|0;
       $in = $in|0;
       var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $this;
       $2 = HEAP32[$1>>2]|0;
       $3 = (($2) + 24|0);
       $4 = HEAP32[$3>>2]|0;
       FUNCTION_TABLE_vi[$4 & 127]($this);
       $5 = $this;
       $6 = HEAP32[$5>>2]|0;
       $7 = (($6) + 12|0);
       $8 = HEAP32[$7>>2]|0;
       $9 = (FUNCTION_TABLE_iii[$8 & 63]($this,$in)|0);
       $10 = (__ZN8Gme_File9post_loadEPKc($this,$9)|0);
       STACKTOP = sp;return ($10|0);
      }
      function __ZN8Gme_File11copy_field_EPcPKci($out,$in,$in_size) {
       $out = $out|0;
       $in = $in|0;
       $in_size = $in_size|0;
       var $$$0 = 0, $$0$lcssa = 0, $$02$lcssa = 0, $$025 = 0, $$06 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
       var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $len$04 = 0, $len$04$phi = 0, $len$1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($in|0)==(0|0);
       if ($1) {
        STACKTOP = sp;return;
       }
       $2 = HEAP8[$in]|0;
       $3 = ($2<<24>>24)==(0);
       if ($3) {
        STACKTOP = sp;return;
       }
       $4 = ($in_size|0)==(0);
       L7: do {
        if ($4) {
         $$0$lcssa = 0;$$02$lcssa = $in;
        } else {
         $$025 = $in;$$06 = $in_size;
         while(1) {
          $5 = HEAP8[$$025]|0;
          $6 = $5 << 24 >> 24;
          $7 = (($6) + -1)|0;
          $8 = ($7>>>0)<(32);
          if (!($8)) {
           $$0$lcssa = $$06;$$02$lcssa = $$025;
           break L7;
          }
          $9 = (($$025) + 1|0);
          $10 = (($$06) + -1)|0;
          $11 = ($10|0)==(0);
          if ($11) {
           $$0$lcssa = 0;$$02$lcssa = $9;
           break;
          } else {
           $$025 = $9;$$06 = $10;
          }
         }
        }
       } while(0);
       $12 = ($$0$lcssa|0)>(255);
       $$$0 = $12 ? 255 : $$0$lcssa;
       $13 = ($$$0|0)>(0);
       L12: do {
        if ($13) {
         $len$04 = 0;
         while(1) {
          $15 = (($$02$lcssa) + ($len$04)|0);
          $16 = HEAP8[$15]|0;
          $17 = ($16<<24>>24)==(0);
          $18 = (($len$04) + 1)|0;
          if ($17) {
           $len$1 = $len$04;
           break L12;
          }
          $14 = ($18|0)<($$$0|0);
          if ($14) {
           $len$04$phi = $18;$len$04 = $len$04$phi;
          } else {
           $len$1 = $18;
           break;
          }
         }
        } else {
         $len$1 = 0;
        }
       } while(0);
       while(1) {
        $19 = ($len$1|0)==(0);
        if ($19) {
         break;
        }
        $20 = (($len$1) + -1)|0;
        $21 = (($$02$lcssa) + ($20)|0);
        $22 = HEAP8[$21]|0;
        $23 = ($22&255)<(33);
        if ($23) {
         $len$1 = $20;
        } else {
         break;
        }
       }
       $24 = (($out) + ($len$1)|0);
       HEAP8[$24] = 0;
       _memcpy(($out|0),($$02$lcssa|0),($len$1|0))|0;
       $25 = (_strcmp($out,(40168))|0);
       $26 = ($25|0)==(0);
       do {
        if (!($26)) {
         $27 = (_strcmp($out,(40176))|0);
         $28 = ($27|0)==(0);
         if ($28) {
          break;
         }
         $29 = (_strcmp($out,(40184))|0);
         $30 = ($29|0)==(0);
         if ($30) {
          break;
         }
         STACKTOP = sp;return;
        }
       } while(0);
       HEAP8[$out] = 0;
       STACKTOP = sp;return;
      }
      function __ZN8Gme_File11copy_field_EPcPKc($out,$in) {
       $out = $out|0;
       $in = $in|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN8Gme_File11copy_field_EPcPKci($out,$in,255);
       STACKTOP = sp;return;
      }
      function __ZNK8Gme_File12remap_track_EPi($this,$track_io) {
       $this = $this|0;
       $track_io = $track_io|0;
       var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
       var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = HEAP32[$track_io>>2]|0;
       $2 = (__ZNK8Gme_File11track_countEv($this)|0);
       $3 = ($1>>>0)<($2>>>0);
       if (!($3)) {
        $$0 = (40192);
        STACKTOP = sp;return ($$0|0);
       }
       $4 = (($this) + 28|0);
       $5 = (__ZNK12M3u_Playlist4sizeEv($4)|0);
       $6 = ($1>>>0)<($5>>>0);
       do {
        if ($6) {
         $7 = (__ZNK12M3u_PlaylistixEi($4,$1)|0);
         HEAP32[$track_io>>2] = 0;
         $8 = (($7) + 16|0);
         $9 = HEAP32[$8>>2]|0;
         $10 = ($9|0)>(-1);
         do {
          if ($10) {
           HEAP32[$track_io>>2] = $9;
           $11 = (($this) + 4|0);
           $12 = HEAP32[$11>>2]|0;
           $13 = (($12) + 20|0);
           $14 = HEAP32[$13>>2]|0;
           $15 = $14 & 2;
           $16 = ($15|0)==(0);
           if (!($16)) {
            break;
           }
           $17 = (($7) + 12|0);
           $18 = HEAP8[$17]|0;
           $19 = $18&255;
           $20 = (($9) - ($19))|0;
           HEAP32[$track_io>>2] = $20;
          }
         } while(0);
         $21 = HEAP32[$track_io>>2]|0;
         $22 = (($this) + 12|0);
         $23 = HEAP32[$22>>2]|0;
         $24 = ($21|0)<($23|0);
         if ($24) {
          break;
         } else {
          $$0 = (40208);
         }
         STACKTOP = sp;return ($$0|0);
        }
       } while(0);
       $$0 = 0;
       STACKTOP = sp;return ($$0|0);
      }
      function __ZNK12M3u_Playlist4sizeEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = (__ZNK13blargg_vectorIN12M3u_Playlist7entry_tEE4sizeEv($1)|0);
       STACKTOP = sp;return ($2|0);
      }
      function __ZNK12M3u_PlaylistixEi($this,$i) {
       $this = $this|0;
       $i = $i|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = (__ZNK13blargg_vectorIN12M3u_Playlist7entry_tEEixEj($1,$i)|0);
       STACKTOP = sp;return ($2|0);
      }
      function __ZNK8Gme_File10track_infoEP12track_info_ti($this,$out,$track) {
       $this = $this|0;
       $out = $out|0;
       $track = $track|0;
       var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
       var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
       var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $remapped = 0, label = 0, sp = 0;
       sp = STACKTOP;
       STACKTOP = STACKTOP + 8|0;
       $remapped = sp;
       $1 = (__ZNK8Gme_File11track_countEv($this)|0);
       $2 = ($out);
       HEAP32[$2>>2] = $1;
       $3 = (($out) + 4|0);
       HEAP32[$3>>2] = -1;
       $4 = (($out) + 12|0);
       HEAP32[$4>>2] = -1;
       $5 = (($out) + 8|0);
       HEAP32[$5>>2] = -1;
       $6 = (($out) + 528|0);
       HEAP8[$6] = 0;
       $7 = (($out) + 272|0);
       HEAP8[$7] = 0;
       $8 = (($out) + 784|0);
       HEAP8[$8] = 0;
       $9 = (($out) + 1040|0);
       HEAP8[$9] = 0;
       $10 = (($out) + 1296|0);
       HEAP8[$10] = 0;
       $11 = (($out) + 1552|0);
       HEAP8[$11] = 0;
       $12 = (($out) + 16|0);
       HEAP8[$12] = 0;
       $13 = (__ZNK8Gme_File4typeEv($this)|0);
       $14 = ($13);
       $15 = HEAP32[$14>>2]|0;
       __ZN8Gme_File11copy_field_EPcPKc($12,$15);
       HEAP32[$remapped>>2] = $track;
       $16 = (__ZNK8Gme_File12remap_track_EPi($this,$remapped)|0);
       $17 = ($16|0)==(0|0);
       if (!($17)) {
        $$0 = $16;
        STACKTOP = sp;return ($$0|0);
       }
       $18 = $this;
       $19 = HEAP32[$18>>2]|0;
       $20 = (($19) + 20|0);
       $21 = HEAP32[$20>>2]|0;
       $22 = HEAP32[$remapped>>2]|0;
       $23 = (FUNCTION_TABLE_iiii[$21 & 63]($this,$out,$22)|0);
       $24 = ($23|0)==(0|0);
       if (!($24)) {
        $$0 = $23;
        STACKTOP = sp;return ($$0|0);
       }
       $25 = (($this) + 28|0);
       $26 = (__ZNK12M3u_Playlist4sizeEv($25)|0);
       $27 = ($26|0)==(0);
       if ($27) {
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
       }
       $28 = (__ZNK12M3u_Playlist4infoEv($25)|0);
       $29 = ($28);
       $30 = HEAP32[$29>>2]|0;
       __ZN8Gme_File11copy_field_EPcPKc($7,$30);
       $31 = (($28) + 8|0);
       $32 = HEAP32[$31>>2]|0;
       __ZN8Gme_File11copy_field_EPcPKc($8,$32);
       $33 = (($28) + 4|0);
       $34 = HEAP32[$33>>2]|0;
       __ZN8Gme_File11copy_field_EPcPKc($8,$34);
       $35 = (($28) + 12|0);
       $36 = HEAP32[$35>>2]|0;
       __ZN8Gme_File11copy_field_EPcPKc($11,$36);
       $37 = (__ZNK12M3u_PlaylistixEi($25,$track)|0);
       $38 = (($37) + 8|0);
       $39 = HEAP32[$38>>2]|0;
       __ZN8Gme_File11copy_field_EPcPKc($6,$39);
       $40 = (($37) + 20|0);
       $41 = HEAP32[$40>>2]|0;
       $42 = ($41|0)>(-1);
       if ($42) {
        $43 = ($41*1000)|0;
        HEAP32[$3>>2] = $43;
       }
       $44 = (($37) + 24|0);
       $45 = HEAP32[$44>>2]|0;
       $46 = ($45|0)>(-1);
       if ($46) {
        $47 = ($45*1000)|0;
        HEAP32[$5>>2] = $47;
       }
       $48 = (($37) + 28|0);
       $49 = HEAP32[$48>>2]|0;
       $50 = ($49|0)>(-1);
       if (!($50)) {
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
       }
       $51 = ($49*1000)|0;
       HEAP32[$4>>2] = $51;
       $$0 = 0;
       STACKTOP = sp;return ($$0|0);
      }
      function __ZNK12M3u_Playlist4infoEv($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 20|0);
       STACKTOP = sp;return ($1|0);
      }
      function __ZNK13blargg_vectorIN12M3u_Playlist7entry_tEEixEj($this,$n) {
       $this = $this|0;
       $n = $n|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 4|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = ($2>>>0)<($n>>>0);
       if ($3) {
        ___assert_fail(((40264)|0),((40280)|0),58,((40320)|0));
        // unreachable;
       } else {
        $4 = ($this);
        $5 = HEAP32[$4>>2]|0;
        $6 = (($5) + (($n*40)|0)|0);
        STACKTOP = sp;return ($6|0);
       }
       return 0|0;
      }
      function __ZNK13blargg_vectorIN12M3u_Playlist7entry_tEE4sizeEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 4|0);
       $2 = HEAP32[$1>>2]|0;
       STACKTOP = sp;return ($2|0);
      }
      function __ZN12M3u_PlaylistD2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 8|0);
       __ZN13blargg_vectorIcED1Ev($1);
       $2 = ($this);
       __ZN13blargg_vectorIN12M3u_Playlist7entry_tEED1Ev($2);
       STACKTOP = sp;return;
      }
      function __ZN13blargg_vectorIcED1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN13blargg_vectorIcED2Ev($this);
       STACKTOP = sp;return;
      }
      function __ZN13blargg_vectorIN12M3u_Playlist7entry_tEED1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN13blargg_vectorIN12M3u_Playlist7entry_tEED2Ev($this);
       STACKTOP = sp;return;
      }
      function __ZN13blargg_vectorIN12M3u_Playlist7entry_tEED2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = HEAP32[$1>>2]|0;
       $3 = $2;
       _free($3);
       STACKTOP = sp;return;
      }
      function __ZN13blargg_vectorIcED2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = HEAP32[$1>>2]|0;
       _free($2);
       STACKTOP = sp;return;
      }
      function __ZN12M3u_PlaylistC2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       __ZN13blargg_vectorIN12M3u_Playlist7entry_tEEC1Ev($1);
       $2 = (($this) + 8|0);
       __ZN13blargg_vectorIcEC1Ev($2);
       STACKTOP = sp;return;
      }
      function __ZN13blargg_vectorIN12M3u_Playlist7entry_tEEC1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN13blargg_vectorIN12M3u_Playlist7entry_tEEC2Ev($this);
       STACKTOP = sp;return;
      }
      function __ZN13blargg_vectorIcEC1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN13blargg_vectorIcEC2Ev($this);
       STACKTOP = sp;return;
      }
      function __ZN13blargg_vectorIcEC2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       HEAP32[$1>>2] = 0;
       $2 = (($this) + 4|0);
       HEAP32[$2>>2] = 0;
       STACKTOP = sp;return;
      }
      function __ZN13blargg_vectorIN12M3u_Playlist7entry_tEEC2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       HEAP32[$1>>2] = 0;
       $2 = (($this) + 4|0);
       HEAP32[$2>>2] = 0;
       STACKTOP = sp;return;
      }
      function __ZN13blargg_vectorIN12M3u_Playlist7entry_tEE5clearEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = HEAP32[$1>>2]|0;
       $3 = $2;
       HEAP32[$1>>2] = 0;
       $4 = (($this) + 4|0);
       HEAP32[$4>>2] = 0;
       _free($3);
       STACKTOP = sp;return;
      }
      function __ZN13blargg_vectorIcE5clearEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = HEAP32[$1>>2]|0;
       HEAP32[$1>>2] = 0;
       $3 = (($this) + 4|0);
       HEAP32[$3>>2] = 0;
       _free($2);
       STACKTOP = sp;return;
      }
      function __ZN7Gym_EmuC2Ev($this) {
       $this = $this|0;
       var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       __ZN9Music_EmuC2Ev($1);
       $2 = (($this) + 320|0);
       __ZN14Dual_ResamplerC2Ev($2);
       $3 = ($this);
       HEAP32[$3>>2] = ((((40336) + 8|0)));
       $4 = (($this) + 320|0);
       HEAP32[$4>>2] = ((((40336) + 92|0)));
       $5 = (($this) + 1648|0);
       __ZN11Blip_BufferC2Ev($5);
       $6 = (($this) + 1692|0);
       __ZN10Ym2612_EmuC1Ev($6);
       $7 = (($this) + 1696|0);
       __ZN10Blip_SynthILi8ELi1EEC1Ev($7);
       $8 = (($this) + 2256|0);
       __ZN7Sms_ApuC2Ev($8);
       $9 = (($this) + 1176|0);
       HEAP32[$9>>2] = 0;
       $10 = (($this) + 1184|0);
       HEAP32[$10>>2] = 0;
       $11 = ($this);
       __ZN8Gme_File8set_typeEPK11gme_type_t_($11,(40544));
       __ZN9Music_Emu15set_voice_namesEPKPKc($1,((40448)));
       __ZN9Music_Emu21set_silence_lookaheadEi($1,1);
       STACKTOP = sp;return;
      }
      function __ZN10Ym2612_EmuC1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN10Ym2612_EmuC2Ev($this);
       STACKTOP = sp;return;
      }
      function __ZN7Gym_EmuD0Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       __ZN7Gym_EmuD2Ev($this);
       $1 = $this;
       __ZN8Gme_FiledlEPv($1);
       STACKTOP = sp;return;
      }
      function __ZThn320_N7Gym_EmuD0Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + -320|0);
       $2 = $1;
       __ZN7Gym_EmuD0Ev($2);
       STACKTOP = sp;return;
      }
      function __ZN7Gym_EmuD2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       HEAP32[$1>>2] = ((((40336) + 8|0)));
       $2 = (($this) + 320|0);
       HEAP32[$2>>2] = ((((40336) + 92|0)));
       $3 = (($this) + 2256|0);
       __ZN7Sms_ApuD2Ev($3);
       $4 = (($this) + 1692|0);
       __ZN10Ym2612_EmuD2Ev($4);
       $5 = (($this) + 1648|0);
       __ZN11Blip_BufferD2Ev($5);
       $6 = (($this) + 320|0);
       __ZN14Dual_ResamplerD2Ev($6);
       $7 = ($this);
       __ZN9Music_EmuD2Ev($7);
       STACKTOP = sp;return;
      }
      function __ZThn320_N7Gym_EmuD1Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + -320|0);
       $2 = $1;
       __ZN7Gym_EmuD2Ev($2);
       STACKTOP = sp;return;
      }
      function __ZNK7Gym_Emu11track_info_EP12track_info_ti($this,$out,u$0) {
       $this = $this|0;
       $out = $out|0;
       u$0 = u$0|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 1196|0);
       $2 = (__ZNK7Gym_Emu12track_lengthEv($this)|0);
       __ZL12get_gym_infoRKN7Gym_Emu8header_tElP12track_info_t($1,$2,$out);
       STACKTOP = sp;return (0|0);
      }
      function __ZL12get_gym_infoRKN7Gym_Emu8header_tElP12track_info_t($h,$length,$out) {
       $h = $h|0;
       $length = $length|0;
       $out = $out|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
       var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($h);
       $2 = (_memcmp($1,(40616),4)|0);
       $3 = ($2|0)==(0);
       if (!($3)) {
        STACKTOP = sp;return;
       }
       $4 = ($length*50)|0;
       $5 = (($4|0) / 3)&-1;
       $6 = (($h) + 420|0);
       $7 = (__Z8get_le32PKv($6)|0);
       $8 = ($7|0)==(0);
       if ($8) {
        $14 = (($out) + 4|0);
        HEAP32[$14>>2] = $5;
        $15 = (($out) + 8|0);
        HEAP32[$15>>2] = $5;
        $16 = (($out) + 12|0);
        HEAP32[$16>>2] = 0;
       } else {
        $9 = ($7*50)|0;
        $10 = (($9|0) / 3)&-1;
        $11 = (($out) + 8|0);
        HEAP32[$11>>2] = $10;
        $12 = (($5) - ($10))|0;
        $13 = (($out) + 12|0);
        HEAP32[$13>>2] = $12;
       }
       $17 = (($h) + 4|0);
       $18 = (_strcmp($17,(40800))|0);
       $19 = ($18|0)==(0);
       if (!($19)) {
        $20 = (($out) + 528|0);
        __ZN8Gme_File11copy_field_EPcPKci($20,$17,32);
       }
       $21 = (($h) + 36|0);
       $22 = (_strcmp($21,(40816))|0);
       $23 = ($22|0)==(0);
       if (!($23)) {
        $24 = (($out) + 272|0);
        __ZN8Gme_File11copy_field_EPcPKci($24,$21,32);
       }
       $25 = (($h) + 68|0);
       $26 = (_strcmp($25,(40832))|0);
       $27 = ($26|0)==(0);
       if (!($27)) {
        $28 = (($out) + 1040|0);
        __ZN8Gme_File11copy_field_EPcPKci($28,$25,32);
       }
       $29 = (($h) + 132|0);
       $30 = (_strcmp($29,(40856))|0);
       $31 = ($30|0)==(0);
       if (!($31)) {
        $32 = (($out) + 1552|0);
        __ZN8Gme_File11copy_field_EPcPKci($32,$29,32);
       }
       $33 = (($h) + 164|0);
       $34 = (_strcmp($33,(40872))|0);
       $35 = ($34|0)==(0);
       if ($35) {
        STACKTOP = sp;return;
       }
       $36 = (($out) + 1296|0);
       __ZN8Gme_File11copy_field_EPcPKci($36,$33,256);
       STACKTOP = sp;return;
      }
      function __ZNK7Gym_Emu12track_lengthEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 1176|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = (($this) + 1188|0);
       $4 = HEAP32[$3>>2]|0;
       $5 = (__ZL16gym_track_lengthPKhS0_($2,$4)|0);
       STACKTOP = sp;return ($5|0);
      }
      function __ZL16gym_track_lengthPKhS0_($p,$end) {
       $p = $p|0;
       $end = $end|0;
       var $$0$be = 0, $$0$ph4 = 0, $$01 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $time$0$ph3 = 0, $time$0$ph5 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($p>>>0)<($end>>>0);
       L1: do {
        if ($1) {
         $$0$ph4 = $p;$time$0$ph5 = 0;
         while(1) {
          $$01 = $$0$ph4;
          while(1) {
           $2 = (($$01) + 1|0);
           $3 = HEAP8[$$01]|0;
           $4 = $3&255;
           if ((($4|0) == 0)) {
            break;
           } else if ((($4|0) == 2) | (($4|0) == 1)) {
            $7 = (($$01) + 3|0);
            $$0$be = $7;
           } else if ((($4|0) == 3)) {
            $8 = (($$01) + 2|0);
            $$0$be = $8;
           } else {
            $$0$be = $2;
           }
           $9 = ($$0$be>>>0)<($end>>>0);
           if ($9) {
            $$01 = $$0$be;
           } else {
            $time$0$ph3 = $time$0$ph5;
            break L1;
           }
          }
          $5 = (($time$0$ph5) + 1)|0;
          $6 = ($2>>>0)<($end>>>0);
          if ($6) {
           $$0$ph4 = $2;$time$0$ph5 = $5;
          } else {
           $time$0$ph3 = $5;
           break;
          }
         }
        } else {
         $time$0$ph3 = 0;
        }
       } while(0);
       STACKTOP = sp;return ($time$0$ph3|0);
      }
      function __ZN7Gym_Emu16set_sample_rate_El($this,$sample_rate) {
       $this = $this|0;
       $sample_rate = $sample_rate|0;
       var $$0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $3 = 0, $4 = 0.0;
       var $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, $eq = 0, label = 0, sp = 0;
       sp = STACKTOP;
       STACKTOP = STACKTOP + 24|0;
       $eq = sp;
       __ZN9blip_eq_tC1Edlll($eq,-32.0,8000,$sample_rate,0);
       $1 = (($this) + 2256|0);
       __ZN7Sms_Apu9treble_eqERK9blip_eq_t($1,$eq);
       $2 = (($this) + 1696|0);
       __ZN10Blip_SynthILi8ELi1EE9treble_eqERK9blip_eq_t($2,$eq);
       $3 = ($this);
       $4 = (+__ZNK9Music_Emu4gainEv($3));
       $5 = $4 * 0.405000000000000026645;
       __ZN7Sms_Apu6volumeEd($1,$5);
       $6 = (+__ZNK9Music_Emu4gainEv($3));
       $7 = $6 * 0.00146484375;
       __ZN10Blip_SynthILi8ELi1EE6volumeEd($2,$7);
       $8 = (($this) + 320|0);
       $9 = (+__ZNK9Music_Emu4gainEv($3));
       $10 = $9 * 3.0;
       $11 = (+__ZN14Dual_Resampler5setupEddd($8,1.66666666666666674068,0.989999999999999991118,$10));
       $12 = (+($sample_rate|0));
       $13 = $12 * $11;
       $14 = (($this) + 1624|0);
       HEAPF64[$14>>3] = $13;
       $15 = (($this) + 1648|0);
       $16 = (__ZN11Blip_Buffer15set_sample_rateEli($15,$sample_rate,66)|0);
       $17 = ($16|0)==(0|0);
       if (!($17)) {
        $$0 = $16;
        STACKTOP = sp;return ($$0|0);
       }
       __ZN11Blip_Buffer10clock_rateEl($15,3580020);
       $18 = (($this) + 1692|0);
       $19 = +HEAPF64[$14>>3];
       $20 = (__ZN10Ym2612_Emu8set_rateEdd($18,$19,7671471.42857142817229)|0);
       $21 = ($20|0)==(0|0);
       if (!($21)) {
        $$0 = $20;
        STACKTOP = sp;return ($$0|0);
       }
       $22 = $12 * 0.0666666666666666657414;
       $23 = (~~(($22)));
       $24 = (__ZN14Dual_Resampler5resetEi($8,$23)|0);
       $$0 = $24;
       STACKTOP = sp;return ($$0|0);
      }
      function __ZN9blip_eq_tC1Edlll($this,$t,$rf,$sr,$cf) {
       $this = $this|0;
       $t = +$t;
       $rf = $rf|0;
       $sr = $sr|0;
       $cf = $cf|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN9blip_eq_tC2Edlll($this,$t,$rf,$sr,$cf);
       STACKTOP = sp;return;
      }
      function __ZN14Dual_Resampler5setupEddd($this,$oversample,$rolloff,$gain) {
       $this = $this|0;
       $oversample = +$oversample;
       $rolloff = +$rolloff;
       $gain = +$gain;
       var $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 32|0);
       $2 = $1;
       $3 = $gain * 0.5;
       $4 = (+__ZN14Fir_Resampler_10time_ratioEddd($2,$oversample,$rolloff,$3));
       STACKTOP = sp;return (+$4);
      }
      function __ZN7Gym_Emu10set_tempo_Ed($this,$t) {
       $this = $this|0;
       $t = +$t;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $t < 0.25;
       if ($1) {
        $2 = ($this);
        __ZN9Music_Emu9set_tempoEd($2,0.25);
        STACKTOP = sp;return;
       }
       $3 = (($this) + 1648|0);
       $4 = (__ZNK11Blip_Buffer11sample_rateEv($3)|0);
       $5 = ($4|0)==(0);
       if ($5) {
        STACKTOP = sp;return;
       }
       $6 = ($this);
       $7 = (+__ZNK9Music_Emu5tempoEv($6));
       $8 = 59667.0 / $7;
       $9 = (~~(($8)));
       $10 = (($this) + 1632|0);
       HEAP32[$10>>2] = $9;
       $11 = (($this) + 320|0);
       $12 = (__ZNK9Music_Emu11sample_rateEv($6)|0);
       $13 = (+($12|0));
       $14 = (+__ZNK9Music_Emu5tempoEv($6));
       $15 = $14 * 60.0;
       $16 = $13 / $15;
       $17 = (~~(($16)));
       __ZN14Dual_Resampler6resizeEi($11,$17);
       STACKTOP = sp;return;
      }
      function __ZN7Gym_Emu12mute_voices_Ei($this,$mask) {
       $this = $this|0;
       $mask = $mask|0;
       var $$lobit = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 1692|0);
       __ZN10Ym2612_Emu11mute_voicesEi($1,$mask);
       $2 = (($this) + 1645|0);
       $3 = $mask >>> 6;
       $$lobit = $3 & 1;
       $4 = $$lobit&255;
       HEAP8[$2] = $4;
       $5 = (($this) + 2256|0);
       $6 = $mask & 128;
       $7 = ($6|0)!=(0);
       $8 = (($this) + 1648|0);
       $9 = $7 ? 0 : $8;
       __ZN7Sms_Apu6outputEP11Blip_Buffer($5,$9);
       STACKTOP = sp;return;
      }
      function __ZN7Sms_Apu6outputEP11Blip_Buffer($this,$b) {
       $this = $this|0;
       $b = $b|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN7Sms_Apu6outputEP11Blip_BufferS1_S1_($this,$b,$b,$b);
       STACKTOP = sp;return;
      }
      function __ZN7Gym_Emu9load_mem_EPKhl($this,$in,$size) {
       $this = $this|0;
       $in = $in|0;
       $size = $size|0;
       var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset = 0, label = 0, sp = 0;
       sp = STACKTOP;
       STACKTOP = STACKTOP + 8|0;
       $offset = sp;
       HEAP32[$offset>>2] = 0;
       $1 = (__ZL12check_headerPKhlPi($in,$size,$offset)|0);
       $2 = ($1|0)==(0|0);
       if (!($2)) {
        $$0 = $1;
        STACKTOP = sp;return ($$0|0);
       }
       $3 = ($this);
       __ZN9Music_Emu15set_voice_countEi($3,8);
       $4 = HEAP32[$offset>>2]|0;
       $5 = (($in) + ($4)|0);
       $6 = (($this) + 1176|0);
       HEAP32[$6>>2] = $5;
       $7 = (($in) + ($size)|0);
       $8 = (($this) + 1188|0);
       HEAP32[$8>>2] = $7;
       $9 = (($this) + 1180|0);
       HEAP32[$9>>2] = 0;
       $10 = HEAP32[$offset>>2]|0;
       $11 = ($10|0)==(0);
       $12 = (($this) + 1196|0);
       if ($11) {
        _memset(($12|0),0,428)|0;
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
       } else {
        _memcpy(($12|0),($in|0),428)|0;
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
       }
       return 0|0;
      }
      function __ZL12check_headerPKhlPi($in,$size,$data_offset) {
       $in = $in|0;
       $size = $size|0;
       $data_offset = $data_offset|0;
       var $$ = 0, $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($size|0)<(4);
       do {
        if ($1) {
         $2 = HEAP32[(40024)>>2]|0;
         $$0 = $2;
        } else {
         $3 = (_memcmp($in,(40616),4)|0);
         $4 = ($3|0)==(0);
         if (!($4)) {
          $11 = HEAP8[$in]|0;
          $12 = ($11&255)>(3);
          $13 = HEAP32[(40024)>>2]|0;
          $$ = $12 ? $13 : 0;
          STACKTOP = sp;return ($$|0);
         }
         $5 = ($size|0)<(429);
         if ($5) {
          $6 = HEAP32[(40024)>>2]|0;
          $$0 = $6;
          break;
         }
         $7 = (($in) + 424|0);
         $8 = (_memcmp($7,(40624),4)|0);
         $9 = ($8|0)==(0);
         if (!($9)) {
          $$0 = (40632);
          break;
         }
         $10 = ($data_offset|0)==(0|0);
         if ($10) {
          $$0 = 0;
          break;
         }
         HEAP32[$data_offset>>2] = 428;
         $$0 = 0;
        }
       } while(0);
       STACKTOP = sp;return ($$0|0);
      }
      function __ZN7Gym_Emu12start_track_Ei($this,$track) {
       $this = $this|0;
       $track = $track|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 1176|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = (($this) + 1184|0);
       HEAP32[$3>>2] = $2;
       $4 = (($this) + 1616|0);
       $5 = (__Z8get_le32PKv($4)|0);
       $6 = (($this) + 1192|0);
       HEAP32[$6>>2] = $5;
       $7 = (($this) + 1640|0);
       HEAP32[$7>>2] = 0;
       $8 = (($this) + 1644|0);
       HEAP8[$8] = 0;
       $9 = (($this) + 1636|0);
       HEAP32[$9>>2] = -1;
       $10 = (($this) + 1692|0);
       __ZN10Ym2612_Emu5resetEv($10);
       $11 = (($this) + 2256|0);
       __ZN7Sms_Apu5resetEji($11,0,0);
       $12 = (($this) + 1648|0);
       __ZN11Blip_Buffer5clearEi($12,1);
       $13 = (($this) + 320|0);
       __ZN14Dual_Resampler5clearEv($13);
       STACKTOP = sp;return (0|0);
      }
      function __Z8get_le32PKv($p) {
       $p = $p|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($p) + 3|0);
       $2 = HEAP8[$1]|0;
       $3 = $2&255;
       $4 = $3 << 24;
       $5 = (($p) + 2|0);
       $6 = HEAP8[$5]|0;
       $7 = $6&255;
       $8 = $7 << 16;
       $9 = $8 | $4;
       $10 = (($p) + 1|0);
       $11 = HEAP8[$10]|0;
       $12 = $11&255;
       $13 = $12 << 8;
       $14 = $9 | $13;
       $15 = HEAP8[$p]|0;
       $16 = $15&255;
       $17 = $14 | $16;
       STACKTOP = sp;return ($17|0);
      }
      function __ZN7Gym_Emu7run_dacEi($this,$dac_count) {
       $this = $this|0;
       $dac_count = $dac_count|0;
       var $$ = 0, $$dac_count = 0, $$next_dac_count$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
       var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
       var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $5$phi = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dac_amp$1$lcssa = 0, $dac_amp$1$ph = 0, $dac_amp$16 = 0, $dac_amp$16$phi = 0, $exitcond = 0, $i$07 = 0, $i$07$phi = 0, $next_dac_count$0$lcssa = 0, $next_dac_count$09 = 0, $next_dac_count$09$phi = 0;
       var $or$cond = 0, $or$cond1 = 0, $or$cond1$not = 0, $or$cond2 = 0, $or$cond3 = 0, $or$cond4 = 0, $p$08 = 0, $p$08$phi = 0, $rate_count$0 = 0, $start$0 = 0, $time$05 = 0, $time$05$phi = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 1184|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = HEAP8[$2]|0;
       $4 = ($3<<24>>24)==(0);
       if ($4) {
        $next_dac_count$0$lcssa = 0;
       } else {
        $5 = $3;$next_dac_count$09 = 0;$p$08 = $2;
        while(1) {
         $6 = (($p$08) + 1|0);
         $7 = (($p$08) + 2|0);
         $8 = HEAP8[$6]|0;
         $9 = ($5&255)<(3);
         $10 = (($p$08) + 3|0);
         $$ = $9 ? $10 : $7;
         $11 = ($5<<24>>24)==(1);
         $12 = ($8<<24>>24)==(42);
         $or$cond = $11 & $12;
         $13 = $or$cond&1;
         $$next_dac_count$0 = (($13) + ($next_dac_count$09))|0;
         $14 = HEAP8[$$]|0;
         $15 = ($14<<24>>24)==(0);
         if ($15) {
          $next_dac_count$0$lcssa = $$next_dac_count$0;
          break;
         } else {
          $p$08$phi = $$;$next_dac_count$09$phi = $$next_dac_count$0;$5$phi = $14;$p$08 = $p$08$phi;$next_dac_count$09 = $next_dac_count$09$phi;$5 = $5$phi;
         }
        }
       }
       $16 = (($this) + 1640|0);
       $17 = HEAP32[$16>>2]|0;
       $18 = ($17|0)!=(0);
       $19 = ($next_dac_count$0$lcssa|0)==(0);
       $or$cond1 = $18 | $19;
       $or$cond1$not = $or$cond1 ^ 1;
       $20 = ($next_dac_count$0$lcssa|0)>($dac_count|0);
       $or$cond2 = $20 & $or$cond1$not;
       if ($or$cond2) {
        $21 = (($next_dac_count$0$lcssa) - ($dac_count))|0;
        $rate_count$0 = $next_dac_count$0$lcssa;$start$0 = $21;
       } else {
        $or$cond3 = $18 & $19;
        $22 = ($17|0)>($dac_count|0);
        $or$cond4 = $or$cond3 & $22;
        $$dac_count = $or$cond4 ? $17 : $dac_count;
        $rate_count$0 = $$dac_count;$start$0 = 0;
       }
       $23 = (($this) + 1648|0);
       $24 = (($this) + 1632|0);
       $25 = HEAP32[$24>>2]|0;
       $26 = (__ZNK11Blip_Buffer18resampled_durationEi($23,$25)|0);
       $27 = (($26>>>0) / ($rate_count$0>>>0))&-1;
       $28 = (__ZNK11Blip_Buffer14resampled_timeEi($23,0)|0);
       $29 = Math_imul($27, $start$0)|0;
       $30 = (($28) + ($29))|0;
       $31 = $27 >>> 1;
       $32 = (($30) + ($31))|0;
       $33 = (($this) + 1636|0);
       $34 = HEAP32[$33>>2]|0;
       $35 = ($34|0)<(0);
       if ($35) {
        $36 = (($this) + 3856|0);
        $37 = HEAP8[$36]|0;
        $38 = $37&255;
        $dac_amp$1$ph = $38;
       } else {
        $dac_amp$1$ph = $34;
       }
       $39 = ($dac_count|0)>(0);
       if (!($39)) {
        $dac_amp$1$lcssa = $dac_amp$1$ph;
        HEAP32[$33>>2] = $dac_amp$1$lcssa;
        STACKTOP = sp;return;
       }
       $40 = (($this) + 1696|0);
       $dac_amp$16 = $dac_amp$1$ph;$i$07 = 0;$time$05 = $32;
       while(1) {
        $41 = ((($this) + ($i$07)|0) + 3856|0);
        $42 = HEAP8[$41]|0;
        $43 = $42&255;
        $44 = (($43) - ($dac_amp$16))|0;
        __ZNK10Blip_SynthILi8ELi1EE16offset_resampledEjiP11Blip_Buffer($40,$time$05,$44,$23);
        $45 = (($time$05) + ($27))|0;
        $46 = (($i$07) + 1)|0;
        $exitcond = ($46|0)==($dac_count|0);
        if ($exitcond) {
         $dac_amp$1$lcssa = $43;
         break;
        } else {
         $time$05$phi = $45;$i$07$phi = $46;$dac_amp$16$phi = $43;$time$05 = $time$05$phi;$i$07 = $i$07$phi;$dac_amp$16 = $dac_amp$16$phi;
        }
       }
       HEAP32[$33>>2] = $dac_amp$1$lcssa;
       STACKTOP = sp;return;
      }
      function __ZN7Gym_Emu11parse_frameEv($this) {
       $this = $this|0;
       var $$lcssa = 0, $$lobit = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
       var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
       var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dac_count$0$ph10 = 0, $dac_count$0$ph6 = 0, $pos$0$be = 0, $pos$0$ph9 = 0, $pos$04 = 0, $pos$1 = 0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 1184|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = (($this) + 1192|0);
       $4 = HEAP32[$3>>2]|0;
       $5 = ($4|0)==(0);
       do {
        if (!($5)) {
         $6 = (($4) + -1)|0;
         HEAP32[$3>>2] = $6;
         $7 = ($6|0)==(0);
         if (!($7)) {
          break;
         }
         $8 = (($this) + 1180|0);
         HEAP32[$8>>2] = $2;
        }
       } while(0);
       $9 = (($2) + 1|0);
       $10 = HEAP8[$2]|0;
       $11 = ($10<<24>>24)==(0);
       L5: do {
        if ($11) {
         $$lcssa = $9;$dac_count$0$ph6 = 0;
        } else {
         $12 = (($this) + 1692|0);
         $13 = (($this) + 1644|0);
         $14 = (($this) + 1692|0);
         $15 = (($this) + 2256|0);
         $16 = (($this) + 1644|0);
         $17 = $10;$18 = $9;$dac_count$0$ph10 = 0;$pos$0$ph9 = $2;
         while(1) {
          $19 = ($dac_count$0$ph10|0)<(1024);
          $20 = $17;$21 = $18;$pos$04 = $pos$0$ph9;
          L9: while(1) {
           $22 = (($pos$04) + 2|0);
           $23 = HEAP8[$21]|0;
           $24 = $23&255;
           do {
            if ((($20<<24>>24) == 1)) {
             $25 = (($pos$04) + 3|0);
             $26 = HEAP8[$22]|0;
             $27 = $26&255;
             if ((($23<<24>>24) == 43)) {
              $$lobit = ($26&255) >>> 7;
              HEAP8[$13] = $$lobit;
             } else if ((($23<<24>>24) == 42)) {
              if ($19) {
               break L9;
              } else {
               $pos$0$be = $25;
               break;
              }
             }
             __ZN10Ym2612_Emu6write0Eii($12,$24,$27);
             $pos$0$be = $25;
            } else if ((($20<<24>>24) == 3)) {
             __ZN7Sms_Apu10write_dataEii($15,0,$24);
             $pos$0$be = $22;
            } else if ((($20<<24>>24) == 2)) {
             $35 = (($pos$04) + 3|0);
             $36 = HEAP8[$22]|0;
             $37 = $36&255;
             __ZN10Ym2612_Emu6write1Eii($14,$24,$37);
             $pos$0$be = $35;
            } else {
             $pos$0$be = $21;
            }
           } while(0);
           $38 = (($pos$0$be) + 1|0);
           $39 = HEAP8[$pos$0$be]|0;
           $40 = ($39<<24>>24)==(0);
           if ($40) {
            $$lcssa = $38;$dac_count$0$ph6 = $dac_count$0$ph10;
            break L5;
           } else {
            $20 = $39;$21 = $38;$pos$04 = $pos$0$be;
           }
          }
          $28 = ((($this) + ($dac_count$0$ph10)|0) + 3856|0);
          HEAP8[$28] = $26;
          $29 = HEAP8[$16]|0;
          $30 = $29&255;
          $31 = (($30) + ($dac_count$0$ph10))|0;
          $32 = (($pos$04) + 4|0);
          $33 = HEAP8[$25]|0;
          $34 = ($33<<24>>24)==(0);
          if ($34) {
           $$lcssa = $32;$dac_count$0$ph6 = $31;
           break;
          } else {
           $17 = $33;$18 = $32;$dac_count$0$ph10 = $31;$pos$0$ph9 = $25;
          }
         }
        }
       } while(0);
       $41 = (($this) + 1188|0);
       $42 = HEAP32[$41>>2]|0;
       $43 = ($$lcssa>>>0)<($42>>>0);
       do {
        if ($43) {
         $pos$1 = $$lcssa;
        } else {
         $44 = (($this) + 1180|0);
         $45 = HEAP32[$44>>2]|0;
         $46 = ($45|0)==(0|0);
         if (!($46)) {
          $pos$1 = $45;
          break;
         }
         $47 = ($this);
         __ZN9Music_Emu15set_track_endedEv($47);
         $pos$1 = $$lcssa;
        }
       } while(0);
       HEAP32[$1>>2] = $pos$1;
       $48 = ($dac_count$0$ph6|0)==(0);
       if ($48) {
        $52 = (($this) + 1640|0);
        HEAP32[$52>>2] = $dac_count$0$ph6;
        STACKTOP = sp;return;
       }
       $49 = (($this) + 1645|0);
       $50 = HEAP8[$49]|0;
       $51 = ($50<<24>>24)==(0);
       if (!($51)) {
        $52 = (($this) + 1640|0);
        HEAP32[$52>>2] = $dac_count$0$ph6;
        STACKTOP = sp;return;
       }
       __ZN7Gym_Emu7run_dacEi($this,$dac_count$0$ph6);
       $52 = (($this) + 1640|0);
       HEAP32[$52>>2] = $dac_count$0$ph6;
       STACKTOP = sp;return;
      }
      function __ZN9Music_Emu15set_track_endedEv($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 272|0);
       HEAP8[$1] = 1;
       STACKTOP = sp;return;
      }
      function __ZN7Gym_Emu10play_frameEiiPs($this,$blip_time,$sample_count,$buf) {
       $this = $this|0;
       $blip_time = $blip_time|0;
       $sample_count = $sample_count|0;
       $buf = $buf|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = (__ZNK9Music_Emu11track_endedEv($1)|0);
       if (!($2)) {
        __ZN7Gym_Emu11parse_frameEv($this);
       }
       $3 = (($this) + 2256|0);
       __ZN7Sms_Apu9end_frameEi($3,$blip_time);
       $4 = $buf;
       $5 = $sample_count << 1;
       _memset(($4|0),0,($5|0))|0;
       $6 = (($this) + 1692|0);
       $7 = $sample_count >> 1;
       __ZN10Ym2612_Emu3runEiPs($6,$7,$buf);
       STACKTOP = sp;return ($sample_count|0);
      }
      function __ZNK9Music_Emu11track_endedEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 273|0);
       $2 = HEAP8[$1]|0;
       $3 = ($2<<24>>24)!=(0);
       STACKTOP = sp;return ($3|0);
      }
      function __ZThn320_N7Gym_Emu10play_frameEiiPs($this,$blip_time,$sample_count,$buf) {
       $this = $this|0;
       $blip_time = $blip_time|0;
       $sample_count = $sample_count|0;
       $buf = $buf|0;
       var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + -320|0);
       $2 = $1;
       $3 = (__ZN7Gym_Emu10play_frameEiiPs($2,$blip_time,$sample_count,$buf)|0);
       STACKTOP = sp;return ($3|0);
      }
      function __ZN7Gym_Emu5play_ElPs($this,$count,$out) {
       $this = $this|0;
       $count = $count|0;
       $out = $out|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 320|0);
       $2 = (($this) + 1648|0);
       __ZN14Dual_Resampler9dual_playElPsR11Blip_Buffer($1,$count,$out,$2);
       STACKTOP = sp;return (0|0);
      }
      function __ZN9Music_Emu14set_equalizer_ERK15gme_equalizer_t($this,u$0) {
       $this = $this|0;
       u$0 = u$0|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       STACKTOP = sp;return;
      }
      function __ZN9blip_eq_tC2Edlll($this,$t,$rf,$sr,$cf) {
       $this = $this|0;
       $t = +$t;
       $rf = $rf|0;
       $sr = $sr|0;
       $cf = $cf|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       HEAPF64[$1>>3] = $t;
       $2 = (($this) + 8|0);
       HEAP32[$2>>2] = $rf;
       $3 = (($this) + 12|0);
       HEAP32[$3>>2] = $sr;
       $4 = (($this) + 16|0);
       HEAP32[$4>>2] = $cf;
       STACKTOP = sp;return;
      }
      function __ZL11new_gym_emuv() {
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (__ZN8Gme_FilenwEj(4880)|0);
       $2 = ($1|0)==(0|0);
       if ($2) {
        $4 = 0;
       } else {
        $3 = $1;
        __ZN7Gym_EmuC2Ev($3);
        $4 = $3;
       }
       $5 = ($4);
       STACKTOP = sp;return ($5|0);
      }
      function __ZL12new_gym_filev() {
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (__ZN8Gme_FilenwEj(328)|0);
       $2 = ($1|0)==(0|0);
       if ($2) {
        $4 = 0;
       } else {
        $3 = $1;
        __ZN8Gym_FileC1Ev($3);
        $4 = $3;
       }
       $5 = $4;
       STACKTOP = sp;return ($5|0);
      }
      function __ZN8Gym_FileC1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN8Gym_FileC2Ev($this);
       STACKTOP = sp;return;
      }
      function __ZN8Gym_FileC2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $this;
       __ZN9Gme_Info_C2Ev($1);
       $2 = $this;
       HEAP32[$2>>2] = (((40688) + 8|0));
       $3 = $this;
       __ZN8Gme_File8set_typeEPK11gme_type_t_($3,(40544));
       STACKTOP = sp;return;
      }
      function __ZN8Gym_FileD1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN8Gym_FileD2Ev($this);
       STACKTOP = sp;return;
      }
      function __ZN8Gym_FileD0Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       __ZN8Gym_FileD1Ev($this);
       $1 = ($this);
       __ZN8Gme_FiledlEPv($1);
       STACKTOP = sp;return;
      }
      function __ZN8Gym_File9load_mem_EPKhl($this,$in,$size) {
       $this = $this|0;
       $in = $in|0;
       $size = $size|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 316|0);
       HEAP32[$1>>2] = $in;
       $2 = (($in) + ($size)|0);
       $3 = (($this) + 320|0);
       HEAP32[$3>>2] = $2;
       $4 = (($this) + 324|0);
       HEAP32[$4>>2] = 0;
       $5 = (__ZL12check_headerPKhlPi($in,$size,$4)|0);
       STACKTOP = sp;return ($5|0);
      }
      function __ZNK8Gym_File11track_info_EP12track_info_ti($this,$out,u$0) {
       $this = $this|0;
       $out = $out|0;
       u$0 = u$0|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 324|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = (($this) + 316|0);
       $4 = HEAP32[$3>>2]|0;
       $5 = (($4) + ($2)|0);
       $6 = (($this) + 320|0);
       $7 = HEAP32[$6>>2]|0;
       $8 = (__ZL16gym_track_lengthPKhS0_($5,$7)|0);
       $9 = $4;
       __ZL12get_gym_infoRKN7Gym_Emu8header_tElP12track_info_t($9,$8,$out);
       STACKTOP = sp;return (0|0);
      }
      function __ZN8Gym_FileD2Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $this;
       __ZN9Gme_Info_D2Ev($1);
       STACKTOP = sp;return;
      }
      function __ZN10Ym2612_EmuC2Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       HEAP32[$1>>2] = 0;
       STACKTOP = sp;return;
      }
      function __ZN7Hes_ApuC2Ev($this) {
       $this = $this|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 536|0);
       __ZN10Blip_SynthILi8ELi1EEC1Ev($1);
       $2 = (($this) + 500|0);
       $3 = (($this) + 412|0);
       $4 = $2;
       ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;HEAP32[$4+16>>2]=0|0;
       $5 = (($this) + 324|0);
       $6 = $3;
       ;HEAP32[$6+0>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;HEAP32[$6+12>>2]=0|0;HEAP32[$6+16>>2]=0|0;
       $7 = (($this) + 236|0);
       $8 = $5;
       ;HEAP32[$8+0>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;HEAP32[$8+12>>2]=0|0;HEAP32[$8+16>>2]=0|0;
       $9 = (($this) + 148|0);
       $10 = $7;
       ;HEAP32[$10+0>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;HEAP32[$10+12>>2]=0|0;HEAP32[$10+16>>2]=0|0;
       $11 = (($this) + 60|0);
       $12 = $9;
       ;HEAP32[$12+0>>2]=0|0;HEAP32[$12+4>>2]=0|0;HEAP32[$12+8>>2]=0|0;HEAP32[$12+12>>2]=0|0;HEAP32[$12+16>>2]=0|0;
       $13 = $11;
       ;HEAP32[$13+0>>2]=0|0;HEAP32[$13+4>>2]=0|0;HEAP32[$13+8>>2]=0|0;HEAP32[$13+12>>2]=0|0;HEAP32[$13+16>>2]=0|0;
       __ZN7Hes_Apu5resetEv($this);
       STACKTOP = sp;return;
      }
      function __ZN7Hes_Apu5resetEv($this) {
       $this = $this|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0;
       var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
       sp = STACKTOP;
       $1 = (($this) + 528|0);
       HEAP32[$1>>2] = 0;
       $2 = (($this) + 532|0);
       HEAP32[$2>>2] = 255;
       $3 = (($this) + 440|0);
       dest=$3+0|0; stop=dest+60|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));;
       $4 = (($this) + 520|0);
       HEAP32[$4>>2] = 1;
       $5 = (($this) + 524|0);
       HEAP8[$5] = 64;
       $6 = (($this) + 494|0);
       HEAP8[$6] = -1;
       $7 = (($this) + 352|0);
       dest=$7+0|0; stop=dest+60|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));;
       $8 = (($this) + 432|0);
       HEAP32[$8>>2] = 1;
       $9 = (($this) + 436|0);
       HEAP8[$9] = 64;
       $10 = (($this) + 406|0);
       HEAP8[$10] = -1;
       $11 = (($this) + 264|0);
       dest=$11+0|0; stop=dest+60|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));;
       $12 = (($this) + 344|0);
       HEAP32[$12>>2] = 1;
       $13 = (($this) + 348|0);
       HEAP8[$13] = 64;
       $14 = (($this) + 318|0);
       HEAP8[$14] = -1;
       $15 = (($this) + 176|0);
       dest=$15+0|0; stop=dest+60|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));;
       $16 = (($this) + 256|0);
       HEAP32[$16>>2] = 1;
       $17 = (($this) + 260|0);
       HEAP8[$17] = 64;
       $18 = (($this) + 230|0);
       HEAP8[$18] = -1;
       $19 = (($this) + 88|0);
       dest=$19+0|0; stop=dest+60|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));;
       $20 = (($this) + 168|0);
       HEAP32[$20>>2] = 1;
       $21 = (($this) + 172|0);
       HEAP8[$21] = 64;
       $22 = (($this) + 142|0);
       HEAP8[$22] = -1;
       $23 = ($this);
       dest=$23+0|0; stop=dest+60|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));;
       $24 = (($this) + 80|0);
       HEAP32[$24>>2] = 1;
       $25 = (($this) + 84|0);
       HEAP8[$25] = 64;
       $26 = (($this) + 54|0);
       HEAP8[$26] = -1;
       STACKTOP = sp;return;
      }
      function __ZN7Hes_Apu10osc_outputEiP11Blip_BufferS1_S1_($this,$index,$center,$left,$right) {
       $this = $this|0;
       $index = $index|0;
       $center = $center|0;
       $left = $left|0;
       $right = $right|0;
       var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($index>>>0)<(6);
       if ($1) {
        $2 = ((($this) + (($index*88)|0)|0) + 68|0);
        HEAP32[$2>>2] = $center;
        $3 = ((($this) + (($index*88)|0)|0) + 72|0);
        HEAP32[$3>>2] = $left;
        $4 = ((($this) + (($index*88)|0)|0) + 76|0);
        HEAP32[$4>>2] = $right;
        $5 = (($this) + 440|0);
        __ZN7Hes_Apu15balance_changedER7Hes_Osc($this,$5);
        $6 = (($this) + 352|0);
        __ZN7Hes_Apu15balance_changedER7Hes_Osc($this,$6);
        $7 = (($this) + 264|0);
        __ZN7Hes_Apu15balance_changedER7Hes_Osc($this,$7);
        $8 = (($this) + 176|0);
        __ZN7Hes_Apu15balance_changedER7Hes_Osc($this,$8);
        $9 = (($this) + 88|0);
        __ZN7Hes_Apu15balance_changedER7Hes_Osc($this,$9);
        $10 = ($this);
        __ZN7Hes_Apu15balance_changedER7Hes_Osc($this,$10);
        STACKTOP = sp;return;
       } else {
        ___assert_fail(((40896)|0),((40928)|0),58,((40968)|0));
        // unreachable;
       }
      }
      function __ZN7Hes_Apu15balance_changedER7Hes_Osc($this,$osc) {
       $this = $this|0;
       $osc = $osc|0;
       var $$ = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
       var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
       var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($osc) + 84|0);
       $2 = HEAP8[$1]|0;
       $3 = $2&255;
       $4 = $3 & 31;
       $5 = (($4) + -60)|0;
       $6 = (($osc) + 54|0);
       $7 = HEAP8[$6]|0;
       $8 = $7&255;
       $9 = $8 >>> 3;
       $10 = $9 & 30;
       $11 = (($10) + ($5))|0;
       $12 = (($this) + 532|0);
       $13 = HEAP32[$12>>2]|0;
       $14 = $13 >>> 3;
       $15 = $14 & 30;
       $16 = (($11) + ($15))|0;
       $17 = ($16|0)<(0);
       $$ = $17 ? 0 : $16;
       $18 = $8 << 1;
       $19 = $18 & 30;
       $20 = (($19) + ($5))|0;
       $21 = $13 << 1;
       $22 = $21 & 30;
       $23 = (($20) + ($22))|0;
       $24 = ($23|0)<(0);
       $$1 = $24 ? 0 : $23;
       $25 = ((41016) + ($$<<1)|0);
       $26 = HEAP16[$25>>1]|0;
       $27 = $26 << 16 >> 16;
       $28 = ((41016) + ($$1<<1)|0);
       $29 = HEAP16[$28>>1]|0;
       $30 = $29 << 16 >> 16;
       $31 = (($osc) + 68|0);
       $32 = HEAP32[$31>>2]|0;
       $33 = (($osc) + 60|0);
       HEAP32[$33>>2] = $32;
       $34 = (($osc) + 64|0);
       HEAP32[$34>>2] = 0;
       $35 = ($26<<16>>16)==($29<<16>>16);
       if (!($35)) {
        $36 = (($osc) + 72|0);
        $37 = HEAP32[$36>>2]|0;
        HEAP32[$33>>2] = $37;
        $38 = (($osc) + 76|0);
        $39 = HEAP32[$38>>2]|0;
        HEAP32[$34>>2] = $39;
       }
       $40 = (($osc) + 32|0);
       $41 = HEAP16[$40>>1]|0;
       $42 = $41 << 16 >> 16;
       $43 = (($27) - ($42))|0;
       $44 = $43 << 4;
       $45 = (($osc) + 36|0);
       $46 = HEAP32[$45>>2]|0;
       $47 = (($44) + ($46))|0;
       HEAP32[$45>>2] = $47;
       $48 = (($osc) + 34|0);
       $49 = HEAP16[$48>>1]|0;
       $50 = $49 << 16 >> 16;
       $51 = (($30) - ($50))|0;
       $52 = $51 << 4;
       $53 = (($osc) + 40|0);
       $54 = HEAP32[$53>>2]|0;
       $55 = (($52) + ($54))|0;
       HEAP32[$53>>2] = $55;
       HEAP16[$40>>1] = $26;
       HEAP16[$48>>1] = $29;
       STACKTOP = sp;return;
      }
      function __ZN7Hes_Osc9run_untilER10Blip_SynthILi8ELi1EEi($this,$synth_,$end_time) {
       $this = $this|0;
       $synth_ = $synth_|0;
       $end_time = $end_time|0;
       var $$ = 0, $$1 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
       var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
       var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
       var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
       var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
       var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dac$0 = 0, $dac$1 = 0, $dac$2 = 0, $dac$3 = 0, $dac$4 = 0, $dac$5 = 0, $noise_lfsr$0 = 0, $noise_lfsr$0$phi = 0, $phase$0 = 0, $phase$0$phi = 0;
       var $phase$1 = 0, $time$0 = 0, $time$1 = 0, $time$2 = 0, $time$3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 60|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = ($2|0)==(0|0);
       if ($3) {
        $108 = (($this) + 56|0);
        HEAP32[$108>>2] = $end_time;
        STACKTOP = sp;return;
       }
       $4 = (($this) + 84|0);
       $5 = HEAP8[$4]|0;
       $6 = ($5<<24>>24)<(0);
       if (!($6)) {
        $108 = (($this) + 56|0);
        HEAP32[$108>>2] = $end_time;
        STACKTOP = sp;return;
       }
       $7 = (($this) + 55|0);
       $8 = HEAP8[$7]|0;
       $9 = $8&255;
       $10 = (($this) + 32|0);
       $11 = HEAP16[$10>>1]|0;
       $12 = $11 << 16 >> 16;
       $13 = Math_imul($12, $9)|0;
       $14 = (($this) + 36|0);
       $15 = HEAP32[$14>>2]|0;
       $16 = ($13|0)==($15|0);
       if (!($16)) {
        $17 = (($13) - ($15))|0;
        $18 = (($this) + 56|0);
        $19 = HEAP32[$18>>2]|0;
        __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($synth_,$19,$17,$2);
       }
       __ZN11Blip_Buffer12set_modifiedEv($2);
       $20 = (($this) + 64|0);
       $21 = HEAP32[$20>>2]|0;
       $22 = (($this) + 34|0);
       $23 = HEAP16[$22>>1]|0;
       $24 = $23 << 16 >> 16;
       $25 = ($21|0)!=(0|0);
       if ($25) {
        $26 = Math_imul($24, $9)|0;
        $27 = (($this) + 40|0);
        $28 = HEAP32[$27>>2]|0;
        $29 = ($26|0)==($28|0);
        if (!($29)) {
         $30 = (($26) - ($28))|0;
         $31 = (($this) + 56|0);
         $32 = HEAP32[$31>>2]|0;
         __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($synth_,$32,$30,$21);
        }
        __ZN11Blip_Buffer12set_modifiedEv($21);
       }
       $33 = (($this) + 56|0);
       $34 = HEAP32[$33>>2]|0;
       $35 = (($this) + 44|0);
       $36 = HEAP32[$35>>2]|0;
       $37 = (($36) + ($34))|0;
       $38 = ($37|0)<($end_time|0);
       do {
        if ($38) {
         $39 = (($this) + 52|0);
         $40 = HEAP8[$39]|0;
         $41 = $40&255;
         $42 = $41 & 128;
         $43 = ($42|0)==(0);
         if (!($43)) {
          $44 = $23 | $11;
          $45 = ($44<<16>>16)==(0);
          if ($45) {
           $dac$5 = $9;$time$3 = $37;
           break;
          }
          $46 = $41 & 31;
          $47 = (32 - ($46))|0;
          $48 = $47 << 6;
          $49 = (($this) + 80|0);
          $50 = HEAP32[$49>>2]|0;
          $dac$0 = $9;$noise_lfsr$0 = $50;$time$0 = $37;
          while(1) {
           $51 = $noise_lfsr$0 >>> 1;
           $52 = $51 & 1;
           $53 = (0 - ($52))|0;
           $54 = $53 & 31;
           $55 = $noise_lfsr$0 & 1;
           $56 = (0 - ($55))|0;
           $57 = $56 & 57352;
           $58 = $57 ^ $51;
           $59 = (($54) - ($dac$0))|0;
           $60 = ($54|0)==($dac$0|0);
           do {
            if ($60) {
             $dac$1 = $dac$0;
            } else {
             $61 = Math_imul($59, $12)|0;
             __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($synth_,$time$0,$61,$2);
             if (!($25)) {
              $dac$1 = $54;
              break;
             }
             $62 = Math_imul($59, $24)|0;
             __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($synth_,$time$0,$62,$21);
             $dac$1 = $54;
            }
           } while(0);
           $63 = (($time$0) + ($48))|0;
           $64 = ($63|0)<($end_time|0);
           if ($64) {
            $noise_lfsr$0$phi = $58;$dac$0 = $dac$1;$time$0 = $63;$noise_lfsr$0 = $noise_lfsr$0$phi;
           } else {
            break;
           }
          }
          HEAP32[$49>>2] = $58;
          $65 = ($51|0)==($57|0);
          if (!($65)) {
           $dac$5 = $dac$1;$time$3 = $63;
           break;
          }
          ___assert_fail(((40984)|0),((40928)|0),127,((41000)|0));
          // unreachable;
         }
         $66 = HEAP8[$4]|0;
         $67 = $66 & 64;
         $68 = ($67<<24>>24)==(0);
         if (!($68)) {
          $dac$5 = $9;$time$3 = $37;
          break;
         }
         $69 = (($this) + 53|0);
         $70 = HEAP8[$69]|0;
         $71 = $70&255;
         $72 = (($71) + 1)|0;
         $73 = $72 & 31;
         $74 = (($this) + 48|0);
         $75 = HEAP32[$74>>2]|0;
         $76 = $75 << 1;
         $77 = ($76|0)>(13);
         do {
          if ($77) {
           $78 = $23 | $11;
           $79 = ($78<<16>>16)==(0);
           if ($79) {
            label = 26;
            break;
           } else {
            $dac$2 = $9;$phase$0 = $73;$time$1 = $37;
           }
           while(1) {
            $80 = (($this) + ($phase$0)|0);
            $81 = HEAP8[$80]|0;
            $82 = $81&255;
            $83 = (($phase$0) + 1)|0;
            $84 = $83 & 31;
            $85 = (($82) - ($dac$2))|0;
            $86 = ($82|0)==($dac$2|0);
            do {
             if ($86) {
              $dac$3 = $dac$2;
             } else {
              $87 = Math_imul($85, $12)|0;
              __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($synth_,$time$1,$87,$2);
              if (!($25)) {
               $dac$3 = $82;
               break;
              }
              $88 = Math_imul($85, $24)|0;
              __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($synth_,$time$1,$88,$21);
              $dac$3 = $82;
             }
            } while(0);
            $89 = (($time$1) + ($76))|0;
            $90 = ($89|0)<($end_time|0);
            if ($90) {
             $phase$0$phi = $84;$dac$2 = $dac$3;$time$1 = $89;$phase$0 = $phase$0$phi;
            } else {
             $dac$4 = $dac$3;$phase$1 = $84;$time$2 = $89;
             break;
            }
           }
          } else {
           label = 26;
          }
         } while(0);
         if ((label|0) == 26) {
          $91 = ($75|0)==(0);
          $$1 = $91 ? 1 : $76;
          $92 = (($end_time) + -1)|0;
          $93 = (($92) - ($37))|0;
          $94 = (($93) + ($$1))|0;
          $95 = (($94|0) / ($$1|0))&-1;
          $96 = (($95) + ($73))|0;
          $97 = Math_imul($95, $$1)|0;
          $98 = (($97) + ($37))|0;
          $dac$4 = $9;$phase$1 = $96;$time$2 = $98;
         }
         $99 = (($phase$1) + 31)|0;
         $100 = $99 & 31;
         $101 = $100&255;
         HEAP8[$69] = $101;
         $dac$5 = $dac$4;$time$3 = $time$2;
        } else {
         $dac$5 = $9;$time$3 = $37;
        }
       } while(0);
       $102 = (($time$3) - ($end_time))|0;
       $103 = ($102|0)<(0);
       $$ = $103 ? 0 : $102;
       HEAP32[$35>>2] = $$;
       $104 = $dac$5&255;
       HEAP8[$7] = $104;
       $105 = Math_imul($dac$5, $12)|0;
       HEAP32[$14>>2] = $105;
       $106 = Math_imul($dac$5, $24)|0;
       $107 = (($this) + 40|0);
       HEAP32[$107>>2] = $106;
       $108 = (($this) + 56|0);
       HEAP32[$108>>2] = $end_time;
       STACKTOP = sp;return;
      }
      function __ZN7Hes_Apu10write_dataEiii($this,$time,$addr,$data) {
       $this = $this|0;
       $time = $time|0;
       $addr = $addr|0;
       $data = $data|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
       var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
       var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0;
       var $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       if ((($addr|0) == 2049)) {
        $3 = (($this) + 532|0);
        $4 = HEAP32[$3>>2]|0;
        $5 = ($4|0)==($data|0);
        if ($5) {
         STACKTOP = sp;return;
        }
        HEAP32[$3>>2] = $data;
        $6 = (($this) + 536|0);
        $7 = ($this);
        $8 = (($this) + 440|0);
        __ZN7Hes_Osc9run_untilER10Blip_SynthILi8ELi1EEi($8,$6,$time);
        __ZN7Hes_Apu15balance_changedER7Hes_Osc($this,$7);
        $9 = (($this) + 352|0);
        __ZN7Hes_Osc9run_untilER10Blip_SynthILi8ELi1EEi($9,$6,$time);
        __ZN7Hes_Apu15balance_changedER7Hes_Osc($this,$7);
        $10 = (($this) + 264|0);
        __ZN7Hes_Osc9run_untilER10Blip_SynthILi8ELi1EEi($10,$6,$time);
        __ZN7Hes_Apu15balance_changedER7Hes_Osc($this,$7);
        $11 = (($this) + 176|0);
        __ZN7Hes_Osc9run_untilER10Blip_SynthILi8ELi1EEi($11,$6,$time);
        __ZN7Hes_Apu15balance_changedER7Hes_Osc($this,$7);
        $12 = (($this) + 88|0);
        __ZN7Hes_Osc9run_untilER10Blip_SynthILi8ELi1EEi($12,$6,$time);
        __ZN7Hes_Apu15balance_changedER7Hes_Osc($this,$7);
        $13 = ($this);
        __ZN7Hes_Osc9run_untilER10Blip_SynthILi8ELi1EEi($13,$6,$time);
        __ZN7Hes_Apu15balance_changedER7Hes_Osc($this,$7);
        STACKTOP = sp;return;
       } else if ((($addr|0) == 2048)) {
        $1 = $data & 7;
        $2 = (($this) + 528|0);
        HEAP32[$2>>2] = $1;
        STACKTOP = sp;return;
       } else {
        $14 = (($this) + 528|0);
        $15 = HEAP32[$14>>2]|0;
        $16 = ($15|0)<(6);
        if (!($16)) {
         STACKTOP = sp;return;
        }
        $17 = (($this) + (($15*88)|0)|0);
        $18 = (($this) + 536|0);
        __ZN7Hes_Osc9run_untilER10Blip_SynthILi8ELi1EEi($17,$18,$time);
        switch ($addr|0) {
        case 2052:  {
         $29 = ((($this) + (($15*88)|0)|0) + 84|0);
         $30 = HEAP8[$29]|0;
         $31 = $30&255;
         $32 = $data & 64;
         $33 = $32 ^ 64;
         $34 = $33 & $31;
         $35 = ($34|0)==(0);
         if (!($35)) {
          $36 = ((($this) + (($15*88)|0)|0) + 53|0);
          HEAP8[$36] = 0;
         }
         $37 = $data&255;
         HEAP8[$29] = $37;
         __ZN7Hes_Apu15balance_changedER7Hes_Osc($this,$17);
         STACKTOP = sp;return;
         break;
        }
        case 2053:  {
         $38 = $data&255;
         $39 = ((($this) + (($15*88)|0)|0) + 54|0);
         HEAP8[$39] = $38;
         __ZN7Hes_Apu15balance_changedER7Hes_Osc($this,$17);
         STACKTOP = sp;return;
         break;
        }
        case 2051:  {
         $23 = ((($this) + (($15*88)|0)|0) + 48|0);
         $24 = HEAP32[$23>>2]|0;
         $25 = $24 & 255;
         $26 = $data << 8;
         $27 = $26 & 3840;
         $28 = $25 | $27;
         HEAP32[$23>>2] = $28;
         STACKTOP = sp;return;
         break;
        }
        case 2054:  {
         $40 = $data & 31;
         $41 = ((($this) + (($15*88)|0)|0) + 84|0);
         $42 = HEAP8[$41]|0;
         $43 = $42&255;
         $44 = $43 & 64;
         $45 = ($44|0)==(0);
         if ($45) {
          $46 = $40&255;
          $47 = ((($this) + (($15*88)|0)|0) + 53|0);
          $48 = HEAP8[$47]|0;
          $49 = $48&255;
          $50 = ((($this) + (($15*88)|0)|0) + ($49)|0);
          HEAP8[$50] = $46;
          $51 = HEAP8[$47]|0;
          $52 = $51&255;
          $53 = (($52) + 1)|0;
          $54 = $53 & 31;
          $55 = $54&255;
          HEAP8[$47] = $55;
          STACKTOP = sp;return;
         }
         $56 = $43 & 128;
         $57 = ($56|0)==(0);
         if ($57) {
          STACKTOP = sp;return;
         }
         $58 = $40&255;
         $59 = ((($this) + (($15*88)|0)|0) + 55|0);
         HEAP8[$59] = $58;
         STACKTOP = sp;return;
         break;
        }
        case 2050:  {
         $19 = ((($this) + (($15*88)|0)|0) + 48|0);
         $20 = HEAP32[$19>>2]|0;
         $21 = $20 & 3840;
         $22 = $21 | $data;
         HEAP32[$19>>2] = $22;
         STACKTOP = sp;return;
         break;
        }
        case 2055:  {
         $60 = ($15|0)>(3);
         if (!($60)) {
          STACKTOP = sp;return;
         }
         $61 = $data&255;
         $62 = ((($this) + (($15*88)|0)|0) + 52|0);
         HEAP8[$62] = $61;
         STACKTOP = sp;return;
         break;
        }
        default: {
         STACKTOP = sp;return;
        }
        }
       }
      }
      function __ZN7Hes_Apu9end_frameEi($this,$end_time) {
       $this = $this|0;
       $end_time = $end_time|0;
       var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $osc$0 = 0, $osc$0$phi = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 528|0);
       $2 = (($this) + 536|0);
       $3 = ($this);
       $osc$0 = $1;
       while(1) {
        $4 = (($osc$0) + -88|0);
        $5 = (($osc$0) + -32|0);
        $6 = HEAP32[$5>>2]|0;
        $7 = ($6|0)<($end_time|0);
        if ($7) {
         __ZN7Hes_Osc9run_untilER10Blip_SynthILi8ELi1EEi($4,$2,$end_time);
        }
        $8 = HEAP32[$5>>2]|0;
        $9 = ($8|0)<($end_time|0);
        if ($9) {
         label = 5;
         break;
        }
        $10 = (($8) - ($end_time))|0;
        HEAP32[$5>>2] = $10;
        $11 = ($4|0)==($3|0);
        if ($11) {
         label = 7;
         break;
        } else {
         $osc$0$phi = $4;$osc$0 = $osc$0$phi;
        }
       }
       if ((label|0) == 5) {
        ___assert_fail(((41080)|0),((40928)|0),311,((41112)|0));
        // unreachable;
       }
       else if ((label|0) == 7) {
        STACKTOP = sp;return;
       }
      }
      function __ZN7Hes_Emu8cpu_readEj($this,$addr) {
       $this = $this|0;
       $addr = $addr|0;
       var $$sum = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result$0 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 336|0);
       $2 = $1;
       $3 = (__ZN7Hes_Cpu8get_codeEj($2,$addr)|0);
       $4 = HEAP8[$3]|0;
       $5 = $4&255;
       $6 = $addr >>> 13;
       $$sum = (($6) + 8536)|0;
       $7 = (($this) + ($$sum)|0);
       $8 = HEAP8[$7]|0;
       $9 = ($8<<24>>24)==(-1);
       if (!($9)) {
        $result$0 = $5;
        STACKTOP = sp;return ($result$0|0);
       }
       $10 = (__ZN7Hes_Emu9cpu_read_Ej($this,$addr)|0);
       $result$0 = $10;
       STACKTOP = sp;return ($result$0|0);
      }
      function __ZN7Hes_Cpu8get_codeEj($this,$addr) {
       $this = $this|0;
       $addr = $addr|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $addr >>> 13;
       $2 = (($this) + 8212|0);
       $3 = HEAP32[$2>>2]|0;
       $4 = (($3) + ($1<<2)|0);
       $5 = HEAP32[$4>>2]|0;
       $6 = $addr & 8191;
       $7 = (($5) + ($6)|0);
       STACKTOP = sp;return ($7|0);
      }
      function __ZN7Hes_Emu9cpu_writeEji($this,$addr,$data) {
       $this = $this|0;
       $addr = $addr|0;
       $data = $data|0;
       var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $addr >>> 13;
       $2 = ((($this) + ($1<<2)|0) + 8604|0);
       $3 = HEAP32[$2>>2]|0;
       $4 = $addr & 8191;
       $5 = ($3|0)==(0|0);
       if (!($5)) {
        $6 = $data&255;
        $7 = (($3) + ($4)|0);
        HEAP8[$7] = $6;
        STACKTOP = sp;return;
       }
       $8 = (($this) + 8536|0);
       $9 = HEAP8[$8]|0;
       $10 = ($9<<24>>24)==(-1);
       if (!($10)) {
        STACKTOP = sp;return;
       }
       __ZN7Hes_Emu10cpu_write_Eji($this,$4,$data);
       STACKTOP = sp;return;
      }
      function __ZN7Hes_Cpu5resetEv($this) {
       $this = $this|0;
       var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 8216|0);
       $2 = (($this) + 8212|0);
       HEAP32[$2>>2] = $1;
       $3 = (($this) + 8256|0);
       HEAP32[$3>>2] = 0;
       $4 = (($this) + 8252|0);
       HEAP32[$4>>2] = 0;
       $5 = (($this) + 8260|0);
       HEAP32[$5>>2] = 1073741824;
       $6 = (($this) + 8264|0);
       HEAP32[$6>>2] = 1073741824;
       $7 = (($this) + 8197|0);
       HEAP8[$7] = 4;
       $8 = (($this) + 8198|0);
       HEAP8[$8] = 0;
       $9 = (($this) + 8192|0);
       $10 = $9;
       ;HEAP16[$10+0>>1]=0|0;HEAP16[$10+2>>1]=0|0;HEAP8[$10+4|0]=0|0;
       __Z24blargg_verify_byte_orderv();
       STACKTOP = sp;return;
      }
      function __ZN7Hes_Cpu7set_mmrEii($this,$reg,$bank) {
       $this = $this|0;
       $reg = $reg|0;
       $bank = $bank|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($reg>>>0)<(9);
       if (!($1)) {
        ___assert_fail(((41128)|0),((41160)|0),71,((41200)|0));
        // unreachable;
       }
       $2 = ($bank>>>0)<(256);
       if (!($2)) {
        ___assert_fail(((41208)|0),((41160)|0),72,((41200)|0));
        // unreachable;
       }
       $3 = $bank&255;
       $4 = ((($this) + ($reg)|0) + 8200|0);
       HEAP8[$4] = $3;
       $5 = ($this|0)==(0|0);
       if ($5) {
        $8 = 0;
       } else {
        $6 = (($this) + -336|0);
        $7 = $6;
        $8 = $7;
       }
       $9 = (__ZN7Hes_Emu11cpu_set_mmrEii($8,$reg,$bank)|0);
       $10 = (($this) + 8212|0);
       $11 = HEAP32[$10>>2]|0;
       $12 = (($11) + ($reg<<2)|0);
       HEAP32[$12>>2] = $9;
       STACKTOP = sp;return;
      }
      function __ZN7Hes_Emu11cpu_set_mmrEii($this,$page,$bank) {
       $this = $this|0;
       $page = $page|0;
       $bank = $bank|0;
       var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data$0 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ((($this) + ($page<<2)|0) + 8604|0);
       HEAP32[$1>>2] = 0;
       $2 = ($bank|0)<(128);
       if ($2) {
        $3 = (($this) + 8640|0);
        $4 = $bank << 13;
        $5 = (__ZN8Rom_DataILi8192EE7at_addrEl($3,$4)|0);
        $$0 = $5;
        STACKTOP = sp;return ($$0|0);
       }
       if ((($bank|0) == 251) | (($bank|0) == 250) | (($bank|0) == 249)) {
        $7 = $bank << 13;
        $8 = (($7) + -2039808)|0;
        $9 = ((($this) + ($8)|0) + 9848|0);
        $data$0 = $9;
       } else if ((($bank|0) == 248)) {
        $6 = (($this) + 336|0);
        $data$0 = $6;
       } else {
        $10 = (($this) + 8640|0);
        $11 = (__ZN8Rom_DataILi8192EE8unmappedEv($10)|0);
        $$0 = $11;
        STACKTOP = sp;return ($$0|0);
       }
       HEAP32[$1>>2] = $data$0;
       $$0 = $data$0;
       STACKTOP = sp;return ($$0|0);
      }
      function __ZN7Hes_Cpu3runEl($this,$end_time) {
       $this = $this|0;
       $end_time = $end_time|0;
       var $$ = 0, $$24 = 0, $$25 = 0, $$26 = 0, $$27 = 0, $$28 = 0, $$29 = 0, $$30 = 0, $$31 = 0, $$65 = 0, $$66 = 0, $$67 = 0, $$68 = 0, $$69 = 0, $$70 = 0, $$71 = 0, $$72 = 0, $$73 = 0, $$74 = 0, $$75 = 0;
       var $$76 = 0, $$77 = 0, $$78 = 0, $$79 = 0, $$80 = 0, $$81 = 0, $$nz$4 = 0, $$nz$5 = 0, $$pn = 0, $$sum = 0, $$sum1 = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0;
       var $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum21 = 0, $$sum22 = 0, $$sum23 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum6 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0;
       var $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0;
       var $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0;
       var $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0;
       var $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0;
       var $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0;
       var $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0;
       var $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0;
       var $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0;
       var $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0;
       var $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
       var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
       var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
       var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
       var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
       var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
       var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
       var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
       var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
       var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
       var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
       var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
       var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
       var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
       var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
       var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
       var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0;
       var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0;
       var $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0;
       var $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0;
       var $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0;
       var $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0;
       var $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0;
       var $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0;
       var $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0;
       var $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0;
       var $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0;
       var $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0;
       var $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0;
       var $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0;
       var $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0;
       var $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0;
       var $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0;
       var $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0;
       var $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0;
       var $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0;
       var $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0;
       var $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0;
       var $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0;
       var $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0;
       var $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0;
       var $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0;
       var $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0;
       var $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0;
       var $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0;
       var $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0;
       var $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0;
       var $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0;
       var $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0;
       var $997 = 0, $998 = 0, $999 = 0, $a$0 = 0, $a$0$phi = 0, $a$1 = 0, $a$2 = 0, $addr13$0 = 0, $addr15$0 = 0, $addr18$0 = 0, $addr19$0 = 0, $c$0 = 0, $c$0$phi = 0, $c$1 = 0, $c$2 = 0, $c$3 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $c$7 = 0;
       var $c$8 = 0, $c$9 = 0, $count$0 = 0, $count$0$phi = 0, $data$0 = 0, $data$1 = 0, $data$10 = 0, $data$11 = 0, $data$12 = 0, $data$13 = 0, $data$14 = 0, $data$15 = 0, $data$16 = 0, $data$17 = 0, $data$18 = 0, $data$19 = 0, $data$2 = 0, $data$20 = 0, $data$21 = 0, $data$22 = 0;
       var $data$23 = 0, $data$2332 = 0, $data$2333 = 0, $data$24 = 0, $data$25 = 0, $data$26 = 0, $data$27 = 0, $data$28 = 0, $data$2837 = 0, $data$2838 = 0, $data$29 = 0, $data$3 = 0, $data$30 = 0, $data$31 = 0, $data$32 = 0, $data$33 = 0, $data$3342 = 0, $data$3343 = 0, $data$34 = 0, $data$35 = 0;
       var $data$36 = 0, $data$37 = 0, $data$38 = 0, $data$3847 = 0, $data$3848 = 0, $data$39 = 0, $data$4 = 0, $data$40 = 0, $data$41 = 0, $data$42 = 0, $data$43 = 0, $data$4352 = 0, $data$4353 = 0, $data$44 = 0, $data$45 = 0, $data$46 = 0, $data$47 = 0, $data$48 = 0, $data$4857 = 0, $data$4858 = 0;
       var $data$49 = 0, $data$5 = 0, $data$50 = 0, $data$51 = 0, $data$52 = 0, $data$53 = 0, $data$54 = 0, $data$55 = 0, $data$56 = 0, $data$57 = 0, $data$58 = 0, $data$6 = 0, $data$60 = 0, $data$61 = 0, $data$62 = 0, $data$65 = 0, $data$66 = 0, $data$7 = 0, $data$9 = 0, $illegal_encountered$0$off0 = 0;
       var $illegal_encountered$0$off0$phi = 0, $in$0 = 0, $in43$0 = 0, $in43$0$phi = 0, $in_alt$0 = 0, $in_alt$1 = 0, $in_inc$1 = 0, $in_inc$2 = 0, $in_inc$2$ = 0, $in_inc$2$phi = 0, $new_time$0 = 0, $nz$0 = 0, $nz$0$phi = 0, $nz$10 = 0, $nz$11 = 0, $nz$12 = 0, $nz$4 = 0, $nz$5 = 0, $nz$7 = 0, $nz$8 = 0;
       var $nz$9 = 0, $or$cond = 0, $out44$0 = 0, $out44$0$phi = 0, $out_alt$0 = 0, $out_inc$1 = 0, $out_inc$2 = 0, $out_inc$2$ = 0, $out_inc$2$phi = 0, $pc$0 = 0, $pc$1 = 0, $pc$1$phi = 0, $pc$10 = 0, $pc$11 = 0, $pc$1139 = 0, $pc$1140 = 0, $pc$12 = 0, $pc$13 = 0, $pc$1344 = 0, $pc$1345 = 0;
       var $pc$14 = 0, $pc$15 = 0, $pc$1549 = 0, $pc$1550 = 0, $pc$16 = 0, $pc$17 = 0, $pc$1754 = 0, $pc$1755 = 0, $pc$18 = 0, $pc$19 = 0, $pc$1959 = 0, $pc$1960 = 0, $pc$2 = 0, $pc$20 = 0, $pc$22 = 0, $pc$3 = 0, $pc$4 = 0, $pc$5 = 0, $pc$6 = 0, $pc$7 = 0;
       var $pc$8 = 0, $pc$9 = 0, $pc$934 = 0, $pc$935 = 0, $phitmp = 0, $result_$0 = 0, $s = 0, $s_time$0 = 0, $s_time$0$phi = 0, $s_time$10 = 0, $s_time$11 = 0, $s_time$12 = 0, $s_time$13 = 0, $s_time$14 = 0, $s_time$15 = 0, $s_time$4 = 0, $s_time$5 = 0, $s_time$6 = 0, $s_time$7 = 0, $s_time$8 = 0;
       var $s_time$9 = 0, $sext = 0, $sp$0 = 0, $sp$0$phi = 0, $sp$1 = 0, $sp$2 = 0, $sp$3 = 0, $status$0 = 0, $status$0$phi = 0, $status$1 = 0, $status$2 = 0, $temp21$0 = 0, $temp46$1 = 0, $x$0 = 0, $x$0$phi = 0, $y$0 = 0, $y$0$phi = 0, dest = 0, label = 0, sp = 0;
       var src = 0, stop = 0;
       sp = STACKTOP;
       STACKTOP = STACKTOP + 48|0;
       $s = sp;
       __ZN7Hes_Cpu12set_end_timeEl($this,$end_time);
       $1 = $s;
       $2 = (($this) + 8216|0);
       $3 = $2;
       dest=$1+0|0; src=$3+0|0; stop=dest+44|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));;
       $4 = (($this) + 8212|0);
       HEAP32[$4>>2] = $s;
       $5 = (($s) + 40|0);
       $6 = HEAP32[$5>>2]|0;
       $7 = (($this) + 8192|0);
       $8 = HEAP16[$7>>1]|0;
       $9 = $8&65535;
       $10 = (($this) + 8194|0);
       $11 = HEAP8[$10]|0;
       $12 = $11&255;
       $13 = (($this) + 8195|0);
       $14 = HEAP8[$13]|0;
       $15 = $14&255;
       $16 = (($this) + 8196|0);
       $17 = HEAP8[$16]|0;
       $18 = $17&255;
       $19 = (($this) + 8198|0);
       $20 = HEAP8[$19]|0;
       $21 = $20&255;
       $22 = (($21) + 1)|0;
       $23 = $22 | 256;
       $24 = (($this) + 8197|0);
       $25 = HEAP8[$24]|0;
       $26 = $25&255;
       $27 = $26 & 76;
       $28 = $26 << 8;
       $29 = $26 & 2;
       $30 = $29 | $28;
       $31 = $30 ^ 2;
       $32 = (($this) + 8264|0);
       $33 = ($this|0)==(0|0);
       $34 = (($this) + -336|0);
       $35 = $34;
       $36 = (($this) + -336|0);
       $37 = $36;
       $38 = (($this) + 8268|0);
       $39 = $38;
       $40 = (($this) + 8200|0);
       $41 = ($this|0)==(0|0);
       $$24 = $41 ? 0 : $37;
       $42 = (($this) + -336|0);
       $43 = $42;
       $44 = (($this) + -336|0);
       $45 = $44;
       $46 = (($this) + 8268|0);
       $47 = $46;
       $48 = (($this) + 8200|0);
       $49 = ($this|0)==(0|0);
       $$25 = $49 ? 0 : $45;
       $50 = ($this|0)==(0|0);
       $51 = (($this) + -336|0);
       $52 = $51;
       $53 = ($this|0)==(0|0);
       $54 = (($this) + -336|0);
       $55 = $54;
       $56 = ($this|0)==(0|0);
       $57 = (($this) + -336|0);
       $58 = $57;
       $59 = ($this|0)==(0|0);
       $60 = (($this) + -336|0);
       $61 = $60;
       $62 = ($this|0)==(0|0);
       $63 = (($this) + -336|0);
       $64 = $63;
       $65 = (($this) + -336|0);
       $66 = $65;
       $67 = ($this|0)==(0|0);
       $68 = (($this) + -336|0);
       $69 = $68;
       $70 = ($this|0)==(0|0);
       $71 = (($this) + -336|0);
       $72 = $71;
       $73 = ($this|0)==(0|0);
       $74 = (($this) + -336|0);
       $75 = $74;
       $76 = ($this|0)==(0|0);
       $77 = (($this) + -336|0);
       $78 = $77;
       $79 = ($this|0)==(0|0);
       $80 = (($this) + -336|0);
       $81 = $80;
       $82 = ($this|0)==(0|0);
       $83 = (($this) + -336|0);
       $84 = $83;
       $85 = ($this|0)==(0|0);
       $86 = (($this) + -336|0);
       $87 = $86;
       $88 = ($this|0)==(0|0);
       $89 = (($this) + -336|0);
       $90 = $89;
       $91 = ($this|0)==(0|0);
       $92 = (($this) + -336|0);
       $93 = $92;
       $94 = ($this|0)==(0|0);
       $95 = (($this) + -336|0);
       $96 = $95;
       $97 = ($this|0)==(0|0);
       $98 = (($this) + -336|0);
       $99 = $98;
       $100 = ($this|0)==(0|0);
       $101 = (($this) + -336|0);
       $102 = $101;
       $103 = ($this|0)==(0|0);
       $104 = (($this) + -336|0);
       $105 = $104;
       $106 = ($this|0)==(0|0);
       $107 = (($this) + -336|0);
       $108 = $107;
       $109 = ($this|0)==(0|0);
       $110 = (($this) + -336|0);
       $111 = $110;
       $112 = (($this) + -336|0);
       $113 = $112;
       $114 = (($this) + 8260|0);
       $115 = (($s) + 36|0);
       $116 = (($s) + 36|0);
       $117 = (($this) + 8260|0);
       $118 = (($s) + 36|0);
       $119 = (($this) + 8200|0);
       $120 = ($this|0)==(0|0);
       $121 = (($this) + -336|0);
       $122 = $121;
       $123 = ($this|0)==(0|0);
       $124 = (($this) + -336|0);
       $125 = $124;
       $126 = (($this) + -336|0);
       $127 = $126;
       $128 = ($this|0)==(0|0);
       $129 = (($this) + -336|0);
       $130 = $129;
       $131 = (($s) + 28|0);
       $132 = (($s) + 36|0);
       $a$0 = $12;$c$0 = $28;$illegal_encountered$0$off0 = 0;$nz$0 = $31;$pc$1 = $9;$s_time$0 = $6;$sp$0 = $23;$status$0 = $27;$x$0 = $15;$y$0 = $18;
       L1: while(1) {
        $135 = $status$0 & 4;
        $136 = ($135|0)!=(0);
        $137 = $pc$1 >>> 13;
        $138 = (($s) + ($137<<2)|0);
        $139 = HEAP32[$138>>2]|0;
        $140 = $pc$1 & 8191;
        $141 = (($139) + ($140)|0);
        $$sum = (($140) + 1)|0;
        $142 = (($139) + ($$sum)|0);
        $143 = HEAP8[$141]|0;
        $144 = $143&255;
        $145 = (($pc$1) + 1)|0;
        $146 = (41232 + ($144)|0);
        $147 = HEAP8[$146]|0;
        $148 = $147&255;
        $149 = (($148) + ($s_time$0))|0;
        $150 = ($149|0)<(0);
        $151 = ($149|0)<($148|0);
        $or$cond = $150 | $151;
        L3: do {
         if ($or$cond) {
          $152 = HEAP8[$142]|0;
          $153 = $152&255;
          L5: do {
           switch ($144|0) {
           case 212: case 234:  {
            $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $149;$pc$1$phi = $145;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
            continue L1;
            break;
           }
           case 240:  {
            $154 = (($pc$1) + 2)|0;
            $155 = $nz$0&255;
            $156 = ($155<<24>>24)==(0);
            if (!($156)) {
             $pc$0 = $154;
             label = 2;
             break L5;
            }
            $157 = $152 << 24 >> 24;
            $158 = (($157) + ($154))|0;
            $159 = $158 & 65535;
            $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $149;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $159;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
            continue L1;
            break;
           }
           case 208:  {
            $160 = (($pc$1) + 2)|0;
            $161 = $nz$0&255;
            $162 = ($161<<24>>24)==(0);
            if ($162) {
             $pc$0 = $160;
             label = 2;
             break L5;
            }
            $163 = $152 << 24 >> 24;
            $164 = (($163) + ($160))|0;
            $165 = $164 & 65535;
            $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $149;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $165;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
            continue L1;
            break;
           }
           case 16:  {
            $166 = (($pc$1) + 2)|0;
            $167 = $nz$0 & 32896;
            $168 = ($167|0)==(0);
            if (!($168)) {
             $pc$0 = $166;
             label = 2;
             break L5;
            }
            $169 = $152 << 24 >> 24;
            $170 = (($169) + ($166))|0;
            $171 = $170 & 65535;
            $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $149;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $171;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
            continue L1;
            break;
           }
           case 144:  {
            $172 = (($pc$1) + 2)|0;
            $173 = $c$0 & 256;
            $174 = ($173|0)==(0);
            if (!($174)) {
             $pc$0 = $172;
             label = 2;
             break L5;
            }
            $175 = $152 << 24 >> 24;
            $176 = (($175) + ($172))|0;
            $177 = $176 & 65535;
            $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $149;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $177;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
            continue L1;
            break;
           }
           case 48:  {
            $178 = (($pc$1) + 2)|0;
            $179 = $nz$0 & 32896;
            $180 = ($179|0)==(0);
            if ($180) {
             $pc$0 = $178;
             label = 2;
             break L5;
            }
            $181 = $152 << 24 >> 24;
            $182 = (($181) + ($178))|0;
            $183 = $182 & 65535;
            $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $149;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $183;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
            continue L1;
            break;
           }
           case 80:  {
            $184 = (($pc$1) + 2)|0;
            $185 = $status$0 & 64;
            $186 = ($185|0)==(0);
            if (!($186)) {
             $pc$0 = $184;
             label = 2;
             break L5;
            }
            $187 = $152 << 24 >> 24;
            $188 = (($187) + ($184))|0;
            $189 = $188 & 65535;
            $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $149;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $189;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
            continue L1;
            break;
           }
           case 112:  {
            $190 = (($pc$1) + 2)|0;
            $191 = $status$0 & 64;
            $192 = ($191|0)==(0);
            if ($192) {
             $pc$0 = $190;
             label = 2;
             break L5;
            }
            $193 = $152 << 24 >> 24;
            $194 = (($193) + ($190))|0;
            $195 = $194 & 65535;
            $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $149;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $195;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
            continue L1;
            break;
           }
           case 176:  {
            $196 = (($pc$1) + 2)|0;
            $197 = $c$0 & 256;
            $198 = ($197|0)==(0);
            if ($198) {
             $pc$0 = $196;
             label = 2;
             break L5;
            }
            $199 = $152 << 24 >> 24;
            $200 = (($199) + ($196))|0;
            $201 = $200 & 65535;
            $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $149;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $201;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
            continue L1;
            break;
           }
           case 128:  {
            $sp$1 = $sp$0;
            label = 22;
            break;
           }
           case 255:  {
            $206 = ($145|0)==(8192);
            if ($206) {
             $s_time$15 = 0;
             label = 272;
             break L3;
            } else {
             label = 24;
            }
            break;
           }
           case 239: case 223: case 207: case 191: case 175: case 159: case 143: case 127: case 111: case 95: case 79: case 63: case 47: case 31: case 15:  {
            label = 24;
            break;
           }
           case 76:  {
            $222 = (__Z8get_le16PKv($142)|0);
            $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $149;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $222;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
            continue L1;
            break;
           }
           case 124:  {
            $223 = (($153) + ($x$0))|0;
            $data$0 = $223;
            label = 28;
            break;
           }
           case 108:  {
            $data$0 = $153;
            label = 28;
            break;
           }
           case 68:  {
            $235 = $145 >>> 8;
            $236 = $235&255;
            $237 = (($sp$0) + -1)|0;
            $238 = $237 | 256;
            $239 = (($this) + ($238)|0);
            HEAP8[$239] = $236;
            $240 = (($sp$0) + -2)|0;
            $241 = $240 | 256;
            $242 = $145&255;
            $243 = (($this) + ($241)|0);
            HEAP8[$243] = $242;
            $sp$1 = $241;
            label = 22;
            break;
           }
           case 32:  {
            $244 = (($pc$1) + 2)|0;
            $245 = (__Z8get_le16PKv($142)|0);
            $246 = $244 >>> 8;
            $247 = $246&255;
            $248 = (($sp$0) + -1)|0;
            $249 = $248 | 256;
            $250 = (($this) + ($249)|0);
            HEAP8[$250] = $247;
            $251 = (($sp$0) + -2)|0;
            $252 = $251 | 256;
            $253 = $244&255;
            $254 = (($this) + ($252)|0);
            HEAP8[$254] = $253;
            $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$s_time$0$phi = $149;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $245;$sp$0 = $252;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$s_time$0 = $s_time$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
            continue L1;
            break;
           }
           case 96:  {
            $255 = (($sp$0) + -255)|0;
            $256 = $255 | 256;
            $257 = (($this) + ($256)|0);
            $258 = HEAP8[$257]|0;
            $259 = $258&255;
            $260 = $259 << 8;
            $261 = (($this) + ($sp$0)|0);
            $262 = HEAP8[$261]|0;
            $263 = $262&255;
            $264 = (($263) + 1)|0;
            $265 = (($264) + ($260))|0;
            $266 = (($sp$0) + -254)|0;
            $267 = $266 | 256;
            $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$s_time$0$phi = $149;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $265;$sp$0 = $267;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$s_time$0 = $s_time$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
            continue L1;
            break;
           }
           case 189:  {
            $268 = (__Z8get_le16PKv($142)|0);
            $269 = (($268) + ($x$0))|0;
            $270 = (($pc$1) + 3)|0;
            $271 = $269 & 8191;
            $272 = $269 >>> 13;
            $273 = (($s) + ($272<<2)|0);
            $274 = HEAP32[$273>>2]|0;
            $275 = (($274) + ($271)|0);
            $276 = HEAP8[$275]|0;
            $277 = $276&255;
            $278 = ((($this) + ($272)|0) + 8200|0);
            $279 = HEAP8[$278]|0;
            $280 = ($279<<24>>24)==(-1);
            if (!($280)) {
             $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $149;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0 = $277;$nz$0 = $277;$pc$1 = $270;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;
             continue L1;
            }
            HEAP32[$5>>2] = $149;
            $$65 = $33 ? 0 : $35;
            $281 = (__ZN7Hes_Emu9cpu_read_Ej($$65,$269)|0);
            $282 = HEAP32[$5>>2]|0;
            $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0 = $281;$nz$0 = $281;$pc$1 = $270;$s_time$0 = $282;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;
            continue L1;
            break;
           }
           case 157:  {
            $283 = (__Z8get_le16PKv($142)|0);
            $284 = (($283) + ($x$0))|0;
            $285 = (($pc$1) + 3)|0;
            $286 = $284 >>> 13;
            $287 = (($39) + ($286<<2)|0);
            $288 = HEAP32[$287>>2]|0;
            $289 = $284 & 8191;
            $290 = ($288|0)==(0|0);
            if (!($290)) {
             $291 = $a$0&255;
             $292 = (($288) + ($289)|0);
             HEAP8[$292] = $291;
             $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $149;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $285;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
             continue L1;
            }
            $293 = HEAP8[$40]|0;
            $294 = ($293<<24>>24)==(-1);
            if (!($294)) {
             $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $149;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $285;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
             continue L1;
            }
            HEAP32[$5>>2] = $149;
            __ZN7Hes_Emu10cpu_write_Eji($$24,$289,$a$0);
            $295 = HEAP32[$5>>2]|0;
            $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $285;$s_time$0 = $295;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
            continue L1;
            break;
           }
           case 149:  {
            $296 = (($153) + ($x$0))|0;
            $297 = $296 & 255;
            $data$1 = $297;
            label = 39;
            break;
           }
           case 133:  {
            $data$1 = $153;
            label = 39;
            break;
           }
           case 174:  {
            $301 = (__Z8get_le16PKv($142)|0);
            $302 = (($pc$1) + 3)|0;
            $303 = $301 & 8191;
            $304 = $301 >>> 13;
            $305 = (($s) + ($304<<2)|0);
            $306 = HEAP32[$305>>2]|0;
            $307 = (($306) + ($303)|0);
            $308 = HEAP8[$307]|0;
            $309 = $308&255;
            $310 = ((($this) + ($304)|0) + 8200|0);
            $311 = HEAP8[$310]|0;
            $312 = ($311<<24>>24)==(-1);
            if (!($312)) {
             $y$0$phi = $y$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $149;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $309;$pc$1 = $302;$x$0 = $309;$y$0 = $y$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
             continue L1;
            }
            HEAP32[$5>>2] = $149;
            $313 = (__ZN7Hes_Emu9cpu_read_Ej($43,$301)|0);
            $314 = HEAP32[$5>>2]|0;
            $y$0$phi = $y$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $313;$pc$1 = $302;$s_time$0 = $314;$x$0 = $313;$y$0 = $y$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
            continue L1;
            break;
           }
           case 165:  {
            $315 = (($this) + ($153)|0);
            $316 = HEAP8[$315]|0;
            $317 = $316&255;
            $318 = (($pc$1) + 2)|0;
            $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $149;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0 = $317;$nz$0 = $317;$pc$1 = $318;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;
            continue L1;
            break;
           }
           case 129:  {
            $331 = (($153) + ($x$0))|0;
            $332 = $331 & 255;
            $data$2 = $332;
            label = 45;
            break;
           }
           case 145:  {
            $319 = (($153) + 1)|0;
            $320 = $319 & 255;
            $321 = (($this) + ($320)|0);
            $322 = HEAP8[$321]|0;
            $323 = $322&255;
            $324 = $323 << 8;
            $325 = (($this) + ($153)|0);
            $326 = HEAP8[$325]|0;
            $327 = $326&255;
            $328 = (($327) + ($y$0))|0;
            $329 = (($328) + ($324))|0;
            $330 = (($pc$1) + 2)|0;
            $addr13$0 = $329;$pc$2 = $330;
            label = 48;
            break;
           }
           case 153:  {
            $344 = (($153) + ($y$0))|0;
            $data$3 = $344;
            label = 47;
            break;
           }
           case 146:  {
            $data$2 = $153;
            label = 45;
            break;
           }
           case 141:  {
            $data$3 = $153;
            label = 47;
            break;
           }
           case 161:  {
            $361 = (($153) + ($x$0))|0;
            $362 = $361 & 255;
            $data$4 = $362;
            label = 53;
            break;
           }
           case 178:  {
            $data$4 = $153;
            label = 53;
            break;
           }
           case 185:  {
            $386 = (($153) + ($y$0))|0;
            $data$5 = $386;
            label = 56;
            break;
           }
           case 177:  {
            $374 = (($this) + ($153)|0);
            $375 = HEAP8[$374]|0;
            $376 = $375&255;
            $377 = (($376) + ($y$0))|0;
            $378 = (($153) + 1)|0;
            $379 = $378 & 255;
            $380 = (($this) + ($379)|0);
            $381 = HEAP8[$380]|0;
            $382 = $381&255;
            $383 = $382 << 8;
            $384 = (($377) + ($383))|0;
            $385 = (($pc$1) + 2)|0;
            $addr15$0 = $384;$pc$3 = $385;
            label = 57;
            break;
           }
           case 173:  {
            $data$5 = $153;
            label = 56;
            break;
           }
           case 190:  {
            $405 = (__Z8get_le16PKv($142)|0);
            $406 = (($405) + ($y$0))|0;
            $407 = (($pc$1) + 3)|0;
            HEAP32[$5>>2] = $149;
            $$67 = $53 ? 0 : $55;
            $408 = (__ZN7Hes_Emu8cpu_readEj($$67,$406)|0);
            $409 = HEAP32[$5>>2]|0;
            $y$0$phi = $y$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $408;$pc$1 = $407;$s_time$0 = $409;$x$0 = $408;$y$0 = $y$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
            continue L1;
            break;
           }
           case 181:  {
            $410 = (($153) + ($x$0))|0;
            $411 = $410 & 255;
            $412 = (($this) + ($411)|0);
            $413 = HEAP8[$412]|0;
            $414 = $413&255;
            $415 = (($pc$1) + 2)|0;
            $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $149;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0 = $414;$nz$0 = $414;$pc$1 = $415;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;
            continue L1;
            break;
           }
           case 169:  {
            $416 = (($pc$1) + 2)|0;
            $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $149;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0 = $153;$nz$0 = $153;$pc$1 = $416;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;
            continue L1;
            break;
           }
           case 60:  {
            $417 = (($153) + ($x$0))|0;
            $data$6 = $417;
            label = 63;
            break;
           }
           case 44:  {
            $data$6 = $153;
            label = 63;
            break;
           }
           case 52:  {
            $426 = (($153) + ($x$0))|0;
            $427 = $426 & 255;
            $data$7 = $427;
            label = 65;
            break;
           }
           case 36:  {
            $data$7 = $153;
            label = 65;
            break;
           }
           case 137:  {
            $nz$4 = $153;$pc$4 = $145;$s_time$4 = $149;
            label = 66;
            break;
           }
           case 179:  {
            $$sum17 = (($140) + 2)|0;
            $438 = (($139) + ($$sum17)|0);
            $439 = HEAP8[$438]|0;
            $440 = $439&255;
            $441 = (($440) + ($x$0))|0;
            $addr18$0 = $441;
            label = 69;
            break;
           }
           case 147:  {
            $$sum15 = (($140) + 2)|0;
            $442 = (($139) + ($$sum15)|0);
            $443 = HEAP8[$442]|0;
            $444 = $443&255;
            $addr18$0 = $444;
            label = 69;
            break;
           }
           case 163:  {
            $$sum14 = (($140) + 2)|0;
            $453 = (($139) + ($$sum14)|0);
            $454 = HEAP8[$453]|0;
            $455 = $454&255;
            $456 = (($455) + ($x$0))|0;
            $457 = $456 & 255;
            $458 = (($this) + ($457)|0);
            $459 = HEAP8[$458]|0;
            $460 = $459&255;
            $nz$5 = $460;$pc$5 = $145;$s_time$5 = $149;
            label = 72;
            break;
           }
           case 131:  {
            $$sum13 = (($140) + 2)|0;
            $461 = (($139) + ($$sum13)|0);
            $462 = HEAP8[$461]|0;
            $463 = $462&255;
            $464 = (($this) + ($463)|0);
            $465 = HEAP8[$464]|0;
            $466 = $465&255;
            $nz$5 = $466;$pc$5 = $145;$s_time$5 = $149;
            label = 72;
            break;
           }
           case 28: case 12:  {
            $474 = (__Z8get_le16PKv($142)|0);
            $475 = (($pc$1) + 2)|0;
            $addr19$0 = $474;$pc$6 = $475;
            label = 75;
            break;
           }
           case 20: case 4:  {
            $476 = $153 | 8192;
            $addr19$0 = $476;$pc$6 = $145;
            label = 75;
            break;
           }
           case 119: case 103: case 87: case 71: case 55: case 39: case 23: case 7:  {
            $488 = (($pc$1) + 2)|0;
            $489 = $144 >>> 4;
            $490 = 1 << $489;
            $491 = $490 ^ 255;
            $492 = (($this) + ($153)|0);
            $493 = HEAP8[$492]|0;
            $494 = $493&255;
            $495 = $494 & $491;
            $496 = $495&255;
            HEAP8[$492] = $496;
            $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $149;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $488;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
            continue L1;
            break;
           }
           case 247: case 231: case 215: case 199: case 183: case 167: case 151: case 135:  {
            $497 = (($pc$1) + 2)|0;
            $498 = $144 >>> 4;
            $499 = (($498) + -8)|0;
            $500 = 1 << $499;
            $501 = (($this) + ($153)|0);
            $502 = HEAP8[$501]|0;
            $503 = $502&255;
            $504 = $503 | $500;
            $505 = $504&255;
            HEAP8[$501] = $505;
            $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $149;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $497;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
            continue L1;
            break;
           }
           case 158:  {
            $506 = (($153) + ($x$0))|0;
            $data$9 = $506;
            label = 79;
            break;
           }
           case 156:  {
            $data$9 = $153;
            label = 79;
            break;
           }
           case 116:  {
            $514 = (($153) + ($x$0))|0;
            $515 = $514 & 255;
            $data$10 = $515;
            label = 81;
            break;
           }
           case 100:  {
            $data$10 = $153;
            label = 81;
            break;
           }
           case 148:  {
            $518 = (($153) + ($x$0))|0;
            $519 = $518 & 255;
            $data$11 = $519;
            label = 83;
            break;
           }
           case 132:  {
            $data$11 = $153;
            label = 83;
            break;
           }
           case 150:  {
            $523 = (($153) + ($y$0))|0;
            $524 = $523 & 255;
            $data$12 = $524;
            label = 85;
            break;
           }
           case 134:  {
            $data$12 = $153;
            label = 85;
            break;
           }
           case 182:  {
            $528 = (($153) + ($y$0))|0;
            $529 = $528 & 255;
            $data$13 = $529;
            label = 87;
            break;
           }
           case 166:  {
            $data$13 = $153;
            label = 87;
            break;
           }
           case 162:  {
            $data$14 = $153;
            label = 88;
            break;
           }
           case 180:  {
            $534 = (($153) + ($x$0))|0;
            $535 = $534 & 255;
            $data$15 = $535;
            label = 90;
            break;
           }
           case 164:  {
            $data$15 = $153;
            label = 90;
            break;
           }
           case 160:  {
            $data$16 = $153;
            label = 91;
            break;
           }
           case 188:  {
            $540 = (($153) + ($x$0))|0;
            $data$17 = $540;
            label = 93;
            break;
           }
           case 142:  {
            $temp21$0 = $x$0;
            label = 95;
            break;
           }
           case 172:  {
            $data$17 = $153;
            label = 93;
            break;
           }
           case 140:  {
            $temp21$0 = $y$0;
            label = 95;
            break;
           }
           case 236:  {
            $552 = (__Z8get_le16PKv($142)|0);
            $553 = (($pc$1) + 2)|0;
            HEAP32[$5>>2] = $149;
            $$74 = $76 ? 0 : $78;
            $554 = (__ZN7Hes_Emu8cpu_readEj($$74,$552)|0);
            $555 = HEAP32[$5>>2]|0;
            $data$18 = $554;$pc$7 = $553;$s_time$6 = $555;
            label = 98;
            break;
           }
           case 228:  {
            $556 = (($this) + ($153)|0);
            $557 = HEAP8[$556]|0;
            $558 = $557&255;
            $data$18 = $558;$pc$7 = $145;$s_time$6 = $149;
            label = 98;
            break;
           }
           case 224:  {
            $data$18 = $153;$pc$7 = $145;$s_time$6 = $149;
            label = 98;
            break;
           }
           case 204:  {
            $563 = (__Z8get_le16PKv($142)|0);
            $564 = (($pc$1) + 2)|0;
            HEAP32[$5>>2] = $149;
            $$75 = $79 ? 0 : $81;
            $565 = (__ZN7Hes_Emu8cpu_readEj($$75,$563)|0);
            $566 = HEAP32[$5>>2]|0;
            $data$19 = $565;$pc$8 = $564;$s_time$7 = $566;
            label = 101;
            break;
           }
           case 196:  {
            $567 = (($this) + ($153)|0);
            $568 = HEAP8[$567]|0;
            $569 = $568&255;
            $data$19 = $569;$pc$8 = $145;$s_time$7 = $149;
            label = 101;
            break;
           }
           case 192:  {
            $data$19 = $153;$pc$8 = $145;$s_time$7 = $149;
            label = 101;
            break;
           }
           case 193:  {
            $574 = (($153) + ($x$0))|0;
            $575 = $574 & 255;
            $data$20 = $575;
            label = 103;
            break;
           }
           case 210:  {
            $data$20 = $153;
            label = 103;
            break;
           }
           case 213:  {
            $597 = (($153) + ($x$0))|0;
            $598 = $597 & 255;
            $data$21 = $598;
            label = 106;
            break;
           }
           case 209:  {
            $586 = (($this) + ($153)|0);
            $587 = HEAP8[$586]|0;
            $588 = $587&255;
            $589 = (($588) + ($y$0))|0;
            $590 = (($153) + 1)|0;
            $591 = $590 & 255;
            $592 = (($this) + ($591)|0);
            $593 = HEAP8[$592]|0;
            $594 = $593&255;
            $595 = $594 << 8;
            $596 = (($589) + ($595))|0;
            HEAP32[$5>>2] = $149;
            $data$2332 = $596;$pc$934 = $145;
            label = 111;
            break;
           }
           case 197:  {
            $data$21 = $153;
            label = 106;
            break;
           }
           case 217:  {
            $602 = (($153) + ($y$0))|0;
            $data$22 = $602;
            label = 109;
            break;
           }
           case 221:  {
            $603 = (($153) + ($x$0))|0;
            $data$22 = $603;
            label = 109;
            break;
           }
           case 205:  {
            $data$22 = $153;
            label = 109;
            break;
           }
           case 201:  {
            $data$24 = $153;$pc$10 = $145;$s_time$8 = $149;
            label = 113;
            break;
           }
           case 33:  {
            $617 = (($153) + ($x$0))|0;
            $618 = $617 & 255;
            $data$25 = $618;
            label = 115;
            break;
           }
           case 50:  {
            $data$25 = $153;
            label = 115;
            break;
           }
           case 53:  {
            $640 = (($153) + ($x$0))|0;
            $641 = $640 & 255;
            $data$26 = $641;
            label = 118;
            break;
           }
           case 49:  {
            $629 = (($this) + ($153)|0);
            $630 = HEAP8[$629]|0;
            $631 = $630&255;
            $632 = (($631) + ($y$0))|0;
            $633 = (($153) + 1)|0;
            $634 = $633 & 255;
            $635 = (($this) + ($634)|0);
            $636 = HEAP8[$635]|0;
            $637 = $636&255;
            $638 = $637 << 8;
            $639 = (($632) + ($638))|0;
            HEAP32[$5>>2] = $149;
            $data$2837 = $639;$pc$1139 = $145;
            label = 123;
            break;
           }
           case 37:  {
            $data$26 = $153;
            label = 118;
            break;
           }
           case 57:  {
            $645 = (($153) + ($y$0))|0;
            $data$27 = $645;
            label = 121;
            break;
           }
           case 61:  {
            $646 = (($153) + ($x$0))|0;
            $data$27 = $646;
            label = 121;
            break;
           }
           case 45:  {
            $data$27 = $153;
            label = 121;
            break;
           }
           case 41:  {
            $data$29 = $153;$pc$12 = $145;$s_time$9 = $149;
            label = 125;
            break;
           }
           case 65:  {
            $658 = (($153) + ($x$0))|0;
            $659 = $658 & 255;
            $data$30 = $659;
            label = 127;
            break;
           }
           case 82:  {
            $data$30 = $153;
            label = 127;
            break;
           }
           case 85:  {
            $681 = (($153) + ($x$0))|0;
            $682 = $681 & 255;
            $data$31 = $682;
            label = 130;
            break;
           }
           case 81:  {
            $670 = (($this) + ($153)|0);
            $671 = HEAP8[$670]|0;
            $672 = $671&255;
            $673 = (($672) + ($y$0))|0;
            $674 = (($153) + 1)|0;
            $675 = $674 & 255;
            $676 = (($this) + ($675)|0);
            $677 = HEAP8[$676]|0;
            $678 = $677&255;
            $679 = $678 << 8;
            $680 = (($673) + ($679))|0;
            HEAP32[$5>>2] = $149;
            $data$3342 = $680;$pc$1344 = $145;
            label = 135;
            break;
           }
           case 69:  {
            $data$31 = $153;
            label = 130;
            break;
           }
           case 89:  {
            $686 = (($153) + ($y$0))|0;
            $data$32 = $686;
            label = 133;
            break;
           }
           case 93:  {
            $687 = (($153) + ($x$0))|0;
            $data$32 = $687;
            label = 133;
            break;
           }
           case 77:  {
            $data$32 = $153;
            label = 133;
            break;
           }
           case 73:  {
            $data$34 = $153;$pc$14 = $145;$s_time$10 = $149;
            label = 137;
            break;
           }
           case 1:  {
            $699 = (($153) + ($x$0))|0;
            $700 = $699 & 255;
            $data$35 = $700;
            label = 139;
            break;
           }
           case 18:  {
            $data$35 = $153;
            label = 139;
            break;
           }
           case 21:  {
            $722 = (($153) + ($x$0))|0;
            $723 = $722 & 255;
            $data$36 = $723;
            label = 142;
            break;
           }
           case 17:  {
            $711 = (($this) + ($153)|0);
            $712 = HEAP8[$711]|0;
            $713 = $712&255;
            $714 = (($713) + ($y$0))|0;
            $715 = (($153) + 1)|0;
            $716 = $715 & 255;
            $717 = (($this) + ($716)|0);
            $718 = HEAP8[$717]|0;
            $719 = $718&255;
            $720 = $719 << 8;
            $721 = (($714) + ($720))|0;
            HEAP32[$5>>2] = $149;
            $data$3847 = $721;$pc$1549 = $145;
            label = 147;
            break;
           }
           case 5:  {
            $data$36 = $153;
            label = 142;
            break;
           }
           case 25:  {
            $727 = (($153) + ($y$0))|0;
            $data$37 = $727;
            label = 145;
            break;
           }
           case 29:  {
            $728 = (($153) + ($x$0))|0;
            $data$37 = $728;
            label = 145;
            break;
           }
           case 13:  {
            $data$37 = $153;
            label = 145;
            break;
           }
           case 9:  {
            $data$39 = $153;$pc$16 = $145;$s_time$11 = $149;
            label = 149;
            break;
           }
           case 225:  {
            $740 = (($153) + ($x$0))|0;
            $741 = $740 & 255;
            $data$40 = $741;
            label = 151;
            break;
           }
           case 242:  {
            $data$40 = $153;
            label = 151;
            break;
           }
           case 245:  {
            $763 = (($153) + ($x$0))|0;
            $764 = $763 & 255;
            $data$41 = $764;
            label = 154;
            break;
           }
           case 241:  {
            $752 = (($this) + ($153)|0);
            $753 = HEAP8[$752]|0;
            $754 = $753&255;
            $755 = (($754) + ($y$0))|0;
            $756 = (($153) + 1)|0;
            $757 = $756 & 255;
            $758 = (($this) + ($757)|0);
            $759 = HEAP8[$758]|0;
            $760 = $759&255;
            $761 = $760 << 8;
            $762 = (($755) + ($761))|0;
            HEAP32[$5>>2] = $149;
            $data$4352 = $762;$pc$1754 = $145;
            label = 159;
            break;
           }
           case 229:  {
            $data$41 = $153;
            label = 154;
            break;
           }
           case 249:  {
            $768 = (($153) + ($y$0))|0;
            $data$42 = $768;
            label = 157;
            break;
           }
           case 253:  {
            $769 = (($153) + ($x$0))|0;
            $data$42 = $769;
            label = 157;
            break;
           }
           case 237:  {
            $data$42 = $153;
            label = 157;
            break;
           }
           case 233:  {
            $data$44 = $153;$pc$18 = $145;$s_time$12 = $149;
            label = 161;
            break;
           }
           case 97:  {
            $780 = (($153) + ($x$0))|0;
            $781 = $780 & 255;
            $data$45 = $781;
            label = 163;
            break;
           }
           case 114:  {
            $data$45 = $153;
            label = 163;
            break;
           }
           case 117:  {
            $803 = (($153) + ($x$0))|0;
            $804 = $803 & 255;
            $data$46 = $804;
            label = 166;
            break;
           }
           case 113:  {
            $792 = (($this) + ($153)|0);
            $793 = HEAP8[$792]|0;
            $794 = $793&255;
            $795 = (($794) + ($y$0))|0;
            $796 = (($153) + 1)|0;
            $797 = $796 & 255;
            $798 = (($this) + ($797)|0);
            $799 = HEAP8[$798]|0;
            $800 = $799&255;
            $801 = $800 << 8;
            $802 = (($795) + ($801))|0;
            HEAP32[$5>>2] = $149;
            $data$4857 = $802;$pc$1959 = $145;
            label = 171;
            break;
           }
           case 101:  {
            $data$46 = $153;
            label = 166;
            break;
           }
           case 121:  {
            $808 = (($153) + ($y$0))|0;
            $data$47 = $808;
            label = 169;
            break;
           }
           case 125:  {
            $809 = (($153) + ($x$0))|0;
            $data$47 = $809;
            label = 169;
            break;
           }
           case 109:  {
            $data$47 = $153;
            label = 169;
            break;
           }
           case 74:  {
            $c$1 = 0;
            label = 175;
            break;
           }
           case 105:  {
            $data$49 = $153;$pc$20 = $145;$s_time$13 = $149;
            break;
           }
           case 106:  {
            $c$1 = $c$0;
            label = 175;
            break;
           }
           case 10:  {
            $838 = $a$0 << 1;
            $839 = $838 & 254;
            $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $149;$pc$1$phi = $145;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$a$0 = $839;$c$0 = $838;$nz$0 = $838;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;
            continue L1;
            break;
           }
           case 42:  {
            $840 = $a$0 << 1;
            $841 = $c$0 >>> 8;
            $842 = $841 & 1;
            $843 = $840 | $842;
            $844 = $843 & 255;
            $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $149;$pc$1$phi = $145;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$a$0 = $844;$c$0 = $840;$nz$0 = $843;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;
            continue L1;
            break;
           }
           case 94:  {
            $845 = (($153) + ($x$0))|0;
            $data$50 = $845;
            label = 179;
            break;
           }
           case 78:  {
            $data$50 = $153;
            label = 179;
            break;
           }
           case 110:  {
            $c$2 = $c$0;$data$51 = $153;
            label = 180;
            break;
           }
           case 62:  {
            $857 = (($153) + ($x$0))|0;
            $c$3 = $c$0;$data$53 = $857;
            label = 184;
            break;
           }
           case 30:  {
            $858 = (($153) + ($x$0))|0;
            $data$52 = $858;
            label = 183;
            break;
           }
           case 14:  {
            $data$52 = $153;
            label = 183;
            break;
           }
           case 46:  {
            $c$3 = $c$0;$data$53 = $153;
            label = 184;
            break;
           }
           case 126:  {
            $872 = (($153) + ($x$0))|0;
            $c$2 = $c$0;$data$51 = $872;
            label = 180;
            break;
           }
           case 118:  {
            $873 = (($153) + ($x$0))|0;
            $874 = $873 & 255;
            $c$5 = $c$0;$data$56 = $874;
            label = 190;
            break;
           }
           case 86:  {
            $875 = (($153) + ($x$0))|0;
            $876 = $875 & 255;
            $data$55 = $876;
            label = 189;
            break;
           }
           case 70:  {
            $data$55 = $153;
            label = 189;
            break;
           }
           case 102:  {
            $c$5 = $c$0;$data$56 = $153;
            label = 190;
            break;
           }
           case 54:  {
            $885 = (($153) + ($x$0))|0;
            $886 = $885 & 255;
            $c$6 = $c$0;$data$58 = $886;
            label = 194;
            break;
           }
           case 22:  {
            $887 = (($153) + ($x$0))|0;
            $888 = $887 & 255;
            $data$57 = $888;
            label = 193;
            break;
           }
           case 6:  {
            $data$57 = $153;
            label = 193;
            break;
           }
           case 38:  {
            $c$6 = $c$0;$data$58 = $153;
            label = 194;
            break;
           }
           case 26:  {
            $896 = (($a$0) + 1)|0;
            $897 = $896 & 255;
            $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $149;$pc$1$phi = $145;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0 = $897;$nz$0 = $896;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;
            continue L1;
            break;
           }
           case 232:  {
            $898 = (($x$0) + 1)|0;
            $899 = $898 & 255;
            $y$0$phi = $y$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $149;$pc$1$phi = $145;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $898;$x$0 = $899;$y$0 = $y$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
            continue L1;
            break;
           }
           case 200:  {
            $900 = (($y$0) + 1)|0;
            $901 = $900 & 255;
            $x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $149;$pc$1$phi = $145;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $900;$y$0 = $901;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
            continue L1;
            break;
           }
           case 58:  {
            $902 = (($a$0) + -1)|0;
            $903 = $902 & 255;
            $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $149;$pc$1$phi = $145;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0 = $903;$nz$0 = $902;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;
            continue L1;
            break;
           }
           case 202:  {
            $904 = (($x$0) + -1)|0;
            $905 = $904 & 255;
            $y$0$phi = $y$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $149;$pc$1$phi = $145;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $904;$x$0 = $905;$y$0 = $y$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
            continue L1;
            break;
           }
           case 136:  {
            $906 = (($y$0) + -1)|0;
            $907 = $906 & 255;
            $x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $149;$pc$1$phi = $145;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $906;$y$0 = $907;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
            continue L1;
            break;
           }
           case 246:  {
            $908 = (($153) + ($x$0))|0;
            $909 = $908 & 255;
            $data$61 = $909;$nz$8 = 1;
            label = 204;
            break;
           }
           case 214:  {
            $910 = (($153) + ($x$0))|0;
            $911 = $910 & 255;
            $data$60 = $911;
            label = 203;
            break;
           }
           case 198:  {
            $data$60 = $153;
            label = 203;
            break;
           }
           case 230:  {
            $data$61 = $153;$nz$8 = 1;
            label = 204;
            break;
           }
           case 254:  {
            $919 = (__Z8get_le16PKv($142)|0);
            $920 = (($919) + ($x$0))|0;
            $data$65 = $920;$nz$10 = 1;
            label = 210;
            break;
           }
           case 238:  {
            $921 = (__Z8get_le16PKv($142)|0);
            $data$65 = $921;$nz$10 = 1;
            label = 210;
            break;
           }
           case 222:  {
            $922 = (__Z8get_le16PKv($142)|0);
            $923 = (($922) + ($x$0))|0;
            $data$65 = $923;$nz$10 = -1;
            label = 210;
            break;
           }
           case 206:  {
            $924 = (__Z8get_le16PKv($142)|0);
            $data$65 = $924;$nz$10 = -1;
            label = 210;
            break;
           }
           case 168:  {
            $y$0$phi = $a$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $149;$pc$1$phi = $145;$nz$0$phi = $a$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
            continue L1;
            break;
           }
           case 152:  {
            $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $149;$pc$1$phi = $145;$nz$0$phi = $y$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $y$0;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
            continue L1;
            break;
           }
           case 170:  {
            $y$0$phi = $y$0;$x$0$phi = $a$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $149;$pc$1$phi = $145;$nz$0$phi = $a$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
            continue L1;
            break;
           }
           case 138:  {
            $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $149;$pc$1$phi = $145;$nz$0$phi = $x$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $x$0;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
            continue L1;
            break;
           }
           case 154:  {
            $932 = (($x$0) + 1)|0;
            $933 = $932 | 256;
            $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$s_time$0$phi = $149;$pc$1$phi = $145;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$sp$0 = $933;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
            continue L1;
            break;
           }
           case 186:  {
            $934 = (($sp$0) + 255)|0;
            $935 = $934 & 255;
            $y$0$phi = $y$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $149;$pc$1$phi = $145;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $935;$x$0 = $935;$y$0 = $y$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
            continue L1;
            break;
           }
           case 2:  {
            $y$0$phi = $x$0;$x$0$phi = $y$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $149;$pc$1$phi = $145;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
            continue L1;
            break;
           }
           case 34:  {
            $y$0$phi = $y$0;$x$0$phi = $a$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $149;$pc$1$phi = $145;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $x$0;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
            continue L1;
            break;
           }
           case 66:  {
            $y$0$phi = $a$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $149;$pc$1$phi = $145;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $y$0;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
            continue L1;
            break;
           }
           case 98:  {
            $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $149;$pc$1$phi = $145;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0 = 0;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;
            continue L1;
            break;
           }
           case 130:  {
            $y$0$phi = $y$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $149;$pc$1$phi = $145;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$x$0 = 0;$y$0 = $y$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
            continue L1;
            break;
           }
           case 194:  {
            $x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $149;$pc$1$phi = $145;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$y$0 = 0;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
            continue L1;
            break;
           }
           case 72:  {
            $936 = (($sp$0) + -1)|0;
            $937 = $936 | 256;
            $938 = $a$0&255;
            $939 = (($this) + ($937)|0);
            HEAP8[$939] = $938;
            $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$s_time$0$phi = $149;$pc$1$phi = $145;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$sp$0 = $937;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
            continue L1;
            break;
           }
           case 218:  {
            $940 = (($sp$0) + -1)|0;
            $941 = $940 | 256;
            $942 = $x$0&255;
            $943 = (($this) + ($941)|0);
            HEAP8[$943] = $942;
            $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$s_time$0$phi = $149;$pc$1$phi = $145;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$sp$0 = $941;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
            continue L1;
            break;
           }
           case 90:  {
            $944 = (($sp$0) + -1)|0;
            $945 = $944 | 256;
            $946 = $y$0&255;
            $947 = (($this) + ($945)|0);
            HEAP8[$947] = $946;
            $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$s_time$0$phi = $149;$pc$1$phi = $145;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$sp$0 = $945;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
            continue L1;
            break;
           }
           case 64:  {
            $948 = (($this) + ($sp$0)|0);
            $949 = HEAP8[$948]|0;
            $950 = $949&255;
            $951 = (($sp$0) + -255)|0;
            $952 = $951 | 256;
            $953 = (($this) + ($952)|0);
            $954 = HEAP8[$953]|0;
            $955 = $954&255;
            $956 = (($sp$0) + -254)|0;
            $957 = $956 | 256;
            $958 = (($this) + ($957)|0);
            $959 = HEAP8[$958]|0;
            $960 = $959&255;
            $961 = $960 << 8;
            $962 = $961 | $955;
            $963 = (($sp$0) + -253)|0;
            $964 = $963 | 256;
            $965 = $950 & 76;
            $966 = $950 << 8;
            $967 = $950 & 2;
            $968 = $967 | $966;
            $969 = $968 ^ 2;
            $970 = $965&255;
            HEAP8[$24] = $970;
            $971 = $950 ^ $status$0;
            $972 = $971 & 4;
            $973 = ($972|0)==(0);
            if ($973) {
             $y$0$phi = $y$0;$x$0$phi = $x$0;$s_time$0$phi = $149;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$a$0$phi = $a$0;$c$0 = $966;$nz$0 = $969;$pc$1 = $962;$sp$0 = $964;$status$0 = $965;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$s_time$0 = $s_time$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$a$0 = $a$0$phi;
             continue L1;
            }
            $974 = HEAP32[$32>>2]|0;
            $975 = $950 & 4;
            $976 = ($975|0)==(0);
            if ($976) {
             $977 = HEAP32[$114>>2]|0;
             $978 = ($974|0)>($977|0);
             $$27 = $978 ? $977 : $974;
             $new_time$0 = $$27;
            } else {
             $new_time$0 = $974;
            }
            $979 = HEAP32[$115>>2]|0;
            HEAP32[$115>>2] = $new_time$0;
            $980 = (($149) - ($new_time$0))|0;
            $981 = (($980) + ($979))|0;
            $y$0$phi = $y$0;$x$0$phi = $x$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$a$0$phi = $a$0;$c$0 = $966;$nz$0 = $969;$pc$1 = $962;$s_time$0 = $981;$sp$0 = $964;$status$0 = $965;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$a$0 = $a$0$phi;
            continue L1;
            break;
           }
           case 104:  {
            $982 = (($this) + ($sp$0)|0);
            $983 = HEAP8[$982]|0;
            $984 = $983&255;
            $985 = (($sp$0) + -255)|0;
            $986 = $985 | 256;
            $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$s_time$0$phi = $149;$pc$1$phi = $145;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0 = $984;$nz$0 = $984;$sp$0 = $986;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;
            continue L1;
            break;
           }
           case 250:  {
            $987 = (($this) + ($sp$0)|0);
            $988 = HEAP8[$987]|0;
            $989 = $988&255;
            $990 = (($sp$0) + -255)|0;
            $991 = $990 | 256;
            $y$0$phi = $y$0;$status$0$phi = $status$0;$s_time$0$phi = $149;$pc$1$phi = $145;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $989;$sp$0 = $991;$x$0 = $989;$y$0 = $y$0$phi;$status$0 = $status$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
            continue L1;
            break;
           }
           case 122:  {
            $992 = (($this) + ($sp$0)|0);
            $993 = HEAP8[$992]|0;
            $994 = $993&255;
            $995 = (($sp$0) + -255)|0;
            $996 = $995 | 256;
            $x$0$phi = $x$0;$status$0$phi = $status$0;$s_time$0$phi = $149;$pc$1$phi = $145;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $994;$sp$0 = $996;$y$0 = $994;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
            continue L1;
            break;
           }
           case 40:  {
            $997 = (($this) + ($sp$0)|0);
            $998 = HEAP8[$997]|0;
            $999 = $998&255;
            $1000 = (($sp$0) + -255)|0;
            $1001 = $1000 | 256;
            $1002 = $999 ^ $status$0;
            $1003 = $999 & 76;
            $1004 = $999 << 8;
            $1005 = $999 & 2;
            $1006 = $1005 | $1004;
            $1007 = $1006 ^ 2;
            $1008 = $1002 & 4;
            $1009 = ($1008|0)==(0);
            if ($1009) {
             $y$0$phi = $y$0;$x$0$phi = $x$0;$s_time$0$phi = $149;$pc$1$phi = $145;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$a$0$phi = $a$0;$c$0 = $1004;$nz$0 = $1007;$sp$0 = $1001;$status$0 = $1003;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$a$0 = $a$0$phi;
             continue L1;
            }
            $1010 = $999 & 4;
            $1011 = ($1010|0)==(0);
            if ($1011) {
             $c$8 = $1004;$nz$11 = $1007;$sp$2 = $1001;$status$1 = $1003;
             label = 246;
            } else {
             $c$9 = $1004;$nz$12 = $1007;$sp$3 = $1001;$status$2 = $1003;
             label = 252;
            }
            break;
           }
           case 56:  {
            $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $149;$pc$1$phi = $145;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$a$0$phi = $a$0;$c$0 = -1;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$a$0 = $a$0$phi;
            continue L1;
            break;
           }
           case 24:  {
            $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $149;$pc$1$phi = $145;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$a$0$phi = $a$0;$c$0 = 0;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$a$0 = $a$0$phi;
            continue L1;
            break;
           }
           case 8:  {
            $1012 = $status$0 & 76;
            $1013 = $nz$0 >>> 8;
            $1014 = $1013 | $nz$0;
            $1015 = $1014 & 128;
            $1016 = $1012 | $1015;
            $1017 = $c$0 >>> 8;
            $1018 = $1017 & 1;
            $1019 = $1016 | $1018;
            $1020 = $nz$0 & 255;
            $1021 = ($1020|0)==(0);
            $1022 = $1019 | 2;
            $$28 = $1021 ? $1022 : $1019;
            $1023 = (($sp$0) + -1)|0;
            $1024 = $1023 | 256;
            $1025 = $$28 | 16;
            $1026 = $1025&255;
            $1027 = (($this) + ($1024)|0);
            HEAP8[$1027] = $1026;
            $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$s_time$0$phi = $149;$pc$1$phi = $145;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$sp$0 = $1024;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
            continue L1;
            break;
           }
           case 184:  {
            $1028 = $status$0 & -65;
            $y$0$phi = $y$0;$x$0$phi = $x$0;$sp$0$phi = $sp$0;$s_time$0$phi = $149;$pc$1$phi = $145;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$status$0 = $1028;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
            continue L1;
            break;
           }
           case 216:  {
            $1029 = $status$0 & -9;
            $y$0$phi = $y$0;$x$0$phi = $x$0;$sp$0$phi = $sp$0;$s_time$0$phi = $149;$pc$1$phi = $145;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$status$0 = $1029;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
            continue L1;
            break;
           }
           case 248:  {
            $1030 = $status$0 | 8;
            $y$0$phi = $y$0;$x$0$phi = $x$0;$sp$0$phi = $sp$0;$s_time$0$phi = $149;$pc$1$phi = $145;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$status$0 = $1030;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
            continue L1;
            break;
           }
           case 88:  {
            if (!($136)) {
             $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $149;$pc$1$phi = $145;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
             continue L1;
            }
            $1031 = $status$0 & -5;
            $c$8 = $c$0;$nz$11 = $nz$0;$sp$2 = $sp$0;$status$1 = $1031;
            label = 246;
            break;
           }
           case 120:  {
            if ($136) {
             $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $149;$pc$1$phi = $145;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
             continue L1;
            }
            $1042 = $status$0 | 4;
            $c$9 = $c$0;$nz$12 = $nz$0;$sp$3 = $sp$0;$status$2 = $1042;
            label = 252;
            break;
           }
           case 83:  {
            $1048 = $153 & 1;
            $1049 = ($1048|0)==(0);
            if (!($1049)) {
             __ZN7Hes_Cpu7set_mmrEii($this,0,$a$0);
            }
            $1050 = $153 & 2;
            $1051 = ($1050|0)==(0);
            if (!($1051)) {
             __ZN7Hes_Cpu7set_mmrEii($this,1,$a$0);
            }
            $1158 = $153 & 4;
            $1159 = ($1158|0)==(0);
            if (!($1159)) {
             __ZN7Hes_Cpu7set_mmrEii($this,2,$a$0);
            }
            $1160 = $153 & 8;
            $1161 = ($1160|0)==(0);
            if (!($1161)) {
             __ZN7Hes_Cpu7set_mmrEii($this,3,$a$0);
            }
            $1162 = $153 & 16;
            $1163 = ($1162|0)==(0);
            if (!($1163)) {
             __ZN7Hes_Cpu7set_mmrEii($this,4,$a$0);
            }
            $1164 = $153 & 32;
            $1165 = ($1164|0)==(0);
            if (!($1165)) {
             __ZN7Hes_Cpu7set_mmrEii($this,5,$a$0);
            }
            $1166 = $153 & 64;
            $1167 = ($1166|0)==(0);
            if (!($1167)) {
             __ZN7Hes_Cpu7set_mmrEii($this,6,$a$0);
            }
            $1168 = $153 & 128;
            $1169 = ($1168|0)==(0);
            if (!($1169)) {
             __ZN7Hes_Cpu7set_mmrEii($this,7,$a$0);
            }
            $1170 = (($pc$1) + 2)|0;
            $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $149;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $1170;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
            continue L1;
            break;
           }
           case 67:  {
            $a$1 = $a$0;$data$66 = $153;$in$0 = $119;
            while(1) {
             $1052 = $data$66 & 1;
             $1053 = ($1052|0)==(0);
             if ($1053) {
              $a$2 = $a$1;
             } else {
              $1054 = HEAP8[$in$0]|0;
              $1055 = $1054&255;
              $a$2 = $1055;
             }
             $1056 = (($in$0) + 1|0);
             $1057 = $data$66 >>> 1;
             $1058 = ($1057|0)==(0);
             if ($1058) {
              break;
             } else {
              $a$1 = $a$2;$data$66 = $1057;$in$0 = $1056;
             }
            }
            $134 = (($pc$1) + 2)|0;
            $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $149;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0 = $a$2;$pc$1 = $134;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;
            continue L1;
            break;
           }
           case 84:  {
            $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $149;$pc$1$phi = $145;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$illegal_encountered$0$off0 = 1;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
            continue L1;
            break;
           }
           case 35: case 19: case 3:  {
            $1059 = $144 >>> 4;
            $1060 = ($1059|0)==(0);
            $1061 = (($1059) + 1)|0;
            $$29 = $1060 ? 0 : $1061;
            $1062 = (($pc$1) + 2)|0;
            HEAP32[$5>>2] = $149;
            $$79 = $120 ? 0 : $122;
            __ZN7Hes_Emu13cpu_write_vdpEii($$79,$$29,$153);
            $1063 = HEAP32[$5>>2]|0;
            $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $1062;$s_time$0 = $1063;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
            continue L1;
            break;
           }
           case 244:  {
            $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $149;$pc$1$phi = $145;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$illegal_encountered$0$off0 = 1;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
            continue L1;
            break;
           }
           case 243:  {
            $in_alt$0 = 1;
            label = 263;
            break;
           }
           case 227:  {
            $in_alt$0 = 0;
            label = 263;
            break;
           }
           case 195:  {
            $in_alt$1 = 0;$in_inc$1 = -1;$out_alt$0 = 1;$out_inc$1 = -1;
            label = 266;
            break;
           }
           case 115:  {
            $in_alt$1 = 0;$in_inc$1 = 1;$out_alt$0 = 1;$out_inc$1 = 1;
            label = 266;
            break;
           }
           case 211:  {
            $in_alt$1 = 0;$in_inc$1 = 1;$out_alt$0 = 1;$out_inc$1 = 0;
            label = 266;
            break;
           }
           case 0:  {
            $1098 = (($pc$1) + 2)|0;
            $pc$22 = $1098;$result_$0 = 6;$s_time$14 = $149;
            break L3;
            break;
           }
           default: {
            $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $149;$pc$1$phi = $145;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$illegal_encountered$0$off0 = 1;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
            continue L1;
           }
           }
          } while(0);
          do {
           if ((label|0) == 22) {
            label = 0;
            $202 = $152 << 24 >> 24;
            $203 = (($pc$1) + 2)|0;
            $204 = (($203) + ($202))|0;
            $205 = $204 & 65535;
            $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$s_time$0$phi = $149;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $205;$sp$0 = $sp$1;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$s_time$0 = $s_time$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
            continue L1;
           }
           else if ((label|0) == 24) {
            label = 0;
            $207 = (($this) + ($153)|0);
            $208 = HEAP8[$207]|0;
            $209 = $208&255;
            $210 = ($209*257)|0;
            $211 = $210 ^ 255;
            $212 = (($pc$1) + 3)|0;
            $213 = $144 >>> 4;
            $214 = 1 << $213;
            $215 = $211 & $214;
            $216 = ($215|0)==(0);
            if ($216) {
             $pc$0 = $212;
             label = 2;
             break;
            }
            $$sum23 = (($140) + 2)|0;
            $217 = (($139) + ($$sum23)|0);
            $218 = HEAP8[$217]|0;
            $219 = $218 << 24 >> 24;
            $220 = (($219) + ($212))|0;
            $221 = $220 & 65535;
            $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $149;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $221;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
            continue L1;
           }
           else if ((label|0) == 28) {
            label = 0;
            $$sum22 = (($140) + 2)|0;
            $224 = (($139) + ($$sum22)|0);
            $225 = HEAP8[$224]|0;
            $226 = $225&255;
            $227 = $226 << 8;
            $228 = (($227) + ($data$0))|0;
            $229 = $228 & 8191;
            $230 = $228 >>> 13;
            $231 = (($s) + ($230<<2)|0);
            $232 = HEAP32[$231>>2]|0;
            $233 = (($232) + ($229)|0);
            $234 = (__Z8get_le16PKv($233)|0);
            $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $149;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $234;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
            continue L1;
           }
           else if ((label|0) == 39) {
            label = 0;
            $298 = (($pc$1) + 2)|0;
            $299 = $a$0&255;
            $300 = (($this) + ($data$1)|0);
            HEAP8[$300] = $299;
            $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $149;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $298;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
            continue L1;
           }
           else if ((label|0) == 45) {
            label = 0;
            $333 = (($data$2) + 1)|0;
            $334 = $333 & 255;
            $335 = (($this) + ($334)|0);
            $336 = HEAP8[$335]|0;
            $337 = $336&255;
            $338 = $337 << 8;
            $339 = (($this) + ($data$2)|0);
            $340 = HEAP8[$339]|0;
            $341 = $340&255;
            $342 = $338 | $341;
            $343 = (($pc$1) + 2)|0;
            $addr13$0 = $342;$pc$2 = $343;
            label = 48;
           }
           else if ((label|0) == 47) {
            label = 0;
            $$sum20 = (($140) + 2)|0;
            $345 = (($139) + ($$sum20)|0);
            $346 = HEAP8[$345]|0;
            $347 = $346&255;
            $348 = $347 << 8;
            $349 = (($348) + ($data$3))|0;
            $350 = (($pc$1) + 3)|0;
            $addr13$0 = $349;$pc$2 = $350;
            label = 48;
           }
           else if ((label|0) == 53) {
            label = 0;
            $363 = (($data$4) + 1)|0;
            $364 = $363 & 255;
            $365 = (($this) + ($364)|0);
            $366 = HEAP8[$365]|0;
            $367 = $366&255;
            $368 = $367 << 8;
            $369 = (($this) + ($data$4)|0);
            $370 = HEAP8[$369]|0;
            $371 = $370&255;
            $372 = $368 | $371;
            $373 = (($pc$1) + 2)|0;
            $addr15$0 = $372;$pc$3 = $373;
            label = 57;
           }
           else if ((label|0) == 56) {
            label = 0;
            $$sum19 = (($140) + 2)|0;
            $387 = (($139) + ($$sum19)|0);
            $388 = HEAP8[$387]|0;
            $389 = $388&255;
            $390 = $389 << 8;
            $391 = (($390) + ($data$5))|0;
            $392 = (($pc$1) + 3)|0;
            $addr15$0 = $391;$pc$3 = $392;
            label = 57;
           }
           else if ((label|0) == 63) {
            label = 0;
            $418 = (($pc$1) + 2)|0;
            $$sum18 = (($140) + 2)|0;
            $419 = (($139) + ($$sum18)|0);
            $420 = HEAP8[$419]|0;
            $421 = $420&255;
            $422 = $421 << 8;
            $423 = (($422) + ($data$6))|0;
            HEAP32[$5>>2] = $149;
            $$68 = $56 ? 0 : $58;
            $424 = (__ZN7Hes_Emu8cpu_readEj($$68,$423)|0);
            $425 = HEAP32[$5>>2]|0;
            $nz$4 = $424;$pc$4 = $418;$s_time$4 = $425;
            label = 66;
           }
           else if ((label|0) == 65) {
            label = 0;
            $428 = (($this) + ($data$7)|0);
            $429 = HEAP8[$428]|0;
            $430 = $429&255;
            $nz$4 = $430;$pc$4 = $145;$s_time$4 = $149;
            label = 66;
           }
           else if ((label|0) == 69) {
            label = 0;
            $$sum16 = (($140) + 3)|0;
            $445 = (($139) + ($$sum16)|0);
            $446 = HEAP8[$445]|0;
            $447 = $446&255;
            $448 = $447 << 8;
            $449 = (($448) + ($addr18$0))|0;
            $450 = (($pc$1) + 2)|0;
            HEAP32[$5>>2] = $149;
            $$69 = $59 ? 0 : $61;
            $451 = (__ZN7Hes_Emu8cpu_readEj($$69,$449)|0);
            $452 = HEAP32[$5>>2]|0;
            $nz$5 = $451;$pc$5 = $450;$s_time$5 = $452;
            label = 72;
           }
           else if ((label|0) == 75) {
            label = 0;
            HEAP32[$5>>2] = $149;
            $$70 = $62 ? 0 : $66;
            $477 = (__ZN7Hes_Emu8cpu_readEj($$70,$addr19$0)|0);
            $478 = $477 | $a$0;
            $479 = $144 & 16;
            $480 = ($479|0)==(0);
            $481 = $480 ? 0 : $a$0;
            $$26 = $478 ^ $481;
            $482 = $status$0 & -65;
            $483 = $$26 & 64;
            $484 = $483 | $482;
            $485 = (($pc$6) + 1)|0;
            $486 = $62 ? 0 : $64;
            __ZN7Hes_Emu9cpu_writeEji($486,$addr19$0,$$26);
            $487 = HEAP32[$5>>2]|0;
            $y$0$phi = $y$0;$x$0$phi = $x$0;$sp$0$phi = $sp$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $$26;$pc$1 = $485;$s_time$0 = $487;$status$0 = $484;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$sp$0 = $sp$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
            continue L1;
           }
           else if ((label|0) == 79) {
            label = 0;
            $$sum12 = (($140) + 2)|0;
            $507 = (($139) + ($$sum12)|0);
            $508 = HEAP8[$507]|0;
            $509 = $508&255;
            $510 = $509 << 8;
            $511 = (($510) + ($data$9))|0;
            $512 = (($pc$1) + 3)|0;
            HEAP32[$5>>2] = $149;
            $$71 = $67 ? 0 : $69;
            __ZN7Hes_Emu9cpu_writeEji($$71,$511,0);
            $513 = HEAP32[$5>>2]|0;
            $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $512;$s_time$0 = $513;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
            continue L1;
           }
           else if ((label|0) == 81) {
            label = 0;
            $516 = (($pc$1) + 2)|0;
            $517 = (($this) + ($data$10)|0);
            HEAP8[$517] = 0;
            $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $149;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $516;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
            continue L1;
           }
           else if ((label|0) == 83) {
            label = 0;
            $520 = (($pc$1) + 2)|0;
            $521 = $y$0&255;
            $522 = (($this) + ($data$11)|0);
            HEAP8[$522] = $521;
            $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $149;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $520;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
            continue L1;
           }
           else if ((label|0) == 85) {
            label = 0;
            $525 = (($pc$1) + 2)|0;
            $526 = $x$0&255;
            $527 = (($this) + ($data$12)|0);
            HEAP8[$527] = $526;
            $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $149;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $525;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
            continue L1;
           }
           else if ((label|0) == 87) {
            label = 0;
            $530 = (($this) + ($data$13)|0);
            $531 = HEAP8[$530]|0;
            $532 = $531&255;
            $data$14 = $532;
            label = 88;
           }
           else if ((label|0) == 90) {
            label = 0;
            $536 = (($this) + ($data$15)|0);
            $537 = HEAP8[$536]|0;
            $538 = $537&255;
            $data$16 = $538;
            label = 91;
           }
           else if ((label|0) == 93) {
            label = 0;
            $$sum11 = (($140) + 2)|0;
            $541 = (($139) + ($$sum11)|0);
            $542 = HEAP8[$541]|0;
            $543 = $542&255;
            $544 = $543 << 8;
            $545 = (($544) + ($data$17))|0;
            $546 = (($pc$1) + 3)|0;
            HEAP32[$5>>2] = $149;
            $$72 = $70 ? 0 : $72;
            $547 = (__ZN7Hes_Emu8cpu_readEj($$72,$545)|0);
            $548 = HEAP32[$5>>2]|0;
            $x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $547;$pc$1 = $546;$s_time$0 = $548;$y$0 = $547;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
            continue L1;
           }
           else if ((label|0) == 95) {
            label = 0;
            $549 = (__Z8get_le16PKv($142)|0);
            $550 = (($pc$1) + 3)|0;
            HEAP32[$5>>2] = $149;
            $$73 = $73 ? 0 : $75;
            __ZN7Hes_Emu9cpu_writeEji($$73,$549,$temp21$0);
            $551 = HEAP32[$5>>2]|0;
            $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $550;$s_time$0 = $551;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
            continue L1;
           }
           else if ((label|0) == 98) {
            label = 0;
            $559 = (($x$0) - ($data$18))|0;
            $560 = (($pc$7) + 1)|0;
            $561 = $559 ^ -1;
            $562 = $559 & 255;
            $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$a$0$phi = $a$0;$c$0 = $561;$nz$0 = $562;$pc$1 = $560;$s_time$0 = $s_time$6;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$a$0 = $a$0$phi;
            continue L1;
           }
           else if ((label|0) == 101) {
            label = 0;
            $570 = (($y$0) - ($data$19))|0;
            $571 = (($pc$8) + 1)|0;
            $572 = $570 ^ -1;
            $573 = $570 & 255;
            $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$a$0$phi = $a$0;$c$0 = $572;$nz$0 = $573;$pc$1 = $571;$s_time$0 = $s_time$7;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$a$0 = $a$0$phi;
            continue L1;
           }
           else if ((label|0) == 103) {
            label = 0;
            $576 = (($data$20) + 1)|0;
            $577 = $576 & 255;
            $578 = (($this) + ($577)|0);
            $579 = HEAP8[$578]|0;
            $580 = $579&255;
            $581 = $580 << 8;
            $582 = (($this) + ($data$20)|0);
            $583 = HEAP8[$582]|0;
            $584 = $583&255;
            $585 = $581 | $584;
            $data$23 = $585;$pc$9 = $145;
            label = 110;
           }
           else if ((label|0) == 106) {
            label = 0;
            $599 = (($this) + ($data$21)|0);
            $600 = HEAP8[$599]|0;
            $601 = $600&255;
            $data$24 = $601;$pc$10 = $145;$s_time$8 = $149;
            label = 113;
           }
           else if ((label|0) == 109) {
            label = 0;
            $604 = (($pc$1) + 2)|0;
            $$sum10 = (($140) + 2)|0;
            $605 = (($139) + ($$sum10)|0);
            $606 = HEAP8[$605]|0;
            $607 = $606&255;
            $608 = $607 << 8;
            $609 = (($608) + ($data$22))|0;
            $data$23 = $609;$pc$9 = $604;
            label = 110;
           }
           else if ((label|0) == 115) {
            label = 0;
            $619 = (($data$25) + 1)|0;
            $620 = $619 & 255;
            $621 = (($this) + ($620)|0);
            $622 = HEAP8[$621]|0;
            $623 = $622&255;
            $624 = $623 << 8;
            $625 = (($this) + ($data$25)|0);
            $626 = HEAP8[$625]|0;
            $627 = $626&255;
            $628 = $624 | $627;
            $data$28 = $628;$pc$11 = $145;
            label = 122;
           }
           else if ((label|0) == 118) {
            label = 0;
            $642 = (($this) + ($data$26)|0);
            $643 = HEAP8[$642]|0;
            $644 = $643&255;
            $data$29 = $644;$pc$12 = $145;$s_time$9 = $149;
            label = 125;
           }
           else if ((label|0) == 121) {
            label = 0;
            $647 = (($pc$1) + 2)|0;
            $$sum9 = (($140) + 2)|0;
            $648 = (($139) + ($$sum9)|0);
            $649 = HEAP8[$648]|0;
            $650 = $649&255;
            $651 = $650 << 8;
            $652 = (($651) + ($data$27))|0;
            $data$28 = $652;$pc$11 = $647;
            label = 122;
           }
           else if ((label|0) == 127) {
            label = 0;
            $660 = (($data$30) + 1)|0;
            $661 = $660 & 255;
            $662 = (($this) + ($661)|0);
            $663 = HEAP8[$662]|0;
            $664 = $663&255;
            $665 = $664 << 8;
            $666 = (($this) + ($data$30)|0);
            $667 = HEAP8[$666]|0;
            $668 = $667&255;
            $669 = $665 | $668;
            $data$33 = $669;$pc$13 = $145;
            label = 134;
           }
           else if ((label|0) == 130) {
            label = 0;
            $683 = (($this) + ($data$31)|0);
            $684 = HEAP8[$683]|0;
            $685 = $684&255;
            $data$34 = $685;$pc$14 = $145;$s_time$10 = $149;
            label = 137;
           }
           else if ((label|0) == 133) {
            label = 0;
            $688 = (($pc$1) + 2)|0;
            $$sum8 = (($140) + 2)|0;
            $689 = (($139) + ($$sum8)|0);
            $690 = HEAP8[$689]|0;
            $691 = $690&255;
            $692 = $691 << 8;
            $693 = (($692) + ($data$32))|0;
            $data$33 = $693;$pc$13 = $688;
            label = 134;
           }
           else if ((label|0) == 139) {
            label = 0;
            $701 = (($data$35) + 1)|0;
            $702 = $701 & 255;
            $703 = (($this) + ($702)|0);
            $704 = HEAP8[$703]|0;
            $705 = $704&255;
            $706 = $705 << 8;
            $707 = (($this) + ($data$35)|0);
            $708 = HEAP8[$707]|0;
            $709 = $708&255;
            $710 = $706 | $709;
            $data$38 = $710;$pc$15 = $145;
            label = 146;
           }
           else if ((label|0) == 142) {
            label = 0;
            $724 = (($this) + ($data$36)|0);
            $725 = HEAP8[$724]|0;
            $726 = $725&255;
            $data$39 = $726;$pc$16 = $145;$s_time$11 = $149;
            label = 149;
           }
           else if ((label|0) == 145) {
            label = 0;
            $729 = (($pc$1) + 2)|0;
            $$sum7 = (($140) + 2)|0;
            $730 = (($139) + ($$sum7)|0);
            $731 = HEAP8[$730]|0;
            $732 = $731&255;
            $733 = $732 << 8;
            $734 = (($733) + ($data$37))|0;
            $data$38 = $734;$pc$15 = $729;
            label = 146;
           }
           else if ((label|0) == 151) {
            label = 0;
            $742 = (($data$40) + 1)|0;
            $743 = $742 & 255;
            $744 = (($this) + ($743)|0);
            $745 = HEAP8[$744]|0;
            $746 = $745&255;
            $747 = $746 << 8;
            $748 = (($this) + ($data$40)|0);
            $749 = HEAP8[$748]|0;
            $750 = $749&255;
            $751 = $747 | $750;
            $data$43 = $751;$pc$17 = $145;
            label = 158;
           }
           else if ((label|0) == 154) {
            label = 0;
            $765 = (($this) + ($data$41)|0);
            $766 = HEAP8[$765]|0;
            $767 = $766&255;
            $data$44 = $767;$pc$18 = $145;$s_time$12 = $149;
            label = 161;
           }
           else if ((label|0) == 157) {
            label = 0;
            $770 = (($pc$1) + 2)|0;
            $$sum6 = (($140) + 2)|0;
            $771 = (($139) + ($$sum6)|0);
            $772 = HEAP8[$771]|0;
            $773 = $772&255;
            $774 = $773 << 8;
            $775 = (($774) + ($data$42))|0;
            $data$43 = $775;$pc$17 = $770;
            label = 158;
           }
           else if ((label|0) == 163) {
            label = 0;
            $782 = (($data$45) + 1)|0;
            $783 = $782 & 255;
            $784 = (($this) + ($783)|0);
            $785 = HEAP8[$784]|0;
            $786 = $785&255;
            $787 = $786 << 8;
            $788 = (($this) + ($data$45)|0);
            $789 = HEAP8[$788]|0;
            $790 = $789&255;
            $791 = $787 | $790;
            $data$48 = $791;$pc$19 = $145;
            label = 170;
           }
           else if ((label|0) == 166) {
            label = 0;
            $805 = (($this) + ($data$46)|0);
            $806 = HEAP8[$805]|0;
            $807 = $806&255;
            $data$49 = $807;$pc$20 = $145;$s_time$13 = $149;
           }
           else if ((label|0) == 169) {
            label = 0;
            $810 = (($pc$1) + 2)|0;
            $$sum5 = (($140) + 2)|0;
            $811 = (($139) + ($$sum5)|0);
            $812 = HEAP8[$811]|0;
            $813 = $812&255;
            $814 = $813 << 8;
            $815 = (($814) + ($data$47))|0;
            $data$48 = $815;$pc$19 = $810;
            label = 170;
           }
           else if ((label|0) == 175) {
            label = 0;
            $833 = $c$1 >>> 1;
            $834 = $833 & 128;
            $835 = $a$0 << 8;
            $836 = $a$0 >>> 1;
            $837 = $834 | $836;
            $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $149;$pc$1$phi = $145;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$a$0 = $837;$c$0 = $835;$nz$0 = $837;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;
            continue L1;
           }
           else if ((label|0) == 179) {
            label = 0;
            $c$2 = 0;$data$51 = $data$50;
            label = 180;
           }
           else if ((label|0) == 183) {
            label = 0;
            $c$3 = 0;$data$53 = $data$52;
            label = 184;
           }
           else if ((label|0) == 189) {
            label = 0;
            $c$5 = 0;$data$56 = $data$55;
            label = 190;
           }
           else if ((label|0) == 193) {
            label = 0;
            $c$6 = 0;$data$58 = $data$57;
            label = 194;
           }
           else if ((label|0) == 203) {
            label = 0;
            $data$61 = $data$60;$nz$8 = -1;
            label = 204;
           }
           else if ((label|0) == 210) {
            label = 0;
            HEAP32[$5>>2] = $149;
            if ($109) {
             $925 = (__ZN7Hes_Emu8cpu_readEj(0,$data$65)|0);
             $$pn = $925;$927 = 0;
            } else {
             $926 = (__ZN7Hes_Emu8cpu_readEj($111,$data$65)|0);
             $$pn = $926;$927 = $113;
            }
            $928 = (($$pn) + ($nz$10))|0;
            $929 = (($pc$1) + 3)|0;
            $930 = $928 & 255;
            __ZN7Hes_Emu9cpu_writeEji($927,$data$65,$930);
            $931 = HEAP32[$5>>2]|0;
            $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $928;$pc$1 = $929;$s_time$0 = $931;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
            continue L1;
           }
           else if ((label|0) == 246) {
            label = 0;
            $1032 = $status$1&255;
            HEAP8[$24] = $1032;
            $1033 = HEAP32[$116>>2]|0;
            $1034 = HEAP32[$117>>2]|0;
            $1035 = (($1033) - ($1034))|0;
            $1036 = ($1035|0)<(1);
            if ($1036) {
             $y$0$phi = $y$0;$x$0$phi = $x$0;$s_time$0$phi = $149;$pc$1$phi = $145;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$a$0$phi = $a$0;$c$0 = $c$8;$nz$0 = $nz$11;$sp$0 = $sp$2;$status$0 = $status$1;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$a$0 = $a$0$phi;
             continue L1;
            }
            HEAP32[$116>>2] = $1034;
            $1037 = (($1035) + ($149))|0;
            $1038 = ($1037|0)<(0);
            if ($1038) {
             $y$0$phi = $y$0;$x$0$phi = $x$0;$pc$1$phi = $145;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$a$0$phi = $a$0;$c$0 = $c$8;$nz$0 = $nz$11;$s_time$0 = $1037;$sp$0 = $sp$2;$status$0 = $status$1;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$pc$1 = $pc$1$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$a$0 = $a$0$phi;
             continue L1;
            }
            $1039 = (($1037) + 1)|0;
            $1040 = ($1035|0)<($1039|0);
            if ($1040) {
             $y$0$phi = $y$0;$x$0$phi = $x$0;$pc$1$phi = $145;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$a$0$phi = $a$0;$c$0 = $c$8;$nz$0 = $nz$11;$s_time$0 = $1037;$sp$0 = $sp$2;$status$0 = $status$1;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$pc$1 = $pc$1$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$a$0 = $a$0$phi;
             continue L1;
            }
            $1041 = (($1039) + ($1034))|0;
            HEAP32[$116>>2] = $1041;
            HEAP32[$117>>2] = $1041;
            $y$0$phi = $y$0;$x$0$phi = $x$0;$pc$1$phi = $145;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$a$0$phi = $a$0;$c$0 = $c$8;$nz$0 = $nz$11;$s_time$0 = -1;$sp$0 = $sp$2;$status$0 = $status$1;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$pc$1 = $pc$1$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$a$0 = $a$0$phi;
            continue L1;
           }
           else if ((label|0) == 252) {
            label = 0;
            $1043 = $status$2&255;
            HEAP8[$24] = $1043;
            $1044 = HEAP32[$118>>2]|0;
            $1045 = HEAP32[$32>>2]|0;
            HEAP32[$118>>2] = $1045;
            $1046 = (($1044) + ($149))|0;
            $1047 = (($1046) - ($1045))|0;
            $y$0$phi = $y$0;$x$0$phi = $x$0;$pc$1$phi = $145;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$a$0$phi = $a$0;$c$0 = $c$9;$nz$0 = $nz$12;$s_time$0 = $1047;$sp$0 = $sp$3;$status$0 = $status$2;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$pc$1 = $pc$1$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$a$0 = $a$0$phi;
            continue L1;
           }
           else if ((label|0) == 263) {
            label = 0;
            $1064 = $in_alt$0 ^ 1;
            $phitmp = ($in_alt$0|0)==(1);
            $in_alt$1 = $in_alt$0;$in_inc$1 = $1064;$out_alt$0 = $phitmp;$out_inc$1 = $in_alt$0;
            label = 266;
           }
          } while(0);
          if ((label|0) == 2) {
           label = 0;
           $133 = (($149) + -2)|0;
           $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $pc$0;$s_time$0 = $133;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
           continue L1;
          }
          else if ((label|0) == 48) {
           label = 0;
           $351 = $addr13$0 >>> 13;
           $352 = (($47) + ($351<<2)|0);
           $353 = HEAP32[$352>>2]|0;
           $354 = $addr13$0 & 8191;
           $355 = ($353|0)==(0|0);
           if (!($355)) {
            $356 = $a$0&255;
            $357 = (($353) + ($354)|0);
            HEAP8[$357] = $356;
            $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $149;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $pc$2;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
            continue L1;
           }
           $358 = HEAP8[$48]|0;
           $359 = ($358<<24>>24)==(-1);
           if (!($359)) {
            $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $149;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $pc$2;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
            continue L1;
           }
           HEAP32[$5>>2] = $149;
           __ZN7Hes_Emu10cpu_write_Eji($$25,$354,$a$0);
           $360 = HEAP32[$5>>2]|0;
           $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $pc$2;$s_time$0 = $360;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
           continue L1;
          }
          else if ((label|0) == 57) {
           label = 0;
           $393 = $addr15$0 & 8191;
           $394 = $addr15$0 >>> 13;
           $395 = (($s) + ($394<<2)|0);
           $396 = HEAP32[$395>>2]|0;
           $397 = (($396) + ($393)|0);
           $398 = HEAP8[$397]|0;
           $399 = $398&255;
           $400 = ((($this) + ($394)|0) + 8200|0);
           $401 = HEAP8[$400]|0;
           $402 = ($401<<24>>24)==(-1);
           if (!($402)) {
            $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $149;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0 = $399;$nz$0 = $399;$pc$1 = $pc$3;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;
            continue L1;
           }
           HEAP32[$5>>2] = $149;
           $$66 = $50 ? 0 : $52;
           $403 = (__ZN7Hes_Emu9cpu_read_Ej($$66,$addr15$0)|0);
           $404 = HEAP32[$5>>2]|0;
           $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0 = $403;$nz$0 = $403;$pc$1 = $pc$3;$s_time$0 = $404;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;
           continue L1;
          }
          else if ((label|0) == 66) {
           label = 0;
           $431 = (($pc$4) + 1)|0;
           $432 = $status$0 & -65;
           $433 = $nz$4 & 64;
           $434 = $433 | $432;
           $435 = $nz$4 & $a$0;
           $436 = ($435|0)==(0);
           $437 = $nz$4 << 8;
           $$nz$4 = $436 ? $437 : $nz$4;
           $y$0$phi = $y$0;$x$0$phi = $x$0;$sp$0$phi = $sp$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $$nz$4;$pc$1 = $431;$s_time$0 = $s_time$4;$status$0 = $434;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$sp$0 = $sp$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
           continue L1;
          }
          else if ((label|0) == 72) {
           label = 0;
           $467 = (($pc$5) + 2)|0;
           $468 = $status$0 & -65;
           $469 = $nz$5 & 64;
           $470 = $469 | $468;
           $471 = $nz$5 & $153;
           $472 = ($471|0)==(0);
           $473 = $nz$5 << 8;
           $$nz$5 = $472 ? $473 : $nz$5;
           $y$0$phi = $y$0;$x$0$phi = $x$0;$sp$0$phi = $sp$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $$nz$5;$pc$1 = $467;$s_time$0 = $s_time$5;$status$0 = $470;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$sp$0 = $sp$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
           continue L1;
          }
          else if ((label|0) == 88) {
           label = 0;
           $533 = (($pc$1) + 2)|0;
           $y$0$phi = $y$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $149;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $data$14;$pc$1 = $533;$x$0 = $data$14;$y$0 = $y$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
           continue L1;
          }
          else if ((label|0) == 91) {
           label = 0;
           $539 = (($pc$1) + 2)|0;
           $x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $149;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $data$16;$pc$1 = $539;$y$0 = $data$16;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
           continue L1;
          }
          else if ((label|0) == 110) {
           label = 0;
           HEAP32[$5>>2] = $149;
           if ($82) {
            $610 = 0;$data$2333 = $data$23;$pc$935 = $pc$9;
            label = 112;
           } else {
            $data$2332 = $data$23;$pc$934 = $pc$9;
            label = 111;
           }
          }
          else if ((label|0) == 122) {
           label = 0;
           HEAP32[$5>>2] = $149;
           if ($85) {
            $653 = 0;$data$2838 = $data$28;$pc$1140 = $pc$11;
            label = 124;
           } else {
            $data$2837 = $data$28;$pc$1139 = $pc$11;
            label = 123;
           }
          }
          else if ((label|0) == 134) {
           label = 0;
           HEAP32[$5>>2] = $149;
           if ($88) {
            $694 = 0;$data$3343 = $data$33;$pc$1345 = $pc$13;
            label = 136;
           } else {
            $data$3342 = $data$33;$pc$1344 = $pc$13;
            label = 135;
           }
          }
          else if ((label|0) == 146) {
           label = 0;
           HEAP32[$5>>2] = $149;
           if ($91) {
            $735 = 0;$data$3848 = $data$38;$pc$1550 = $pc$15;
            label = 148;
           } else {
            $data$3847 = $data$38;$pc$1549 = $pc$15;
            label = 147;
           }
          }
          else if ((label|0) == 158) {
           label = 0;
           HEAP32[$5>>2] = $149;
           if ($94) {
            $776 = 0;$data$4353 = $data$43;$pc$1755 = $pc$17;
            label = 160;
           } else {
            $data$4352 = $data$43;$pc$1754 = $pc$17;
            label = 159;
           }
          }
          else if ((label|0) == 170) {
           label = 0;
           HEAP32[$5>>2] = $149;
           if ($97) {
            $816 = 0;$data$4858 = $data$48;$pc$1960 = $pc$19;
            label = 172;
           } else {
            $data$4857 = $data$48;$pc$1959 = $pc$19;
            label = 171;
           }
          }
          else if ((label|0) == 180) {
           label = 0;
           $$sum3 = (($140) + 2)|0;
           $846 = (($139) + ($$sum3)|0);
           $847 = HEAP8[$846]|0;
           $848 = $847&255;
           $849 = $848 << 8;
           $850 = (($849) + ($data$51))|0;
           HEAP32[$5>>2] = $149;
           $$76 = $100 ? 0 : $102;
           $851 = (__ZN7Hes_Emu8cpu_readEj($$76,$850)|0);
           $852 = $c$2 >>> 1;
           $853 = $852 & 128;
           $854 = $851 >> 1;
           $855 = $854 | $853;
           $856 = $851 << 8;
           $c$4 = $856;$data$54 = $850;$nz$7 = $855;
           label = 185;
          }
          else if ((label|0) == 184) {
           label = 0;
           $$sum4 = (($140) + 2)|0;
           $859 = (($139) + ($$sum4)|0);
           $860 = HEAP8[$859]|0;
           $861 = $860&255;
           $862 = $861 << 8;
           $863 = (($862) + ($data$53))|0;
           $864 = $c$3 >>> 8;
           $865 = $864 & 1;
           HEAP32[$5>>2] = $149;
           $$77 = $106 ? 0 : $108;
           $866 = (__ZN7Hes_Emu8cpu_readEj($$77,$863)|0);
           $867 = $866 << 1;
           $868 = $867 | $865;
           $c$4 = $867;$data$54 = $863;$nz$7 = $868;
           label = 185;
          }
          else if ((label|0) == 190) {
           label = 0;
           $877 = (($this) + ($data$56)|0);
           $878 = HEAP8[$877]|0;
           $879 = $878&255;
           $880 = $c$5 >>> 1;
           $881 = $880 & 128;
           $882 = $879 >>> 1;
           $883 = $882 | $881;
           $884 = $879 << 8;
           $c$7 = $884;$data$62 = $data$56;$nz$9 = $883;
           label = 205;
          }
          else if ((label|0) == 194) {
           label = 0;
           $889 = $c$6 >>> 8;
           $890 = $889 & 1;
           $891 = (($this) + ($data$58)|0);
           $892 = HEAP8[$891]|0;
           $893 = $892&255;
           $894 = $893 << 1;
           $895 = $894 | $890;
           $c$7 = $894;$data$62 = $data$58;$nz$9 = $895;
           label = 205;
          }
          else if ((label|0) == 204) {
           label = 0;
           $912 = (($this) + ($data$61)|0);
           $913 = HEAP8[$912]|0;
           $914 = $913&255;
           $915 = (($914) + ($nz$8))|0;
           $c$7 = $c$0;$data$62 = $data$61;$nz$9 = $915;
           label = 205;
          }
          else if ((label|0) == 266) {
           label = 0;
           $1065 = (__Z8get_le16PKv($142)|0);
           $$sum1 = (($140) + 3)|0;
           $1066 = (($139) + ($$sum1)|0);
           $1067 = (__Z8get_le16PKv($1066)|0);
           $$sum2 = (($140) + 5)|0;
           $1068 = (($139) + ($$sum2)|0);
           $1069 = (__Z8get_le16PKv($1068)|0);
           $1070 = ($1069|0)!=(0);
           $$ = $1070 ? $1069 : 65536;
           $1071 = $y$0&255;
           $1072 = (($sp$0) + -1)|0;
           $1073 = $1072 | 256;
           $1074 = (($this) + ($1073)|0);
           HEAP8[$1074] = $1071;
           $1075 = $a$0&255;
           $1076 = (($sp$0) + -2)|0;
           $1077 = $1076 | 256;
           $1078 = (($this) + ($1077)|0);
           HEAP8[$1078] = $1075;
           $1079 = $x$0&255;
           $1080 = (($sp$0) + -3)|0;
           $1081 = $1080 | 256;
           $1082 = (($this) + ($1081)|0);
           HEAP8[$1082] = $1079;
           HEAP32[$5>>2] = $149;
           $1083 = ($in_alt$1|0)==(0);
           $count$0 = $$;$in43$0 = $1065;$in_inc$2 = $in_inc$1;$out44$0 = $1067;$out_inc$2 = $out_inc$1;
           while(1) {
            $$80 = $123 ? 0 : $127;
            $1084 = (__ZN7Hes_Emu8cpu_readEj($$80,$in43$0)|0);
            $1085 = (($in43$0) + ($in_inc$2))|0;
            $1086 = $1085 & 65535;
            $1087 = HEAP32[$5>>2]|0;
            $1088 = (($1087) + 6)|0;
            HEAP32[$5>>2] = $1088;
            $1089 = (0 - ($in_inc$2))|0;
            $in_inc$2$ = $1083 ? $in_inc$2 : $1089;
            $1090 = $123 ? 0 : $125;
            __ZN7Hes_Emu9cpu_writeEji($1090,$out44$0,$1084);
            $1091 = (($out44$0) + ($out_inc$2))|0;
            $1092 = $1091 & 65535;
            $1093 = (0 - ($out_inc$2))|0;
            $out_inc$2$ = $out_alt$0 ? $out_inc$2 : $1093;
            $1094 = (($count$0) + -1)|0;
            $1095 = ($1094|0)==(0);
            if ($1095) {
             break;
            } else {
             $out_inc$2$phi = $out_inc$2$;$out44$0$phi = $1092;$in_inc$2$phi = $in_inc$2$;$in43$0$phi = $1086;$count$0$phi = $1094;$out_inc$2 = $out_inc$2$phi;$out44$0 = $out44$0$phi;$in_inc$2 = $in_inc$2$phi;$in43$0 = $in43$0$phi;$count$0 = $count$0$phi;
            }
           }
           $1096 = (($pc$1) + 7)|0;
           $1097 = HEAP32[$5>>2]|0;
           $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $1096;$s_time$0 = $1097;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
           continue L1;
          }
          if ((label|0) == 111) {
           label = 0;
           $610 = $84;$data$2333 = $data$2332;$pc$935 = $pc$934;
           label = 112;
          }
          else if ((label|0) == 123) {
           label = 0;
           $653 = $87;$data$2838 = $data$2837;$pc$1140 = $pc$1139;
           label = 124;
          }
          else if ((label|0) == 135) {
           label = 0;
           $694 = $90;$data$3343 = $data$3342;$pc$1345 = $pc$1344;
           label = 136;
          }
          else if ((label|0) == 147) {
           label = 0;
           $735 = $93;$data$3848 = $data$3847;$pc$1550 = $pc$1549;
           label = 148;
          }
          else if ((label|0) == 159) {
           label = 0;
           $776 = $96;$data$4353 = $data$4352;$pc$1755 = $pc$1754;
           label = 160;
          }
          else if ((label|0) == 171) {
           label = 0;
           $816 = $99;$data$4858 = $data$4857;$pc$1960 = $pc$1959;
           label = 172;
          }
          else if ((label|0) == 185) {
           label = 0;
           $869 = (($pc$1) + 3)|0;
           $$78 = $103 ? 0 : $105;
           $870 = $nz$7 & 255;
           __ZN7Hes_Emu9cpu_writeEji($$78,$data$54,$870);
           $871 = HEAP32[$5>>2]|0;
           $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$a$0$phi = $a$0;$c$0 = $c$4;$nz$0 = $nz$7;$pc$1 = $869;$s_time$0 = $871;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$a$0 = $a$0$phi;
           continue L1;
          }
          else if ((label|0) == 205) {
           label = 0;
           $916 = (($pc$1) + 2)|0;
           $917 = $nz$9&255;
           $918 = (($this) + ($data$62)|0);
           HEAP8[$918] = $917;
           $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $149;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$a$0$phi = $a$0;$c$0 = $c$7;$nz$0 = $nz$9;$pc$1 = $916;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$a$0 = $a$0$phi;
           continue L1;
          }
          if ((label|0) == 112) {
           label = 0;
           $611 = (__ZN7Hes_Emu8cpu_readEj($610,$data$2333)|0);
           $612 = HEAP32[$5>>2]|0;
           $data$24 = $611;$pc$10 = $pc$935;$s_time$8 = $612;
           label = 113;
          }
          else if ((label|0) == 124) {
           label = 0;
           $654 = (__ZN7Hes_Emu8cpu_readEj($653,$data$2838)|0);
           $655 = HEAP32[$5>>2]|0;
           $data$29 = $654;$pc$12 = $pc$1140;$s_time$9 = $655;
           label = 125;
          }
          else if ((label|0) == 136) {
           label = 0;
           $695 = (__ZN7Hes_Emu8cpu_readEj($694,$data$3343)|0);
           $696 = HEAP32[$5>>2]|0;
           $data$34 = $695;$pc$14 = $pc$1345;$s_time$10 = $696;
           label = 137;
          }
          else if ((label|0) == 148) {
           label = 0;
           $736 = (__ZN7Hes_Emu8cpu_readEj($735,$data$3848)|0);
           $737 = HEAP32[$5>>2]|0;
           $data$39 = $736;$pc$16 = $pc$1550;$s_time$11 = $737;
           label = 149;
          }
          else if ((label|0) == 160) {
           label = 0;
           $777 = (__ZN7Hes_Emu8cpu_readEj($776,$data$4353)|0);
           $778 = HEAP32[$5>>2]|0;
           $data$44 = $777;$pc$18 = $pc$1755;$s_time$12 = $778;
           label = 161;
          }
          else if ((label|0) == 172) {
           label = 0;
           $817 = (__ZN7Hes_Emu8cpu_readEj($816,$data$4858)|0);
           $818 = HEAP32[$5>>2]|0;
           $data$49 = $817;$pc$20 = $pc$1960;$s_time$13 = $818;
          }
          if ((label|0) == 113) {
           label = 0;
           $613 = (($a$0) - ($data$24))|0;
           $614 = (($pc$10) + 1)|0;
           $615 = $613 ^ -1;
           $616 = $613 & 255;
           $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$a$0$phi = $a$0;$c$0 = $615;$nz$0 = $616;$pc$1 = $614;$s_time$0 = $s_time$8;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$a$0 = $a$0$phi;
           continue L1;
          }
          else if ((label|0) == 125) {
           label = 0;
           $656 = $data$29 & $a$0;
           $657 = (($pc$12) + 1)|0;
           $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0 = $656;$nz$0 = $656;$pc$1 = $657;$s_time$0 = $s_time$9;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;
           continue L1;
          }
          else if ((label|0) == 137) {
           label = 0;
           $697 = $data$34 ^ $a$0;
           $698 = (($pc$14) + 1)|0;
           $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0 = $697;$nz$0 = $697;$pc$1 = $698;$s_time$0 = $s_time$10;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;
           continue L1;
          }
          else if ((label|0) == 149) {
           label = 0;
           $738 = $data$39 | $a$0;
           $739 = (($pc$16) + 1)|0;
           $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0 = $738;$nz$0 = $738;$pc$1 = $739;$s_time$0 = $s_time$11;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;
           continue L1;
          }
          else if ((label|0) == 161) {
           label = 0;
           $779 = $data$44 ^ 255;
           $data$49 = $779;$pc$20 = $pc$18;$s_time$13 = $s_time$12;
          }
          $819 = $c$0 >>> 8;
          $820 = $819 & 1;
          $821 = $a$0 ^ 128;
          $822 = (($821) + ($820))|0;
          $sext = $data$49 << 24;
          $823 = $sext >> 24;
          $824 = (($822) + ($823))|0;
          $825 = $status$0 & -65;
          $826 = $824 >>> 2;
          $827 = $826 & 64;
          $828 = $827 | $825;
          $829 = (($a$0) + ($820))|0;
          $830 = (($829) + ($data$49))|0;
          $831 = (($pc$20) + 1)|0;
          $832 = $830 & 255;
          $y$0$phi = $y$0;$x$0$phi = $x$0;$sp$0$phi = $sp$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$a$0 = $832;$c$0 = $830;$nz$0 = $830;$pc$1 = $831;$s_time$0 = $s_time$13;$status$0 = $828;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$sp$0 = $sp$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;
          continue L1;
         } else {
          $s_time$15 = $s_time$0;
          label = 272;
         }
        } while(0);
        do {
         if ((label|0) == 272) {
          label = 0;
          HEAP32[$5>>2] = $s_time$15;
          $$81 = $128 ? 0 : $130;
          $1136 = (__ZN7Hes_Emu8cpu_doneEv($$81)|0);
          $1137 = HEAP32[$5>>2]|0;
          $1138 = ($1136|0)>(0);
          if ($1138) {
           $pc$22 = $pc$1;$result_$0 = $1136;$s_time$14 = $1137;
           break;
          }
          $1139 = ($1137|0)<(0);
          if ($1139) {
           $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$pc$1$phi = $pc$1;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$s_time$0 = $1137;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$pc$1 = $pc$1$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
           continue L1;
          } else {
           break L1;
          }
         }
        } while(0);
        $1099 = $pc$22 >>> 8;
        $1100 = $1099&255;
        $1101 = (($sp$0) + -1)|0;
        $1102 = $1101 | 256;
        $1103 = (($this) + ($1102)|0);
        HEAP8[$1103] = $1100;
        $1104 = $pc$22&255;
        $1105 = (($sp$0) + -2)|0;
        $1106 = $1105 | 256;
        $1107 = (($this) + ($1106)|0);
        HEAP8[$1107] = $1104;
        $1108 = HEAP32[$131>>2]|0;
        $$sum21 = (($result_$0) + 8176)|0;
        $1109 = (($1108) + ($$sum21)|0);
        $1110 = (__Z8get_le16PKv($1109)|0);
        $1111 = (($sp$0) + -3)|0;
        $1112 = $1111 | 256;
        $1113 = $status$0 & 76;
        $1114 = $nz$0 >>> 8;
        $1115 = $1114 | $nz$0;
        $1116 = $1115 & 128;
        $1117 = $1113 | $1116;
        $1118 = $c$0 >>> 8;
        $1119 = $1118 & 1;
        $1120 = $1117 | $1119;
        $1121 = $nz$0 & 255;
        $1122 = ($1121|0)==(0);
        $1123 = $1120 | 2;
        $$30 = $1122 ? $1123 : $1120;
        $1124 = ($result_$0|0)==(6);
        $1125 = $$30 | 16;
        $temp46$1 = $1124 ? $1125 : $$30;
        $1126 = $temp46$1&255;
        $1127 = (($this) + ($1112)|0);
        HEAP8[$1127] = $1126;
        $1128 = $status$0 & -13;
        $1129 = $1128 | 4;
        $1130 = $1129&255;
        HEAP8[$24] = $1130;
        $1131 = HEAP32[$132>>2]|0;
        $1132 = HEAP32[$32>>2]|0;
        HEAP32[$132>>2] = $1132;
        $1133 = (($s_time$14) + 7)|0;
        $1134 = (($1133) + ($1131))|0;
        $1135 = (($1134) - ($1132))|0;
        $y$0$phi = $y$0;$x$0$phi = $x$0;$nz$0$phi = $nz$0;$illegal_encountered$0$off0$phi = $illegal_encountered$0$off0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $1110;$s_time$0 = $1135;$sp$0 = $1112;$status$0 = $1129;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$nz$0 = $nz$0$phi;$illegal_encountered$0$off0 = $illegal_encountered$0$off0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
       }
       HEAP32[$5>>2] = $1137;
       $1140 = $pc$1&65535;
       HEAP16[$7>>1] = $1140;
       $1141 = (($sp$0) + 255)|0;
       $1142 = $1141&255;
       HEAP8[$19] = $1142;
       $1143 = $a$0&255;
       HEAP8[$10] = $1143;
       $1144 = $x$0&255;
       HEAP8[$13] = $1144;
       $1145 = $y$0&255;
       HEAP8[$16] = $1145;
       $1146 = $status$0 & 76;
       $1147 = $nz$0 >>> 8;
       $1148 = $1147 | $nz$0;
       $1149 = $1148 & 128;
       $1150 = $1146 | $1149;
       $1151 = $c$0 >>> 8;
       $1152 = $1151 & 1;
       $1153 = $1150 | $1152;
       $1154 = $nz$0 & 255;
       $1155 = ($1154|0)==(0);
       $1156 = $1153 | 2;
       $$31 = $1155 ? $1156 : $1153;
       $1157 = $$31&255;
       HEAP8[$24] = $1157;
       dest=$3+0|0; src=$1+0|0; stop=dest+44|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));;
       HEAP32[$4>>2] = $2;
       STACKTOP = sp;return ($illegal_encountered$0$off0|0);
      }
      function __ZN7Hes_Cpu12set_end_timeEl($this,$t) {
       $this = $this|0;
       $t = $t|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 8264|0);
       HEAP32[$1>>2] = $t;
       $2 = (($this) + 8260|0);
       $3 = HEAP32[$2>>2]|0;
       $4 = (__ZN7Hes_Cpu15update_end_timeEll($this,$t,$3)|0);
       $5 = (($this) + 8212|0);
       $6 = HEAP32[$5>>2]|0;
       $7 = (($6) + 40|0);
       $8 = HEAP32[$7>>2]|0;
       $9 = (($8) + ($4))|0;
       HEAP32[$7>>2] = $9;
       STACKTOP = sp;return;
      }
      function __ZN7Hes_Cpu15update_end_timeEll($this,$t,$irq) {
       $this = $this|0;
       $t = $t|0;
       $irq = $irq|0;
       var $$0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $irq$t = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($irq|0)<($t|0);
       if ($1) {
        $2 = (($this) + 8197|0);
        $3 = HEAP8[$2]|0;
        $4 = $3 & 4;
        $5 = ($4<<24>>24)==(0);
        $irq$t = $5 ? $irq : $t;
        $$0 = $irq$t;
       } else {
        $$0 = $t;
       }
       $6 = (($this) + 8212|0);
       $7 = HEAP32[$6>>2]|0;
       $8 = (($7) + 36|0);
       $9 = HEAP32[$8>>2]|0;
       $10 = (($9) - ($$0))|0;
       HEAP32[$8>>2] = $$0;
       STACKTOP = sp;return ($10|0);
      }
      function __ZN8Rom_DataILi8192EE7at_addrEl($this,$addr) {
       $this = $this|0;
       $addr = $addr|0;
       var $$ = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (__ZNK8Rom_DataILi8192EE9mask_addrEl($this,$addr)|0);
       $2 = (($this) + 12|0);
       $3 = HEAP32[$2>>2]|0;
       $4 = (($1) - ($3))|0;
       $5 = ($this);
       $6 = (__ZNK13blargg_vectorIhE4sizeEv($5)|0);
       $7 = (($6) + -8200)|0;
       $8 = ($4>>>0)>($7>>>0);
       $$ = $8 ? 0 : $4;
       $9 = (__ZNK13blargg_vectorIhEixEj($5,$$)|0);
       STACKTOP = sp;return ($9|0);
      }
      function __ZN8Rom_DataILi8192EE8unmappedEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = (__ZNK13blargg_vectorIhE5beginEv($1)|0);
       STACKTOP = sp;return ($2|0);
      }
      function __ZNK8Rom_DataILi8192EE9mask_addrEl($this,$addr) {
       $this = $this|0;
       $addr = $addr|0;
       var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 16|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = $2 & $addr;
       STACKTOP = sp;return ($3|0);
      }
      function __ZN7Hes_EmuC2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 336|0);
       $2 = $1;
       __ZN7Hes_CpuC2Ev($2);
       $3 = ($this);
       __ZN11Classic_EmuC2Ev($3);
       $4 = $this;
       HEAP32[$4>>2] = (((41488) + 8|0));
       $5 = (($this) + 8640|0);
       __ZN8Rom_DataILi8192EEC1Ev($5);
       $6 = (($this) + 8752|0);
       __ZN7Hes_ApuC2Ev($6);
       $7 = (($this) + 8720|0);
       HEAP32[$7>>2] = 0;
       $8 = $this;
       __ZN8Gme_File8set_typeEPK11gme_type_t_($8,(41688));
       $9 = $this;
       __ZN9Music_Emu15set_voice_namesEPKPKc($9,((41592)));
       __ZN11Classic_Emu15set_voice_typesEPKi($3,((41664)));
       __ZN9Music_Emu21set_silence_lookaheadEi($9,6);
       __ZN9Music_Emu8set_gainEd($9,1.1100000000000000977);
       STACKTOP = sp;return;
      }
      function __ZN7Hes_CpuC2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 8216|0);
       $2 = (($this) + 8212|0);
       HEAP32[$2>>2] = $1;
       STACKTOP = sp;return;
      }
      function __ZN8Rom_DataILi8192EEC1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN8Rom_DataILi8192EEC2Ev($this);
       STACKTOP = sp;return;
      }
      function __ZN8Rom_DataILi8192EED1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN8Rom_DataILi8192EED2Ev($this);
       STACKTOP = sp;return;
      }
      function __ZN7Hes_EmuD0Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       __ZN7Hes_EmuD2Ev($this);
       $1 = ($this);
       __ZN8Gme_FiledlEPv($1);
       STACKTOP = sp;return;
      }
      function __ZN7Hes_EmuD2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $this;
       HEAP32[$1>>2] = (((41488) + 8|0));
       $2 = (($this) + 8640|0);
       __ZN8Rom_DataILi8192EED1Ev($2);
       $3 = ($this);
       __ZN11Classic_EmuD2Ev($3);
       STACKTOP = sp;return;
      }
      function __ZN7Hes_Emu6unloadEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 8640|0);
       __ZN8Rom_DataILi8192EE5clearEv($1);
       $2 = $this;
       __ZN9Music_Emu6unloadEv($2);
       STACKTOP = sp;return;
      }
      function __ZN8Rom_DataILi8192EE5clearEv($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       __ZN13blargg_vectorIhE5clearEv($1);
       STACKTOP = sp;return;
      }
      function __ZNK7Hes_Emu11track_info_EP12track_info_ti($this,$out,u$0) {
       $this = $this|0;
       $out = $out|0;
       u$0 = u$0|0;
       var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 8640|0);
       $2 = (__ZNK8Rom_DataILi8192EE5beginEv($1)|0);
       $3 = (($2) + 32|0);
       __ZL15copy_hes_fieldsPKhP12track_info_t($3,$out);
       STACKTOP = sp;return (0|0);
      }
      function __ZL15copy_hes_fieldsPKhP12track_info_t($in,$out) {
       $in = $in|0;
       $out = $out|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = HEAP8[$in]|0;
       $2 = ($1&255)>(31);
       if (!($2)) {
        STACKTOP = sp;return;
       }
       $3 = (($out) + 272|0);
       $4 = (__ZL10copy_fieldPKhPc($in,$3)|0);
       $5 = (($out) + 784|0);
       $6 = (__ZL10copy_fieldPKhPc($4,$5)|0);
       $7 = (($out) + 1040|0);
       (__ZL10copy_fieldPKhPc($6,$7)|0);
       STACKTOP = sp;return;
      }
      function __ZNK8Rom_DataILi8192EE5beginEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = (__ZNK13blargg_vectorIhE5beginEv($1)|0);
       $3 = (($2) + 8200|0);
       STACKTOP = sp;return ($3|0);
      }
      function __ZN7Hes_Emu5load_ER11Data_Reader($this,$in) {
       $this = $this|0;
       $in = $in|0;
       var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
       var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0;
       var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $addr$0 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 8640|0);
       $2 = (($this) + 8664|0);
       $3 = (__ZN8Rom_DataILi8192EE4loadER11Data_ReaderiPvi($1,$in,32,$2,255)|0);
       $4 = ($3|0)==(0|0);
       if (!($4)) {
        $$0 = $3;
        STACKTOP = sp;return ($$0|0);
       }
       $5 = (__ZL16check_hes_headerPKv($2)|0);
       $6 = ($5|0)==(0|0);
       if (!($6)) {
        $$0 = $5;
        STACKTOP = sp;return ($$0|0);
       }
       $7 = (($this) + 8668|0);
       $8 = HEAP8[$7]|0;
       $9 = ($8<<24>>24)==(0);
       if (!($9)) {
        $10 = $this;
        __ZN8Gme_File11set_warningEPKc($10,(41712));
       }
       $11 = (($this) + 8680|0);
       $12 = (_memcmp($11,(41736),4)|0);
       $13 = ($12|0)==(0);
       if (!($13)) {
        $14 = $this;
        __ZN8Gme_File11set_warningEPKc($14,(41744));
       }
       $15 = (($this) + 8692|0);
       $16 = (_memcmp($15,(41768),4)|0);
       $17 = ($16|0)==(0);
       if (!($17)) {
        $18 = $this;
        __ZN8Gme_File11set_warningEPKc($18,(41776));
       }
       $19 = (($this) + 8688|0);
       $20 = (__Z8get_le32PKv($19)|0);
       $21 = (($this) + 8684|0);
       $22 = (__Z8get_le32PKv($21)|0);
       $23 = ($20>>>0)>(1048575);
       if ($23) {
        $24 = $this;
        __ZN8Gme_File11set_warningEPKc($24,(41800));
        $25 = $20 & 1048575;
        $addr$0 = $25;
       } else {
        $addr$0 = $20;
       }
       $26 = (($addr$0) + ($22))|0;
       $27 = ($26>>>0)>(1048576);
       if ($27) {
        $28 = $this;
        __ZN8Gme_File11set_warningEPKc($28,(41816));
       }
       $29 = (__ZNK8Rom_DataILi8192EE9file_sizeEv($1)|0);
       $30 = ($22|0)==($29|0);
       L22: do {
        if (!($30)) {
         $31 = (($29) + -4)|0;
         $32 = ($22|0)>($31|0);
         do {
          if (!($32)) {
           $33 = (__ZNK8Rom_DataILi8192EE5beginEv($1)|0);
           $34 = (($33) + ($22)|0);
           $35 = (_memcmp($34,(41736),4)|0);
           $36 = ($35|0)==(0);
           if (!($36)) {
            break;
           }
           $37 = $this;
           __ZN8Gme_File11set_warningEPKc($37,(41832));
           break L22;
          }
         } while(0);
         $38 = (__ZNK8Rom_DataILi8192EE9file_sizeEv($1)|0);
         $39 = ($22|0)<($38|0);
         $40 = $this;
         if ($39) {
          __ZN8Gme_File11set_warningEPKc($40,(41864));
          break;
         } else {
          __ZN8Gme_File11set_warningEPKc($40,(41880));
          break;
         }
        }
       } while(0);
       __ZN8Rom_DataILi8192EE8set_addrEl($1,$addr$0);
       $41 = $this;
       __ZN9Music_Emu15set_voice_countEi($41,6);
       $42 = (($this) + 8752|0);
       $43 = (+__ZNK9Music_Emu4gainEv($41));
       __ZN7Hes_Apu6volumeEd($42,$43);
       $44 = ($this);
       $45 = (__ZN11Classic_Emu12setup_bufferEl($44,7159091)|0);
       $$0 = $45;
       STACKTOP = sp;return ($$0|0);
      }
      function __ZN8Rom_DataILi8192EE4loadER11Data_ReaderiPvi($this,$in,$header_size,$header_out,$fill) {
       $this = $this|0;
       $in = $in|0;
       $header_size = $header_size|0;
       $header_out = $header_out|0;
       $fill = $fill|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = (__ZN9Rom_Data_14load_rom_data_ER11Data_ReaderiPvil($1,$in,$header_size,$header_out,$fill,8200)|0);
       STACKTOP = sp;return ($2|0);
      }
      function __ZL16check_hes_headerPKv($header) {
       $header = $header|0;
       var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (_memcmp($header,(42128),4)|0);
       $2 = ($1|0)==(0);
       $3 = HEAP32[(40024)>>2]|0;
       $$0 = $2 ? 0 : $3;
       STACKTOP = sp;return ($$0|0);
      }
      function __ZNK8Rom_DataILi8192EE9file_sizeEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 8|0);
       $2 = HEAP32[$1>>2]|0;
       STACKTOP = sp;return ($2|0);
      }
      function __ZN8Rom_DataILi8192EE8set_addrEl($this,$addr) {
       $this = $this|0;
       $addr = $addr|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       __ZN9Rom_Data_9set_addr_Eli($1,$addr,8192);
       STACKTOP = sp;return;
      }
      function __ZN7Hes_Apu6volumeEd($this,$v) {
       $this = $this|0;
       $v = +$v;
       var $1 = 0, $2 = 0.0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 536|0);
       $2 = $v * 9.15527343749999966118E-6;
       __ZN10Blip_SynthILi8ELi1EE6volumeEd($1,$2);
       STACKTOP = sp;return;
      }
      function __ZN7Hes_Emu9update_eqERK9blip_eq_t($this,$eq) {
       $this = $this|0;
       $eq = $eq|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 8752|0);
       __ZN7Hes_Apu9treble_eqERK9blip_eq_t($1,$eq);
       STACKTOP = sp;return;
      }
      function __ZN7Hes_Apu9treble_eqERK9blip_eq_t($this,$eq) {
       $this = $this|0;
       $eq = $eq|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 536|0);
       __ZN10Blip_SynthILi8ELi1EE9treble_eqERK9blip_eq_t($1,$eq);
       STACKTOP = sp;return;
      }
      function __ZN7Hes_Emu9set_voiceEiP11Blip_BufferS1_S1_($this,$i,$center,$left,$right) {
       $this = $this|0;
       $i = $i|0;
       $center = $center|0;
       $left = $left|0;
       $right = $right|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 8752|0);
       __ZN7Hes_Apu10osc_outputEiP11Blip_BufferS1_S1_($1,$i,$center,$left,$right);
       STACKTOP = sp;return;
      }
      function __ZN7Hes_Emu17recalc_timer_loadEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 8720|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = (($this) + 8704|0);
       $4 = HEAP32[$3>>2]|0;
       $5 = Math_imul($4, $2)|0;
       $6 = (($5) + 1)|0;
       $7 = (($this) + 8716|0);
       HEAP32[$7>>2] = $6;
       STACKTOP = sp;return;
      }
      function __ZN7Hes_Emu10set_tempo_Ed($this,$t) {
       $this = $this|0;
       $t = +$t;
       var $1 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = 119210.0 / $t;
       $2 = (~~(($1)));
       $3 = (($this) + 8696|0);
       HEAP32[$3>>2] = $2;
       $4 = 1024.0 / $t;
       $5 = (~~(($4)));
       $6 = (($this) + 8704|0);
       HEAP32[$6>>2] = $5;
       __ZN7Hes_Emu17recalc_timer_loadEv($this);
       STACKTOP = sp;return;
      }
      function __ZN7Hes_Emu12start_track_Ei($this,$track) {
       $this = $this|0;
       $track = $track|0;
       var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
       var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
       var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = (__ZN11Classic_Emu12start_track_Ei($1,$track)|0);
       $3 = ($2|0)==(0|0);
       if (!($3)) {
        $$0 = $2;
        STACKTOP = sp;return ($$0|0);
       }
       $4 = (($this) + 336|0);
       $5 = $4;
       _memset(($4|0),0,8192)|0;
       $6 = (($this) + 9848|0);
       _memset(($6|0),0,24584)|0;
       $7 = (($this) + 8752|0);
       __ZN7Hes_Apu5resetEv($7);
       __ZN7Hes_Cpu5resetEv($5);
       $8 = (($this) + 8672|0);
       $9 = HEAP8[$8]|0;
       $10 = $9&255;
       __ZN7Hes_Cpu7set_mmrEii($5,0,$10);
       $11 = (($this) + 8673|0);
       $12 = HEAP8[$11]|0;
       $13 = $12&255;
       __ZN7Hes_Cpu7set_mmrEii($5,1,$13);
       $14 = (($this) + 8674|0);
       $15 = HEAP8[$14]|0;
       $16 = $15&255;
       __ZN7Hes_Cpu7set_mmrEii($5,2,$16);
       $17 = (($this) + 8675|0);
       $18 = HEAP8[$17]|0;
       $19 = $18&255;
       __ZN7Hes_Cpu7set_mmrEii($5,3,$19);
       $20 = (($this) + 8676|0);
       $21 = HEAP8[$20]|0;
       $22 = $21&255;
       __ZN7Hes_Cpu7set_mmrEii($5,4,$22);
       $23 = (($this) + 8677|0);
       $24 = HEAP8[$23]|0;
       $25 = $24&255;
       __ZN7Hes_Cpu7set_mmrEii($5,5,$25);
       $26 = (($this) + 8678|0);
       $27 = HEAP8[$26]|0;
       $28 = $27&255;
       __ZN7Hes_Cpu7set_mmrEii($5,6,$28);
       $29 = (($this) + 8679|0);
       $30 = HEAP8[$29]|0;
       $31 = $30&255;
       __ZN7Hes_Cpu7set_mmrEii($5,7,$31);
       __ZN7Hes_Cpu7set_mmrEii($5,8,255);
       $32 = (($this) + 8744|0);
       HEAP8[$32] = 6;
       $33 = (($this) + 8736|0);
       HEAP32[$33>>2] = 1073741824;
       $34 = (($this) + 8740|0);
       HEAP32[$34>>2] = 1073741824;
       $35 = (($this) + 8724|0);
       HEAP8[$35] = 0;
       $36 = (($this) + 8720|0);
       HEAP32[$36>>2] = 128;
       $37 = (($this) + 8716|0);
       $38 = HEAP32[$37>>2]|0;
       $39 = (($this) + 8712|0);
       HEAP32[$39>>2] = $38;
       $40 = (($this) + 8725|0);
       HEAP8[$40] = 0;
       $41 = (($this) + 8708|0);
       HEAP32[$41>>2] = 0;
       $42 = (($this) + 8732|0);
       HEAP8[$42] = 0;
       $43 = (($this) + 8733|0);
       HEAP8[$43] = 0;
       $44 = (($this) + 8728|0);
       HEAP32[$44>>2] = 0;
       $45 = (($this) + 847|0);
       HEAP8[$45] = 31;
       $46 = (($this) + 846|0);
       HEAP8[$46] = -2;
       $47 = (($this) + 8528|0);
       $48 = (($this) + 8534|0);
       HEAP8[$48] = -3;
       $49 = (($this) + 8670|0);
       $50 = (__Z8get_le16PKv($49)|0);
       $51 = $50&65535;
       $52 = $47;
       HEAP16[$52>>1] = $51;
       $53 = $track&255;
       $54 = (($this) + 8530|0);
       HEAP8[$54] = $53;
       __ZN7Hes_Emu17recalc_timer_loadEv($this);
       $55 = (($this) + 8700|0);
       HEAP32[$55>>2] = 0;
       $$0 = 0;
       STACKTOP = sp;return ($$0|0);
      }
      function __ZN7Hes_Emu13cpu_write_vdpEii($this,$addr,$data) {
       $this = $this|0;
       $addr = $addr|0;
       $data = $data|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       if ((($addr|0) == 0)) {
        $1 = $data & 31;
        $2 = $1&255;
        $3 = (($this) + 8732|0);
        HEAP8[$3] = $2;
        STACKTOP = sp;return;
       } else if ((($addr|0) == 2)) {
        $4 = (($this) + 8732|0);
        $5 = HEAP8[$4]|0;
        $6 = ($5<<24>>24)==(5);
        if (!($6)) {
         STACKTOP = sp;return;
        }
        $7 = $data & 4;
        $8 = ($7|0)==(0);
        if (!($8)) {
         $9 = $this;
         __ZN8Gme_File11set_warningEPKc($9,(41904));
        }
        $10 = (($this) + 336|0);
        $11 = $10;
        $12 = (__ZNK7Hes_Cpu4timeEv($11)|0);
        __ZN7Hes_Emu9run_untilEl($this,$12);
        $13 = $data&255;
        $14 = (($this) + 8733|0);
        HEAP8[$14] = $13;
        __ZN7Hes_Emu11irq_changedEv($this);
        STACKTOP = sp;return;
       } else {
        STACKTOP = sp;return;
       }
      }
      function __ZN7Hes_Emu9run_untilEl($this,$present) {
       $this = $this|0;
       $present = $present|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $6$phi = 0;
       var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 8728|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = ($2|0)<($present|0);
       if ($3) {
        $4 = (($this) + 8696|0);
        $5 = HEAP32[$4>>2]|0;
        $6 = $2;
        while(1) {
         $7 = (($5) + ($6))|0;
         $8 = ($7|0)<($present|0);
         if ($8) {
          $6$phi = $7;$6 = $6$phi;
         } else {
          break;
         }
        }
        HEAP32[$1>>2] = $7;
       }
       $9 = (($this) + 8708|0);
       $10 = HEAP32[$9>>2]|0;
       $11 = (($present) - ($10))|0;
       $12 = ($11|0)>(0);
       if (!($12)) {
        STACKTOP = sp;return;
       }
       $13 = (($this) + 8724|0);
       $14 = HEAP8[$13]|0;
       $15 = ($14<<24>>24)==(0);
       do {
        if (!($15)) {
         $16 = (($this) + 8712|0);
         $17 = HEAP32[$16>>2]|0;
         $18 = (($17) - ($11))|0;
         HEAP32[$16>>2] = $18;
         $19 = ($18|0)<(1);
         if (!($19)) {
          break;
         }
         $20 = (($this) + 8716|0);
         $21 = HEAP32[$20>>2]|0;
         $22 = (($21) + ($18))|0;
         HEAP32[$16>>2] = $22;
        }
       } while(0);
       HEAP32[$9>>2] = $present;
       STACKTOP = sp;return;
      }
      function __ZNK7Hes_Cpu4timeEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 8212|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = (($2) + 40|0);
       $4 = HEAP32[$3>>2]|0;
       $5 = (($2) + 36|0);
       $6 = HEAP32[$5>>2]|0;
       $7 = (($6) + ($4))|0;
       STACKTOP = sp;return ($7|0);
      }
      function __ZN7Hes_Emu11irq_changedEv($this) {
       $this = $this|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
       var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $time$0 = 0, $time$1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 336|0);
       $2 = $1;
       $3 = (__ZNK7Hes_Cpu4timeEv($2)|0);
       $4 = (($this) + 8736|0);
       $5 = HEAP32[$4>>2]|0;
       $6 = ($5|0)>($3|0);
       do {
        if ($6) {
         HEAP32[$4>>2] = 1073741824;
         $7 = (($this) + 8724|0);
         $8 = HEAP8[$7]|0;
         $9 = ($8<<24>>24)==(0);
         if ($9) {
          break;
         }
         $10 = (($this) + 8725|0);
         $11 = HEAP8[$10]|0;
         $12 = ($11<<24>>24)==(0);
         if (!($12)) {
          break;
         }
         $13 = (($this) + 8712|0);
         $14 = HEAP32[$13>>2]|0;
         $15 = (($14) + ($3))|0;
         HEAP32[$4>>2] = $15;
        }
       } while(0);
       $16 = (($this) + 8740|0);
       $17 = HEAP32[$16>>2]|0;
       $18 = ($17|0)>($3|0);
       do {
        if ($18) {
         HEAP32[$16>>2] = 1073741824;
         $19 = (($this) + 8733|0);
         $20 = HEAP8[$19]|0;
         $21 = $20 & 8;
         $22 = ($21<<24>>24)==(0);
         if ($22) {
          break;
         }
         $23 = (($this) + 8728|0);
         $24 = HEAP32[$23>>2]|0;
         HEAP32[$16>>2] = $24;
        }
       } while(0);
       $25 = (($this) + 8744|0);
       $26 = HEAP8[$25]|0;
       $27 = $26 & 4;
       $28 = ($27<<24>>24)==(0);
       if ($28) {
        $29 = HEAP32[$4>>2]|0;
        $time$0 = $29;
       } else {
        $time$0 = 1073741824;
       }
       $30 = HEAP8[$25]|0;
       $31 = $30 & 2;
       $32 = ($31<<24>>24)==(0);
       if (!($32)) {
        $time$1 = $time$0;
        __ZN7Hes_Cpu12set_irq_timeEl($2,$time$1);
        STACKTOP = sp;return;
       }
       $33 = HEAP32[$16>>2]|0;
       $34 = (__ZL3minll($time$0,$33)|0);
       $time$1 = $34;
       __ZN7Hes_Cpu12set_irq_timeEl($2,$time$1);
       STACKTOP = sp;return;
      }
      function __ZN7Hes_Emu10cpu_write_Eji($this,$addr,$data) {
       $this = $this|0;
       $addr = $addr|0;
       $data = $data|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
       var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($addr) + -2048)|0;
       $2 = ($1>>>0)<(10);
       $3 = (($this) + 336|0);
       $4 = $3;
       $5 = (__ZNK7Hes_Cpu4timeEv($4)|0);
       if ($2) {
        $6 = (__ZNK7Hes_Cpu8end_timeEv($4)|0);
        $7 = (($6) + 8)|0;
        $8 = (__ZL3minll($5,$7)|0);
        $9 = (($this) + 8752|0);
        __ZN7Hes_Apu10write_dataEiii($9,$8,$addr,$data);
        STACKTOP = sp;return;
       }
       L5: do {
        switch ($addr|0) {
        case 3: case 2: case 0:  {
         __ZN7Hes_Emu13cpu_write_vdpEii($this,$addr,$data);
         STACKTOP = sp;return;
         break;
        }
        case 3073:  {
         $16 = $data & 1;
         $17 = (($this) + 8724|0);
         $18 = HEAP8[$17]|0;
         $19 = $18&255;
         $20 = ($19|0)==($16|0);
         if ($20) {
          STACKTOP = sp;return;
         }
         __ZN7Hes_Emu9run_untilEl($this,$5);
         $21 = $16&255;
         HEAP8[$17] = $21;
         $22 = ($16|0)==(0);
         if ($22) {
          break L5;
         }
         $23 = (($this) + 8716|0);
         $24 = HEAP32[$23>>2]|0;
         $25 = (($this) + 8712|0);
         HEAP32[$25>>2] = $24;
         break;
        }
        case 3072:  {
         __ZN7Hes_Emu9run_untilEl($this,$5);
         $10 = $data & 127;
         $11 = (($10) + 1)|0;
         $12 = (($this) + 8720|0);
         HEAP32[$12>>2] = $11;
         __ZN7Hes_Emu17recalc_timer_loadEv($this);
         $13 = (($this) + 8716|0);
         $14 = HEAP32[$13>>2]|0;
         $15 = (($this) + 8712|0);
         HEAP32[$15>>2] = $14;
         break;
        }
        case 5122:  {
         __ZN7Hes_Emu9run_untilEl($this,$5);
         $26 = $data&255;
         $27 = (($this) + 8744|0);
         HEAP8[$27] = $26;
         break;
        }
        case 5123:  {
         __ZN7Hes_Emu9run_untilEl($this,$5);
         $28 = (($this) + 8724|0);
         $29 = HEAP8[$28]|0;
         $30 = ($29<<24>>24)==(0);
         if (!($30)) {
          $31 = (($this) + 8716|0);
          $32 = HEAP32[$31>>2]|0;
          $33 = (($this) + 8712|0);
          HEAP32[$33>>2] = $32;
         }
         $34 = (($this) + 8725|0);
         HEAP8[$34] = 0;
         break;
        }
        default: {
         STACKTOP = sp;return;
        }
        }
       } while(0);
       __ZN7Hes_Emu11irq_changedEv($this);
       STACKTOP = sp;return;
      }
      function __ZL3minll($x,$y) {
       $x = $x|0;
       $y = $y|0;
       var $1 = 0, $x$y = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($x|0)<($y|0);
       $x$y = $1 ? $x : $y;
       STACKTOP = sp;return ($x$y|0);
      }
      function __ZNK7Hes_Cpu8end_timeEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 8264|0);
       $2 = HEAP32[$1>>2]|0;
       STACKTOP = sp;return ($2|0);
      }
      function __ZN7Hes_Emu9cpu_read_Ej($this,$addr) {
       $this = $this|0;
       $addr = $addr|0;
       var $$ = 0, $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
       var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $status$1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 336|0);
       $2 = $1;
       $3 = (__ZNK7Hes_Cpu4timeEv($2)|0);
       $4 = $addr & 8191;
       L1: do {
        switch ($4|0) {
        case 0:  {
         $5 = (($this) + 8740|0);
         $6 = HEAP32[$5>>2]|0;
         $7 = ($6|0)>($3|0);
         if ($7) {
          $$0 = 0;
          break L1;
         }
         HEAP32[$5>>2] = 1073741824;
         __ZN7Hes_Emu9run_untilEl($this,$3);
         __ZN7Hes_Emu11irq_changedEv($this);
         $$0 = 32;
         break;
        }
        case 3072: case 3073:  {
         __ZN7Hes_Emu9run_untilEl($this,$3);
         $8 = (($this) + 8712|0);
         $9 = HEAP32[$8>>2]|0;
         $10 = (($9) + -1)|0;
         $11 = (($this) + 8704|0);
         $12 = HEAP32[$11>>2]|0;
         $13 = (($10>>>0) / ($12>>>0))&-1;
         $$0 = $13;
         break;
        }
        case 5122:  {
         $14 = (($this) + 8744|0);
         $15 = HEAP8[$14]|0;
         $16 = $15&255;
         $$0 = $16;
         break;
        }
        case 5123:  {
         $17 = (($this) + 8736|0);
         $18 = HEAP32[$17>>2]|0;
         $19 = ($18|0)>($3|0);
         $$ = $19 ? 0 : 4;
         $20 = (($this) + 8740|0);
         $21 = HEAP32[$20>>2]|0;
         $22 = ($21|0)>($3|0);
         $23 = $$ | 2;
         $status$1 = $22 ? $$ : $23;
         $$0 = $status$1;
         break;
        }
        case 3: case 2:  {
         $$0 = 0;
         break;
        }
        default: {
         $$0 = 255;
        }
        }
       } while(0);
       STACKTOP = sp;return ($$0|0);
      }
      function __ZN7Hes_Cpu12set_irq_timeEl($this,$t) {
       $this = $this|0;
       $t = $t|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 8264|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = (($this) + 8260|0);
       HEAP32[$3>>2] = $t;
       $4 = (__ZN7Hes_Cpu15update_end_timeEll($this,$2,$t)|0);
       $5 = (($this) + 8212|0);
       $6 = HEAP32[$5>>2]|0;
       $7 = (($6) + 40|0);
       $8 = HEAP32[$7>>2]|0;
       $9 = (($8) + ($4))|0;
       HEAP32[$7>>2] = $9;
       STACKTOP = sp;return;
      }
      function __ZN7Hes_Emu8cpu_doneEv($this) {
       $this = $this|0;
       var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
       var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 8533|0);
       $2 = HEAP8[$1]|0;
       $3 = $2 & 4;
       $4 = ($3<<24>>24)==(0);
       do {
        if ($4) {
         $5 = (($this) + 336|0);
         $6 = $5;
         $7 = (__ZNK7Hes_Cpu4timeEv($6)|0);
         $8 = (($this) + 8736|0);
         $9 = HEAP32[$8>>2]|0;
         $10 = ($9|0)>($7|0);
         do {
          if (!($10)) {
           $11 = (($this) + 8744|0);
           $12 = HEAP8[$11]|0;
           $13 = $12 & 4;
           $14 = ($13<<24>>24)==(0);
           if (!($14)) {
            break;
           }
           $15 = (($this) + 8725|0);
           HEAP8[$15] = 1;
           HEAP32[$8>>2] = 1073741824;
           __ZN7Hes_Emu11irq_changedEv($this);
           $$0 = 10;
           STACKTOP = sp;return ($$0|0);
          }
         } while(0);
         $16 = (($this) + 8740|0);
         $17 = HEAP32[$16>>2]|0;
         $18 = ($17|0)>($7|0);
         if ($18) {
          break;
         }
         $19 = (($this) + 8744|0);
         $20 = HEAP8[$19]|0;
         $21 = $20 & 2;
         $22 = ($21<<24>>24)==(0);
         if ($22) {
          $$0 = 8;
         } else {
          break;
         }
         STACKTOP = sp;return ($$0|0);
        }
       } while(0);
       $$0 = 0;
       STACKTOP = sp;return ($$0|0);
      }
      function __ZN7Hes_Emu10run_clocksERii($this,$duration_,u$0) {
       $this = $this|0;
       $duration_ = $duration_|0;
       u$0 = u$0|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = HEAP32[$duration_>>2]|0;
       $2 = (($this) + 336|0);
       $3 = $2;
       $4 = (__ZN7Hes_Cpu3runEl($3,$1)|0);
       if ($4) {
        $5 = $this;
        __ZN8Gme_File11set_warningEPKc($5,(41936));
       }
       __ZN7Hes_Emu9run_untilEl($this,$1);
       $6 = (($this) + 8708|0);
       $7 = HEAP32[$6>>2]|0;
       $8 = (($7) - ($1))|0;
       HEAP32[$6>>2] = $8;
       $9 = (($this) + 8728|0);
       $10 = HEAP32[$9>>2]|0;
       $11 = (($10) - ($1))|0;
       HEAP32[$9>>2] = $11;
       __ZN7Hes_Cpu9end_frameEl($3,$1);
       $12 = (($this) + 8736|0);
       __ZL11adjust_timeRll($12,$1);
       $13 = (($this) + 8740|0);
       __ZL11adjust_timeRll($13,$1);
       $14 = (($this) + 8752|0);
       __ZN7Hes_Apu9end_frameEi($14,$1);
       STACKTOP = sp;return (0|0);
      }
      function __ZN7Hes_Cpu9end_frameEl($this,$t) {
       $this = $this|0;
       $t = $t|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 8212|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = (($this) + 8216|0);
       $4 = ($2|0)==($3|0);
       if (!($4)) {
        ___assert_fail(((42048)|0),((42072)|0),118,((42112)|0));
        // unreachable;
       }
       $5 = (($this) + 8252|0);
       $6 = HEAP32[$5>>2]|0;
       $7 = (($6) - ($t))|0;
       HEAP32[$5>>2] = $7;
       $8 = (($this) + 8260|0);
       $9 = HEAP32[$8>>2]|0;
       $10 = ($9|0)<(1073741824);
       if ($10) {
        $11 = (($9) - ($t))|0;
        HEAP32[$8>>2] = $11;
       }
       $12 = (($this) + 8264|0);
       $13 = HEAP32[$12>>2]|0;
       $14 = ($13|0)<(1073741824);
       if (!($14)) {
        STACKTOP = sp;return;
       }
       $15 = (($13) - ($t))|0;
       HEAP32[$12>>2] = $15;
       STACKTOP = sp;return;
      }
      function __ZL11adjust_timeRll($time,$delta) {
       $time = $time|0;
       $delta = $delta|0;
       var $$ = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = HEAP32[$time>>2]|0;
       $2 = ($1|0)<(1073741824);
       if ($2) {
        $3 = (($1) - ($delta))|0;
        $4 = ($3|0)<(0);
        $$ = $4 ? 0 : $3;
        HEAP32[$time>>2] = $$;
        STACKTOP = sp;return;
       } else {
        STACKTOP = sp;return;
       }
      }
      function __ZL11new_hes_emuv() {
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (__ZN8Gme_FilenwEj(34432)|0);
       $2 = ($1|0)==(0|0);
       if ($2) {
        $4 = 0;
       } else {
        $3 = $1;
        __ZN7Hes_EmuC2Ev($3);
        $4 = $3;
       }
       $5 = $4;
       STACKTOP = sp;return ($5|0);
      }
      function __ZL12new_hes_filev() {
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (__ZN8Gme_FilenwEj(528)|0);
       $2 = ($1|0)==(0|0);
       if ($2) {
        $4 = 0;
       } else {
        $3 = $1;
        __ZN8Hes_FileC1Ev($3);
        $4 = $3;
       }
       $5 = $4;
       STACKTOP = sp;return ($5|0);
      }
      function __ZN8Hes_FileC1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN8Hes_FileC2Ev($this);
       STACKTOP = sp;return;
      }
      function __ZN8Hes_FileC2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $this;
       __ZN9Gme_Info_C2Ev($1);
       $2 = $this;
       HEAP32[$2>>2] = (((42160) + 8|0));
       $3 = $this;
       __ZN8Gme_File8set_typeEPK11gme_type_t_($3,(41688));
       STACKTOP = sp;return;
      }
      function __ZN8Hes_FileD1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN8Hes_FileD2Ev($this);
       STACKTOP = sp;return;
      }
      function __ZN8Hes_FileD0Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       __ZN8Hes_FileD1Ev($this);
       $1 = ($this);
       __ZN8Gme_FiledlEPv($1);
       STACKTOP = sp;return;
      }
      function __ZN8Hes_File5load_ER11Data_Reader($this,$in) {
       $this = $this|0;
       $in = $in|0;
       var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $in;
       $2 = HEAP32[$1>>2]|0;
       $3 = (($2) + 12|0);
       $4 = HEAP32[$3>>2]|0;
       $5 = (($this) + 316|0);
       $6 = (FUNCTION_TABLE_iiii[$4 & 63]($in,$5,208)|0);
       $7 = ($6|0)==(0|0);
       if ($7) {
        $11 = (__ZL16check_hes_headerPKv($5)|0);
        $$0 = $11;
        STACKTOP = sp;return ($$0|0);
       } else {
        $8 = ($6|0)==((37504)|0);
        $9 = HEAP32[(40024)>>2]|0;
        $10 = $8 ? $9 : $6;
        $$0 = $10;
        STACKTOP = sp;return ($$0|0);
       }
       return 0|0;
      }
      function __ZNK8Hes_File11track_info_EP12track_info_ti($this,$out,u$0) {
       $this = $this|0;
       $out = $out|0;
       u$0 = u$0|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 380|0);
       __ZL15copy_hes_fieldsPKhP12track_info_t($1,$out);
       STACKTOP = sp;return (0|0);
      }
      function __ZN8Hes_FileD2Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $this;
       __ZN9Gme_Info_D2Ev($1);
       STACKTOP = sp;return;
      }
      function __ZL10copy_fieldPKhPc($in,$out) {
       $in = $in|0;
       $out = $out|0;
       var $$ = 0, $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
       var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0$lcssa = 0, $i$05 = 0, $i$12 = 0, $i$12$phi = 0, $len$0 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($in|0)==(0|0);
       if ($1) {
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
       }
       $2 = (($in) + 31|0);
       $3 = HEAP8[$2]|0;
       $4 = ($3<<24>>24)==(0);
       if ($4) {
        $len$0 = 32;
       } else {
        $5 = (($in) + 47|0);
        $6 = HEAP8[$5]|0;
        $7 = ($6<<24>>24)==(0);
        $$ = $7 ? 48 : 32;
        $len$0 = $$;
       }
       $i$05 = 0;
       while(1) {
        $9 = (($in) + ($i$05)|0);
        $10 = HEAP8[$9]|0;
        $11 = ($10<<24>>24)==(0);
        if ($11) {
         $i$0$lcssa = $i$05;
         break;
        }
        $13 = $10&255;
        $14 = (($13) + 1)|0;
        $15 = $14 & 255;
        $16 = ($15>>>0)<(33);
        $17 = (($i$05) + 1)|0;
        if ($16) {
         $$0 = 0;
         label = 12;
         break;
        }
        $8 = ($17|0)<($len$0|0);
        if ($8) {
         $i$05 = $17;
        } else {
         $i$0$lcssa = $17;
         break;
        }
       }
       if ((label|0) == 12) {
        STACKTOP = sp;return ($$0|0);
       }
       $12 = ($i$0$lcssa|0)<($len$0|0);
       L14: do {
        if ($12) {
         $i$12 = $i$0$lcssa;
         while(1) {
          $19 = (($in) + ($i$12)|0);
          $20 = HEAP8[$19]|0;
          $21 = ($20<<24>>24)==(0);
          $22 = (($i$12) + 1)|0;
          if (!($21)) {
           $$0 = 0;
           break;
          }
          $18 = ($22|0)<($len$0|0);
          if ($18) {
           $i$12$phi = $22;$i$12 = $i$12$phi;
          } else {
           break L14;
          }
         }
         STACKTOP = sp;return ($$0|0);
        }
       } while(0);
       __ZN8Gme_File11copy_field_EPcPKci($out,$in,$len$0);
       $23 = (($in) + ($len$0)|0);
       $$0 = $23;
       STACKTOP = sp;return ($$0|0);
      }
      function __ZN8Rom_DataILi8192EED2Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       __ZN9Rom_Data_D2Ev($1);
       STACKTOP = sp;return;
      }
      function __ZN8Rom_DataILi8192EEC2Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       __ZN9Rom_Data_C2Ev($1);
       STACKTOP = sp;return;
      }
      function __ZN7Kss_CpuC2Ev($this) {
       $this = $this|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0;
       var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $even$0$lcssa = 0, $even$01 = 0, $even$01$phi = 0, $i$03 = 0, $p$02 = 0, $p$02$phi = 0, $phitmp = 0, $phitmp4 = 0, $phitmp5 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 520|0);
       $2 = (($this) + 516|0);
       HEAP32[$2>>2] = $1;
       $i$03 = 255;
       while(1) {
        $3 = ($i$03|0)==(0);
        if ($3) {
         $even$0$lcssa = 4;
        } else {
         $even$01 = 1;$p$02 = $i$03;
         while(1) {
          $4 = $p$02 ^ $even$01;
          $5 = $p$02 >> 1;
          $6 = ($5|0)==(0);
          if ($6) {
           break;
          } else {
           $p$02$phi = $5;$even$01$phi = $4;$p$02 = $p$02$phi;$even$01 = $even$01$phi;
          }
         }
         $phitmp4 = $4 << 2;
         $phitmp5 = $phitmp4 & 4;
         $even$0$lcssa = $phitmp5;
        }
        $7 = $i$03 & 168;
        $8 = $even$0$lcssa | $7;
        $9 = $8&255;
        $10 = (($this) + ($i$03)|0);
        HEAP8[$10] = $9;
        $11 = $8 | 1;
        $12 = $11&255;
        $13 = (($i$03) + 256)|0;
        $14 = (($this) + ($13)|0);
        HEAP8[$14] = $12;
        $phitmp = (($i$03) + -1)|0;
        $15 = ($phitmp|0)>(-1);
        if ($15) {
         $i$03 = $phitmp;
        } else {
         break;
        }
       }
       $16 = ($this);
       $17 = HEAP8[$16]|0;
       $18 = $17&255;
       $19 = $18 | 64;
       $20 = $19&255;
       HEAP8[$16] = $20;
       $21 = (($this) + 256|0);
       $22 = HEAP8[$21]|0;
       $23 = $22&255;
       $24 = $23 | 64;
       $25 = $24&255;
       HEAP8[$21] = $25;
       STACKTOP = sp;return;
      }
      function __ZN7Kss_Cpu5resetEPvPKv($this,$unmapped_write,$unmapped_read) {
       $this = $this|0;
       $unmapped_write = $unmapped_write|0;
       $unmapped_read = $unmapped_read|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
       sp = STACKTOP;
       $1 = (($this) + 520|0);
       $2 = (($this) + 516|0);
       HEAP32[$2>>2] = $1;
       $3 = (($this) + 596|0);
       HEAP32[$3>>2] = 0;
       $4 = (($this) + 592|0);
       HEAP32[$4>>2] = 0;
       $5 = (($this) + 512|0);
       HEAP32[$5>>2] = 0;
       __ZN7Kss_Cpu8set_pageEiPvPKv($this,0,$unmapped_write,$unmapped_read);
       __ZN7Kss_Cpu8set_pageEiPvPKv($this,1,$unmapped_write,$unmapped_read);
       __ZN7Kss_Cpu8set_pageEiPvPKv($this,2,$unmapped_write,$unmapped_read);
       __ZN7Kss_Cpu8set_pageEiPvPKv($this,3,$unmapped_write,$unmapped_read);
       __ZN7Kss_Cpu8set_pageEiPvPKv($this,4,$unmapped_write,$unmapped_read);
       __ZN7Kss_Cpu8set_pageEiPvPKv($this,5,$unmapped_write,$unmapped_read);
       __ZN7Kss_Cpu8set_pageEiPvPKv($this,6,$unmapped_write,$unmapped_read);
       __ZN7Kss_Cpu8set_pageEiPvPKv($this,7,$unmapped_write,$unmapped_read);
       __ZN7Kss_Cpu8set_pageEiPvPKv($this,8,$unmapped_write,$unmapped_read);
       $6 = (($this) + 600|0);
       $7 = $6;
       dest=$7+0|0; stop=dest+30|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));;
       STACKTOP = sp;return;
      }
      function __ZN7Kss_Cpu8set_pageEiPvPKv($this,$i,$write,$read) {
       $this = $this|0;
       $i = $i|0;
       $write = $write|0;
       $read = $read|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 516|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = ((($2) + ($i<<2)|0) + 36|0);
       HEAP32[$3>>2] = $write;
       $4 = HEAP32[$1>>2]|0;
       $5 = (($4) + ($i<<2)|0);
       HEAP32[$5>>2] = $read;
       STACKTOP = sp;return;
      }
      function __ZN7Kss_Cpu7map_memEjmPvPKv($this,$addr,$size,$write,$read) {
       $this = $this|0;
       $addr = $addr|0;
       $size = $size|0;
       $write = $write|0;
       $read = $read|0;
       var $$in = 0, $$in$phi = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $addr & 8191;
       $2 = ($1|0)==(0);
       if (!($2)) {
        ___assert_fail(((42272)|0),((42296)|0),103,((42336)|0));
        // unreachable;
       }
       $3 = $size & 8191;
       $4 = ($3|0)==(0);
       if (!($4)) {
        ___assert_fail(((42344)|0),((42296)|0),104,((42336)|0));
        // unreachable;
       }
       $5 = $addr >>> 13;
       $6 = $size >>> 13;
       $7 = ($6|0)==(0);
       if ($7) {
        STACKTOP = sp;return;
       } else {
        $$in = $6;
       }
       while(1) {
        $8 = (($$in) + -1)|0;
        $9 = $8 << 13;
        $10 = (($8) + ($5))|0;
        $11 = (($write) + ($9)|0);
        $12 = (($read) + ($9)|0);
        __ZN7Kss_Cpu8set_pageEiPvPKv($this,$10,$11,$12);
        $13 = ($8|0)==(0);
        if ($13) {
         break;
        } else {
         $$in$phi = $8;$$in = $$in$phi;
        }
       }
       STACKTOP = sp;return;
      }
      function __ZN7Kss_Cpu3runEl($this,$end_time) {
       $this = $this|0;
       $end_time = $end_time|0;
       var $$ = 0, $$14 = 0, $$14$v = 0, $$15 = 0, $$16 = 0, $$16$v = 0, $$17 = 0, $$18 = 0, $$19 = 0, $$19$v = 0, $$21 = 0, $$24 = 0, $$25 = 0, $$27 = 0, $$flags$0 = 0, $$masked = 0, $$masked6 = 0, $$pc$1 = 0, $$pc$126 = 0, $$sink = 0;
       var $$sink$in = 0, $$sum = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0;
       var $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0;
       var $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0;
       var $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0;
       var $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0;
       var $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0;
       var $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0;
       var $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0;
       var $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0;
       var $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0;
       var $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0;
       var $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0;
       var $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0;
       var $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0;
       var $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0;
       var $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0;
       var $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0;
       var $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0;
       var $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0;
       var $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0;
       var $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0;
       var $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0;
       var $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0;
       var $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0;
       var $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0;
       var $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0;
       var $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0;
       var $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0;
       var $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0;
       var $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0;
       var $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0;
       var $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0;
       var $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0;
       var $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0;
       var $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0;
       var $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0;
       var $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0;
       var $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0;
       var $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0;
       var $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0;
       var $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0;
       var $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0;
       var $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0;
       var $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0;
       var $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
       var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
       var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
       var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
       var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
       var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
       var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
       var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
       var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
       var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
       var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
       var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
       var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
       var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
       var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
       var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0;
       var $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0;
       var $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0;
       var $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0;
       var $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0;
       var $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0;
       var $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0;
       var $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0;
       var $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0;
       var $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0;
       var $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0;
       var $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0;
       var $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0;
       var $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0;
       var $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0;
       var $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0;
       var $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0;
       var $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0;
       var $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0;
       var $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0;
       var $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0;
       var $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0;
       var $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0;
       var $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0;
       var $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0;
       var $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0;
       var $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0;
       var $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0;
       var $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0;
       var $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0;
       var $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0;
       var $998 = 0, $999 = 0, $adjust$0 = 0, $adjust$0$ = 0, $data$0 = 0, $data$1 = 0, $data$10 = 0, $data$11 = 0, $data$12 = 0, $data$13 = 0, $data$14 = 0, $data$15 = 0, $data$16 = 0, $data$18 = 0, $data$19 = 0, $data$2 = 0, $data$3 = 0, $data$4 = 0, $data$5 = 0, $data$6 = 0;
       var $data$7 = 0, $data$8 = 0, $data$9 = 0, $data269$0 = 0, $data269$1 = 0, $flags$0 = 0, $flags$0$phi = 0, $flags$1 = 0, $flags$10 = 0, $flags$11 = 0, $flags$2 = 0, $flags$3 = 0, $flags$4 = 0, $flags$6 = 0, $flags$8 = 0, $flags$9 = 0, $inc$0 = 0, $inc59$0 = 0, $inc62$0 = 0, $inc65$0 = 0;
       var $ix$0 = 0, $ix$0$phi = 0, $ix$1 = 0, $ix$2 = 0, $ixy$0 = 0, $ixy$1 = 0, $ixy$1$ix$0 = 0, $ixy$2 = 0, $ixy$2$ix$0 = 0, $ixy$3 = 0, $ixy$3$ix$0 = 0, $iy$0 = 0, $iy$0$ixy$1 = 0, $iy$0$ixy$2 = 0, $iy$0$ixy$3 = 0, $iy$0$phi = 0, $iy$1 = 0, $iy$2 = 0, $opcode$0 = 0, $or$cond = 0;
       var $or$cond20 = 0, $or$cond22 = 0, $or$cond23 = 0, $pc$0 = 0, $pc$1 = 0, $pc$1$phi = 0, $pc$10 = 0, $pc$11 = 0, $pc$12 = 0, $pc$13 = 0, $pc$14 = 0, $pc$15 = 0, $pc$16 = 0, $pc$17 = 0, $pc$18 = 0, $pc$19 = 0, $pc$2 = 0, $pc$20 = 0, $pc$21 = 0, $pc$22 = 0;
       var $pc$23 = 0, $pc$3 = 0, $pc$4 = 0, $pc$5 = 0, $pc$6 = 0, $pc$7 = 0, $pc$8 = 0, $pc$9 = 0, $s = 0, $s_time$0 = 0, $s_time$1 = 0, $s_time$1$phi = 0, $s_time$10 = 0, $s_time$11 = 0, $s_time$12 = 0, $s_time$13 = 0, $s_time$14 = 0, $s_time$15 = 0, $s_time$16 = 0, $s_time$17 = 0;
       var $s_time$18 = 0, $s_time$19 = 0, $s_time$2 = 0, $s_time$20 = 0, $s_time$21 = 0, $s_time$22 = 0, $s_time$3 = 0, $s_time$4 = 0, $s_time$5 = 0, $s_time$6 = 0, $s_time$7 = 0, $s_time$8 = 0, $s_time$9 = 0, $sp$0 = 0, $sp$0$phi = 0, $sp$1 = 0, $temp45$0 = 0, $temp47$0 = 0, $temp50$0 = 0, $temp70$0 = 0;
       var $warning$0$off0 = 0, $warning$0$off0$phi = 0, $warning$1$off0 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
       sp = STACKTOP;
       STACKTOP = STACKTOP + 88|0;
       $s = sp;
       $1 = sp + 80|0;
       __ZN7Kss_Cpu12set_end_timeEl($this,$end_time);
       $2 = $s;
       $3 = (($this) + 520|0);
       $4 = $3;
       dest=$2+0|0; src=$4+0|0; stop=dest+80|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));;
       $5 = (($this) + 516|0);
       HEAP32[$5>>2] = $s;
       $6 = $1;
       $7 = (($this) + 608|0);
       $8 = $7;
       $9 = $7;
       $10 = $9;
       $11 = $10;
       $12 = HEAPU8[$11]|(HEAPU8[$11+1|0]<<8)|(HEAPU8[$11+2|0]<<16)|(HEAPU8[$11+3|0]<<24);
       $13 = (($10) + 4)|0;
       $14 = $13;
       $15 = HEAPU8[$14]|(HEAPU8[$14+1|0]<<8)|(HEAPU8[$14+2|0]<<16)|(HEAPU8[$14+3|0]<<24);
       $16 = $1;
       $17 = $16;
       HEAP32[$17>>2] = $12;
       $18 = (($16) + 4)|0;
       $19 = $18;
       HEAP32[$19>>2] = $15;
       $20 = (($s) + 76|0);
       $21 = HEAP32[$20>>2]|0;
       $22 = (($this) + 600|0);
       $23 = HEAP16[$22>>1]|0;
       $24 = $23&65535;
       $25 = (($this) + 602|0);
       $26 = HEAP16[$25>>1]|0;
       $27 = $26&65535;
       $28 = (($this) + 604|0);
       $29 = HEAP16[$28>>1]|0;
       $30 = $29&65535;
       $31 = (($this) + 606|0);
       $32 = HEAP16[$31>>1]|0;
       $33 = $32&65535;
       $34 = (($8) + 7|0);
       $35 = HEAP8[$34]|0;
       $36 = $35&255;
       $37 = (($this) + 616|0);
       $38 = $37;
       $39 = (($this) + 622|0);
       $40 = $39;
       $41 = (($6) + 6|0);
       $42 = (($38) + 7|0);
       $43 = (($s) + 72|0);
       $44 = (($6) + 6|0);
       $45 = (($6) + 4|0);
       $46 = (($6) + 6|0);
       $47 = (($6) + 6|0);
       $48 = (($6) + 1|0);
       $49 = $1;
       $50 = (($49) + 4|0);
       $51 = (($6) + 6|0);
       $52 = (($1) + -24|0);
       $53 = $52;
       $54 = (($6) + 6|0);
       $55 = (($1) + -24|0);
       $56 = $55;
       $57 = $1;
       $58 = (($57) + 4|0);
       $59 = (($6) + 6|0);
       $60 = $1;
       $61 = $1;
       $62 = (($61) + 4|0);
       $63 = (($6) + 6|0);
       $64 = (($1) + -184|0);
       $65 = $64;
       $66 = $1;
       $67 = (($66) + 4|0);
       $68 = $1;
       $69 = (($6) + 6|0);
       $70 = $1;
       $71 = (($70) + 4|0);
       $72 = $1;
       $73 = $1;
       $74 = (($73) + 4|0);
       $75 = $1;
       $76 = $1;
       $77 = $1;
       $78 = $1;
       $79 = (($78) + 4|0);
       $80 = (($6) + 6|0);
       $81 = (($1) + -160|0);
       $82 = $81;
       $83 = $1;
       $84 = (($83) + 4|0);
       $85 = (($6) + 6|0);
       $86 = (($1) + -176|0);
       $87 = $86;
       $88 = $1;
       $89 = (($88) + 4|0);
       $90 = (($6) + 6|0);
       $91 = (($1) + -168|0);
       $92 = $91;
       $93 = $1;
       $94 = (($93) + 4|0);
       $95 = (($1) + -112|0);
       $96 = $95;
       $97 = $1;
       $98 = $1;
       $99 = $1;
       $100 = (($99) + 4|0);
       $101 = $1;
       $102 = (($101) + 4|0);
       $103 = (($1) + -8|0);
       $104 = $103;
       $105 = $1;
       $106 = $1;
       $107 = (($106) + 4|0);
       $108 = (($6) + 6|0);
       $109 = $1;
       $110 = (($109) + 4|0);
       $111 = $1;
       $112 = (($6) + 6|0);
       $113 = $1;
       $114 = (($6) + 6|0);
       $115 = $1;
       $116 = (($115) + 4|0);
       $117 = (($6) + 6|0);
       $118 = (($6) + 6|0);
       $119 = (($6) + 6|0);
       $120 = (($6) + 6|0);
       $121 = (($6) + 6|0);
       $122 = (($6) + 6|0);
       $123 = (($6) + 6|0);
       $124 = (($s) + 72|0);
       $125 = (($6) + 6|0);
       $126 = $1;
       $127 = (($126) + 4|0);
       $128 = $1;
       $129 = (($128) + 4|0);
       $130 = (($128) + 2|0);
       $131 = (($this) + 616|0);
       $132 = $1;
       $133 = $1;
       $134 = (($this) + 618|0);
       $135 = (($132) + 2|0);
       $136 = (($this) + 620|0);
       $137 = (($132) + 4|0);
       $138 = (($this) + 624|0);
       $139 = (($this) + 625|0);
       $140 = (($this) + 624|0);
       $141 = (($this) + 625|0);
       $142 = $1;
       $143 = (($142) + 4|0);
       $144 = $1;
       $145 = $1;
       $146 = (($145) + 4|0);
       $147 = (($1) + -16|0);
       $148 = $147;
       $149 = $1;
       $150 = (($149) + 4|0);
       $151 = (($1) + -32|0);
       $152 = $151;
       $153 = $1;
       $154 = (($153) + 4|0);
       $155 = (($1) + -48|0);
       $156 = $155;
       $157 = $1;
       $158 = (($157) + 4|0);
       $159 = (($1) + -8|0);
       $160 = $159;
       $161 = $1;
       $162 = (($161) + 4|0);
       $163 = (($1) + -24|0);
       $164 = $163;
       $165 = $1;
       $166 = (($165) + 4|0);
       $167 = (($1) + -40|0);
       $168 = $167;
       $169 = $1;
       $170 = (($169) + 4|0);
       $171 = (($1) + -56|0);
       $172 = $171;
       $173 = $1;
       $174 = (($173) + 4|0);
       $175 = $1;
       $176 = $1;
       $177 = (($176) + 4|0);
       $178 = $1;
       $179 = $1;
       $180 = $1;
       $181 = (($180) + 4|0);
       $182 = $1;
       $183 = (($s) + 72|0);
       $184 = $1;
       $185 = (($1) + -8|0);
       $186 = $185;
       $187 = (($6) + 7|0);
       $188 = (($s) + 72|0);
       $189 = $1;
       $190 = (($1) + -8|0);
       $191 = $190;
       $192 = (($1) + -8|0);
       $193 = $192;
       $194 = $1;
       $195 = $1;
       $196 = (($195) + 4|0);
       $197 = (($6) + 6|0);
       $198 = $1;
       $199 = (($198) + 4|0);
       $200 = (($6) + 6|0);
       $201 = (($6) + 6|0);
       $202 = $1;
       $203 = (($202) + 4|0);
       $204 = (($6) + 6|0);
       $205 = $1;
       $206 = $1;
       $207 = (($206) + 4|0);
       $208 = (($206) + 2|0);
       $209 = (($6) + 6|0);
       $210 = $1;
       $211 = $1;
       $212 = (($211) + 4|0);
       $213 = (($6) + 1|0);
       $214 = (($s) + 72|0);
       $215 = $1;
       $216 = $1;
       $217 = (($216) + 4|0);
       $218 = (($s) + 72|0);
       $219 = $1;
       $220 = (($6) + 1|0);
       $221 = (($6) + 6|0);
       $222 = (($this) + 627|0);
       $223 = (($6) + 6|0);
       $224 = (($this) + 626|0);
       $225 = (($this) + 627|0);
       $226 = (($6) + 6|0);
       $227 = (($6) + 6|0);
       $228 = (($this) + 625|0);
       $229 = (($this) + 626|0);
       $230 = (($6) + 6|0);
       $231 = (($this) + 625|0);
       $232 = (($this) + 624|0);
       $233 = (($this) + 628|0);
       $234 = (($this) + 628|0);
       $235 = (($this) + 628|0);
       $236 = $1;
       $237 = (($1) + -112|0);
       $238 = $237;
       $239 = (($1) + -8|0);
       $240 = $239;
       $241 = (($1) + -8|0);
       $242 = $241;
       $243 = (($1) + -8|0);
       $244 = $243;
       $245 = (($1) + -96|0);
       $246 = $245;
       $247 = (($1) + -104|0);
       $248 = $247;
       $flags$0 = $36;$ix$0 = $30;$iy$0 = $33;$pc$1 = $24;$s_time$1 = $21;$sp$0 = $27;$warning$0$off0 = 0;
       L1: while(1) {
        $252 = $pc$1 >>> 13;
        $253 = (($s) + ($252<<2)|0);
        $254 = HEAP32[$253>>2]|0;
        $255 = $pc$1 & 8191;
        $256 = (($254) + ($255)|0);
        $$sum = (($255) + 1)|0;
        $257 = (($254) + ($$sum)|0);
        $258 = HEAP8[$256]|0;
        $259 = $258&255;
        $260 = (($pc$1) + 1)|0;
        $261 = (42368 + ($259)|0);
        $262 = HEAP8[$261]|0;
        $263 = $262&255;
        $264 = (($263) + ($s_time$1))|0;
        $265 = ($264|0)<(0);
        $266 = ($264|0)<($263|0);
        $or$cond = $265 | $266;
        if (!($or$cond)) {
         $s_time$22 = $s_time$1;
         label = 265;
         break;
        }
        $267 = $260 & 8191;
        $268 = $260 >>> 13;
        $269 = (($s) + ($268<<2)|0);
        $270 = HEAP32[$269>>2]|0;
        $271 = (($270) + ($267)|0);
        $272 = HEAP8[$271]|0;
        $273 = $272&255;
        L4: do {
         switch ($259|0) {
         case 127: case 109: case 100: case 91: case 82: case 73: case 64: case 0:  {
          $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$s_time$1$phi = $264;$pc$1$phi = $260;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$s_time$1 = $s_time$1$phi;$pc$1 = $pc$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
          continue L1;
          break;
         }
         case 8:  {
          $274 = HEAP8[$40]|0;
          $275 = HEAP8[$41]|0;
          HEAP8[$40] = $275;
          HEAP8[$41] = $274;
          $276 = HEAP8[$42]|0;
          $277 = $276&255;
          $278 = $flags$0&255;
          HEAP8[$42] = $278;
          $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$s_time$1$phi = $264;$pc$1$phi = $260;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $277;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$s_time$1 = $s_time$1$phi;$pc$1 = $pc$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
          continue L1;
          break;
         }
         case 211:  {
          $279 = (($pc$1) + 2)|0;
          $280 = HEAP32[$43>>2]|0;
          $281 = (($280) + ($264))|0;
          $282 = HEAP8[$44]|0;
          $283 = $282&255;
          $284 = $283 << 8;
          $285 = $284 | $273;
          __Z11kss_cpu_outP7Kss_Cpulji($this,$281,$285,$283);
          $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$s_time$1$phi = $264;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $279;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$s_time$1 = $s_time$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
          continue L1;
          break;
         }
         case 46:  {
          $286 = (($pc$1) + 2)|0;
          HEAP8[$45] = $272;
          $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$s_time$1$phi = $264;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $286;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$s_time$1 = $s_time$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
          continue L1;
          break;
         }
         case 62:  {
          $287 = (($pc$1) + 2)|0;
          HEAP8[$46] = $272;
          $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$s_time$1$phi = $264;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $287;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$s_time$1 = $s_time$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
          continue L1;
          break;
         }
         case 58:  {
          $288 = (__Z8get_le16PKv($257)|0);
          $289 = (($pc$1) + 3)|0;
          $290 = $288 & 8191;
          $291 = $288 >>> 13;
          $292 = (($s) + ($291<<2)|0);
          $293 = HEAP32[$292>>2]|0;
          $294 = (($293) + ($290)|0);
          $295 = HEAP8[$294]|0;
          HEAP8[$47] = $295;
          $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$s_time$1$phi = $264;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $289;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$s_time$1 = $s_time$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
          continue L1;
          break;
         }
         case 32:  {
          $296 = (($pc$1) + 2)|0;
          $297 = $flags$0 & 64;
          $298 = ($297|0)==(0);
          if (!($298)) {
           $pc$0 = $296;
           label = 2;
           break L4;
          }
          $299 = $272 << 24 >> 24;
          $300 = (($299) + ($296))|0;
          $301 = $300 & 65535;
          $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$s_time$1$phi = $264;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $301;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$s_time$1 = $s_time$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
          continue L1;
          break;
         }
         case 40:  {
          $302 = (($pc$1) + 2)|0;
          $303 = $flags$0 & 64;
          $304 = ($303|0)==(0);
          if ($304) {
           $pc$0 = $302;
           label = 2;
           break L4;
          }
          $305 = $272 << 24 >> 24;
          $306 = (($305) + ($302))|0;
          $307 = $306 & 65535;
          $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$s_time$1$phi = $264;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $307;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$s_time$1 = $s_time$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
          continue L1;
          break;
         }
         case 48:  {
          $308 = (($pc$1) + 2)|0;
          $309 = $flags$0 & 1;
          $310 = ($309|0)==(0);
          if (!($310)) {
           $pc$0 = $308;
           label = 2;
           break L4;
          }
          $311 = $272 << 24 >> 24;
          $312 = (($311) + ($308))|0;
          $313 = $312 & 65535;
          $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$s_time$1$phi = $264;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $313;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$s_time$1 = $s_time$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
          continue L1;
          break;
         }
         case 56:  {
          $314 = (($pc$1) + 2)|0;
          $315 = $flags$0 & 1;
          $316 = ($315|0)==(0);
          if ($316) {
           $pc$0 = $314;
           label = 2;
           break L4;
          }
          $317 = $272 << 24 >> 24;
          $318 = (($317) + ($314))|0;
          $319 = $318 & 65535;
          $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$s_time$1$phi = $264;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $319;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$s_time$1 = $s_time$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
          continue L1;
          break;
         }
         case 24:  {
          $320 = $272 << 24 >> 24;
          $321 = (($pc$1) + 2)|0;
          $322 = (($321) + ($320))|0;
          $323 = $322 & 65535;
          $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$s_time$1$phi = $264;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $323;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$s_time$1 = $s_time$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
          continue L1;
          break;
         }
         case 16:  {
          $324 = HEAP8[$48]|0;
          $325 = $324&255;
          $326 = (($325) + -1)|0;
          $327 = $326&255;
          HEAP8[$48] = $327;
          $328 = (($pc$1) + 2)|0;
          $329 = ($326|0)==(0);
          if ($329) {
           $pc$0 = $328;
           label = 2;
           break L4;
          }
          $330 = $272 << 24 >> 24;
          $331 = (($330) + ($328))|0;
          $332 = $331 & 65535;
          $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$s_time$1$phi = $264;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $332;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$s_time$1 = $s_time$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
          continue L1;
          break;
         }
         case 194:  {
          $333 = $flags$0 & 64;
          $334 = ($333|0)==(0);
          if (!($334)) {
           $s_time$0 = $264;
           label = 4;
           break L4;
          }
          $335 = (__Z8get_le16PKv($257)|0);
          $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$s_time$1$phi = $264;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $335;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$s_time$1 = $s_time$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
          continue L1;
          break;
         }
         case 202:  {
          $336 = $flags$0 & 64;
          $337 = ($336|0)==(0);
          if ($337) {
           $s_time$0 = $264;
           label = 4;
           break L4;
          }
          $338 = (__Z8get_le16PKv($257)|0);
          $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$s_time$1$phi = $264;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $338;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$s_time$1 = $s_time$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
          continue L1;
          break;
         }
         case 210:  {
          $339 = $flags$0 & 1;
          $340 = ($339|0)==(0);
          if (!($340)) {
           $s_time$0 = $264;
           label = 4;
           break L4;
          }
          $341 = (__Z8get_le16PKv($257)|0);
          $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$s_time$1$phi = $264;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $341;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$s_time$1 = $s_time$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
          continue L1;
          break;
         }
         case 218:  {
          $342 = $flags$0 & 1;
          $343 = ($342|0)==(0);
          if ($343) {
           $s_time$0 = $264;
           label = 4;
           break L4;
          }
          $344 = (__Z8get_le16PKv($257)|0);
          $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$s_time$1$phi = $264;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $344;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$s_time$1 = $s_time$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
          continue L1;
          break;
         }
         case 226:  {
          $345 = $flags$0 & 4;
          $346 = ($345|0)==(0);
          if (!($346)) {
           $s_time$0 = $264;
           label = 4;
           break L4;
          }
          $347 = (__Z8get_le16PKv($257)|0);
          $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$s_time$1$phi = $264;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $347;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$s_time$1 = $s_time$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
          continue L1;
          break;
         }
         case 234:  {
          $348 = $flags$0 & 4;
          $349 = ($348|0)==(0);
          if ($349) {
           $s_time$0 = $264;
           label = 4;
           break L4;
          }
          $350 = (__Z8get_le16PKv($257)|0);
          $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$s_time$1$phi = $264;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $350;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$s_time$1 = $s_time$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
          continue L1;
          break;
         }
         case 242:  {
          $351 = $flags$0 & 128;
          $352 = ($351|0)==(0);
          if (!($352)) {
           $s_time$0 = $264;
           label = 4;
           break L4;
          }
          $353 = (__Z8get_le16PKv($257)|0);
          $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$s_time$1$phi = $264;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $353;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$s_time$1 = $s_time$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
          continue L1;
          break;
         }
         case 250:  {
          $354 = $flags$0 & 128;
          $355 = ($354|0)==(0);
          if ($355) {
           $s_time$0 = $264;
           label = 4;
           break L4;
          }
          $356 = (__Z8get_le16PKv($257)|0);
          $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$s_time$1$phi = $264;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $356;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$s_time$1 = $s_time$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
          continue L1;
          break;
         }
         case 195:  {
          $357 = (__Z8get_le16PKv($257)|0);
          $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$s_time$1$phi = $264;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $357;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$s_time$1 = $s_time$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
          continue L1;
          break;
         }
         case 233:  {
          $358 = HEAP16[$50>>1]|0;
          $359 = $358&65535;
          $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$s_time$1$phi = $264;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $359;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$s_time$1 = $s_time$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
          continue L1;
          break;
         }
         case 192:  {
          $360 = $flags$0 & 64;
          $361 = ($360|0)==(0);
          if ($361) {
           $s_time$2 = $264;
           label = 57;
           break L4;
          }
          $362 = (($264) + -6)|0;
          $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$pc$1$phi = $260;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$s_time$1 = $362;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$pc$1 = $pc$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
          continue L1;
          break;
         }
         case 200:  {
          $363 = $flags$0 & 64;
          $364 = ($363|0)==(0);
          if (!($364)) {
           $s_time$2 = $264;
           label = 57;
           break L4;
          }
          $365 = (($264) + -6)|0;
          $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$pc$1$phi = $260;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$s_time$1 = $365;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$pc$1 = $pc$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
          continue L1;
          break;
         }
         case 208:  {
          $366 = $flags$0 & 1;
          $367 = ($366|0)==(0);
          if ($367) {
           $s_time$2 = $264;
           label = 57;
           break L4;
          }
          $368 = (($264) + -6)|0;
          $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$pc$1$phi = $260;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$s_time$1 = $368;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$pc$1 = $pc$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
          continue L1;
          break;
         }
         case 216:  {
          $369 = $flags$0 & 1;
          $370 = ($369|0)==(0);
          if (!($370)) {
           $s_time$2 = $264;
           label = 57;
           break L4;
          }
          $371 = (($264) + -6)|0;
          $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$pc$1$phi = $260;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$s_time$1 = $371;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$pc$1 = $pc$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
          continue L1;
          break;
         }
         case 224:  {
          $372 = $flags$0 & 4;
          $373 = ($372|0)==(0);
          if ($373) {
           $s_time$2 = $264;
           label = 57;
           break L4;
          }
          $374 = (($264) + -6)|0;
          $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$pc$1$phi = $260;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$s_time$1 = $374;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$pc$1 = $pc$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
          continue L1;
          break;
         }
         case 232:  {
          $375 = $flags$0 & 4;
          $376 = ($375|0)==(0);
          if (!($376)) {
           $s_time$2 = $264;
           label = 57;
           break L4;
          }
          $377 = (($264) + -6)|0;
          $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$pc$1$phi = $260;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$s_time$1 = $377;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$pc$1 = $pc$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
          continue L1;
          break;
         }
         case 240:  {
          $378 = $flags$0 & 128;
          $379 = ($378|0)==(0);
          if ($379) {
           $s_time$2 = $264;
           label = 57;
           break L4;
          }
          $380 = (($264) + -6)|0;
          $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$pc$1$phi = $260;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$s_time$1 = $380;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$pc$1 = $pc$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
          continue L1;
          break;
         }
         case 248:  {
          $381 = $flags$0 & 128;
          $382 = ($381|0)==(0);
          if (!($382)) {
           $s_time$2 = $264;
           label = 57;
           break L4;
          }
          $383 = (($264) + -6)|0;
          $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$pc$1$phi = $260;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$s_time$1 = $383;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$pc$1 = $pc$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
          continue L1;
          break;
         }
         case 201:  {
          $s_time$2 = $264;
          label = 57;
          break;
         }
         case 196:  {
          $392 = $flags$0 & 64;
          $393 = ($392|0)==(0);
          if ($393) {
           label = 66;
          } else {
           label = 3;
          }
          break;
         }
         case 204:  {
          $394 = $flags$0 & 64;
          $395 = ($394|0)==(0);
          if ($395) {
           label = 3;
          } else {
           label = 66;
          }
          break;
         }
         case 212:  {
          $396 = $flags$0 & 1;
          $397 = ($396|0)==(0);
          if ($397) {
           label = 66;
          } else {
           label = 3;
          }
          break;
         }
         case 220:  {
          $398 = $flags$0 & 1;
          $399 = ($398|0)==(0);
          if ($399) {
           label = 3;
          } else {
           label = 66;
          }
          break;
         }
         case 228:  {
          $400 = $flags$0 & 4;
          $401 = ($400|0)==(0);
          if ($401) {
           label = 66;
          } else {
           label = 3;
          }
          break;
         }
         case 236:  {
          $402 = $flags$0 & 4;
          $403 = ($402|0)==(0);
          if ($403) {
           label = 3;
          } else {
           label = 66;
          }
          break;
         }
         case 244:  {
          $404 = $flags$0 & 128;
          $405 = ($404|0)==(0);
          if ($405) {
           label = 66;
          } else {
           label = 3;
          }
          break;
         }
         case 252:  {
          $406 = $flags$0 & 128;
          $407 = ($406|0)==(0);
          if ($407) {
           label = 3;
          } else {
           label = 66;
          }
          break;
         }
         case 205:  {
          label = 66;
          break;
         }
         case 255:  {
          $417 = ($260>>>0)>(65535);
          if ($417) {
           label = 263;
           break L1;
          } else {
           label = 68;
          }
          break;
         }
         case 247: case 239: case 231: case 223: case 215: case 207: case 199:  {
          label = 68;
          break;
         }
         case 245:  {
          $419 = HEAP8[$51]|0;
          $420 = $419&255;
          $421 = $420 << 8;
          $422 = (($421) + ($flags$0))|0;
          $data$0 = $422;$pc$2 = $260;$s_time$3 = $264;
          label = 71;
          break;
         }
         case 229: case 213: case 197:  {
          $423 = $259 >>> 3;
          $424 = (($53) + ($423)|0);
          $425 = $424;
          $426 = HEAP16[$425>>1]|0;
          $427 = $426&65535;
          $data$0 = $427;$pc$2 = $260;$s_time$3 = $264;
          label = 71;
          break;
         }
         case 241:  {
          $435 = $sp$0 & 8191;
          $436 = $sp$0 >>> 13;
          $437 = (($s) + ($436<<2)|0);
          $438 = HEAP32[$437>>2]|0;
          $439 = (($438) + ($435)|0);
          $440 = HEAP8[$439]|0;
          $441 = $440&255;
          $442 = (($sp$0) + 1)|0;
          $443 = $442 & 8191;
          $444 = $442 >>> 13;
          $445 = (($s) + ($444<<2)|0);
          $446 = HEAP32[$445>>2]|0;
          $447 = (($446) + ($443)|0);
          $448 = HEAP8[$447]|0;
          HEAP8[$54] = $448;
          $449 = (($sp$0) + 2)|0;
          $450 = $449 & 65535;
          $warning$0$off0$phi = $warning$0$off0;$s_time$1$phi = $264;$pc$1$phi = $260;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $441;$sp$0 = $450;$warning$0$off0 = $warning$0$off0$phi;$s_time$1 = $s_time$1$phi;$pc$1 = $pc$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
          continue L1;
          break;
         }
         case 225: case 209: case 193:  {
          $451 = $sp$0 & 8191;
          $452 = $sp$0 >>> 13;
          $453 = (($s) + ($452<<2)|0);
          $454 = HEAP32[$453>>2]|0;
          $455 = (($454) + ($451)|0);
          $456 = (__Z8get_le16PKv($455)|0);
          $457 = $456&65535;
          $458 = $259 >>> 3;
          $459 = (($56) + ($458)|0);
          $460 = $459;
          HEAP16[$460>>1] = $457;
          $461 = (($sp$0) + 2)|0;
          $462 = $461 & 65535;
          $warning$0$off0$phi = $warning$0$off0;$s_time$1$phi = $264;$pc$1$phi = $260;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$sp$0 = $462;$warning$0$off0 = $warning$0$off0$phi;$s_time$1 = $s_time$1$phi;$pc$1 = $pc$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
          continue L1;
          break;
         }
         case 134: case 150:  {
          $463 = $flags$0 & -2;
          $flags$1 = $463;
          label = 75;
          break;
         }
         case 142: case 158:  {
          $flags$1 = $flags$0;
          label = 75;
          break;
         }
         case 198: case 214:  {
          $473 = $flags$0 & -2;
          $flags$2 = $473;
          label = 77;
          break;
         }
         case 206: case 222:  {
          $flags$2 = $flags$0;
          label = 77;
          break;
         }
         case 135: case 133: case 132: case 131: case 130: case 129: case 128: case 151: case 149: case 148: case 147: case 146: case 145: case 144:  {
          $475 = $flags$0 & -2;
          $flags$3 = $475;
          label = 79;
          break;
         }
         case 143: case 141: case 140: case 139: case 138: case 137: case 136: case 159: case 157: case 156: case 155: case 154: case 153: case 152:  {
          $flags$3 = $flags$0;
          label = 79;
          break;
         }
         case 190:  {
          $505 = HEAP16[$62>>1]|0;
          $506 = $505&65535;
          $507 = $506 & 8191;
          $508 = $506 >>> 13;
          $509 = (($s) + ($508<<2)|0);
          $510 = HEAP32[$509>>2]|0;
          $511 = (($510) + ($507)|0);
          $512 = HEAP8[$511]|0;
          $513 = $512&255;
          $data$2 = $513;$pc$4 = $260;$s_time$5 = $264;
          label = 84;
          break;
         }
         case 254:  {
          $514 = (($pc$1) + 2)|0;
          $data$2 = $273;$pc$4 = $514;$s_time$5 = $264;
          label = 84;
          break;
         }
         case 191: case 189: case 188: case 187: case 186: case 185: case 184:  {
          $515 = $259 ^ 1;
          $516 = (($65) + ($515)|0);
          $517 = HEAP8[$516]|0;
          $518 = $517&255;
          $data$2 = $518;$pc$4 = $260;$s_time$5 = $264;
          label = 84;
          break;
         }
         case 41: case 25: case 9:  {
          $537 = $259 >>> 3;
          $$sum13 = (($537) + -1)|0;
          $538 = (($68) + ($$sum13)|0);
          $539 = $538;
          $540 = HEAP16[$539>>1]|0;
          $541 = $540&65535;
          $data$3 = $541;
          label = 86;
          break;
         }
         case 57:  {
          $data$3 = $sp$0;
          label = 86;
          break;
         }
         case 39:  {
          $557 = HEAP8[$69]|0;
          $558 = $557&255;
          $559 = ($557&255)>(153);
          $560 = $559&1;
          $$flags$0 = $560 | $flags$0;
          $561 = $$flags$0 & 1;
          $562 = (0 - ($561))|0;
          $563 = $562 & 96;
          $564 = $flags$0 & 16;
          $565 = ($564|0)==(0);
          if ($565) {
           $566 = $558 & 14;
           $567 = ($566>>>0)>(9);
           if ($567) {
            label = 89;
           } else {
            $adjust$0 = $563;
           }
          } else {
           label = 89;
          }
          if ((label|0) == 89) {
           label = 0;
           $568 = $563 | 6;
           $adjust$0 = $568;
          }
          $569 = $flags$0 & 2;
          $570 = ($569|0)==(0);
          $571 = (0 - ($adjust$0))|0;
          $adjust$0$ = $570 ? $adjust$0 : $571;
          $572 = (($adjust$0$) + ($558))|0;
          $573 = $$flags$0 & 3;
          $574 = HEAP8[$69]|0;
          $575 = $574&255;
          $576 = $575 ^ $572;
          $577 = $576 & 16;
          $578 = $572&255;
          $579 = $572 & 255;
          $580 = (($this) + ($579)|0);
          $581 = HEAP8[$580]|0;
          $582 = $581&255;
          $583 = $582 | $573;
          $584 = $583 | $577;
          HEAP8[$69] = $578;
          $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$s_time$1$phi = $264;$pc$1$phi = $260;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $584;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$s_time$1 = $s_time$1$phi;$pc$1 = $pc$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
          continue L1;
          break;
         }
         case 52:  {
          $585 = HEAP16[$71>>1]|0;
          $586 = $585&65535;
          $587 = $586 & 8191;
          $588 = $586 >>> 13;
          $589 = (($s) + ($588<<2)|0);
          $590 = HEAP32[$589>>2]|0;
          $591 = (($590) + ($587)|0);
          $592 = HEAP8[$591]|0;
          $593 = $592&255;
          $594 = (($593) + 1)|0;
          HEAP32[$20>>2] = $264;
          $595 = HEAP16[$71>>1]|0;
          $596 = $595&65535;
          __Z13kss_cpu_writeP7Kss_Cpuji($this,$596,$594);
          $data$4 = $594;$ix$1 = $ix$0;$iy$1 = $iy$0;$pc$5 = $260;$s_time$6 = $264;
          label = 93;
          break;
         }
         case 60: case 44: case 36: case 28: case 20: case 12: case 4:  {
          $597 = $259 >>> 3;
          $598 = $597 ^ 1;
          $599 = (($72) + ($598)|0);
          $600 = HEAP8[$599]|0;
          $601 = (($600) + 1)<<24>>24;
          HEAP8[$599] = $601;
          $602 = $601&255;
          $data$4 = $602;$ix$1 = $ix$0;$iy$1 = $iy$0;$pc$5 = $260;$s_time$6 = $264;
          label = 93;
          break;
         }
         case 53:  {
          $616 = HEAP16[$74>>1]|0;
          $617 = $616&65535;
          $618 = $617 & 8191;
          $619 = $617 >>> 13;
          $620 = (($s) + ($619<<2)|0);
          $621 = HEAP32[$620>>2]|0;
          $622 = (($621) + ($618)|0);
          $623 = HEAP8[$622]|0;
          $624 = $623&255;
          $625 = (($624) + -1)|0;
          HEAP32[$20>>2] = $264;
          $626 = HEAP16[$74>>1]|0;
          $627 = $626&65535;
          __Z13kss_cpu_writeP7Kss_Cpuji($this,$627,$625);
          $data$5 = $625;$ix$2 = $ix$0;$iy$2 = $iy$0;$pc$6 = $260;$s_time$7 = $264;
          label = 96;
          break;
         }
         case 61: case 45: case 37: case 29: case 21: case 13: case 5:  {
          $628 = $259 >>> 3;
          $629 = $628 ^ 1;
          $630 = (($75) + ($629)|0);
          $631 = HEAP8[$630]|0;
          $632 = (($631) + -1)<<24>>24;
          HEAP8[$630] = $632;
          $633 = $632&255;
          $data$5 = $633;$ix$2 = $ix$0;$iy$2 = $iy$0;$pc$6 = $260;$s_time$7 = $264;
          label = 96;
          break;
         }
         case 35: case 19: case 3:  {
          $646 = $259 >>> 3;
          $647 = (($76) + ($646)|0);
          $648 = $647;
          $649 = HEAP16[$648>>1]|0;
          $650 = (($649) + 1)<<16>>16;
          HEAP16[$648>>1] = $650;
          $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$s_time$1$phi = $264;$pc$1$phi = $260;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$s_time$1 = $s_time$1$phi;$pc$1 = $pc$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
          continue L1;
          break;
         }
         case 51:  {
          $651 = (($sp$0) + 1)|0;
          $652 = $651 & 65535;
          $warning$0$off0$phi = $warning$0$off0;$s_time$1$phi = $264;$pc$1$phi = $260;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$sp$0 = $652;$warning$0$off0 = $warning$0$off0$phi;$s_time$1 = $s_time$1$phi;$pc$1 = $pc$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
          continue L1;
          break;
         }
         case 43: case 27: case 11:  {
          $653 = $259 >>> 3;
          $$sum12 = (($653) + -1)|0;
          $654 = (($77) + ($$sum12)|0);
          $655 = $654;
          $656 = HEAP16[$655>>1]|0;
          $657 = (($656) + -1)<<16>>16;
          HEAP16[$655>>1] = $657;
          $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$s_time$1$phi = $264;$pc$1$phi = $260;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$s_time$1 = $s_time$1$phi;$pc$1 = $pc$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
          continue L1;
          break;
         }
         case 59:  {
          $658 = (($sp$0) + 65535)|0;
          $659 = $658 & 65535;
          $warning$0$off0$phi = $warning$0$off0;$s_time$1$phi = $264;$pc$1$phi = $260;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$sp$0 = $659;$warning$0$off0 = $warning$0$off0$phi;$s_time$1 = $s_time$1$phi;$pc$1 = $pc$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
          continue L1;
          break;
         }
         case 166:  {
          $660 = HEAP16[$79>>1]|0;
          $661 = $660&65535;
          $662 = $661 & 8191;
          $663 = $661 >>> 13;
          $664 = (($s) + ($663<<2)|0);
          $665 = HEAP32[$664>>2]|0;
          $666 = (($665) + ($662)|0);
          $667 = HEAP8[$666]|0;
          $668 = $667&255;
          $data$6 = $668;$pc$7 = $260;$s_time$8 = $264;
          label = 104;
          break;
         }
         case 230:  {
          $669 = (($pc$1) + 2)|0;
          $data$6 = $273;$pc$7 = $669;$s_time$8 = $264;
          label = 104;
          break;
         }
         case 167: case 165: case 164: case 163: case 162: case 161: case 160:  {
          $670 = $259 ^ 1;
          $671 = (($82) + ($670)|0);
          $672 = HEAP8[$671]|0;
          $673 = $672&255;
          $data$6 = $673;$pc$7 = $260;$s_time$8 = $264;
          label = 104;
          break;
         }
         case 182:  {
          $682 = HEAP16[$84>>1]|0;
          $683 = $682&65535;
          $684 = $683 & 8191;
          $685 = $683 >>> 13;
          $686 = (($s) + ($685<<2)|0);
          $687 = HEAP32[$686>>2]|0;
          $688 = (($687) + ($684)|0);
          $689 = HEAP8[$688]|0;
          $690 = $689&255;
          $data$7 = $690;$pc$8 = $260;$s_time$9 = $264;
          label = 108;
          break;
         }
         case 246:  {
          $691 = (($pc$1) + 2)|0;
          $data$7 = $273;$pc$8 = $691;$s_time$9 = $264;
          label = 108;
          break;
         }
         case 183: case 181: case 180: case 179: case 178: case 177: case 176:  {
          $692 = $259 ^ 1;
          $693 = (($87) + ($692)|0);
          $694 = HEAP8[$693]|0;
          $695 = $694&255;
          $data$7 = $695;$pc$8 = $260;$s_time$9 = $264;
          label = 108;
          break;
         }
         case 174:  {
          $704 = HEAP16[$89>>1]|0;
          $705 = $704&65535;
          $706 = $705 & 8191;
          $707 = $705 >>> 13;
          $708 = (($s) + ($707<<2)|0);
          $709 = HEAP32[$708>>2]|0;
          $710 = (($709) + ($706)|0);
          $711 = HEAP8[$710]|0;
          $712 = $711&255;
          $data$8 = $712;$pc$9 = $260;$s_time$10 = $264;
          label = 112;
          break;
         }
         case 238:  {
          $713 = (($pc$1) + 2)|0;
          $data$8 = $273;$pc$9 = $713;$s_time$10 = $264;
          label = 112;
          break;
         }
         case 175: case 173: case 172: case 171: case 170: case 169: case 168:  {
          $714 = $259 ^ 1;
          $715 = (($92) + ($714)|0);
          $716 = HEAP8[$715]|0;
          $717 = $716&255;
          $data$8 = $717;$pc$9 = $260;$s_time$10 = $264;
          label = 112;
          break;
         }
         case 119: case 117: case 116: case 115: case 114: case 113: case 112:  {
          HEAP32[$20>>2] = $264;
          $726 = HEAP16[$94>>1]|0;
          $727 = $726&65535;
          $728 = $259 ^ 1;
          $729 = (($96) + ($728)|0);
          $730 = HEAP8[$729]|0;
          $731 = $730&255;
          __Z13kss_cpu_writeP7Kss_Cpuji($this,$727,$731);
          $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$s_time$1$phi = $264;$pc$1$phi = $260;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$s_time$1 = $s_time$1$phi;$pc$1 = $pc$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
          continue L1;
          break;
         }
         case 125: case 124: case 123: case 122: case 121: case 120: case 111: case 108: case 107: case 106: case 105: case 104: case 103: case 101: case 99: case 98: case 97: case 96: case 95: case 93: case 92: case 90: case 89: case 88: case 87: case 85: case 84: case 83: case 81: case 80: case 79: case 77: case 76: case 75: case 74: case 72: case 71: case 69: case 68: case 67: case 66: case 65:  {
          $732 = $259 & 7;
          $733 = $732 ^ 1;
          $734 = (($97) + ($733)|0);
          $735 = HEAP8[$734]|0;
          $736 = $259 >>> 3;
          $737 = $736 & 7;
          $738 = $737 ^ 1;
          $739 = (($97) + ($738)|0);
          HEAP8[$739] = $735;
          $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$s_time$1$phi = $264;$pc$1$phi = $260;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$s_time$1 = $s_time$1$phi;$pc$1 = $pc$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
          continue L1;
          break;
         }
         case 38: case 30: case 22: case 14: case 6:  {
          $740 = $259 >>> 3;
          $741 = $740 ^ 1;
          $742 = (($98) + ($741)|0);
          HEAP8[$742] = $272;
          $743 = (($pc$1) + 2)|0;
          $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$s_time$1$phi = $264;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $743;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$s_time$1 = $s_time$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
          continue L1;
          break;
         }
         case 54:  {
          $744 = (($pc$1) + 2)|0;
          HEAP32[$20>>2] = $264;
          $745 = HEAP16[$100>>1]|0;
          $746 = $745&65535;
          __Z13kss_cpu_writeP7Kss_Cpuji($this,$746,$273);
          $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$s_time$1$phi = $264;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $744;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$s_time$1 = $s_time$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
          continue L1;
          break;
         }
         case 126: case 110: case 102: case 94: case 86: case 78: case 70:  {
          $747 = HEAP16[$102>>1]|0;
          $748 = $747&65535;
          $749 = $748 & 8191;
          $750 = $748 >>> 13;
          $751 = (($s) + ($750<<2)|0);
          $752 = HEAP32[$751>>2]|0;
          $753 = (($752) + ($749)|0);
          $754 = HEAP8[$753]|0;
          $755 = $259 >>> 3;
          $756 = $755 ^ 1;
          $757 = (($104) + ($756)|0);
          HEAP8[$757] = $754;
          $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$s_time$1$phi = $264;$pc$1$phi = $260;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$s_time$1 = $s_time$1$phi;$pc$1 = $pc$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
          continue L1;
          break;
         }
         case 33: case 17: case 1:  {
          $758 = (__Z8get_le16PKv($257)|0);
          $759 = $758&65535;
          $760 = $259 >>> 3;
          $761 = (($105) + ($760)|0);
          $762 = $761;
          HEAP16[$762>>1] = $759;
          $763 = (($pc$1) + 3)|0;
          $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$s_time$1$phi = $264;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $763;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$s_time$1 = $s_time$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
          continue L1;
          break;
         }
         case 49:  {
          $764 = (__Z8get_le16PKv($257)|0);
          $765 = (($pc$1) + 3)|0;
          $warning$0$off0$phi = $warning$0$off0;$s_time$1$phi = $264;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $765;$sp$0 = $764;$warning$0$off0 = $warning$0$off0$phi;$s_time$1 = $s_time$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
          continue L1;
          break;
         }
         case 42:  {
          $766 = (__Z8get_le16PKv($257)|0);
          $767 = (($pc$1) + 3)|0;
          $768 = $766 & 8191;
          $769 = $766 >>> 13;
          $770 = (($s) + ($769<<2)|0);
          $771 = HEAP32[$770>>2]|0;
          $772 = (($771) + ($768)|0);
          $773 = (__Z8get_le16PKv($772)|0);
          $774 = $773&65535;
          HEAP16[$107>>1] = $774;
          $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$s_time$1$phi = $264;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $767;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$s_time$1 = $s_time$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
          continue L1;
          break;
         }
         case 50:  {
          $775 = (__Z8get_le16PKv($257)|0);
          $776 = (($pc$1) + 3)|0;
          HEAP32[$20>>2] = $264;
          $777 = HEAP8[$108]|0;
          $778 = $777&255;
          __Z13kss_cpu_writeP7Kss_Cpuji($this,$775,$778);
          $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$s_time$1$phi = $264;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $776;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$s_time$1 = $s_time$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
          continue L1;
          break;
         }
         case 34:  {
          $779 = (__Z8get_le16PKv($257)|0);
          $780 = (($pc$1) + 3)|0;
          $781 = $779 & 8191;
          $782 = $779 >>> 13;
          $783 = ((($s) + ($782<<2)|0) + 36|0);
          $784 = HEAP32[$783>>2]|0;
          $785 = (($784) + ($781)|0);
          $786 = HEAP16[$110>>1]|0;
          $787 = $786&65535;
          __Z8set_le16Pvj($785,$787);
          $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$s_time$1$phi = $264;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $780;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$s_time$1 = $s_time$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
          continue L1;
          break;
         }
         case 18: case 2:  {
          HEAP32[$20>>2] = $264;
          $788 = $259 >>> 3;
          $789 = (($111) + ($788)|0);
          $790 = $789;
          $791 = HEAP16[$790>>1]|0;
          $792 = $791&65535;
          $793 = HEAP8[$112]|0;
          $794 = $793&255;
          __Z13kss_cpu_writeP7Kss_Cpuji($this,$792,$794);
          $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$s_time$1$phi = $264;$pc$1$phi = $260;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$s_time$1 = $s_time$1$phi;$pc$1 = $pc$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
          continue L1;
          break;
         }
         case 26: case 10:  {
          $795 = $259 >>> 3;
          $$sum11 = (($795) + -1)|0;
          $796 = (($113) + ($$sum11)|0);
          $797 = $796;
          $798 = HEAP16[$797>>1]|0;
          $799 = $798&65535;
          $800 = $799 & 8191;
          $801 = $799 >>> 13;
          $802 = (($s) + ($801<<2)|0);
          $803 = HEAP32[$802>>2]|0;
          $804 = (($803) + ($800)|0);
          $805 = HEAP8[$804]|0;
          HEAP8[$114] = $805;
          $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$s_time$1$phi = $264;$pc$1$phi = $260;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$s_time$1 = $s_time$1$phi;$pc$1 = $pc$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
          continue L1;
          break;
         }
         case 249:  {
          $806 = HEAP16[$116>>1]|0;
          $807 = $806&65535;
          $warning$0$off0$phi = $warning$0$off0;$s_time$1$phi = $264;$pc$1$phi = $260;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$sp$0 = $807;$warning$0$off0 = $warning$0$off0$phi;$s_time$1 = $s_time$1$phi;$pc$1 = $pc$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
          continue L1;
          break;
         }
         case 7:  {
          $808 = HEAP8[$117]|0;
          $809 = $808&255;
          $810 = $809 << 1;
          $811 = $809 >>> 7;
          $812 = $810 | $811;
          $813 = $flags$0 & 196;
          $814 = $812 & 41;
          $815 = $814 | $813;
          $816 = $812&255;
          HEAP8[$117] = $816;
          $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$s_time$1$phi = $264;$pc$1$phi = $260;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $815;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$s_time$1 = $s_time$1$phi;$pc$1 = $pc$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
          continue L1;
          break;
         }
         case 15:  {
          $817 = HEAP8[$118]|0;
          $818 = $817&255;
          $819 = $flags$0 & 196;
          $820 = $818 & 1;
          $821 = $820 | $819;
          $822 = $818 << 7;
          $823 = $818 >>> 1;
          $824 = $822 | $823;
          $825 = $823 & 40;
          $826 = $821 | $825;
          $827 = $824&255;
          HEAP8[$118] = $827;
          $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$s_time$1$phi = $264;$pc$1$phi = $260;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $826;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$s_time$1 = $s_time$1$phi;$pc$1 = $pc$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
          continue L1;
          break;
         }
         case 23:  {
          $828 = HEAP8[$119]|0;
          $829 = $828&255;
          $830 = $829 << 1;
          $831 = $flags$0 & 1;
          $832 = $830 | $831;
          $833 = $flags$0 & 196;
          $834 = $830 & 40;
          $835 = $829 >>> 7;
          $836 = $835 | $833;
          $837 = $836 | $834;
          $838 = $832&255;
          HEAP8[$119] = $838;
          $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$s_time$1$phi = $264;$pc$1$phi = $260;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $837;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$s_time$1 = $s_time$1$phi;$pc$1 = $pc$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
          continue L1;
          break;
         }
         case 31:  {
          $839 = $flags$0 << 7;
          $840 = HEAP8[$120]|0;
          $841 = $840&255;
          $842 = $841 >>> 1;
          $843 = $842 | $839;
          $844 = $flags$0 & 196;
          $845 = $842 & 40;
          $846 = $841 & 1;
          $847 = $846 | $844;
          $848 = $847 | $845;
          $849 = $843&255;
          HEAP8[$120] = $849;
          $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$s_time$1$phi = $264;$pc$1$phi = $260;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $848;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$s_time$1 = $s_time$1$phi;$pc$1 = $pc$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
          continue L1;
          break;
         }
         case 47:  {
          $850 = HEAP8[$121]|0;
          $851 = $850&255;
          $852 = $851 ^ -1;
          $853 = $flags$0 & 197;
          $854 = $852 & 40;
          $855 = $853 | $854;
          $856 = $855 | 18;
          $857 = $852&255;
          HEAP8[$121] = $857;
          $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$s_time$1$phi = $264;$pc$1$phi = $260;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $856;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$s_time$1 = $s_time$1$phi;$pc$1 = $pc$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
          continue L1;
          break;
         }
         case 63:  {
          $858 = $flags$0 & 197;
          $859 = $flags$0 << 4;
          $860 = $859 & 16;
          $861 = $860 | $858;
          $862 = HEAP8[$122]|0;
          $863 = $862&255;
          $864 = $863 & 40;
          $865 = $861 | $864;
          $866 = $865 ^ 1;
          $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$s_time$1$phi = $264;$pc$1$phi = $260;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $866;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$s_time$1 = $s_time$1$phi;$pc$1 = $pc$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
          continue L1;
          break;
         }
         case 55:  {
          $867 = $flags$0 & 196;
          $868 = HEAP8[$123]|0;
          $869 = $868&255;
          $870 = $869 & 40;
          $871 = $867 | $870;
          $872 = $871 | 1;
          $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$s_time$1$phi = $264;$pc$1$phi = $260;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $872;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$s_time$1 = $s_time$1$phi;$pc$1 = $pc$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
          continue L1;
          break;
         }
         case 219:  {
          $873 = (($pc$1) + 2)|0;
          $874 = HEAP32[$124>>2]|0;
          $875 = (($874) + ($264))|0;
          $876 = HEAP8[$125]|0;
          $877 = $876&255;
          $878 = $877 << 8;
          $879 = $878 | $273;
          $880 = (__Z10kss_cpu_inP7Kss_Cpulj($this,$875,$879)|0);
          $881 = $880&255;
          HEAP8[$125] = $881;
          $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$s_time$1$phi = $264;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $873;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$s_time$1 = $s_time$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
          continue L1;
          break;
         }
         case 227:  {
          $882 = $sp$0 & 8191;
          $883 = $sp$0 >>> 13;
          $884 = (($s) + ($883<<2)|0);
          $885 = HEAP32[$884>>2]|0;
          $886 = (($885) + ($882)|0);
          $887 = (__Z8get_le16PKv($886)|0);
          $888 = ((($s) + ($883<<2)|0) + 36|0);
          $889 = HEAP32[$888>>2]|0;
          $890 = (($889) + ($882)|0);
          $891 = HEAP16[$127>>1]|0;
          $892 = $891&65535;
          __Z8set_le16Pvj($890,$892);
          $893 = $887&65535;
          HEAP16[$127>>1] = $893;
          $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$s_time$1$phi = $264;$pc$1$phi = $260;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$s_time$1 = $s_time$1$phi;$pc$1 = $pc$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
          continue L1;
          break;
         }
         case 235:  {
          $894 = HEAP16[$129>>1]|0;
          $895 = HEAP16[$130>>1]|0;
          HEAP16[$129>>1] = $895;
          HEAP16[$130>>1] = $894;
          $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$s_time$1$phi = $264;$pc$1$phi = $260;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$s_time$1 = $s_time$1$phi;$pc$1 = $pc$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
          continue L1;
          break;
         }
         case 243:  {
          HEAP8[$138] = 0;
          HEAP8[$139] = 0;
          $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$s_time$1$phi = $264;$pc$1$phi = $260;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$s_time$1 = $s_time$1$phi;$pc$1 = $pc$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
          continue L1;
          break;
         }
         case 217:  {
          $896 = HEAP16[$131>>1]|0;
          $897 = HEAP16[$133>>1]|0;
          HEAP16[$131>>1] = $897;
          HEAP16[$133>>1] = $896;
          $898 = HEAP16[$134>>1]|0;
          $899 = HEAP16[$135>>1]|0;
          HEAP16[$134>>1] = $899;
          HEAP16[$135>>1] = $898;
          $900 = HEAP16[$136>>1]|0;
          $901 = HEAP16[$137>>1]|0;
          HEAP16[$136>>1] = $901;
          HEAP16[$137>>1] = $900;
          $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$s_time$1$phi = $264;$pc$1$phi = $260;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$s_time$1 = $s_time$1$phi;$pc$1 = $pc$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
          continue L1;
          break;
         }
         case 251:  {
          HEAP8[$140] = 1;
          HEAP8[$141] = 1;
          $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$s_time$1$phi = $264;$pc$1$phi = $260;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$s_time$1 = $s_time$1$phi;$pc$1 = $pc$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
          continue L1;
          break;
         }
         case 203:  {
          $902 = (($pc$1) + 2)|0;
          switch ($273|0) {
          case 46:  {
           $1075 = HEAP16[$166>>1]|0;
           $1076 = $1075&65535;
           $1077 = (($264) + 7)|0;
           $data$15 = $1076;$pc$16 = $902;$s_time$17 = $1077;
           label = 159;
           break L4;
           break;
          }
          case 47: case 45: case 44: case 43: case 42: case 41: case 40:  {
           $1093 = $273 ^ 1;
           $1094 = (($168) + ($1093)|0);
           $1095 = HEAP8[$1094]|0;
           $1096 = $1095&255;
           $1097 = $1096 & 1;
           $1098 = $1096 & 128;
           $1099 = $1096 >>> 1;
           $1100 = $1098 | $1099;
           $1101 = (($this) + ($1100)|0);
           $1102 = HEAP8[$1101]|0;
           $1103 = $1102&255;
           $1104 = $1097 | $1103;
           $1105 = $1100&255;
           HEAP8[$1094] = $1105;
           $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$s_time$1$phi = $264;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $1104;$pc$1 = $902;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$s_time$1 = $s_time$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
           continue L1;
           break;
          }
          case 62:  {
           $1106 = (($264) + 7)|0;
           $1107 = HEAP16[$170>>1]|0;
           $1108 = $1107&65535;
           $data$16 = $1108;$pc$17 = $902;$s_time$18 = $1106;
           label = 162;
           break L4;
           break;
          }
          case 31: case 29: case 28: case 27: case 26: case 25: case 24:  {
           $1061 = $273 ^ 1;
           $1062 = (($164) + ($1061)|0);
           $1063 = HEAP8[$1062]|0;
           $1064 = $1063&255;
           $1065 = $1064 & 1;
           $1066 = $flags$0 << 7;
           $1067 = $1066 & 128;
           $1068 = $1064 >>> 1;
           $1069 = $1068 | $1067;
           $1070 = (($this) + ($1069)|0);
           $1071 = HEAP8[$1070]|0;
           $1072 = $1071&255;
           $1073 = $1072 | $1065;
           $1074 = $1069&255;
           HEAP8[$1062] = $1074;
           $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$s_time$1$phi = $264;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $1073;$pc$1 = $902;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$s_time$1 = $s_time$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
           continue L1;
           break;
          }
          case 63: case 61: case 60: case 59: case 58: case 57: case 56:  {
           $1122 = $273 ^ 1;
           $1123 = (($172) + ($1122)|0);
           $1124 = HEAP8[$1123]|0;
           $1125 = $1124&255;
           $1126 = $1125 & 1;
           $1127 = $1125 >>> 1;
           $1128 = (($this) + ($1127)|0);
           $1129 = HEAP8[$1128]|0;
           $1130 = $1129&255;
           $1131 = $1126 | $1130;
           $1132 = $1127&255;
           HEAP8[$1123] = $1132;
           $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$s_time$1$phi = $264;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $1131;$pc$1 = $902;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$s_time$1 = $s_time$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
           continue L1;
           break;
          }
          case 126: case 118: case 110: case 102: case 94: case 86: case 78: case 70:  {
           $1133 = (($264) + 4)|0;
           $1134 = HEAP16[$174>>1]|0;
           $1135 = $1134&65535;
           $1136 = $1135 & 8191;
           $1137 = $1135 >>> 13;
           $1138 = (($s) + ($1137<<2)|0);
           $1139 = HEAP32[$1138>>2]|0;
           $1140 = (($1139) + ($1136)|0);
           $1141 = HEAP8[$1140]|0;
           $1142 = $1141&255;
           $1143 = $flags$0 & 1;
           $flags$6 = $1143;$s_time$19 = $1133;$temp45$0 = $1142;
           break;
          }
          case 127: case 125: case 124: case 123: case 122: case 121: case 120: case 119: case 117: case 116: case 115: case 114: case 113: case 112: case 111: case 109: case 108: case 107: case 106: case 105: case 104: case 103: case 101: case 100: case 99: case 98: case 97: case 96: case 95: case 93: case 92: case 91: case 90: case 89: case 88: case 87: case 85: case 84: case 83: case 82: case 81: case 80: case 79: case 77: case 76: case 75: case 74: case 73: case 72: case 71: case 69: case 68: case 67: case 66: case 65: case 64:  {
           $1144 = $273 & 7;
           $1145 = $1144 ^ 1;
           $1146 = (($175) + ($1145)|0);
           $1147 = HEAP8[$1146]|0;
           $1148 = $1147&255;
           $1149 = $flags$0 & 1;
           $1150 = $1148 & 40;
           $1151 = $1150 | $1149;
           $flags$6 = $1151;$s_time$19 = $264;$temp45$0 = $1148;
           break;
          }
          case 254: case 246: case 238: case 230: case 222: case 214: case 206: case 198: case 190: case 182: case 174: case 166: case 158: case 150: case 142: case 134:  {
           $1163 = (($264) + 7)|0;
           $1164 = HEAP16[$177>>1]|0;
           $1165 = $1164&65535;
           $1166 = $1165 & 8191;
           $1167 = $1165 >>> 13;
           $1168 = (($s) + ($1167<<2)|0);
           $1169 = HEAP32[$1168>>2]|0;
           $1170 = (($1169) + ($1166)|0);
           $1171 = HEAP8[$1170]|0;
           $1172 = $1171&255;
           $1173 = $273 >>> 3;
           $1174 = $1173 & 7;
           $1175 = 1 << $1174;
           $1176 = $1172 | $1175;
           $1177 = $273 & 64;
           $1178 = ($1177|0)==(0);
           $1179 = $1178 ? $1175 : 0;
           $$17 = $1176 ^ $1179;
           HEAP32[$20>>2] = $1163;
           $1180 = HEAP16[$177>>1]|0;
           $1181 = $1180&65535;
           __Z13kss_cpu_writeP7Kss_Cpuji($this,$1181,$$17);
           $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $902;$s_time$1 = $1163;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
           continue L1;
           break;
          }
          case 6:  {
           $903 = (($264) + 7)|0;
           $904 = HEAP16[$143>>1]|0;
           $905 = $904&65535;
           $data$9 = $905;$pc$10 = $902;$s_time$11 = $903;
           label = 141;
           break L4;
           break;
          }
          case 7: case 5: case 4: case 3: case 2: case 1: case 0:  {
           $921 = $273 ^ 1;
           $922 = (($144) + ($921)|0);
           $923 = HEAP8[$922]|0;
           $924 = $923&255;
           $925 = $924 << 1;
           $926 = $925 & 254;
           $927 = $924 >>> 7;
           $928 = $926 | $927;
           $929 = (($this) + ($928)|0);
           $930 = HEAP8[$929]|0;
           $931 = $930&255;
           $932 = $931 | $927;
           $933 = $928&255;
           HEAP8[$922] = $933;
           $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$s_time$1$phi = $264;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $932;$pc$1 = $902;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$s_time$1 = $s_time$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
           continue L1;
           break;
          }
          case 22:  {
           $934 = (($264) + 7)|0;
           $935 = HEAP16[$146>>1]|0;
           $936 = $935&65535;
           $data$10 = $936;$pc$11 = $902;$s_time$12 = $934;
           label = 144;
           break L4;
           break;
          }
          case 23: case 21: case 20: case 19: case 18: case 17: case 16:  {
           $950 = $273 ^ 1;
           $951 = (($148) + ($950)|0);
           $952 = HEAP8[$951]|0;
           $953 = $952&255;
           $954 = $953 << 1;
           $955 = $flags$0 & 1;
           $956 = $954 | $955;
           $957 = (($this) + ($956)|0);
           $958 = HEAP8[$957]|0;
           $959 = $958&255;
           $960 = $956&255;
           HEAP8[$951] = $960;
           $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$s_time$1$phi = $264;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $959;$pc$1 = $902;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$s_time$1 = $s_time$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
           continue L1;
           break;
          }
          case 38:  {
           $961 = (($264) + 7)|0;
           $962 = HEAP16[$150>>1]|0;
           $963 = $962&65535;
           $data$11 = $963;$pc$12 = $902;$s_time$13 = $961;
           label = 147;
           break L4;
           break;
          }
          case 39: case 37: case 36: case 35: case 34: case 33: case 32:  {
           $975 = $273 ^ 1;
           $976 = (($152) + ($975)|0);
           $977 = HEAP8[$976]|0;
           $978 = $977&255;
           $979 = $978 << 1;
           $980 = (($this) + ($979)|0);
           $981 = HEAP8[$980]|0;
           $982 = $981&255;
           $983 = $979&255;
           HEAP8[$976] = $983;
           $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$s_time$1$phi = $264;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $982;$pc$1 = $902;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$s_time$1 = $s_time$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
           continue L1;
           break;
          }
          case 54:  {
           $984 = (($264) + 7)|0;
           $985 = HEAP16[$154>>1]|0;
           $986 = $985&65535;
           $data$12 = $986;$pc$13 = $902;$s_time$14 = $984;
           label = 150;
           break L4;
           break;
          }
          case 55: case 53: case 52: case 51: case 50: case 49: case 48:  {
           $999 = $273 ^ 1;
           $1000 = (($156) + ($999)|0);
           $1001 = HEAP8[$1000]|0;
           $1002 = $1001&255;
           $1003 = $1002 << 1;
           $1004 = $1003 | 1;
           $1005 = (($this) + ($1004)|0);
           $1006 = HEAP8[$1005]|0;
           $1007 = $1006&255;
           $1008 = $1004&255;
           HEAP8[$1000] = $1008;
           $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$s_time$1$phi = $264;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $1007;$pc$1 = $902;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$s_time$1 = $s_time$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
           continue L1;
           break;
          }
          case 14:  {
           $1009 = (($264) + 7)|0;
           $1010 = HEAP16[$158>>1]|0;
           $1011 = $1010&65535;
           $data$13 = $1011;$pc$14 = $902;$s_time$15 = $1009;
           label = 153;
           break L4;
           break;
          }
          case 15: case 13: case 12: case 11: case 10: case 9: case 8:  {
           $1028 = $273 ^ 1;
           $1029 = (($160) + ($1028)|0);
           $1030 = HEAP8[$1029]|0;
           $1031 = $1030&255;
           $1032 = $1031 & 1;
           $1033 = $1031 << 7;
           $1034 = $1033 & 128;
           $1035 = $1031 >>> 1;
           $1036 = $1034 | $1035;
           $1037 = (($this) + ($1036)|0);
           $1038 = HEAP8[$1037]|0;
           $1039 = $1038&255;
           $1040 = $1032 | $1039;
           $1041 = $1036&255;
           HEAP8[$1029] = $1041;
           $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$s_time$1$phi = $264;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $1040;$pc$1 = $902;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$s_time$1 = $s_time$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
           continue L1;
           break;
          }
          case 30:  {
           $1042 = (($264) + 7)|0;
           $1043 = HEAP16[$162>>1]|0;
           $1044 = $1043&65535;
           $data$14 = $1044;$pc$15 = $902;$s_time$16 = $1042;
           label = 156;
           break L4;
           break;
          }
          case 255: case 253: case 252: case 251: case 250: case 249: case 248: case 247: case 245: case 244: case 243: case 242: case 241: case 240: case 239: case 237: case 236: case 235: case 234: case 233: case 232: case 231: case 229: case 228: case 227: case 226: case 225: case 224: case 223: case 221: case 220: case 219: case 218: case 217: case 216: case 215: case 213: case 212: case 211: case 210: case 209: case 208: case 207: case 205: case 204: case 203: case 202: case 201: case 200: case 199: case 197: case 196: case 195: case 194: case 193: case 192:  {
           $1182 = $273 >>> 3;
           $1183 = $1182 & 7;
           $1184 = 1 << $1183;
           $1185 = $273 & 7;
           $1186 = $1185 ^ 1;
           $1187 = (($178) + ($1186)|0);
           $1188 = HEAP8[$1187]|0;
           $1189 = $1188&255;
           $1190 = $1189 | $1184;
           $1191 = $1190&255;
           HEAP8[$1187] = $1191;
           $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$s_time$1$phi = $264;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $902;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$s_time$1 = $s_time$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
           continue L1;
           break;
          }
          case 191: case 189: case 188: case 187: case 186: case 185: case 184: case 183: case 181: case 180: case 179: case 178: case 177: case 176: case 175: case 173: case 172: case 171: case 170: case 169: case 168: case 167: case 165: case 164: case 163: case 162: case 161: case 160: case 159: case 157: case 156: case 155: case 154: case 153: case 152: case 151: case 149: case 148: case 147: case 146: case 145: case 144: case 143: case 141: case 140: case 139: case 138: case 137: case 136: case 135: case 133: case 132: case 131: case 130: case 129: case 128:  {
           $1192 = $273 >>> 3;
           $1193 = $1192 & 7;
           $1194 = 1 << $1193;
           $1195 = $1194 ^ 255;
           $1196 = $273 & 7;
           $1197 = $1196 ^ 1;
           $1198 = (($179) + ($1197)|0);
           $1199 = HEAP8[$1198]|0;
           $1200 = $1199&255;
           $1201 = $1200 & $1195;
           $1202 = $1201&255;
           HEAP8[$1198] = $1202;
           $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$s_time$1$phi = $264;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $902;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$s_time$1 = $s_time$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
           continue L1;
           break;
          }
          default: {
           label = 170;
           break L1;
          }
          }
          $1152 = $273 >>> 3;
          $1153 = $1152 & 7;
          $1154 = 1 << $1153;
          $1155 = $temp45$0 & $1154;
          $1156 = $1155 & 128;
          $1157 = (($1155) + 32767)|0;
          $1158 = $1157 >>> 8;
          $1159 = $1158 & 68;
          $1160 = $flags$6 | $1156;
          $1161 = $1160 | $1159;
          $1162 = $1161 | 16;
          $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $1162;$pc$1 = $902;$s_time$1 = $s_time$19;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
          continue L1;
          break;
         }
         case 237:  {
          $1203 = (($pc$1) + 2)|0;
          $1204 = (42640 + ($273)|0);
          $1205 = HEAP8[$1204]|0;
          $1206 = $1205&255;
          $1207 = $1206 >>> 4;
          $1208 = (($1207) + ($264))|0;
          switch ($273|0) {
          case 106: case 90: case 74: case 98: case 82: case 66:  {
           $1209 = $273 >>> 3;
           $1210 = $1209 & 6;
           $1211 = (($182) + ($1210)|0);
           $1212 = $1211;
           $1213 = HEAP16[$1212>>1]|0;
           $1214 = $1213&65535;
           $temp47$0 = $1214;
           label = 173;
           break;
          }
          case 122: case 114:  {
           $temp47$0 = $sp$0;
           label = 173;
           break;
          }
          case 113:  {
           HEAP8[$187] = 0;
           label = 176;
           break;
          }
          case 120: case 112: case 104: case 96: case 88: case 80: case 72: case 64:  {
           $1243 = HEAP32[$183>>2]|0;
           $1244 = (($1243) + ($1208))|0;
           $1245 = HEAP16[$184>>1]|0;
           $1246 = $1245&65535;
           $1247 = (__Z10kss_cpu_inP7Kss_Cpulj($this,$1244,$1246)|0);
           $1248 = $1247&255;
           $1249 = $273 >>> 3;
           $1250 = $1249 ^ 1;
           $1251 = (($186) + ($1250)|0);
           HEAP8[$1251] = $1248;
           $1252 = $flags$0 & 1;
           $1253 = (($this) + ($1247)|0);
           $1254 = HEAP8[$1253]|0;
           $1255 = $1254&255;
           $1256 = $1255 | $1252;
           $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $1256;$pc$1 = $1203;$s_time$1 = $1208;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
           continue L1;
           break;
          }
          case 121: case 105: case 97: case 89: case 81: case 73: case 65:  {
           label = 176;
           break;
          }
          case 83: case 67:  {
           $1266 = $273 >>> 3;
           $1267 = (($193) + ($1266)|0);
           $1268 = $1267;
           $1269 = HEAP16[$1268>>1]|0;
           $1270 = $1269&65535;
           $temp50$0 = $1270;
           label = 178;
           break;
          }
          case 115:  {
           $temp50$0 = $sp$0;
           label = 178;
           break;
          }
          case 91: case 75:  {
           $$sum8 = (($255) + 2)|0;
           $1279 = (($254) + ($$sum8)|0);
           $1280 = (__Z8get_le16PKv($1279)|0);
           $1281 = (($pc$1) + 4)|0;
           $1282 = $1280 & 8191;
           $1283 = $1280 >>> 13;
           $1284 = (($s) + ($1283<<2)|0);
           $1285 = HEAP32[$1284>>2]|0;
           $1286 = (($1285) + ($1282)|0);
           $1287 = (__Z8get_le16PKv($1286)|0);
           $1288 = $1287&65535;
           $1289 = $273 >>> 3;
           $$sum9 = (($1289) + -9)|0;
           $1290 = (($194) + ($$sum9)|0);
           $1291 = $1290;
           HEAP16[$1291>>1] = $1288;
           $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $1281;$s_time$1 = $1208;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
           continue L1;
           break;
          }
          case 123:  {
           $$sum7 = (($255) + 2)|0;
           $1292 = (($254) + ($$sum7)|0);
           $1293 = (__Z8get_le16PKv($1292)|0);
           $1294 = (($pc$1) + 4)|0;
           $1295 = $1293 & 8191;
           $1296 = $1293 >>> 13;
           $1297 = (($s) + ($1296<<2)|0);
           $1298 = HEAP32[$1297>>2]|0;
           $1299 = (($1298) + ($1295)|0);
           $1300 = (__Z8get_le16PKv($1299)|0);
           $warning$0$off0$phi = $warning$0$off0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $1294;$s_time$1 = $1208;$sp$0 = $1300;$warning$0$off0 = $warning$0$off0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
           continue L1;
           break;
          }
          case 103:  {
           $1301 = HEAP16[$196>>1]|0;
           $1302 = $1301&65535;
           $1303 = $1302 & 8191;
           $1304 = $1302 >>> 13;
           $1305 = (($s) + ($1304<<2)|0);
           $1306 = HEAP32[$1305>>2]|0;
           $1307 = (($1306) + ($1303)|0);
           $1308 = HEAP8[$1307]|0;
           $1309 = $1308&255;
           HEAP32[$20>>2] = $1208;
           $1310 = HEAP16[$196>>1]|0;
           $1311 = $1310&65535;
           $1312 = HEAP8[$197]|0;
           $1313 = $1312&255;
           $1314 = $1313 << 4;
           $1315 = $1309 >>> 4;
           $1316 = $1314 | $1315;
           __Z13kss_cpu_writeP7Kss_Cpuji($this,$1311,$1316);
           $1317 = HEAP8[$197]|0;
           $1318 = $1317&255;
           $1319 = $1318 & 240;
           $1320 = $1309 & 15;
           $1321 = $1319 | $1320;
           $1322 = $flags$0 & 1;
           $1323 = (($this) + ($1321)|0);
           $1324 = HEAP8[$1323]|0;
           $1325 = $1324&255;
           $1326 = $1325 | $1322;
           $1327 = $1321&255;
           HEAP8[$197] = $1327;
           $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $1326;$pc$1 = $1203;$s_time$1 = $1208;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
           continue L1;
           break;
          }
          case 124: case 116: case 108: case 100: case 92: case 84: case 76: case 68:  {
           $1355 = $flags$0 & -2;
           $1356 = HEAP8[$201]|0;
           $1357 = $1356&255;
           HEAP8[$201] = 0;
           $data$1 = $1357;$flags$4 = $1355;$opcode$0 = 16;$pc$3 = $1203;$s_time$4 = $1208;
           label = 80;
           break L4;
           break;
          }
          case 111:  {
           $1328 = HEAP16[$199>>1]|0;
           $1329 = $1328&65535;
           $1330 = $1329 & 8191;
           $1331 = $1329 >>> 13;
           $1332 = (($s) + ($1331<<2)|0);
           $1333 = HEAP32[$1332>>2]|0;
           $1334 = (($1333) + ($1330)|0);
           $1335 = HEAP8[$1334]|0;
           $1336 = $1335&255;
           HEAP32[$20>>2] = $1208;
           $1337 = HEAP16[$199>>1]|0;
           $1338 = $1337&65535;
           $1339 = $1336 << 4;
           $1340 = HEAP8[$200]|0;
           $1341 = $1340&255;
           $1342 = $1341 & 15;
           $1343 = $1342 | $1339;
           __Z13kss_cpu_writeP7Kss_Cpuji($this,$1338,$1343);
           $1344 = HEAP8[$200]|0;
           $1345 = $1344&255;
           $1346 = $1345 & 240;
           $1347 = $1336 >>> 4;
           $1348 = $1346 | $1347;
           $1349 = $flags$0 & 1;
           $1350 = (($this) + ($1348)|0);
           $1351 = HEAP8[$1350]|0;
           $1352 = $1351&255;
           $1353 = $1352 | $1349;
           $1354 = $1348&255;
           HEAP8[$200] = $1354;
           $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $1353;$pc$1 = $1203;$s_time$1 = $1208;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
           continue L1;
           break;
          }
          case 177: case 161:  {
           $inc$0 = 1;
           label = 185;
           break;
          }
          case 185: case 169:  {
           $inc$0 = -1;
           label = 185;
           break;
          }
          case 176: case 160:  {
           $inc59$0 = 1;
           label = 188;
           break;
          }
          case 184: case 168:  {
           $inc59$0 = -1;
           label = 188;
           break;
          }
          case 179: case 163:  {
           $inc62$0 = 1;
           label = 191;
           break;
          }
          case 178: case 162:  {
           $inc65$0 = 1;
           label = 193;
           break;
          }
          case 187: case 171:  {
           $inc62$0 = -1;
           label = 191;
           break;
          }
          case 71:  {
           $1476 = HEAP8[$221]|0;
           HEAP8[$222] = $1476;
           $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $1203;$s_time$1 = $1208;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
           continue L1;
           break;
          }
          case 79:  {
           $1477 = HEAP8[$223]|0;
           HEAP8[$224] = $1477;
           $sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $1203;$s_time$1 = $1208;$warning$0$off0 = 1;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
           continue L1;
           break;
          }
          case 186: case 170:  {
           $inc65$0 = -1;
           label = 193;
           break;
          }
          case 87:  {
           $1478 = HEAP8[$225]|0;
           HEAP8[$226] = $1478;
           $warning$1$off0 = $warning$0$off0;
           label = 198;
           break;
          }
          case 95:  {
           $1479 = HEAP8[$229]|0;
           HEAP8[$230] = $1479;
           $warning$1$off0 = 1;
           label = 198;
           break;
          }
          case 125: case 117: case 109: case 101: case 93: case 85: case 77: case 69:  {
           $1493 = HEAP8[$231]|0;
           HEAP8[$232] = $1493;
           $s_time$2 = $1208;
           label = 57;
           break L4;
           break;
          }
          case 110: case 102: case 78: case 70:  {
           HEAP8[$233] = 0;
           $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $1203;$s_time$1 = $1208;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
           continue L1;
           break;
          }
          case 118: case 86:  {
           HEAP8[$234] = 1;
           $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $1203;$s_time$1 = $1208;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
           continue L1;
           break;
          }
          case 126: case 94:  {
           HEAP8[$235] = 2;
           $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $1203;$s_time$1 = $1208;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
           continue L1;
           break;
          }
          default: {
           $sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $1203;$s_time$1 = $1208;$warning$0$off0 = 1;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
           continue L1;
          }
          }
          if ((label|0) == 173) {
           label = 0;
           $1215 = $flags$0 & 1;
           $1216 = (($temp47$0) + ($1215))|0;
           $1217 = $273 >>> 2;
           $1218 = $1217 & 2;
           $1219 = ($1218|0)==(0);
           $1220 = (0 - ($1216))|0;
           $$18 = $1219 ? $1220 : $1216;
           $1221 = HEAP16[$181>>1]|0;
           $1222 = $1221&65535;
           $1223 = (($$18) + ($1222))|0;
           $1224 = $1222 ^ $temp47$0;
           $1225 = $1224 ^ $1223;
           $1226 = $1223 >>> 16;
           $1227 = $1226 & 1;
           $1228 = $1225 >>> 8;
           $1229 = $1228 & 16;
           $1230 = $1223 >>> 8;
           $1231 = $1230 & 168;
           $1232 = (($1225) + 32768)|0;
           $1233 = $1232 >>> 14;
           $1234 = $1233 & 4;
           $1235 = $1227 | $1218;
           $1236 = $1235 | $1231;
           $1237 = $1236 | $1229;
           $1238 = $1237 | $1234;
           $1239 = $1238 ^ 2;
           $1240 = $1223&65535;
           HEAP16[$181>>1] = $1240;
           $1241 = ($1240<<16>>16)==(0);
           $1242 = $1239 | 64;
           $$25 = $1241 ? $1242 : $1239;
           $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $$25;$pc$1 = $1203;$s_time$1 = $1208;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
           continue L1;
          }
          else if ((label|0) == 176) {
           label = 0;
           $1257 = HEAP32[$188>>2]|0;
           $1258 = (($1257) + ($1208))|0;
           $1259 = HEAP16[$189>>1]|0;
           $1260 = $1259&65535;
           $1261 = $273 >>> 3;
           $1262 = $1261 ^ 1;
           $1263 = (($191) + ($1262)|0);
           $1264 = HEAP8[$1263]|0;
           $1265 = $1264&255;
           __Z11kss_cpu_outP7Kss_Cpulji($this,$1258,$1260,$1265);
           $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $1203;$s_time$1 = $1208;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
           continue L1;
          }
          else if ((label|0) == 178) {
           label = 0;
           $$sum10 = (($255) + 2)|0;
           $1271 = (($254) + ($$sum10)|0);
           $1272 = (__Z8get_le16PKv($1271)|0);
           $1273 = (($pc$1) + 4)|0;
           $1274 = $1272 & 8191;
           $1275 = $1272 >>> 13;
           $1276 = ((($s) + ($1275<<2)|0) + 36|0);
           $1277 = HEAP32[$1276>>2]|0;
           $1278 = (($1277) + ($1274)|0);
           __Z8set_le16Pvj($1278,$temp50$0);
           $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $1273;$s_time$1 = $1208;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
           continue L1;
          }
          else if ((label|0) == 185) {
           label = 0;
           $1358 = HEAP16[$203>>1]|0;
           $1359 = $1358&65535;
           $1360 = (($1359) + ($inc$0))|0;
           $1361 = $1360&65535;
           HEAP16[$203>>1] = $1361;
           $1362 = $1359 & 8191;
           $1363 = $1359 >>> 13;
           $1364 = (($s) + ($1363<<2)|0);
           $1365 = HEAP32[$1364>>2]|0;
           $1366 = (($1365) + ($1362)|0);
           $1367 = HEAP8[$1366]|0;
           $1368 = $1367&255;
           $1369 = HEAP8[$204]|0;
           $1370 = $1369&255;
           $1371 = (($1370) - ($1368))|0;
           $1372 = $flags$0 & 1;
           $1373 = $1369 ^ $1367;
           $1374 = $1373&255;
           $1375 = $1374 & 16;
           $$masked6 = $1371 & 144;
           $1376 = $1375 ^ $$masked6;
           $1377 = $1376 | $1372;
           $1378 = $1371&255;
           $1379 = ($1378<<24>>24)==(0);
           $$19$v = $1379 ? 66 : 2;
           $$19 = $1377 | $$19$v;
           $1380 = $1376 >>> 4;
           $1381 = $1380 & 1;
           $1382 = (($1371) - ($1381))|0;
           $1383 = $1382 & 8;
           $1384 = $$19 | $1383;
           $1385 = $1382 << 4;
           $1386 = $1385 & 32;
           $1387 = $1384 | $1386;
           $1388 = HEAP16[$205>>1]|0;
           $1389 = (($1388) + -1)<<16>>16;
           HEAP16[$205>>1] = $1389;
           $1390 = ($1389<<16>>16)==(0);
           if ($1390) {
            $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $1387;$pc$1 = $1203;$s_time$1 = $1208;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
            continue L1;
           }
           $1391 = $1387 | 4;
           $1392 = $$19$v & 64;
           $1393 = ($1392|0)!=(0);
           $1394 = ($272&255)<(176);
           $or$cond20 = $1393 | $1394;
           $1395 = (($1208) + 5)|0;
           $$pc$126 = $or$cond20 ? $1203 : $pc$1;
           $$27 = $or$cond20 ? $1208 : $1395;
           $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $1391;$pc$1 = $$pc$126;$s_time$1 = $$27;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
           continue L1;
          }
          else if ((label|0) == 188) {
           label = 0;
           $1396 = HEAP16[$207>>1]|0;
           $1397 = $1396&65535;
           $1398 = (($1397) + ($inc59$0))|0;
           $1399 = $1398&65535;
           HEAP16[$207>>1] = $1399;
           $1400 = $1397 & 8191;
           $1401 = $1397 >>> 13;
           $1402 = (($s) + ($1401<<2)|0);
           $1403 = HEAP32[$1402>>2]|0;
           $1404 = (($1403) + ($1400)|0);
           $1405 = HEAP8[$1404]|0;
           $1406 = $1405&255;
           $1407 = HEAP16[$208>>1]|0;
           $1408 = $1407&65535;
           $1409 = (($1408) + ($inc59$0))|0;
           $1410 = $1409&65535;
           HEAP16[$208>>1] = $1410;
           HEAP32[$20>>2] = $1208;
           __Z13kss_cpu_writeP7Kss_Cpuji($this,$1408,$1406);
           $1411 = HEAP8[$209]|0;
           $1412 = $1411&255;
           $1413 = (($1412) + ($1406))|0;
           $1414 = $flags$0 & 193;
           $1415 = $1413 & 8;
           $1416 = $1415 | $1414;
           $1417 = $1413 << 4;
           $1418 = $1417 & 32;
           $1419 = $1416 | $1418;
           $1420 = HEAP16[$210>>1]|0;
           $1421 = (($1420) + -1)<<16>>16;
           HEAP16[$210>>1] = $1421;
           $1422 = ($1421<<16>>16)==(0);
           if ($1422) {
            $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $1419;$pc$1 = $1203;$s_time$1 = $1208;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
            continue L1;
           }
           $1423 = $1419 | 4;
           $1424 = ($272&255)<(176);
           $1425 = (($1208) + 5)|0;
           $$pc$1 = $1424 ? $1203 : $pc$1;
           $$21 = $1424 ? $1208 : $1425;
           $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $1423;$pc$1 = $$pc$1;$s_time$1 = $$21;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
           continue L1;
          }
          else if ((label|0) == 191) {
           label = 0;
           $1426 = HEAP16[$212>>1]|0;
           $1427 = $1426&65535;
           $1428 = (($1427) + ($inc62$0))|0;
           $1429 = $1428&65535;
           HEAP16[$212>>1] = $1429;
           $1430 = $1427 & 8191;
           $1431 = $1427 >>> 13;
           $1432 = (($s) + ($1431<<2)|0);
           $1433 = HEAP32[$1432>>2]|0;
           $1434 = (($1433) + ($1430)|0);
           $1435 = HEAP8[$1434]|0;
           $1436 = $1435&255;
           $1437 = HEAP8[$213]|0;
           $1438 = (($1437) + -1)<<24>>24;
           HEAP8[$213] = $1438;
           $1439 = $1438&255;
           $1440 = $1436 >>> 6;
           $1441 = $1440 & 2;
           $1442 = (($this) + ($1439)|0);
           $1443 = HEAP8[$1442]|0;
           $1444 = $1443&255;
           $1445 = $1444 & 251;
           $1446 = $1445 | $1441;
           $1447 = ($1438<<24>>24)!=(0);
           $1448 = ($272&255)>(175);
           $or$cond22 = $1447 & $1448;
           $1449 = (($1208) + 5)|0;
           $pc$18 = $or$cond22 ? $pc$1 : $1203;
           $s_time$20 = $or$cond22 ? $1449 : $1208;
           $1450 = HEAP32[$214>>2]|0;
           $1451 = (($s_time$20) + ($1450))|0;
           $1452 = HEAP16[$215>>1]|0;
           $1453 = $1452&65535;
           __Z11kss_cpu_outP7Kss_Cpulji($this,$1451,$1453,$1436);
           $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $1446;$pc$1 = $pc$18;$s_time$1 = $s_time$20;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
           continue L1;
          }
          else if ((label|0) == 193) {
           label = 0;
           $1454 = HEAP16[$217>>1]|0;
           $1455 = $1454&65535;
           $1456 = (($1455) + ($inc65$0))|0;
           $1457 = $1456&65535;
           HEAP16[$217>>1] = $1457;
           $1458 = HEAP32[$218>>2]|0;
           $1459 = (($1458) + ($1208))|0;
           $1460 = HEAP16[$219>>1]|0;
           $1461 = $1460&65535;
           $1462 = (__Z10kss_cpu_inP7Kss_Cpulj($this,$1459,$1461)|0);
           $1463 = HEAP8[$220]|0;
           $1464 = (($1463) + -1)<<24>>24;
           HEAP8[$220] = $1464;
           $1465 = $1464&255;
           $1466 = $1462 >>> 6;
           $1467 = $1466 & 2;
           $1468 = (($this) + ($1465)|0);
           $1469 = HEAP8[$1468]|0;
           $1470 = $1469&255;
           $1471 = $1470 & 251;
           $1472 = $1471 | $1467;
           $1473 = ($1464<<24>>24)!=(0);
           $1474 = ($272&255)>(175);
           $or$cond23 = $1473 & $1474;
           $1475 = (($1208) + 5)|0;
           $pc$19 = $or$cond23 ? $pc$1 : $1203;
           $s_time$21 = $or$cond23 ? $1475 : $1208;
           HEAP32[$20>>2] = $s_time$21;
           __Z13kss_cpu_writeP7Kss_Cpuji($this,$1455,$1462);
           $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $1472;$pc$1 = $pc$19;$s_time$1 = $s_time$21;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
           continue L1;
          }
          else if ((label|0) == 198) {
           label = 0;
           $1480 = $flags$0 & 1;
           $1481 = HEAP8[$227]|0;
           $1482 = $1481&255;
           $1483 = (($this) + ($1482)|0);
           $1484 = HEAP8[$1483]|0;
           $1485 = $1484&255;
           $1486 = $1485 & 251;
           $1487 = $1486 | $1480;
           $1488 = HEAP8[$228]|0;
           $1489 = $1488&255;
           $1490 = $1489 << 2;
           $1491 = $1490 & 4;
           $1492 = $1487 | $1491;
           $sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $1492;$pc$1 = $1203;$s_time$1 = $1208;$warning$0$off0 = $warning$1$off0;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
           continue L1;
          }
          break;
         }
         case 253:  {
          $ixy$0 = $iy$0;
          label = 204;
          break;
         }
         case 221:  {
          $ixy$0 = $ix$0;
          label = 204;
          break;
         }
         case 118:  {
          label = 264;
          break L1;
          break;
         }
         default: {
          label = 262;
          break L1;
         }
         }
        } while(0);
        L183: do {
         if ((label|0) == 2) {
          label = 0;
          $249 = (($264) + -5)|0;
          $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $pc$0;$s_time$1 = $249;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
          continue L1;
         }
         else if ((label|0) == 3) {
          label = 0;
          $250 = (($264) + -7)|0;
          $s_time$0 = $250;
          label = 4;
         }
         else if ((label|0) == 57) {
          label = 0;
          $384 = $sp$0 & 8191;
          $385 = $sp$0 >>> 13;
          $386 = (($s) + ($385<<2)|0);
          $387 = HEAP32[$386>>2]|0;
          $388 = (($387) + ($384)|0);
          $389 = (__Z8get_le16PKv($388)|0);
          $390 = (($sp$0) + 2)|0;
          $391 = $390 & 65535;
          $warning$0$off0$phi = $warning$0$off0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $389;$s_time$1 = $s_time$2;$sp$0 = $391;$warning$0$off0 = $warning$0$off0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
          continue L1;
         }
         else if ((label|0) == 66) {
          label = 0;
          $408 = (($pc$1) + 3)|0;
          $409 = (__Z8get_le16PKv($257)|0);
          $410 = (($sp$0) + 65534)|0;
          $411 = $410 & 65535;
          $412 = $410 & 8191;
          $413 = $411 >>> 13;
          $414 = ((($s) + ($413<<2)|0) + 36|0);
          $415 = HEAP32[$414>>2]|0;
          $416 = (($415) + ($412)|0);
          __Z8set_le16Pvj($416,$408);
          $warning$0$off0$phi = $warning$0$off0;$s_time$1$phi = $264;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $409;$sp$0 = $411;$warning$0$off0 = $warning$0$off0$phi;$s_time$1 = $s_time$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
          continue L1;
         }
         else if ((label|0) == 68) {
          label = 0;
          $418 = $259 & 56;
          $data$0 = $260;$pc$2 = $418;$s_time$3 = $264;
          label = 71;
         }
         else if ((label|0) == 75) {
          label = 0;
          $464 = HEAP16[$58>>1]|0;
          $465 = $464&65535;
          $466 = $465 & 8191;
          $467 = $465 >>> 13;
          $468 = (($s) + ($467<<2)|0);
          $469 = HEAP32[$468>>2]|0;
          $470 = (($469) + ($466)|0);
          $471 = HEAP8[$470]|0;
          $472 = $471&255;
          $data$1 = $472;$flags$4 = $flags$1;$opcode$0 = $259;$pc$3 = $260;$s_time$4 = $264;
          label = 80;
         }
         else if ((label|0) == 77) {
          label = 0;
          $474 = (($pc$1) + 2)|0;
          $data$1 = $273;$flags$4 = $flags$2;$opcode$0 = $259;$pc$3 = $474;$s_time$4 = $264;
          label = 80;
         }
         else if ((label|0) == 79) {
          label = 0;
          $476 = $259 & 7;
          $477 = $476 ^ 1;
          $478 = (($60) + ($477)|0);
          $479 = HEAP8[$478]|0;
          $480 = $479&255;
          $data$1 = $480;$flags$4 = $flags$3;$opcode$0 = $259;$pc$3 = $260;$s_time$4 = $264;
          label = 80;
         }
         else if ((label|0) == 86) {
          label = 0;
          $542 = HEAP16[$67>>1]|0;
          $543 = $542&65535;
          $544 = (($543) + ($data$3))|0;
          $545 = $543 ^ $data$3;
          $546 = $544&65535;
          HEAP16[$67>>1] = $546;
          $547 = $flags$0 & 196;
          $548 = $544 >>> 16;
          $549 = $548 | $547;
          $550 = $544 >>> 8;
          $551 = $550 & 40;
          $552 = $549 | $551;
          $553 = $545 ^ $544;
          $554 = $553 >>> 8;
          $555 = $554 & 16;
          $556 = $552 | $555;
          $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$s_time$1$phi = $264;$pc$1$phi = $260;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $556;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$s_time$1 = $s_time$1$phi;$pc$1 = $pc$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
          continue L1;
         }
         else if ((label|0) == 204) {
          label = 0;
          $1494 = (($pc$1) + 2)|0;
          $1495 = $1494 & 8191;
          $1496 = $1494 >>> 13;
          $1497 = (($s) + ($1496<<2)|0);
          $1498 = HEAP32[$1497>>2]|0;
          $1499 = (($1498) + ($1495)|0);
          $1500 = HEAP8[$1499]|0;
          $1501 = $1500&255;
          $1502 = (42640 + ($273)|0);
          $1503 = HEAP8[$1502]|0;
          $1504 = $1503&255;
          $1505 = $1504 & 15;
          $1506 = (($1505) + ($264))|0;
          switch ($273|0) {
          case 109: case 100:  {
           $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $1494;$s_time$1 = $1506;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
           continue L1;
           break;
          }
          case 229:  {
           $data$0 = $ixy$0;$pc$2 = $1494;$s_time$3 = $1506;
           label = 71;
           break L183;
           break;
          }
          case 134: case 150:  {
           $1507 = $flags$0 & -2;
           $flags$8 = $1507;
           label = 206;
           break;
          }
          case 132: case 148:  {
           $1519 = $flags$0 & -2;
           $flags$9 = $1519;
           label = 208;
           break;
          }
          case 142: case 158:  {
           $flags$8 = $flags$0;
           label = 206;
           break;
          }
          case 140: case 156:  {
           $flags$9 = $flags$0;
           label = 208;
           break;
          }
          case 133: case 149:  {
           $1521 = $flags$0 & -2;
           $flags$10 = $1521;
           label = 210;
           break;
          }
          case 141: case 157:  {
           $flags$10 = $flags$0;
           label = 210;
           break;
          }
          case 41:  {
           $temp70$0 = $ixy$0;
           label = 213;
           break;
          }
          case 25: case 9:  {
           $1523 = $273 >>> 3;
           $$sum5 = (($1523) + -1)|0;
           $1524 = (($236) + ($$sum5)|0);
           $1525 = $1524;
           $1526 = HEAP16[$1525>>1]|0;
           $1527 = $1526&65535;
           $temp70$0 = $1527;
           label = 213;
           break;
          }
          case 57:  {
           $temp70$0 = $sp$0;
           label = 213;
           break;
          }
          case 164:  {
           $1552 = $ixy$0 >>> 8;
           $data$6 = $1552;$pc$7 = $1494;$s_time$8 = $1506;
           label = 104;
           break L183;
           break;
          }
          case 166:  {
           $1541 = (($pc$1) + 3)|0;
           $1542 = $1500 << 24 >> 24;
           $1543 = (($1542) + ($ixy$0))|0;
           $1544 = $1543 & 8191;
           $1545 = $1543 >>> 13;
           $1546 = $1545 & 7;
           $1547 = (($s) + ($1546<<2)|0);
           $1548 = HEAP32[$1547>>2]|0;
           $1549 = (($1548) + ($1544)|0);
           $1550 = HEAP8[$1549]|0;
           $1551 = $1550&255;
           $data$6 = $1551;$pc$7 = $1541;$s_time$8 = $1506;
           label = 104;
           break L183;
           break;
          }
          case 165:  {
           $1553 = $ixy$0 & 255;
           $data$6 = $1553;$pc$7 = $1494;$s_time$8 = $1506;
           label = 104;
           break L183;
           break;
          }
          case 180:  {
           $1565 = $ixy$0 >>> 8;
           $data$7 = $1565;$pc$8 = $1494;$s_time$9 = $1506;
           label = 108;
           break L183;
           break;
          }
          case 182:  {
           $1554 = (($pc$1) + 3)|0;
           $1555 = $1500 << 24 >> 24;
           $1556 = (($1555) + ($ixy$0))|0;
           $1557 = $1556 & 8191;
           $1558 = $1556 >>> 13;
           $1559 = $1558 & 7;
           $1560 = (($s) + ($1559<<2)|0);
           $1561 = HEAP32[$1560>>2]|0;
           $1562 = (($1561) + ($1557)|0);
           $1563 = HEAP8[$1562]|0;
           $1564 = $1563&255;
           $data$7 = $1564;$pc$8 = $1554;$s_time$9 = $1506;
           label = 108;
           break L183;
           break;
          }
          case 181:  {
           $1566 = $ixy$0 & 255;
           $data$7 = $1566;$pc$8 = $1494;$s_time$9 = $1506;
           label = 108;
           break L183;
           break;
          }
          case 172:  {
           $1578 = $ixy$0 >>> 8;
           $data$8 = $1578;$pc$9 = $1494;$s_time$10 = $1506;
           label = 112;
           break L183;
           break;
          }
          case 174:  {
           $1567 = (($pc$1) + 3)|0;
           $1568 = $1500 << 24 >> 24;
           $1569 = (($1568) + ($ixy$0))|0;
           $1570 = $1569 & 8191;
           $1571 = $1569 >>> 13;
           $1572 = $1571 & 7;
           $1573 = (($s) + ($1572<<2)|0);
           $1574 = HEAP32[$1573>>2]|0;
           $1575 = (($1574) + ($1570)|0);
           $1576 = HEAP8[$1575]|0;
           $1577 = $1576&255;
           $data$8 = $1577;$pc$9 = $1567;$s_time$10 = $1506;
           label = 112;
           break L183;
           break;
          }
          case 173:  {
           $1579 = $ixy$0 & 255;
           $data$8 = $1579;$pc$9 = $1494;$s_time$10 = $1506;
           label = 112;
           break L183;
           break;
          }
          case 188:  {
           $1591 = $ixy$0 >>> 8;
           $data$2 = $1591;$pc$4 = $1494;$s_time$5 = $1506;
           label = 84;
           break L183;
           break;
          }
          case 190:  {
           $1580 = (($pc$1) + 3)|0;
           $1581 = $1500 << 24 >> 24;
           $1582 = (($1581) + ($ixy$0))|0;
           $1583 = $1582 & 8191;
           $1584 = $1582 >>> 13;
           $1585 = $1584 & 7;
           $1586 = (($s) + ($1585<<2)|0);
           $1587 = HEAP32[$1586>>2]|0;
           $1588 = (($1587) + ($1583)|0);
           $1589 = HEAP8[$1588]|0;
           $1590 = $1589&255;
           $data$2 = $1590;$pc$4 = $1580;$s_time$5 = $1506;
           label = 84;
           break L183;
           break;
          }
          case 189:  {
           $1592 = $ixy$0 & 255;
           $data$2 = $1592;$pc$4 = $1494;$s_time$5 = $1506;
           label = 84;
           break L183;
           break;
          }
          case 119: case 117: case 116: case 115: case 114: case 113: case 112:  {
           $1593 = $273 ^ 1;
           $1594 = (($238) + ($1593)|0);
           $$sink$in = $1594;$pc$20 = $1494;
           label = 228;
           break;
          }
          case 54:  {
           $1595 = (($pc$1) + 3)|0;
           $1596 = $1595 & 8191;
           $1597 = $1595 >>> 13;
           $1598 = (($s) + ($1597<<2)|0);
           $1599 = HEAP32[$1598>>2]|0;
           $1600 = (($1599) + ($1596)|0);
           $$sink$in = $1600;$pc$20 = $1595;
           label = 228;
           break;
          }
          case 124: case 92: case 84: case 76: case 68:  {
           $1606 = $ixy$0 >>> 8;
           $1607 = $1606&255;
           $1608 = $273 >>> 3;
           $1609 = $1608 ^ 1;
           $1610 = (($240) + ($1609)|0);
           HEAP8[$1610] = $1607;
           $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $1494;$s_time$1 = $1506;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
           continue L1;
           break;
          }
          case 125: case 93: case 85: case 77: case 69:  {
           $1611 = $ixy$0&255;
           $1612 = $273 >>> 3;
           $1613 = $1612 ^ 1;
           $1614 = (($242) + ($1613)|0);
           HEAP8[$1614] = $1611;
           $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $1494;$s_time$1 = $1506;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
           continue L1;
           break;
          }
          case 38:  {
           $1628 = (($pc$1) + 3)|0;
           $data269$0 = $1501;$pc$21 = $1628;
           label = 235;
           break;
          }
          case 126: case 110: case 102: case 94: case 86: case 78: case 70:  {
           $1615 = (($pc$1) + 3)|0;
           $1616 = $1500 << 24 >> 24;
           $1617 = (($1616) + ($ixy$0))|0;
           $1618 = $1617 & 8191;
           $1619 = $1617 >>> 13;
           $1620 = $1619 & 7;
           $1621 = (($s) + ($1620<<2)|0);
           $1622 = HEAP32[$1621>>2]|0;
           $1623 = (($1622) + ($1618)|0);
           $1624 = HEAP8[$1623]|0;
           $1625 = $273 >>> 3;
           $1626 = $1625 ^ 1;
           $1627 = (($244) + ($1626)|0);
           HEAP8[$1627] = $1624;
           $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $1615;$s_time$1 = $1506;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
           continue L1;
           break;
          }
          case 101:  {
           $1629 = $ixy$0 & 255;
           $data269$0 = $1629;$pc$21 = $1494;
           label = 235;
           break;
          }
          case 103: case 99: case 98: case 97: case 96:  {
           $1630 = $273 ^ 1;
           $1631 = (($246) + ($1630)|0);
           $1632 = HEAP8[$1631]|0;
           $1633 = $1632&255;
           $data269$0 = $1633;$pc$21 = $1494;
           label = 235;
           break;
          }
          case 46:  {
           $1637 = (($pc$1) + 3)|0;
           $data269$1 = $1501;$pc$22 = $1637;
           label = 239;
           break;
          }
          case 108:  {
           $1638 = $ixy$0 >>> 8;
           $data269$1 = $1638;$pc$22 = $1494;
           label = 239;
           break;
          }
          case 111: case 107: case 106: case 105: case 104:  {
           $1639 = $273 ^ 1;
           $1640 = (($248) + ($1639)|0);
           $1641 = HEAP8[$1640]|0;
           $1642 = $1641&255;
           $data269$1 = $1642;$pc$22 = $1494;
           label = 239;
           break;
          }
          case 249:  {
           $warning$0$off0$phi = $warning$0$off0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $1494;$s_time$1 = $1506;$sp$0 = $ixy$0;$warning$0$off0 = $warning$0$off0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
           continue L1;
           break;
          }
          case 34:  {
           $$sum4 = (($255) + 2)|0;
           $1646 = (($254) + ($$sum4)|0);
           $1647 = (__Z8get_le16PKv($1646)|0);
           $1648 = (($pc$1) + 4)|0;
           $1649 = $1647 & 8191;
           $1650 = $1647 >>> 13;
           $1651 = ((($s) + ($1650<<2)|0) + 36|0);
           $1652 = HEAP32[$1651>>2]|0;
           $1653 = (($1652) + ($1649)|0);
           __Z8set_le16Pvj($1653,$ixy$0);
           $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $1648;$s_time$1 = $1506;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
           continue L1;
           break;
          }
          case 33:  {
           $$sum3 = (($255) + 2)|0;
           $1654 = (($254) + ($$sum3)|0);
           $1655 = (__Z8get_le16PKv($1654)|0);
           $1656 = (($pc$1) + 4)|0;
           $flags$11 = $flags$0;$ixy$1 = $1655;$pc$23 = $1656;$sp$1 = $sp$0;
           break;
          }
          case 42:  {
           $$sum2 = (($255) + 2)|0;
           $1657 = (($254) + ($$sum2)|0);
           $1658 = (__Z8get_le16PKv($1657)|0);
           $1659 = $1658 & 8191;
           $1660 = $1658 >>> 13;
           $1661 = (($s) + ($1660<<2)|0);
           $1662 = HEAP32[$1661>>2]|0;
           $1663 = (($1662) + ($1659)|0);
           $1664 = (__Z8get_le16PKv($1663)|0);
           $1665 = (($pc$1) + 4)|0;
           $flags$11 = $flags$0;$ixy$1 = $1664;$pc$23 = $1665;$sp$1 = $sp$0;
           break;
          }
          case 203:  {
           $1666 = $1500 << 24 >> 24;
           $1667 = (($1666) + ($ixy$0))|0;
           $1668 = $1667 & 65535;
           $1669 = (($pc$1) + 3)|0;
           $1670 = $1669 & 8191;
           $1671 = $1669 >>> 13;
           $1672 = (($s) + ($1671<<2)|0);
           $1673 = HEAP32[$1672>>2]|0;
           $1674 = (($1673) + ($1670)|0);
           $1675 = HEAP8[$1674]|0;
           $1676 = $1675&255;
           $1677 = (($pc$1) + 4)|0;
           switch ($1676|0) {
           case 46:  {
            $data$15 = $1668;$pc$16 = $1677;$s_time$17 = $1506;
            label = 159;
            break L183;
            break;
           }
           case 62:  {
            $data$16 = $1668;$pc$17 = $1677;$s_time$18 = $1506;
            label = 162;
            break L183;
            break;
           }
           case 6:  {
            $data$9 = $1668;$pc$10 = $1677;$s_time$11 = $1506;
            label = 141;
            break L183;
            break;
           }
           case 22:  {
            $data$10 = $1668;$pc$11 = $1677;$s_time$12 = $1506;
            label = 144;
            break L183;
            break;
           }
           case 38:  {
            $data$11 = $1668;$pc$12 = $1677;$s_time$13 = $1506;
            label = 147;
            break L183;
            break;
           }
           case 54:  {
            $data$12 = $1668;$pc$13 = $1677;$s_time$14 = $1506;
            label = 150;
            break L183;
            break;
           }
           case 14:  {
            $data$13 = $1668;$pc$14 = $1677;$s_time$15 = $1506;
            label = 153;
            break L183;
            break;
           }
           case 30:  {
            $data$14 = $1668;$pc$15 = $1677;$s_time$16 = $1506;
            label = 156;
            break L183;
            break;
           }
           case 126: case 118: case 110: case 102: case 94: case 86: case 78: case 70:  {
            $1678 = $1667 & 8191;
            $1679 = $1668 >>> 13;
            $1680 = (($s) + ($1679<<2)|0);
            $1681 = HEAP32[$1680>>2]|0;
            $1682 = (($1681) + ($1678)|0);
            $1683 = HEAP8[$1682]|0;
            $1684 = $1683&255;
            $1685 = $1676 >>> 3;
            $1686 = $1685 & 7;
            $1687 = 1 << $1686;
            $1688 = $1684 & $1687;
            $1689 = $flags$0 & 1;
            $1690 = $1688 & 128;
            $1691 = (($1688) + 32767)|0;
            $1692 = $1691 >>> 8;
            $1693 = $1692 & 68;
            $1694 = $1689 | $1690;
            $1695 = $1694 | $1693;
            $1696 = $1695 | 16;
            $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $1696;$pc$1 = $1677;$s_time$1 = $1506;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
            continue L1;
            break;
           }
           case 254: case 246: case 238: case 230: case 222: case 214: case 206: case 198: case 190: case 182: case 174: case 166: case 158: case 150: case 142: case 134:  {
            $1697 = $1667 & 8191;
            $1698 = $1668 >>> 13;
            $1699 = (($s) + ($1698<<2)|0);
            $1700 = HEAP32[$1699>>2]|0;
            $1701 = (($1700) + ($1697)|0);
            $1702 = HEAP8[$1701]|0;
            $1703 = $1702&255;
            $1704 = $1676 >>> 3;
            $1705 = $1704 & 7;
            $1706 = 1 << $1705;
            $1707 = $1703 | $1706;
            $1708 = $1676 & 64;
            $1709 = ($1708|0)==(0);
            $1710 = $1709 ? $1706 : 0;
            $$24 = $1707 ^ $1710;
            HEAP32[$20>>2] = $1506;
            __Z13kss_cpu_writeP7Kss_Cpuji($this,$1668,$$24);
            $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $1677;$s_time$1 = $1506;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
            continue L1;
            break;
           }
           default: {
            $sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $1677;$s_time$1 = $1506;$warning$0$off0 = 1;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
            continue L1;
           }
           }
           break;
          }
          case 35:  {
           $1711 = (($ixy$0) + 1)|0;
           $1712 = $1711 & 65535;
           $flags$11 = $flags$0;$ixy$1 = $1712;$pc$23 = $1494;$sp$1 = $sp$0;
           break;
          }
          case 43:  {
           $1713 = (($ixy$0) + 65535)|0;
           $1714 = $1713 & 65535;
           $flags$11 = $flags$0;$ixy$1 = $1714;$pc$23 = $1494;$sp$1 = $sp$0;
           break;
          }
          case 52:  {
           $1715 = $1500 << 24 >> 24;
           $1716 = (($1715) + ($ixy$0))|0;
           $1717 = $1716 & 65535;
           $1718 = (($pc$1) + 3)|0;
           $1719 = $1716 & 8191;
           $1720 = $1717 >>> 13;
           $1721 = (($s) + ($1720<<2)|0);
           $1722 = HEAP32[$1721>>2]|0;
           $1723 = (($1722) + ($1719)|0);
           $1724 = HEAP8[$1723]|0;
           $1725 = $1724&255;
           $1726 = (($1725) + 1)|0;
           HEAP32[$20>>2] = $1506;
           __Z13kss_cpu_writeP7Kss_Cpuji($this,$1717,$1726);
           $data$4 = $1726;$ix$1 = $ix$0;$iy$1 = $iy$0;$pc$5 = $1718;$s_time$6 = $1506;
           label = 93;
           break L183;
           break;
          }
          case 53:  {
           $1727 = $1500 << 24 >> 24;
           $1728 = (($1727) + ($ixy$0))|0;
           $1729 = $1728 & 65535;
           $1730 = (($pc$1) + 3)|0;
           $1731 = $1728 & 8191;
           $1732 = $1729 >>> 13;
           $1733 = (($s) + ($1732<<2)|0);
           $1734 = HEAP32[$1733>>2]|0;
           $1735 = (($1734) + ($1731)|0);
           $1736 = HEAP8[$1735]|0;
           $1737 = $1736&255;
           $1738 = (($1737) + -1)|0;
           HEAP32[$20>>2] = $1506;
           __Z13kss_cpu_writeP7Kss_Cpuji($this,$1729,$1738);
           $data$5 = $1738;$ix$2 = $ix$0;$iy$2 = $iy$0;$pc$6 = $1730;$s_time$7 = $1506;
           label = 96;
           break L183;
           break;
          }
          case 36:  {
           $1739 = (($ixy$0) + 256)|0;
           $1740 = $1739 & 65535;
           $1741 = $1740 >>> 8;
           $data$18 = $1741;$ixy$2 = $1740;
           label = 254;
           break;
          }
          case 44:  {
           $1742 = (($ixy$0) + 1)|0;
           $1743 = $1742 & 255;
           $1744 = $ixy$0 & 65280;
           $1745 = $1743 | $1744;
           $data$18 = $1743;$ixy$2 = $1745;
           label = 254;
           break;
          }
          case 37:  {
           $1747 = (($ixy$0) + 65280)|0;
           $1748 = $1747 & 65535;
           $1749 = $1748 >>> 8;
           $data$19 = $1749;$ixy$3 = $1748;
           label = 257;
           break;
          }
          case 45:  {
           $1750 = (($ixy$0) + 255)|0;
           $1751 = $1750 & 255;
           $1752 = $ixy$0 & 65280;
           $1753 = $1751 | $1752;
           $data$19 = $1751;$ixy$3 = $1753;
           label = 257;
           break;
          }
          case 233:  {
           $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $ixy$0;$s_time$1 = $1506;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
           continue L1;
           break;
          }
          case 225:  {
           $1755 = $sp$0 & 8191;
           $1756 = $sp$0 >>> 13;
           $1757 = (($s) + ($1756<<2)|0);
           $1758 = HEAP32[$1757>>2]|0;
           $1759 = (($1758) + ($1755)|0);
           $1760 = (__Z8get_le16PKv($1759)|0);
           $1761 = (($sp$0) + 2)|0;
           $1762 = $1761 & 65535;
           $flags$11 = $flags$0;$ixy$1 = $1760;$pc$23 = $1494;$sp$1 = $1762;
           break;
          }
          case 227:  {
           $1763 = $sp$0 & 8191;
           $1764 = $sp$0 >>> 13;
           $1765 = (($s) + ($1764<<2)|0);
           $1766 = HEAP32[$1765>>2]|0;
           $1767 = (($1766) + ($1763)|0);
           $1768 = (__Z8get_le16PKv($1767)|0);
           $1769 = ((($s) + ($1764<<2)|0) + 36|0);
           $1770 = HEAP32[$1769>>2]|0;
           $1771 = (($1770) + ($1763)|0);
           __Z8set_le16Pvj($1771,$ixy$0);
           $flags$11 = $flags$0;$ixy$1 = $1768;$pc$23 = $1494;$sp$1 = $sp$0;
           break;
          }
          default: {
           $sp$0$phi = $sp$0;$pc$1$phi = $260;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$s_time$1 = $1506;$warning$0$off0 = 1;$sp$0 = $sp$0$phi;$pc$1 = $pc$1$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
           continue L1;
          }
          }
          if ((label|0) == 206) {
           label = 0;
           $1508 = (($pc$1) + 3)|0;
           $1509 = $1500 << 24 >> 24;
           $1510 = (($1509) + ($ixy$0))|0;
           $1511 = $1510 & 8191;
           $1512 = $1510 >>> 13;
           $1513 = $1512 & 7;
           $1514 = (($s) + ($1513<<2)|0);
           $1515 = HEAP32[$1514>>2]|0;
           $1516 = (($1515) + ($1511)|0);
           $1517 = HEAP8[$1516]|0;
           $1518 = $1517&255;
           $data$1 = $1518;$flags$4 = $flags$8;$opcode$0 = $273;$pc$3 = $1508;$s_time$4 = $1506;
           label = 80;
           break;
          }
          else if ((label|0) == 208) {
           label = 0;
           $1520 = $ixy$0 >>> 8;
           $data$1 = $1520;$flags$4 = $flags$9;$opcode$0 = $273;$pc$3 = $1494;$s_time$4 = $1506;
           label = 80;
           break;
          }
          else if ((label|0) == 210) {
           label = 0;
           $1522 = $ixy$0 & 255;
           $data$1 = $1522;$flags$4 = $flags$10;$opcode$0 = $273;$pc$3 = $1494;$s_time$4 = $1506;
           label = 80;
           break;
          }
          else if ((label|0) == 213) {
           label = 0;
           $1528 = (($temp70$0) + ($ixy$0))|0;
           $1529 = $temp70$0 ^ $ixy$0;
           $1530 = $1528 & 65535;
           $1531 = $flags$0 & 196;
           $1532 = $1528 >>> 16;
           $1533 = $1532 | $1531;
           $1534 = $1528 >>> 8;
           $1535 = $1534 & 40;
           $1536 = $1533 | $1535;
           $1537 = $1529 ^ $1528;
           $1538 = $1537 >>> 8;
           $1539 = $1538 & 16;
           $1540 = $1536 | $1539;
           $flags$11 = $1540;$ixy$1 = $1530;$pc$23 = $1494;$sp$1 = $sp$0;
          }
          else if ((label|0) == 228) {
           label = 0;
           $$sink = HEAP8[$$sink$in]|0;
           $1601 = $$sink&255;
           $1602 = (($pc$20) + 1)|0;
           HEAP32[$20>>2] = $1506;
           $1603 = $1500 << 24 >> 24;
           $1604 = (($1603) + ($ixy$0))|0;
           $1605 = $1604 & 65535;
           __Z13kss_cpu_writeP7Kss_Cpuji($this,$1605,$1601);
           $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $1602;$s_time$1 = $1506;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
           continue L1;
          }
          else if ((label|0) == 235) {
           label = 0;
           $1634 = $ixy$0 & 255;
           $1635 = $data269$0 << 8;
           $1636 = $1635 | $1634;
           $flags$11 = $flags$0;$ixy$1 = $1636;$pc$23 = $pc$21;$sp$1 = $sp$0;
          }
          else if ((label|0) == 239) {
           label = 0;
           $1643 = $ixy$0 & 65280;
           $1644 = $data269$1 | $1643;
           $flags$11 = $flags$0;$ixy$1 = $1644;$pc$23 = $pc$22;$sp$1 = $sp$0;
          }
          else if ((label|0) == 254) {
           label = 0;
           $1746 = ($258<<24>>24)==(-35);
           $iy$0$ixy$2 = $1746 ? $iy$0 : $ixy$2;
           $ixy$2$ix$0 = $1746 ? $ixy$2 : $ix$0;
           $data$4 = $data$18;$ix$1 = $ixy$2$ix$0;$iy$1 = $iy$0$ixy$2;$pc$5 = $1494;$s_time$6 = $1506;
           label = 93;
           break;
          }
          else if ((label|0) == 257) {
           label = 0;
           $1754 = ($258<<24>>24)==(-35);
           $iy$0$ixy$3 = $1754 ? $iy$0 : $ixy$3;
           $ixy$3$ix$0 = $1754 ? $ixy$3 : $ix$0;
           $data$5 = $data$19;$ix$2 = $ixy$3$ix$0;$iy$2 = $iy$0$ixy$3;$pc$6 = $1494;$s_time$7 = $1506;
           label = 96;
           break;
          }
          $1645 = ($258<<24>>24)==(-35);
          $iy$0$ixy$1 = $1645 ? $iy$0 : $ixy$1;
          $ixy$1$ix$0 = $1645 ? $ixy$1 : $ix$0;
          $warning$0$off0$phi = $warning$0$off0;$flags$0 = $flags$11;$ix$0 = $ixy$1$ix$0;$iy$0 = $iy$0$ixy$1;$pc$1 = $pc$23;$s_time$1 = $1506;$sp$0 = $sp$1;$warning$0$off0 = $warning$0$off0$phi;
          continue L1;
         }
        } while(0);
        if ((label|0) == 4) {
         label = 0;
         $251 = (($pc$1) + 3)|0;
         $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $251;$s_time$1 = $s_time$0;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
         continue;
        }
        else if ((label|0) == 71) {
         label = 0;
         $428 = (($sp$0) + 65534)|0;
         $429 = $428 & 65535;
         $430 = $428 & 8191;
         $431 = $429 >>> 13;
         $432 = ((($s) + ($431<<2)|0) + 36|0);
         $433 = HEAP32[$432>>2]|0;
         $434 = (($433) + ($430)|0);
         __Z8set_le16Pvj($434,$data$0);
         $warning$0$off0$phi = $warning$0$off0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0$phi = $flags$0;$pc$1 = $pc$2;$s_time$1 = $s_time$3;$sp$0 = $429;$warning$0$off0 = $warning$0$off0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;$flags$0 = $flags$0$phi;
         continue;
        }
        else if ((label|0) == 80) {
         label = 0;
         $481 = $flags$4 & 1;
         $482 = (($481) + ($data$1))|0;
         $483 = HEAP8[$59]|0;
         $484 = $483&255;
         $485 = $484 ^ $data$1;
         $486 = $opcode$0 >>> 3;
         $487 = $486 & 2;
         $488 = ($487|0)==(0);
         $489 = (0 - ($482))|0;
         $$ = $488 ? $482 : $489;
         $490 = (($484) + ($$))|0;
         $491 = $485 ^ $490;
         $492 = $491 & 16;
         $493 = (($491) + 128)|0;
         $494 = $493 >>> 6;
         $495 = $494 & 4;
         $496 = $490 & 511;
         $497 = (($this) + ($496)|0);
         $498 = HEAP8[$497]|0;
         $499 = $498&255;
         $500 = $499 & 251;
         $501 = $500 | $487;
         $502 = $501 | $492;
         $503 = $502 | $495;
         $504 = $490&255;
         HEAP8[$59] = $504;
         $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $503;$pc$1 = $pc$3;$s_time$1 = $s_time$4;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
         continue;
        }
        else if ((label|0) == 84) {
         label = 0;
         $519 = HEAP8[$63]|0;
         $520 = $519&255;
         $521 = (($520) - ($data$2))|0;
         $522 = $data$2 & 40;
         $523 = $521 >>> 8;
         $524 = $523 & 1;
         $525 = $520 ^ $data$2;
         $526 = $521 ^ $520;
         $527 = $526 & $525;
         $528 = $527 >>> 5;
         $529 = $528 & 4;
         $530 = $525 & 16;
         $$masked = $521 & 144;
         $531 = $530 ^ $$masked;
         $532 = $521&255;
         $533 = ($532<<24>>24)==(0);
         $$14$v = $533 ? 66 : 2;
         $534 = $524 | $522;
         $535 = $534 | $531;
         $536 = $535 | $$14$v;
         $$14 = $536 | $529;
         $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $$14;$pc$1 = $pc$4;$s_time$1 = $s_time$5;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
         continue;
        }
        else if ((label|0) == 93) {
         label = 0;
         $603 = $flags$0 & 1;
         $604 = $data$4 & 15;
         $605 = (($604) + 31)|0;
         $606 = $605 & 16;
         $607 = $606 | $603;
         $608 = $data$4 & 255;
         $609 = (($this) + ($608)|0);
         $610 = HEAP8[$609]|0;
         $611 = $610&255;
         $612 = $611 & 251;
         $613 = $607 | $612;
         $614 = ($data$4|0)==(128);
         $615 = $613 | 4;
         $$15 = $614 ? $615 : $613;
         $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$flags$0 = $$15;$ix$0 = $ix$1;$iy$0 = $iy$1;$pc$1 = $pc$5;$s_time$1 = $s_time$6;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;
         continue;
        }
        else if ((label|0) == 96) {
         label = 0;
         $634 = $flags$0 & 1;
         $635 = $data$5 & 15;
         $636 = (($635) + 1)|0;
         $637 = $636 & 16;
         $638 = $data$5 & 255;
         $639 = (($this) + ($638)|0);
         $640 = HEAP8[$639]|0;
         $641 = $640&255;
         $642 = $641 & 249;
         $643 = ($data$5|0)==(127);
         $$16$v = $643 ? 6 : 2;
         $644 = $$16$v | $634;
         $645 = $644 | $637;
         $$16 = $645 | $642;
         $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$flags$0 = $$16;$ix$0 = $ix$2;$iy$0 = $iy$2;$pc$1 = $pc$6;$s_time$1 = $s_time$7;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;
         continue;
        }
        else if ((label|0) == 104) {
         label = 0;
         $674 = HEAP8[$80]|0;
         $675 = $674&255;
         $676 = $675 & $data$6;
         $677 = $676&255;
         HEAP8[$80] = $677;
         $678 = (($this) + ($676)|0);
         $679 = HEAP8[$678]|0;
         $680 = $679&255;
         $681 = $680 | 16;
         $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $681;$pc$1 = $pc$7;$s_time$1 = $s_time$8;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
         continue;
        }
        else if ((label|0) == 108) {
         label = 0;
         $696 = HEAP8[$85]|0;
         $697 = $696&255;
         $698 = $697 | $data$7;
         $699 = $698&255;
         HEAP8[$85] = $699;
         $700 = $698 & 255;
         $701 = (($this) + ($700)|0);
         $702 = HEAP8[$701]|0;
         $703 = $702&255;
         $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $703;$pc$1 = $pc$8;$s_time$1 = $s_time$9;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
         continue;
        }
        else if ((label|0) == 112) {
         label = 0;
         $718 = HEAP8[$90]|0;
         $719 = $718&255;
         $720 = $719 ^ $data$8;
         $721 = $720&255;
         HEAP8[$90] = $721;
         $722 = $720 & 255;
         $723 = (($this) + ($722)|0);
         $724 = HEAP8[$723]|0;
         $725 = $724&255;
         $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $725;$pc$1 = $pc$9;$s_time$1 = $s_time$10;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
         continue;
        }
        else if ((label|0) == 141) {
         label = 0;
         $906 = $data$9 & 8191;
         $907 = $data$9 >>> 13;
         $908 = (($s) + ($907<<2)|0);
         $909 = HEAP32[$908>>2]|0;
         $910 = (($909) + ($906)|0);
         $911 = HEAP8[$910]|0;
         $912 = $911&255;
         $913 = $912 << 1;
         $914 = $913 & 254;
         $915 = $912 >>> 7;
         $916 = $914 | $915;
         $917 = (($this) + ($916)|0);
         $918 = HEAP8[$917]|0;
         $919 = $918&255;
         $920 = $919 | $915;
         HEAP32[$20>>2] = $s_time$11;
         __Z13kss_cpu_writeP7Kss_Cpuji($this,$data$9,$916);
         $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $920;$pc$1 = $pc$10;$s_time$1 = $s_time$11;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
         continue;
        }
        else if ((label|0) == 144) {
         label = 0;
         $937 = $data$10 & 8191;
         $938 = $data$10 >>> 13;
         $939 = (($s) + ($938<<2)|0);
         $940 = HEAP32[$939>>2]|0;
         $941 = (($940) + ($937)|0);
         $942 = HEAP8[$941]|0;
         $943 = $942&255;
         $944 = $943 << 1;
         $945 = $flags$0 & 1;
         $946 = $944 | $945;
         $947 = (($this) + ($946)|0);
         $948 = HEAP8[$947]|0;
         $949 = $948&255;
         HEAP32[$20>>2] = $s_time$12;
         __Z13kss_cpu_writeP7Kss_Cpuji($this,$data$10,$946);
         $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $949;$pc$1 = $pc$11;$s_time$1 = $s_time$12;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
         continue;
        }
        else if ((label|0) == 147) {
         label = 0;
         $964 = $data$11 & 8191;
         $965 = $data$11 >>> 13;
         $966 = (($s) + ($965<<2)|0);
         $967 = HEAP32[$966>>2]|0;
         $968 = (($967) + ($964)|0);
         $969 = HEAP8[$968]|0;
         $970 = $969&255;
         $971 = $970 << 1;
         $972 = (($this) + ($971)|0);
         $973 = HEAP8[$972]|0;
         $974 = $973&255;
         HEAP32[$20>>2] = $s_time$13;
         __Z13kss_cpu_writeP7Kss_Cpuji($this,$data$11,$971);
         $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $974;$pc$1 = $pc$12;$s_time$1 = $s_time$13;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
         continue;
        }
        else if ((label|0) == 150) {
         label = 0;
         $987 = $data$12 & 8191;
         $988 = $data$12 >>> 13;
         $989 = (($s) + ($988<<2)|0);
         $990 = HEAP32[$989>>2]|0;
         $991 = (($990) + ($987)|0);
         $992 = HEAP8[$991]|0;
         $993 = $992&255;
         $994 = $993 << 1;
         $995 = $994 | 1;
         $996 = (($this) + ($995)|0);
         $997 = HEAP8[$996]|0;
         $998 = $997&255;
         HEAP32[$20>>2] = $s_time$14;
         __Z13kss_cpu_writeP7Kss_Cpuji($this,$data$12,$995);
         $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $998;$pc$1 = $pc$13;$s_time$1 = $s_time$14;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
         continue;
        }
        else if ((label|0) == 153) {
         label = 0;
         $1012 = $data$13 & 8191;
         $1013 = $data$13 >>> 13;
         $1014 = (($s) + ($1013<<2)|0);
         $1015 = HEAP32[$1014>>2]|0;
         $1016 = (($1015) + ($1012)|0);
         $1017 = HEAP8[$1016]|0;
         $1018 = $1017&255;
         $1019 = $1018 & 1;
         $1020 = $1018 << 7;
         $1021 = $1020 & 128;
         $1022 = $1018 >>> 1;
         $1023 = $1021 | $1022;
         $1024 = (($this) + ($1023)|0);
         $1025 = HEAP8[$1024]|0;
         $1026 = $1025&255;
         $1027 = $1019 | $1026;
         HEAP32[$20>>2] = $s_time$15;
         __Z13kss_cpu_writeP7Kss_Cpuji($this,$data$13,$1023);
         $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $1027;$pc$1 = $pc$14;$s_time$1 = $s_time$15;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
         continue;
        }
        else if ((label|0) == 156) {
         label = 0;
         $1045 = $data$14 & 8191;
         $1046 = $data$14 >>> 13;
         $1047 = (($s) + ($1046<<2)|0);
         $1048 = HEAP32[$1047>>2]|0;
         $1049 = (($1048) + ($1045)|0);
         $1050 = HEAP8[$1049]|0;
         $1051 = $1050&255;
         $1052 = $1051 & 1;
         $1053 = $flags$0 << 7;
         $1054 = $1053 & 128;
         $1055 = $1051 >>> 1;
         $1056 = $1055 | $1054;
         $1057 = (($this) + ($1056)|0);
         $1058 = HEAP8[$1057]|0;
         $1059 = $1058&255;
         $1060 = $1059 | $1052;
         HEAP32[$20>>2] = $s_time$16;
         __Z13kss_cpu_writeP7Kss_Cpuji($this,$data$14,$1056);
         $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $1060;$pc$1 = $pc$15;$s_time$1 = $s_time$16;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
         continue;
        }
        else if ((label|0) == 159) {
         label = 0;
         $1078 = $data$15 & 8191;
         $1079 = $data$15 >>> 13;
         $1080 = (($s) + ($1079<<2)|0);
         $1081 = HEAP32[$1080>>2]|0;
         $1082 = (($1081) + ($1078)|0);
         $1083 = HEAP8[$1082]|0;
         $1084 = $1083&255;
         $1085 = $1084 & 1;
         $1086 = $1084 & 128;
         $1087 = $1084 >>> 1;
         $1088 = $1086 | $1087;
         $1089 = (($this) + ($1088)|0);
         $1090 = HEAP8[$1089]|0;
         $1091 = $1090&255;
         $1092 = $1085 | $1091;
         HEAP32[$20>>2] = $s_time$17;
         __Z13kss_cpu_writeP7Kss_Cpuji($this,$data$15,$1088);
         $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $1092;$pc$1 = $pc$16;$s_time$1 = $s_time$17;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
         continue;
        }
        else if ((label|0) == 162) {
         label = 0;
         $1109 = $data$16 & 8191;
         $1110 = $data$16 >>> 13;
         $1111 = (($s) + ($1110<<2)|0);
         $1112 = HEAP32[$1111>>2]|0;
         $1113 = (($1112) + ($1109)|0);
         $1114 = HEAP8[$1113]|0;
         $1115 = $1114&255;
         $1116 = $1115 & 1;
         $1117 = $1115 >>> 1;
         $1118 = (($this) + ($1117)|0);
         $1119 = HEAP8[$1118]|0;
         $1120 = $1119&255;
         $1121 = $1116 | $1120;
         HEAP32[$20>>2] = $s_time$18;
         __Z13kss_cpu_writeP7Kss_Cpuji($this,$data$16,$1117);
         $warning$0$off0$phi = $warning$0$off0;$sp$0$phi = $sp$0;$iy$0$phi = $iy$0;$ix$0$phi = $ix$0;$flags$0 = $1121;$pc$1 = $pc$17;$s_time$1 = $s_time$18;$warning$0$off0 = $warning$0$off0$phi;$sp$0 = $sp$0$phi;$iy$0 = $iy$0$phi;$ix$0 = $ix$0$phi;
         continue;
        }
       }
       if ((label|0) == 170) {
        ___assert_fail(((42624)|0),((42296)|0),1059,((42632)|0));
        // unreachable;
       }
       else if ((label|0) == 262) {
        ___assert_fail(((42624)|0),((42296)|0),1686,((42632)|0));
        // unreachable;
       }
       else if ((label|0) == 263) {
        $1772 = (($264) + -11)|0;
        $s_time$22 = $1772;
        HEAP32[$20>>2] = $s_time$22;
        $1774 = $flags$0&255;
        $1775 = (($6) + 7|0);
        HEAP8[$1775] = $1774;
        $1776 = $ix$0&65535;
        HEAP16[$28>>1] = $1776;
        $1777 = $iy$0&65535;
        HEAP16[$31>>1] = $1777;
        $1778 = $sp$0&65535;
        HEAP16[$25>>1] = $1778;
        $1779 = $pc$1&65535;
        HEAP16[$22>>1] = $1779;
        $1780 = $1;
        $1781 = $1780;
        $1782 = HEAP32[$1781>>2]|0;
        $1783 = (($1780) + 4)|0;
        $1784 = $1783;
        $1785 = HEAP32[$1784>>2]|0;
        $1786 = $9;
        $1787 = $1786;
        HEAP8[$1787]=$1782&255;HEAP8[$1787+1|0]=($1782>>8)&255;HEAP8[$1787+2|0]=($1782>>16)&255;HEAP8[$1787+3|0]=$1782>>24;
        $1788 = (($1786) + 4)|0;
        $1789 = $1788;
        HEAP8[$1789]=$1785&255;HEAP8[$1789+1|0]=($1785>>8)&255;HEAP8[$1789+2|0]=($1785>>16)&255;HEAP8[$1789+3|0]=$1785>>24;
        dest=$4+0|0; src=$2+0|0; stop=dest+80|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));;
        HEAP32[$5>>2] = $3;
        STACKTOP = sp;return ($warning$0$off0|0);
       }
       else if ((label|0) == 264) {
        $1773 = $264 & 3;
        $s_time$22 = $1773;
        HEAP32[$20>>2] = $s_time$22;
        $1774 = $flags$0&255;
        $1775 = (($6) + 7|0);
        HEAP8[$1775] = $1774;
        $1776 = $ix$0&65535;
        HEAP16[$28>>1] = $1776;
        $1777 = $iy$0&65535;
        HEAP16[$31>>1] = $1777;
        $1778 = $sp$0&65535;
        HEAP16[$25>>1] = $1778;
        $1779 = $pc$1&65535;
        HEAP16[$22>>1] = $1779;
        $1780 = $1;
        $1781 = $1780;
        $1782 = HEAP32[$1781>>2]|0;
        $1783 = (($1780) + 4)|0;
        $1784 = $1783;
        $1785 = HEAP32[$1784>>2]|0;
        $1786 = $9;
        $1787 = $1786;
        HEAP8[$1787]=$1782&255;HEAP8[$1787+1|0]=($1782>>8)&255;HEAP8[$1787+2|0]=($1782>>16)&255;HEAP8[$1787+3|0]=$1782>>24;
        $1788 = (($1786) + 4)|0;
        $1789 = $1788;
        HEAP8[$1789]=$1785&255;HEAP8[$1789+1|0]=($1785>>8)&255;HEAP8[$1789+2|0]=($1785>>16)&255;HEAP8[$1789+3|0]=$1785>>24;
        dest=$4+0|0; src=$2+0|0; stop=dest+80|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));;
        HEAP32[$5>>2] = $3;
        STACKTOP = sp;return ($warning$0$off0|0);
       }
       else if ((label|0) == 265) {
        HEAP32[$20>>2] = $s_time$22;
        $1774 = $flags$0&255;
        $1775 = (($6) + 7|0);
        HEAP8[$1775] = $1774;
        $1776 = $ix$0&65535;
        HEAP16[$28>>1] = $1776;
        $1777 = $iy$0&65535;
        HEAP16[$31>>1] = $1777;
        $1778 = $sp$0&65535;
        HEAP16[$25>>1] = $1778;
        $1779 = $pc$1&65535;
        HEAP16[$22>>1] = $1779;
        $1780 = $1;
        $1781 = $1780;
        $1782 = HEAP32[$1781>>2]|0;
        $1783 = (($1780) + 4)|0;
        $1784 = $1783;
        $1785 = HEAP32[$1784>>2]|0;
        $1786 = $9;
        $1787 = $1786;
        HEAP8[$1787]=$1782&255;HEAP8[$1787+1|0]=($1782>>8)&255;HEAP8[$1787+2|0]=($1782>>16)&255;HEAP8[$1787+3|0]=$1782>>24;
        $1788 = (($1786) + 4)|0;
        $1789 = $1788;
        HEAP8[$1789]=$1785&255;HEAP8[$1789+1|0]=($1785>>8)&255;HEAP8[$1789+2|0]=($1785>>16)&255;HEAP8[$1789+3|0]=$1785>>24;
        dest=$4+0|0; src=$2+0|0; stop=dest+80|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));;
        HEAP32[$5>>2] = $3;
        STACKTOP = sp;return ($warning$0$off0|0);
       }
       return 0|0;
      }
      function __ZN7Kss_Cpu12set_end_timeEl($this,$t) {
       $this = $this|0;
       $t = $t|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 516|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = (($2) + 72|0);
       $4 = HEAP32[$3>>2]|0;
       $5 = (($4) - ($t))|0;
       HEAP32[$3>>2] = $t;
       $6 = HEAP32[$1>>2]|0;
       $7 = (($6) + 76|0);
       $8 = HEAP32[$7>>2]|0;
       $9 = (($5) + ($8))|0;
       HEAP32[$7>>2] = $9;
       STACKTOP = sp;return;
      }
      function __ZN7Kss_EmuC2Ev($this) {
       $this = $this|0;
       var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 336|0);
       $2 = $1;
       __ZN7Kss_CpuC2Ev($2);
       $3 = ($this);
       __ZN11Classic_EmuC2Ev($3);
       $4 = $this;
       HEAP32[$4>>2] = (((42896) + 8|0));
       $5 = (($this) + 968|0);
       __ZN8Rom_DataILi8192EEC1Ev($5);
       $6 = (($this) + 66840|0);
       __ZN6Ay_ApuC2Ev($6);
       $7 = (($this) + 68128|0);
       __ZN7Scc_ApuC1Ev($7);
       $8 = (($this) + 68920|0);
       HEAP32[$8>>2] = 0;
       $9 = $this;
       __ZN8Gme_File8set_typeEPK11gme_type_t_($9,(43152));
       $10 = $this;
       __ZN9Music_Emu21set_silence_lookaheadEi($10,6);
       __ZN9Music_Emu15set_voice_namesEPKPKc($10,((43000)));
       __ZN11Classic_Emu15set_voice_typesEPKi($3,((43120)));
       $11 = (($this) + 68924|0);
       _memset(($11|0),-1,256)|0;
       STACKTOP = sp;return;
      }
      function __ZN7Scc_ApuC1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN7Scc_ApuC2Ev($this);
       STACKTOP = sp;return;
      }
      function __ZN7Kss_EmuD0Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       __ZN7Kss_EmuD2Ev($this);
       $1 = ($this);
       __ZN8Gme_FiledlEPv($1);
       STACKTOP = sp;return;
      }
      function __ZN7Kss_EmuD2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $this;
       HEAP32[$1>>2] = (((42896) + 8|0));
       $2 = $this;
       $3 = HEAP32[$2>>2]|0;
       $4 = (($3) + 8|0);
       $5 = HEAP32[$4>>2]|0;
       FUNCTION_TABLE_vi[$5 & 127]($this);
       $6 = (($this) + 968|0);
       __ZN8Rom_DataILi8192EED1Ev($6);
       $7 = ($this);
       __ZN11Classic_EmuD2Ev($7);
       STACKTOP = sp;return;
      }
      function __ZN7Kss_Emu6unloadEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 68920|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = ($2|0)==(0|0);
       if (!($3)) {
        $4 = $2;
        __ZdlPv($4);
       }
       HEAP32[$1>>2] = 0;
       $5 = $this;
       __ZN9Music_Emu6unloadEv($5);
       STACKTOP = sp;return;
      }
      function __ZNK7Kss_Emu11track_info_EP12track_info_ti($this,$out,u$0) {
       $this = $this|0;
       $out = $out|0;
       u$0 = u$0|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 992|0);
       __ZL15copy_kss_fieldsRKN7Kss_Emu8header_tEP12track_info_t($1,$out);
       STACKTOP = sp;return (0|0);
      }
      function __ZL15copy_kss_fieldsRKN7Kss_Emu8header_tEP12track_info_t($h,$out) {
       $h = $h|0;
       $out = $out|0;
       var $$ = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $system$0 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($h) + 15|0);
       $2 = HEAP8[$1]|0;
       $3 = $2&255;
       $4 = $3 & 2;
       $5 = ($4|0)==(0);
       if ($5) {
        $system$0 = (43560);
       } else {
        $6 = $3 & 4;
        $7 = ($6|0)!=(0);
        $$ = $7 ? (43712) : (43688);
        $system$0 = $$;
       }
       $8 = (($out) + 16|0);
       __ZN8Gme_File11copy_field_EPcPKc($8,$system$0);
       STACKTOP = sp;return;
      }
      function __ZN7Kss_Emu11update_gainEv($this) {
       $this = $this|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $g$0 = 0.0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $this;
       $2 = (+__ZNK9Music_Emu4gainEv($1));
       $3 = $2 * 1.39999999999999991118;
       $4 = (($this) + 1024|0);
       $5 = HEAP8[$4]|0;
       $6 = ($5<<24>>24)==(0);
       if ($6) {
        $g$0 = $3;
       } else {
        $7 = $3 * 1.5;
        $g$0 = $7;
       }
       $8 = (($this) + 66840|0);
       __ZN6Ay_Apu6volumeEd($8,$g$0);
       $9 = (($this) + 68128|0);
       __ZN7Scc_Apu6volumeEd($9,$g$0);
       $10 = (($this) + 68920|0);
       $11 = HEAP32[$10>>2]|0;
       $12 = ($11|0)==(0|0);
       if ($12) {
        STACKTOP = sp;return;
       }
       __ZN7Sms_Apu6volumeEd($11,$g$0);
       STACKTOP = sp;return;
      }
      function __ZN7Scc_Apu6volumeEd($this,$v) {
       $this = $this|0;
       $v = +$v;
       var $1 = 0, $2 = 0.0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 232|0);
       $2 = $v * 2.62451171874999978994E-6;
       __ZN10Blip_SynthILi8ELi1EE6volumeEd($1,$2);
       STACKTOP = sp;return;
      }
      function __ZN7Kss_Emu5load_ER11Data_Reader($this,$in) {
       $this = $this|0;
       $in = $in|0;
       var $$ = 0, $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
       var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
       var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
       sp = STACKTOP;
       $1 = (($this) + 992|0);
       dest=$1+0|0; stop=dest+32|0; do { HEAP8[dest]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));;
       $2 = (($this) + 968|0);
       $3 = (__ZN8Rom_DataILi8192EE4loadER11Data_ReaderiPvi($2,$in,16,$1,0)|0);
       $4 = ($3|0)==(0|0);
       if (!($4)) {
        $$0 = $3;
        STACKTOP = sp;return ($$0|0);
       }
       $5 = (__ZL16check_kss_headerPKv($1)|0);
       $6 = ($5|0)==(0|0);
       if (!($6)) {
        $$0 = $5;
        STACKTOP = sp;return ($$0|0);
       }
       $7 = (($this) + 995|0);
       $8 = HEAP8[$7]|0;
       $9 = ($8<<24>>24)==(67);
       do {
        if ($9) {
         $10 = (($this) + 1006|0);
         $11 = HEAP8[$10]|0;
         $12 = ($11<<24>>24)==(0);
         if (!($12)) {
          HEAP8[$10] = 0;
          $13 = $this;
          __ZN8Gme_File11set_warningEPKc($13,(43176));
         }
         $14 = (($this) + 1007|0);
         $15 = HEAP8[$14]|0;
         $16 = $15&255;
         $17 = $16 & 240;
         $18 = ($17|0)==(0);
         if ($18) {
          break;
         }
         $19 = $16 & 15;
         $20 = $19&255;
         HEAP8[$14] = $20;
         $21 = $this;
         __ZN8Gme_File11set_warningEPKc($21,(43176));
        } else {
         $22 = (($this) + 1008|0);
         $23 = (__ZNK8Rom_DataILi8192EE5beginEv($2)|0);
         $24 = (($this) + 1006|0);
         $25 = HEAP8[$24]|0;
         $26 = $25&255;
         $27 = (__ZL3minii309(16,$26)|0);
         _memcpy(($22|0),($23|0),($27|0))|0;
         $28 = HEAP8[$24]|0;
         $29 = ($28&255)>(16);
         if (!($29)) {
          break;
         }
         $30 = $this;
         __ZN8Gme_File11set_warningEPKc($30,(43176));
        }
       } while(0);
       $31 = (($this) + 1007|0);
       $32 = HEAP8[$31]|0;
       $33 = $32 & 9;
       $34 = ($33<<24>>24)==(0);
       if (!($34)) {
        $35 = $this;
        __ZN8Gme_File11set_warningEPKc($35,(43200));
       }
       $36 = (($this) + 1028|0);
       $37 = HEAP8[$31]|0;
       $38 = $37 & 4;
       $39 = ($38<<24>>24)==(0);
       $$ = $39 ? 49152 : 0;
       HEAP32[$36>>2] = $$;
       $40 = HEAP8[$31]|0;
       $41 = $40 & 2;
       $42 = ($41<<24>>24)==(0);
       do {
        if (!($42)) {
         $43 = (($this) + 68920|0);
         $44 = HEAP32[$43>>2]|0;
         $45 = ($44|0)==(0|0);
         if (!($45)) {
          break;
         }
         $46 = (__Znwj(1600)|0);
         $47 = $46;
         __ZN7Sms_ApuC2Ev($47);
         HEAP32[$43>>2] = $47;
         $48 = ($46|0)==(0|0);
         if ($48) {
          $$0 = (43224);
         } else {
          break;
         }
         STACKTOP = sp;return ($$0|0);
        }
       } while(0);
       $49 = $this;
       __ZN9Music_Emu15set_voice_countEi($49,8);
       $50 = ($this);
       $51 = (__ZN11Classic_Emu12setup_bufferEl($50,3579545)|0);
       $$0 = $51;
       STACKTOP = sp;return ($$0|0);
      }
      function __ZL16check_kss_headerPKv($header) {
       $header = $header|0;
       var $$ = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (_memcmp($header,(43544),4)|0);
       $2 = ($1|0)==(0);
       if ($2) {
        STACKTOP = sp;return (0|0);
       } else {
        $3 = (_memcmp($header,(43552),4)|0);
        $4 = ($3|0)==(0);
        $5 = HEAP32[(40024)>>2]|0;
        $$ = $4 ? 0 : $5;
        STACKTOP = sp;return ($$|0);
       }
       return 0|0;
      }
      function __ZL3minii309($x,$y) {
       $x = $x|0;
       $y = $y|0;
       var $1 = 0, $x$y = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($x|0)<($y|0);
       $x$y = $1 ? $x : $y;
       STACKTOP = sp;return ($x$y|0);
      }
      function __ZN7Kss_Emu9update_eqERK9blip_eq_t($this,$eq) {
       $this = $this|0;
       $eq = $eq|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 66840|0);
       __ZN6Ay_Apu9treble_eqERK9blip_eq_t($1,$eq);
       $2 = (($this) + 68128|0);
       __ZN7Scc_Apu9treble_eqERK9blip_eq_t($2,$eq);
       $3 = (($this) + 68920|0);
       $4 = HEAP32[$3>>2]|0;
       $5 = ($4|0)==(0|0);
       if ($5) {
        STACKTOP = sp;return;
       }
       __ZN7Sms_Apu9treble_eqERK9blip_eq_t($4,$eq);
       STACKTOP = sp;return;
      }
      function __ZN7Scc_Apu9treble_eqERK9blip_eq_t($this,$eq) {
       $this = $this|0;
       $eq = $eq|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 232|0);
       __ZN10Blip_SynthILi8ELi1EE9treble_eqERK9blip_eq_t($1,$eq);
       STACKTOP = sp;return;
      }
      function __ZN7Kss_Emu9set_voiceEiP11Blip_BufferS1_S1_($this,$i,$center,$left,$right) {
       $this = $this|0;
       $i = $i|0;
       $center = $center|0;
       $left = $left|0;
       $right = $right|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($i) + -3)|0;
       $2 = ($1|0)>(-1);
       if ($2) {
        $3 = (($this) + 68128|0);
        __ZN7Scc_Apu10osc_outputEiP11Blip_Buffer($3,$1,$center);
       } else {
        $4 = (($this) + 66840|0);
        __ZN6Ay_Apu10osc_outputEiP11Blip_Buffer($4,$i,$center);
       }
       $5 = (($this) + 68920|0);
       $6 = HEAP32[$5>>2]|0;
       $7 = ($6|0)!=(0|0);
       $8 = ($i|0)<(4);
       $or$cond = $7 & $8;
       if (!($or$cond)) {
        STACKTOP = sp;return;
       }
       __ZN7Sms_Apu10osc_outputEiP11Blip_BufferS1_S1_($6,$i,$center,$left,$right);
       STACKTOP = sp;return;
      }
      function __ZN7Scc_Apu10osc_outputEiP11Blip_Buffer($this,$index,$b) {
       $this = $this|0;
       $index = $index|0;
       $b = $b|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($index>>>0)<(5);
       if ($1) {
        $2 = ((($this) + ($index<<4)|0) + 12|0);
        HEAP32[$2>>2] = $b;
        STACKTOP = sp;return;
       } else {
        ___assert_fail(((43512)|0),((43400)|0),66,((43496)|0));
        // unreachable;
       }
      }
      function __ZN7Kss_Emu10set_tempo_Ed($this,$t) {
       $this = $this|0;
       $t = +$t;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 1007|0);
       $2 = HEAP8[$1]|0;
       $3 = $2 & 64;
       $4 = ($3<<24>>24)!=(0);
       $5 = $4 ? 71590.0 : 59659.0;
       $6 = $5 / $t;
       $7 = (~~(($6)));
       $8 = (($this) + 1036|0);
       HEAP32[$8>>2] = $7;
       STACKTOP = sp;return;
      }
      function __ZN7Kss_Emu12start_track_Ei($this,$track) {
       $this = $this|0;
       $track = $track|0;
       var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
       var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
       var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
       var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $sum = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = (__ZN11Classic_Emu12start_track_Ei($1,$track)|0);
       $3 = ($2|0)==(0|0);
       if (!($3)) {
        $$0 = $2;
        STACKTOP = sp;return ($$0|0);
       }
       $4 = (($this) + 1048|0);
       _memset(($4|0),-55,16384)|0;
       $5 = (($this) + 17432|0);
       _memset(($5|0),0,49408)|0;
       $6 = (($this) + 1049|0);
       dest=$6+0|0; src=(43240)+0|0; stop=dest+13|0; do { HEAP8[dest]=HEAP8[src]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));;
       $7 = (($this) + 1195|0);
       ;HEAP8[$7+0|0]=HEAP8[(43256)+0|0]|0;HEAP8[$7+1|0]=HEAP8[(43256)+1|0]|0;HEAP8[$7+2|0]=HEAP8[(43256)+2|0]|0;HEAP8[$7+3|0]=HEAP8[(43256)+3|0]|0;HEAP8[$7+4|0]=HEAP8[(43256)+4|0]|0;HEAP8[$7+5|0]=HEAP8[(43256)+5|0]|0;
       $8 = (($this) + 996|0);
       $9 = (__Z8get_le16PKv($8)|0);
       $10 = (($this) + 998|0);
       $11 = (__Z8get_le16PKv($10)|0);
       $12 = (($this) + 968|0);
       $13 = (__ZNK8Rom_DataILi8192EE9file_sizeEv($12)|0);
       $14 = (__ZL3minll310($11,$13)|0);
       $15 = (65536 - ($9))|0;
       $16 = (__ZL3minll310($14,$15)|0);
       $17 = ($16|0)==($11|0);
       if (!($17)) {
        $18 = $this;
        __ZN8Gme_File11set_warningEPKc($18,(43264));
       }
       $19 = ((($this) + ($9)|0) + 1048|0);
       $20 = (__ZNK8Rom_DataILi8192EE5beginEv($12)|0);
       $21 = (($this) + 1006|0);
       $22 = HEAP8[$21]|0;
       $23 = $22&255;
       $24 = (($20) + ($23)|0);
       _memcpy(($19|0),($24|0),($16|0))|0;
       $25 = HEAP8[$21]|0;
       $26 = $25&255;
       $sum = (($26) + ($16))|0;
       $27 = (0 - ($sum))|0;
       __ZN8Rom_DataILi8192EE8set_addrEl($12,$27);
       $28 = (__ZNK7Kss_Emu9bank_sizeEv($this)|0);
       $29 = (__ZNK8Rom_DataILi8192EE9file_sizeEv($12)|0);
       $30 = $16 ^ -1;
       $31 = (($28) + ($30))|0;
       $32 = (($31) + ($29))|0;
       $33 = (($32|0) / ($28|0))&-1;
       $34 = (($this) + 1005|0);
       $35 = HEAP8[$34]|0;
       $36 = $35&255;
       $37 = $36 & 127;
       $38 = (($this) + 1032|0);
       HEAP32[$38>>2] = $37;
       $39 = ($37|0)>($33|0);
       if ($39) {
        HEAP32[$38>>2] = $33;
        $40 = $this;
        __ZN8Gme_File11set_warningEPKc($40,(43288));
       }
       $41 = (($this) + 66583|0);
       HEAP8[$41] = -1;
       $42 = (($this) + 336|0);
       $43 = $42;
       $44 = (($this) + 69180|0);
       $45 = (($this) + 68924|0);
       __ZN7Kss_Cpu5resetEPvPKv($43,$44,$45);
       __ZN7Kss_Cpu7map_memEjmPvPKv($43,0,65536,$4,$4);
       $46 = (($this) + 66840|0);
       __ZN6Ay_Apu5resetEv($46);
       $47 = (($this) + 68128|0);
       __ZN7Scc_Apu5resetEv($47);
       $48 = (($this) + 68920|0);
       $49 = HEAP32[$48>>2]|0;
       $50 = ($49|0)==(0|0);
       if (!($50)) {
        __ZN7Sms_Apu5resetEji($49,0,0);
       }
       $51 = (($this) + 936|0);
       $52 = (($this) + 938|0);
       $53 = $52;
       HEAP16[$53>>1] = -3201;
       $54 = (($this) + 63383|0);
       HEAP8[$54] = -1;
       $55 = HEAP16[$53>>1]|0;
       $56 = (($55) + -1)<<16>>16;
       HEAP16[$53>>1] = $56;
       $57 = $56&65535;
       $58 = ((($this) + ($57)|0) + 1048|0);
       HEAP8[$58] = -1;
       $59 = $track&255;
       $60 = (($this) + 950|0);
       HEAP8[$60] = $59;
       $61 = (($this) + 1000|0);
       $62 = (__Z8get_le16PKv($61)|0);
       $63 = $62&65535;
       $64 = $51;
       HEAP16[$64>>1] = $63;
       $65 = (($this) + 1036|0);
       $66 = HEAP32[$65>>2]|0;
       $67 = (($this) + 1040|0);
       HEAP32[$67>>2] = $66;
       $68 = (($this) + 1024|0);
       HEAP8[$68] = 0;
       $69 = (($this) + 1025|0);
       HEAP8[$69] = 0;
       __ZN7Kss_Emu11update_gainEv($this);
       $70 = (($this) + 1044|0);
       HEAP32[$70>>2] = 0;
       $$0 = 0;
       STACKTOP = sp;return ($$0|0);
      }
      function __ZL3minll310($x,$y) {
       $x = $x|0;
       $y = $y|0;
       var $1 = 0, $x$y = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($x|0)<($y|0);
       $x$y = $1 ? $x : $y;
       STACKTOP = sp;return ($x$y|0);
      }
      function __ZNK7Kss_Emu9bank_sizeEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 1005|0);
       $2 = HEAP8[$1]|0;
       $3 = $2&255;
       $4 = $3 >>> 7;
       $5 = 16384 >>> $4;
       STACKTOP = sp;return ($5|0);
      }
      function __ZN7Scc_Apu5resetEv($this) {
       $this = $this|0;
       var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 80|0);
       HEAP32[$1>>2] = 0;
       $2 = $this;
       ;HEAP32[$2+0>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
       $3 = (($this) + 16|0);
       $4 = $3;
       ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
       $5 = (($this) + 32|0);
       $6 = $5;
       ;HEAP32[$6+0>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
       $7 = (($this) + 48|0);
       $8 = $7;
       ;HEAP32[$8+0>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
       $9 = (($this) + 64|0);
       $10 = $9;
       ;HEAP32[$10+0>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
       $11 = (($this) + 84|0);
       _memset(($11|0),0,144)|0;
       STACKTOP = sp;return;
      }
      function __ZN7Kss_Emu8set_bankEii($this,$logical,$physical) {
       $this = $this|0;
       $logical = $logical|0;
       $physical = $physical|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
       var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $addr$0 = 0, $offset$01 = 0, $offset$01$phi = 0, $or$cond = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (__ZNK7Kss_Emu9bank_sizeEv($this)|0);
       $2 = ($logical|0)!=(0);
       $3 = ($1|0)==(8192);
       $or$cond = $2 & $3;
       $addr$0 = $or$cond ? 40960 : 32768;
       $4 = (($this) + 1004|0);
       $5 = HEAP8[$4]|0;
       $6 = $5&255;
       $7 = (($physical) - ($6))|0;
       $8 = (($this) + 1032|0);
       $9 = HEAP32[$8>>2]|0;
       $10 = ($7>>>0)<($9>>>0);
       if (!($10)) {
        $11 = ((($this) + ($addr$0)|0) + 1048|0);
        $12 = (($this) + 336|0);
        $13 = $12;
        __ZN7Kss_Cpu7map_memEjmPvPKv($13,$addr$0,$1,$11,$11);
        STACKTOP = sp;return;
       }
       $14 = Math_imul($7, $1)|0;
       $15 = ($1|0)==(0);
       if ($15) {
        STACKTOP = sp;return;
       }
       $16 = (($this) + 336|0);
       $17 = $16;
       $18 = (($this) + 69180|0);
       $19 = (($this) + 968|0);
       $offset$01 = 0;
       while(1) {
        $20 = (($offset$01) + ($addr$0))|0;
        $21 = (($offset$01) + ($14))|0;
        $22 = (__ZN8Rom_DataILi8192EE7at_addrEl($19,$21)|0);
        __ZN7Kss_Cpu7map_memEjmPvPKv($17,$20,8192,$18,$22);
        $23 = (($offset$01) + 8192)|0;
        $24 = ($23>>>0)<($1>>>0);
        if ($24) {
         $offset$01$phi = $23;$offset$01 = $offset$01$phi;
        } else {
         break;
        }
       }
       STACKTOP = sp;return;
      }
      function __ZN7Kss_Emu9cpu_writeEji($this,$addr,$data) {
       $this = $this|0;
       $addr = $addr|0;
       $data = $data|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $data & 255;
       if ((($addr|0) == 36864)) {
        __ZN7Kss_Emu8set_bankEii($this,0,$1);
        STACKTOP = sp;return;
       } else if ((($addr|0) == 45056)) {
        __ZN7Kss_Emu8set_bankEii($this,1,$1);
        STACKTOP = sp;return;
       } else {
        $2 = $addr & 57343;
        $3 = $2 ^ 38912;
        $4 = ($3>>>0)<(144);
        if (!($4)) {
         STACKTOP = sp;return;
        }
        $5 = (($this) + 1024|0);
        HEAP8[$5] = 1;
        $6 = (($this) + 68128|0);
        $7 = (($this) + 336|0);
        $8 = $7;
        $9 = (__ZNK7Kss_Cpu4timeEv($8)|0);
        __ZN7Scc_Apu5writeEiii($6,$9,$3,$1);
        STACKTOP = sp;return;
       }
      }
      function __ZN7Scc_Apu5writeEiii($this,$time,$addr,$data) {
       $this = $this|0;
       $time = $time|0;
       $addr = $addr|0;
       $data = $data|0;
       var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($addr>>>0)<(144);
       if ($1) {
        __ZN7Scc_Apu9run_untilEi($this,$time);
        $2 = $data&255;
        $3 = ((($this) + ($addr)|0) + 84|0);
        HEAP8[$3] = $2;
        STACKTOP = sp;return;
       } else {
        ___assert_fail(((43456)|0),((43400)|0),72,((43488)|0));
        // unreachable;
       }
      }
      function __ZNK7Kss_Cpu4timeEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 516|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = (($2) + 76|0);
       $4 = HEAP32[$3>>2]|0;
       $5 = (($2) + 72|0);
       $6 = HEAP32[$5>>2]|0;
       $7 = (($6) + ($4))|0;
       STACKTOP = sp;return ($7|0);
      }
      function __Z13kss_cpu_writeP7Kss_Cpuji($cpu,$addr,$data) {
       $cpu = $cpu|0;
       $addr = $addr|0;
       $data = $data|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $data&255;
       $2 = (__ZN7Kss_Cpu5writeEj($cpu,$addr)|0);
       HEAP8[$2] = $1;
       $3 = (($cpu) + 692|0);
       $4 = $3;
       $5 = HEAP32[$4>>2]|0;
       $6 = $5 & $addr;
       $7 = ($6|0)==(32768);
       if (!($7)) {
        STACKTOP = sp;return;
       }
       $8 = (($cpu) + -336|0);
       $9 = $8;
       __ZN7Kss_Emu9cpu_writeEji($9,$addr,$data);
       STACKTOP = sp;return;
      }
      function __ZN7Kss_Cpu5writeEj($this,$addr) {
       $this = $this|0;
       $addr = $addr|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $addr >>> 13;
       $2 = (($this) + 516|0);
       $3 = HEAP32[$2>>2]|0;
       $4 = ((($3) + ($1<<2)|0) + 36|0);
       $5 = HEAP32[$4>>2]|0;
       $6 = $addr & 8191;
       $7 = (($5) + ($6)|0);
       STACKTOP = sp;return ($7|0);
      }
      function __Z11kss_cpu_outP7Kss_Cpulji($cpu,$time,$addr,$data) {
       $cpu = $cpu|0;
       $time = $time|0;
       $addr = $addr|0;
       $data = $data|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
       var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $data & 255;
       $2 = $addr & 255;
       L1: do {
        switch ($2|0) {
        case 127: case 126:  {
         $19 = (($cpu) + 68584|0);
         $20 = $19;
         $21 = HEAP32[$20>>2]|0;
         $22 = ($21|0)==(0|0);
         if ($22) {
          break L1;
         }
         __ZN7Sms_Apu10write_dataEii($21,$time,$1);
         break;
        }
        case 254:  {
         $23 = (($cpu) + -336|0);
         $24 = $23;
         __ZN7Kss_Emu8set_bankEii($24,0,$1);
         break;
        }
        case 160:  {
         $3 = $data & 15;
         $4 = (($cpu) + 708|0);
         $5 = $4;
         HEAP32[$5>>2] = $3;
         break;
        }
        case 161:  {
         $6 = (($cpu) + 66504|0);
         $7 = $6;
         $8 = (($cpu) + 708|0);
         $9 = $8;
         $10 = HEAP32[$9>>2]|0;
         __ZN6Ay_Apu5writeEiii($7,$time,$10,$1);
         break;
        }
        case 6:  {
         $11 = (($cpu) + 68584|0);
         $12 = $11;
         $13 = HEAP32[$12>>2]|0;
         $14 = ($13|0)==(0|0);
         if ($14) {
          break L1;
         }
         $15 = (($cpu) + 671|0);
         $16 = HEAP8[$15]|0;
         $17 = $16 & 4;
         $18 = ($17<<24>>24)==(0);
         if ($18) {
          break L1;
         }
         __ZN7Sms_Apu14write_ggstereoEii($13,$time,$1);
         break;
        }
        default: {
        }
        }
       } while(0);
       STACKTOP = sp;return;
      }
      function __Z10kss_cpu_inP7Kss_Cpulj(u$0,u$1,$addr) {
       u$0 = u$0|0;
       u$1 = u$1|0;
       $addr = $addr|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       STACKTOP = sp;return 0;
      }
      function __ZN7Kss_Emu10run_clocksERii($this,$duration,u$0) {
       $this = $this|0;
       $duration = $duration|0;
       u$0 = u$0|0;
       var $$lcssa1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
       var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
       var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 336|0);
       $2 = $1;
       $3 = (__ZNK7Kss_Cpu4timeEv($2)|0);
       $4 = HEAP32[$duration>>2]|0;
       $5 = ($3|0)<($4|0);
       if ($5) {
        $6 = (($this) + 1040|0);
        $7 = (($this) + 936|0);
        $8 = $7;
        $9 = (($this) + 1036|0);
        $10 = (($this) + 1025|0);
        $11 = (($this) + 1024|0);
        $12 = (($this) + 938|0);
        $13 = $12;
        $14 = (($this) + 1002|0);
        $15 = $4;
        while(1) {
         $16 = HEAP32[$6>>2]|0;
         $17 = (__ZL3minii309($15,$16)|0);
         (__ZN7Kss_Cpu3runEl($2,$17)|0);
         $18 = HEAP16[$8>>1]|0;
         $19 = ($18<<16>>16)==(-1);
         if ($19) {
          __ZN7Kss_Cpu8set_timeEl($2,$17);
         }
         $20 = (__ZNK7Kss_Cpu4timeEv($2)|0);
         $21 = HEAP32[$6>>2]|0;
         $22 = ($20|0)<($21|0);
         do {
          if (!($22)) {
           $23 = HEAP32[$9>>2]|0;
           $24 = (($23) + ($21))|0;
           HEAP32[$6>>2] = $24;
           $25 = HEAP16[$8>>1]|0;
           $26 = ($25<<16>>16)==(-1);
           if (!($26)) {
            break;
           }
           $30 = HEAP8[$10]|0;
           $31 = ($30<<24>>24)==(0);
           do {
            if ($31) {
             HEAP8[$10] = 1;
             $32 = HEAP8[$11]|0;
             $33 = ($32<<24>>24)==(0);
             if ($33) {
              break;
             }
             __ZN7Kss_Emu11update_gainEv($this);
            }
           } while(0);
           $34 = HEAP16[$13>>1]|0;
           $35 = (($34) + -1)<<16>>16;
           HEAP16[$13>>1] = $35;
           $36 = $35&65535;
           $37 = ((($this) + ($36)|0) + 1048|0);
           HEAP8[$37] = -1;
           $38 = HEAP16[$13>>1]|0;
           $39 = (($38) + -1)<<16>>16;
           HEAP16[$13>>1] = $39;
           $40 = $39&65535;
           $41 = ((($this) + ($40)|0) + 1048|0);
           HEAP8[$41] = -1;
           $42 = (__Z8get_le16PKv($14)|0);
           $43 = $42&65535;
           HEAP16[$8>>1] = $43;
          }
         } while(0);
         $27 = (__ZNK7Kss_Cpu4timeEv($2)|0);
         $28 = HEAP32[$duration>>2]|0;
         $29 = ($27|0)<($28|0);
         if ($29) {
          $15 = $28;
         } else {
          $$lcssa1 = $27;
          break;
         }
        }
       } else {
        $$lcssa1 = $3;
       }
       HEAP32[$duration>>2] = $$lcssa1;
       $44 = (($this) + 1040|0);
       $45 = HEAP32[$44>>2]|0;
       $46 = (($45) - ($$lcssa1))|0;
       HEAP32[$44>>2] = $46;
       $47 = HEAP32[$duration>>2]|0;
       $48 = (0 - ($47))|0;
       __ZN7Kss_Cpu11adjust_timeEi($2,$48);
       $49 = (($this) + 66840|0);
       $50 = HEAP32[$duration>>2]|0;
       __ZN6Ay_Apu9end_frameEi($49,$50);
       $51 = (($this) + 68128|0);
       $52 = HEAP32[$duration>>2]|0;
       __ZN7Scc_Apu9end_frameEi($51,$52);
       $53 = (($this) + 68920|0);
       $54 = HEAP32[$53>>2]|0;
       $55 = ($54|0)==(0|0);
       if ($55) {
        STACKTOP = sp;return (0|0);
       }
       $56 = HEAP32[$duration>>2]|0;
       __ZN7Sms_Apu9end_frameEi($54,$56);
       STACKTOP = sp;return (0|0);
      }
      function __ZN7Kss_Cpu8set_timeEl($this,$t) {
       $this = $this|0;
       $t = $t|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 516|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = (($2) + 72|0);
       $4 = HEAP32[$3>>2]|0;
       $5 = (($t) - ($4))|0;
       $6 = (($2) + 76|0);
       HEAP32[$6>>2] = $5;
       STACKTOP = sp;return;
      }
      function __ZN7Kss_Cpu11adjust_timeEi($this,$delta) {
       $this = $this|0;
       $delta = $delta|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 516|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = (($2) + 76|0);
       $4 = HEAP32[$3>>2]|0;
       $5 = (($4) + ($delta))|0;
       HEAP32[$3>>2] = $5;
       STACKTOP = sp;return;
      }
      function __ZN7Scc_Apu9end_frameEi($this,$end_time) {
       $this = $this|0;
       $end_time = $end_time|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 80|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = ($2|0)<($end_time|0);
       if ($3) {
        __ZN7Scc_Apu9run_untilEi($this,$end_time);
       }
       $4 = HEAP32[$1>>2]|0;
       $5 = (($4) - ($end_time))|0;
       HEAP32[$1>>2] = $5;
       $6 = ($5|0)>(-1);
       if ($6) {
        STACKTOP = sp;return;
       } else {
        ___assert_fail(((43384)|0),((43400)|0),82,((43440)|0));
        // unreachable;
       }
      }
      function __ZL11new_kss_emuv() {
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (__ZN8Gme_FilenwEj(77376)|0);
       $2 = ($1|0)==(0|0);
       if ($2) {
        $4 = 0;
       } else {
        $3 = $1;
        __ZN7Kss_EmuC2Ev($3);
        $4 = $3;
       }
       $5 = $4;
       STACKTOP = sp;return ($5|0);
      }
      function __ZL12new_kss_filev() {
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (__ZN8Gme_FilenwEj(336)|0);
       $2 = ($1|0)==(0|0);
       if ($2) {
        $4 = 0;
       } else {
        $3 = $1;
        __ZN8Kss_FileC1Ev($3);
        $4 = $3;
       }
       $5 = $4;
       STACKTOP = sp;return ($5|0);
      }
      function __ZN8Kss_FileC1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN8Kss_FileC2Ev($this);
       STACKTOP = sp;return;
      }
      function __ZN8Kss_FileC2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $this;
       __ZN9Gme_Info_C2Ev($1);
       $2 = $this;
       HEAP32[$2>>2] = (((43576) + 8|0));
       $3 = $this;
       __ZN8Gme_File8set_typeEPK11gme_type_t_($3,(43152));
       STACKTOP = sp;return;
      }
      function __ZN8Kss_FileD1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN8Kss_FileD2Ev($this);
       STACKTOP = sp;return;
      }
      function __ZN8Kss_FileD0Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       __ZN8Kss_FileD1Ev($this);
       $1 = ($this);
       __ZN8Gme_FiledlEPv($1);
       STACKTOP = sp;return;
      }
      function __ZN8Kss_File5load_ER11Data_Reader($this,$in) {
       $this = $this|0;
       $in = $in|0;
       var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $in;
       $2 = HEAP32[$1>>2]|0;
       $3 = (($2) + 12|0);
       $4 = HEAP32[$3>>2]|0;
       $5 = (($this) + 316|0);
       $6 = (FUNCTION_TABLE_iiii[$4 & 63]($in,$5,16)|0);
       $7 = ($6|0)==(0|0);
       if ($7) {
        $11 = (__ZL16check_kss_headerPKv($5)|0);
        $$0 = $11;
        STACKTOP = sp;return ($$0|0);
       } else {
        $8 = ($6|0)==((37504)|0);
        $9 = HEAP32[(40024)>>2]|0;
        $10 = $8 ? $9 : $6;
        $$0 = $10;
        STACKTOP = sp;return ($$0|0);
       }
       return 0|0;
      }
      function __ZNK8Kss_File11track_info_EP12track_info_ti($this,$out,u$0) {
       $this = $this|0;
       $out = $out|0;
       u$0 = u$0|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 316|0);
       __ZL15copy_kss_fieldsRKN7Kss_Emu8header_tEP12track_info_t($1,$out);
       STACKTOP = sp;return (0|0);
      }
      function __ZN8Kss_FileD2Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $this;
       __ZN9Gme_Info_D2Ev($1);
       STACKTOP = sp;return;
      }
      function __ZN7Scc_ApuC2Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 232|0);
       __ZN10Blip_SynthILi8ELi1EEC1Ev($1);
       __ZN7Scc_Apu6outputEP11Blip_Buffer($this,0);
       STACKTOP = sp;return;
      }
      function __ZN7Scc_Apu6outputEP11Blip_Buffer($this,$buf) {
       $this = $this|0;
       $buf = $buf|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 12|0);
       HEAP32[$1>>2] = $buf;
       $2 = (($this) + 28|0);
       HEAP32[$2>>2] = $buf;
       $3 = (($this) + 44|0);
       HEAP32[$3>>2] = $buf;
       $4 = (($this) + 60|0);
       HEAP32[$4>>2] = $buf;
       $5 = (($this) + 76|0);
       HEAP32[$5>>2] = $buf;
       STACKTOP = sp;return;
      }
      function __ZN7Scc_Apu9run_untilEi($this,$end_time) {
       $this = $this|0;
       $end_time = $end_time|0;
       var $$sum = 0, $$sum$ = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
       var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
       var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
       var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
       var $80 = 0, $81 = 0, $9 = 0, $exitcond = 0, $index$05 = 0, $last_wave$0 = 0, $last_wave$1 = 0, $phase$0 = 0, $phase$0$in = 0, $phase$0$in$in = 0, $phase$0$in$in$phi = 0, $time$0 = 0, $time$1 = 0, $volume$0 = 0, $wave$0$sum1 = 0, $wave$0$sum2 = 0, $wave$0$sum3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 227|0);
       $2 = (($this) + 80|0);
       $3 = (($this) + 232|0);
       $4 = (($this) + 232|0);
       $5 = (($this) + 80|0);
       $index$05 = 0;
       while(1) {
        $6 = ((($this) + ($index$05<<4)|0) + 12|0);
        $7 = HEAP32[$6>>2]|0;
        $8 = ($7|0)==(0|0);
        if (!($8)) {
         __ZN11Blip_Buffer12set_modifiedEv($7);
         $9 = $index$05 << 1;
         $10 = (($9) + 128)|0;
         $11 = (($9) + 129)|0;
         $12 = ((($this) + ($11)|0) + 84|0);
         $13 = HEAP8[$12]|0;
         $14 = $13&255;
         $15 = $14 << 8;
         $16 = $15 & 3840;
         $17 = ((($this) + ($10)|0) + 84|0);
         $18 = HEAP8[$17]|0;
         $19 = $18&255;
         $20 = $16 | $19;
         $21 = (($20) + 1)|0;
         $22 = HEAP8[$1]|0;
         $23 = $22&255;
         $24 = 1 << $index$05;
         $25 = $23 & $24;
         $26 = ($25|0)==(0);
         do {
          if ($26) {
           $volume$0 = 0;
          } else {
           $27 = (__ZNK11Blip_Buffer10clock_rateEv($7)|0);
           $28 = (($27) + 524288)|0;
           $29 = $28 >>> 18;
           $30 = ($21>>>0)>($29>>>0);
           if (!($30)) {
            $volume$0 = 0;
            break;
           }
           $31 = (($index$05) + 138)|0;
           $32 = ((($this) + ($31)|0) + 84|0);
           $33 = HEAP8[$32]|0;
           $34 = $33&255;
           $35 = $34 << 3;
           $36 = $35 & 120;
           $volume$0 = $36;
          }
         } while(0);
         $37 = $index$05 << 5;
         $38 = ($index$05|0)==(4);
         $$sum = (($37) + -32)|0;
         $$sum$ = $38 ? $$sum : $37;
         $39 = ((($this) + ($index$05<<4)|0) + 4|0);
         $40 = HEAP32[$39>>2]|0;
         $wave$0$sum3 = (($40) + ($$sum$))|0;
         $41 = ((($this) + ($wave$0$sum3)|0) + 84|0);
         $42 = HEAP8[$41]|0;
         $43 = $42 << 24 >> 24;
         $44 = Math_imul($43, $volume$0)|0;
         $45 = ((($this) + ($index$05<<4)|0) + 8|0);
         $46 = HEAP32[$45>>2]|0;
         $47 = ($44|0)==($46|0);
         if (!($47)) {
          $48 = (($44) - ($46))|0;
          HEAP32[$45>>2] = $44;
          $49 = HEAP32[$5>>2]|0;
          __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($4,$49,$48,$7);
         }
         $50 = HEAP32[$2>>2]|0;
         $51 = (($this) + ($index$05<<4)|0);
         $52 = HEAP32[$51>>2]|0;
         $53 = (($52) + ($50))|0;
         $54 = ($53|0)<($end_time|0);
         do {
          if ($54) {
           $55 = ($volume$0|0)==(0);
           if ($55) {
            $56 = (($20) + ($end_time))|0;
            $57 = (($56) - ($53))|0;
            $58 = (($57|0) / ($21|0))&-1;
            $59 = HEAP32[$39>>2]|0;
            $60 = (($59) + ($58))|0;
            $61 = $60 & 31;
            HEAP32[$39>>2] = $61;
            $62 = Math_imul($58, $21)|0;
            $63 = (($62) + ($53))|0;
            $time$1 = $63;
            break;
           }
           $64 = HEAP32[$39>>2]|0;
           $wave$0$sum2 = (($64) + ($$sum$))|0;
           $65 = ((($this) + ($wave$0$sum2)|0) + 84|0);
           $66 = HEAP8[$65]|0;
           $67 = $66 << 24 >> 24;
           $last_wave$0 = $67;$phase$0$in$in = $64;$time$0 = $53;
           while(1) {
            $phase$0$in = (($phase$0$in$in) + 1)|0;
            $phase$0 = $phase$0$in & 31;
            $wave$0$sum1 = $phase$0 | $$sum$;
            $68 = ((($this) + ($wave$0$sum1)|0) + 84|0);
            $69 = HEAP8[$68]|0;
            $70 = $69 << 24 >> 24;
            $71 = ($70|0)==($last_wave$0|0);
            if ($71) {
             $last_wave$1 = $last_wave$0;
            } else {
             $72 = (($70) - ($last_wave$0))|0;
             $73 = Math_imul($72, $volume$0)|0;
             __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($3,$time$0,$73,$7);
             $last_wave$1 = $70;
            }
            $74 = (($time$0) + ($21))|0;
            $75 = ($74|0)<($end_time|0);
            if ($75) {
             $phase$0$in$in$phi = $phase$0;$last_wave$0 = $last_wave$1;$time$0 = $74;$phase$0$in$in = $phase$0$in$in$phi;
            } else {
             break;
            }
           }
           HEAP32[$39>>2] = $phase$0;
           $76 = HEAP8[$68]|0;
           $77 = $76 << 24 >> 24;
           $78 = Math_imul($77, $volume$0)|0;
           HEAP32[$45>>2] = $78;
           $time$1 = $74;
          } else {
           $time$1 = $53;
          }
         } while(0);
         $79 = (($time$1) - ($end_time))|0;
         HEAP32[$51>>2] = $79;
        }
        $80 = (($index$05) + 1)|0;
        $exitcond = ($80|0)==(5);
        if ($exitcond) {
         break;
        } else {
         $index$05 = $80;
        }
       }
       $81 = (($this) + 80|0);
       HEAP32[$81>>2] = $end_time;
       STACKTOP = sp;return;
      }
      function __ZN13blargg_vectorIcE6resizeEj($this,$n) {
       $this = $this|0;
       $n = $n|0;
       var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $or$cond = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = HEAP32[$1>>2]|0;
       $3 = (_realloc($2,$n)|0);
       $4 = ($3|0)!=(0|0);
       $5 = ($n|0)==(0);
       $or$cond = $4 | $5;
       if (!($or$cond)) {
        $$0 = (43728);
        STACKTOP = sp;return ($$0|0);
       }
       HEAP32[$1>>2] = $3;
       $6 = (($this) + 4|0);
       HEAP32[$6>>2] = $n;
       $$0 = 0;
       STACKTOP = sp;return ($$0|0);
      }
      function __Z13from_hex_chari($h) {
       $h = $h|0;
       var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($h) + -48)|0;
       $2 = ($1>>>0)>(9);
       if ($2) {
        $3 = (($h) + 191)|0;
        $4 = $3 & 223;
        $5 = (($4) + 10)|0;
        $$0 = $5;
       } else {
        $$0 = $1;
       }
       STACKTOP = sp;return ($$0|0);
      }
      function __ZN12Multi_BufferC2Ei($this,$spf) {
       $this = $this|0;
       $spf = $spf|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       HEAP32[$1>>2] = ((((43744) + 8|0)));
       $2 = (($this) + 16|0);
       HEAP32[$2>>2] = $spf;
       $3 = (($this) + 12|0);
       HEAP32[$3>>2] = 0;
       $4 = (($this) + 8|0);
       HEAP32[$4>>2] = 0;
       $5 = (($this) + 4|0);
       HEAP32[$5>>2] = 1;
       STACKTOP = sp;return;
      }
      function __ZN12Multi_Buffer17set_channel_countEi($this,u$0) {
       $this = $this|0;
       u$0 = u$0|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       STACKTOP = sp;return (0|0);
      }
      function __ZN13Stereo_BufferC2Ev($this) {
       $this = $this|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $5$phi = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       __ZN12Multi_BufferC2Ei($1,2);
       $2 = ($this);
       HEAP32[$2>>2] = ((((43800) + 8|0)));
       $3 = (($this) + 20|0);
       $4 = (($this) + 152|0);
       $5 = $3;
       while(1) {
        __ZN11Blip_BufferC2Ev($5);
        $6 = (($5) + 44|0);
        $7 = ($6|0)==($4|0);
        if ($7) {
         break;
        } else {
         $5$phi = $6;$5 = $5$phi;
        }
       }
       $8 = (($this) + 152|0);
       HEAP32[$8>>2] = $3;
       $9 = (($this) + 64|0);
       $10 = (($this) + 156|0);
       HEAP32[$10>>2] = $9;
       $11 = (($this) + 108|0);
       $12 = (($this) + 160|0);
       HEAP32[$12>>2] = $11;
       STACKTOP = sp;return;
      }
      function __ZN13Stereo_BufferD0Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       __ZN13Stereo_BufferD2Ev($this);
       $1 = $this;
       __ZN12Multi_BufferdlEPv($1);
       STACKTOP = sp;return;
      }
      function __ZN13Stereo_BufferD2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $4$phi = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       HEAP32[$1>>2] = ((((43800) + 8|0)));
       $2 = (($this) + 20|0);
       $3 = (($this) + 152|0);
       $4 = $3;
       while(1) {
        $5 = (($4) + -44|0);
        __ZN11Blip_BufferD2Ev($5);
        $6 = ($5|0)==($2|0);
        if ($6) {
         break;
        } else {
         $4$phi = $5;$4 = $4$phi;
        }
       }
       STACKTOP = sp;return;
      }
      function __ZN13Stereo_Buffer15set_sample_rateEli($this,$rate,$msec) {
       $this = $this|0;
       $rate = $rate|0;
       $msec = $msec|0;
       var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, $i$01$phi = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $i$01 = 0;
       while(1) {
        $2 = ((($this) + (($i$01*44)|0)|0) + 20|0);
        $3 = (__ZN11Blip_Buffer15set_sample_rateEli($2,$rate,$msec)|0);
        $4 = ($3|0)==(0|0);
        $5 = (($i$01) + 1)|0;
        if (!($4)) {
         $$0 = $3;
         label = 5;
         break;
        }
        $1 = ($5|0)<(3);
        if ($1) {
         $i$01$phi = $5;$i$01 = $i$01$phi;
        } else {
         break;
        }
       }
       if ((label|0) == 5) {
        STACKTOP = sp;return ($$0|0);
       }
       $6 = ($this);
       $7 = (($this) + 20|0);
       $8 = (__ZNK11Blip_Buffer11sample_rateEv($7)|0);
       $9 = (__ZNK11Blip_Buffer6lengthEv($7)|0);
       (__ZN12Multi_Buffer15set_sample_rateEli($6,$8,$9)|0);
       $$0 = 0;
       STACKTOP = sp;return ($$0|0);
      }
      function __ZN13Stereo_Buffer10clock_rateEl($this,$rate) {
       $this = $this|0;
       $rate = $rate|0;
       var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 20|0);
       __ZN11Blip_Buffer10clock_rateEl($1,$rate);
       $2 = (($this) + 64|0);
       __ZN11Blip_Buffer10clock_rateEl($2,$rate);
       $3 = (($this) + 108|0);
       __ZN11Blip_Buffer10clock_rateEl($3,$rate);
       STACKTOP = sp;return;
      }
      function __ZN13Stereo_Buffer9bass_freqEi($this,$bass) {
       $this = $this|0;
       $bass = $bass|0;
       var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 20|0);
       __ZN11Blip_Buffer9bass_freqEi($1,$bass);
       $2 = (($this) + 64|0);
       __ZN11Blip_Buffer9bass_freqEi($2,$bass);
       $3 = (($this) + 108|0);
       __ZN11Blip_Buffer9bass_freqEi($3,$bass);
       STACKTOP = sp;return;
      }
      function __ZN13Stereo_Buffer5clearEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 164|0);
       HEAP32[$1>>2] = 0;
       $2 = (($this) + 168|0);
       HEAP32[$2>>2] = 0;
       $3 = (($this) + 20|0);
       __ZN11Blip_Buffer5clearEi($3,1);
       $4 = (($this) + 64|0);
       __ZN11Blip_Buffer5clearEi($4,1);
       $5 = (($this) + 108|0);
       __ZN11Blip_Buffer5clearEi($5,1);
       STACKTOP = sp;return;
      }
      function __ZN13Stereo_Buffer9end_frameEi($this,$clock_count) {
       $this = $this|0;
       $clock_count = $clock_count|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 164|0);
       HEAP32[$1>>2] = 0;
       $2 = (($this) + 20|0);
       $3 = (__ZN11Blip_Buffer14clear_modifiedEv($2)|0);
       $4 = HEAP32[$1>>2]|0;
       $5 = $4 | $3;
       HEAP32[$1>>2] = $5;
       __ZN11Blip_Buffer9end_frameEi($2,$clock_count);
       $6 = (($this) + 64|0);
       $7 = (__ZN11Blip_Buffer14clear_modifiedEv($6)|0);
       $8 = $7 << 1;
       $9 = HEAP32[$1>>2]|0;
       $10 = $9 | $8;
       HEAP32[$1>>2] = $10;
       __ZN11Blip_Buffer9end_frameEi($6,$clock_count);
       $11 = (($this) + 108|0);
       $12 = (__ZN11Blip_Buffer14clear_modifiedEv($11)|0);
       $13 = $12 << 2;
       $14 = HEAP32[$1>>2]|0;
       $15 = $14 | $13;
       HEAP32[$1>>2] = $15;
       __ZN11Blip_Buffer9end_frameEi($11,$clock_count);
       STACKTOP = sp;return;
      }
      function __ZN13Stereo_Buffer12read_samplesEPsl($this,$out,$count) {
       $this = $this|0;
       $out = $out|0;
       $count = $count|0;
       var $$ = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
       var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $count & 1;
       $2 = ($1|0)==(0);
       if (!($2)) {
        ___assert_fail(((43856)|0),((43872)|0),108,((43912)|0));
        // unreachable;
       }
       $3 = $count >>> 1;
       $4 = (($this) + 20|0);
       $5 = (__ZNK11Blip_Buffer13samples_availEv($4)|0);
       $6 = ($3|0)>($5|0);
       $$ = $6 ? $5 : $3;
       $7 = ($$|0)==(0);
       if ($7) {
        $25 = $$ << 1;
        STACKTOP = sp;return ($25|0);
       }
       $8 = (($this) + 164|0);
       $9 = HEAP32[$8>>2]|0;
       $10 = (($this) + 168|0);
       $11 = HEAP32[$10>>2]|0;
       $12 = $11 | $9;
       $13 = ($12|0)<(2);
       do {
        if ($13) {
         __ZN13Stereo_Buffer8mix_monoEPsl($this,$out,$$);
         __ZN11Blip_Buffer14remove_samplesEl($4,$$);
         $14 = (($this) + 64|0);
         __ZN11Blip_Buffer14remove_silenceEl($14,$$);
         $15 = (($this) + 108|0);
         __ZN11Blip_Buffer14remove_silenceEl($15,$$);
        } else {
         $16 = $12 & 1;
         $17 = ($16|0)==(0);
         if ($17) {
          __ZN13Stereo_Buffer20mix_stereo_no_centerEPsl($this,$out,$$);
          __ZN11Blip_Buffer14remove_silenceEl($4,$$);
          $20 = (($this) + 64|0);
          __ZN11Blip_Buffer14remove_samplesEl($20,$$);
          $21 = (($this) + 108|0);
          __ZN11Blip_Buffer14remove_samplesEl($21,$$);
          break;
         } else {
          __ZN13Stereo_Buffer10mix_stereoEPsl($this,$out,$$);
          __ZN11Blip_Buffer14remove_samplesEl($4,$$);
          $18 = (($this) + 64|0);
          __ZN11Blip_Buffer14remove_samplesEl($18,$$);
          $19 = (($this) + 108|0);
          __ZN11Blip_Buffer14remove_samplesEl($19,$$);
          break;
         }
        }
       } while(0);
       $22 = (__ZNK11Blip_Buffer13samples_availEv($4)|0);
       $23 = ($22|0)==(0);
       if (!($23)) {
        $25 = $$ << 1;
        STACKTOP = sp;return ($25|0);
       }
       $24 = HEAP32[$8>>2]|0;
       HEAP32[$10>>2] = $24;
       HEAP32[$8>>2] = 0;
       $25 = $$ << 1;
       STACKTOP = sp;return ($25|0);
      }
      function __ZN13Stereo_Buffer8mix_monoEPsl($this,$out_,$count) {
       $this = $this|0;
       $out_ = $out_|0;
       $count = $count|0;
       var $$02 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
       var $7 = 0, $8 = 0, $9 = 0, $center_reader_accum$0$lcssa = 0, $center_reader_accum$04 = 0, $center_reader_buf$03 = 0, $out$01 = 0, $s$0 = 0, $sext = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 40|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = (($this) + 36|0);
       $4 = HEAP32[$3>>2]|0;
       $5 = ($count|0)==(0);
       if ($5) {
        $center_reader_accum$0$lcssa = $4;
        HEAP32[$3>>2] = $center_reader_accum$0$lcssa;
        STACKTOP = sp;return;
       }
       $6 = (($this) + 28|0);
       $7 = HEAP32[$6>>2]|0;
       $$02 = $count;$center_reader_accum$04 = $4;$center_reader_buf$03 = $7;$out$01 = $out_;
       while(1) {
        $8 = $center_reader_accum$04 >> 14;
        $sext = $8 << 16;
        $9 = $sext >> 16;
        $10 = ($9|0)==($8|0);
        if ($10) {
         $s$0 = $8;
        } else {
         $11 = $center_reader_accum$04 >> 31;
         $12 = (32767 - ($11))|0;
         $s$0 = $12;
        }
        $13 = (($center_reader_buf$03) + 4|0);
        $14 = HEAP32[$center_reader_buf$03>>2]|0;
        $15 = $center_reader_accum$04 >> $2;
        $16 = (($center_reader_accum$04) - ($15))|0;
        $17 = (($16) + ($14))|0;
        $18 = $s$0&65535;
        HEAP16[$out$01>>1] = $18;
        $19 = (($out$01) + 2|0);
        HEAP16[$19>>1] = $18;
        $20 = (($out$01) + 4|0);
        $21 = (($$02) + -1)|0;
        $22 = ($21|0)==(0);
        if ($22) {
         $center_reader_accum$0$lcssa = $17;
         break;
        } else {
         $$02 = $21;$center_reader_accum$04 = $17;$center_reader_buf$03 = $13;$out$01 = $20;
        }
       }
       HEAP32[$3>>2] = $center_reader_accum$0$lcssa;
       STACKTOP = sp;return;
      }
      function __ZN13Stereo_Buffer10mix_stereoEPsl($this,$out_,$count) {
       $this = $this|0;
       $out_ = $out_|0;
       $count = $count|0;
       var $$011 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
       var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
       var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $center_reader_accum$0$lcssa = 0, $center_reader_accum$010 = 0, $center_reader_buf$09 = 0, $l$0 = 0, $left_reader_accum$0$lcssa = 0, $left_reader_accum$06 = 0, $left_reader_buf$05 = 0, $out$04 = 0, $r$0 = 0, $right_reader_accum$0$lcssa = 0;
       var $right_reader_accum$08 = 0, $right_reader_buf$07 = 0, $sext = 0, $sext1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 84|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = (($this) + 80|0);
       $4 = HEAP32[$3>>2]|0;
       $5 = (($this) + 124|0);
       $6 = HEAP32[$5>>2]|0;
       $7 = (($this) + 36|0);
       $8 = HEAP32[$7>>2]|0;
       $9 = ($count|0)==(0);
       if ($9) {
        $center_reader_accum$0$lcssa = $8;$left_reader_accum$0$lcssa = $4;$right_reader_accum$0$lcssa = $6;
        HEAP32[$7>>2] = $center_reader_accum$0$lcssa;
        HEAP32[$5>>2] = $right_reader_accum$0$lcssa;
        HEAP32[$3>>2] = $left_reader_accum$0$lcssa;
        STACKTOP = sp;return;
       }
       $10 = (($this) + 28|0);
       $11 = (($this) + 116|0);
       $12 = (($this) + 72|0);
       $13 = HEAP32[$10>>2]|0;
       $14 = HEAP32[$11>>2]|0;
       $15 = HEAP32[$12>>2]|0;
       $$011 = $count;$center_reader_accum$010 = $8;$center_reader_buf$09 = $13;$left_reader_accum$06 = $4;$left_reader_buf$05 = $15;$out$04 = $out_;$right_reader_accum$08 = $6;$right_reader_buf$07 = $14;
       while(1) {
        $16 = $center_reader_accum$010 >> 14;
        $17 = $left_reader_accum$06 >> 14;
        $18 = (($16) + ($17))|0;
        $19 = $right_reader_accum$08 >> 14;
        $20 = (($16) + ($19))|0;
        $sext = $18 << 16;
        $21 = $sext >> 16;
        $22 = ($21|0)==($18|0);
        if ($22) {
         $l$0 = $18;
        } else {
         $23 = $18 >> 24;
         $24 = (32767 - ($23))|0;
         $l$0 = $24;
        }
        $25 = (($center_reader_buf$09) + 4|0);
        $26 = HEAP32[$center_reader_buf$09>>2]|0;
        $27 = $center_reader_accum$010 >> $2;
        $28 = (($center_reader_accum$010) - ($27))|0;
        $29 = (($28) + ($26))|0;
        $sext1 = $20 << 16;
        $30 = $sext1 >> 16;
        $31 = ($30|0)==($20|0);
        if ($31) {
         $r$0 = $20;
        } else {
         $32 = $20 >> 24;
         $33 = (32767 - ($32))|0;
         $r$0 = $33;
        }
        $34 = (($left_reader_buf$05) + 4|0);
        $35 = HEAP32[$left_reader_buf$05>>2]|0;
        $36 = $left_reader_accum$06 >> $2;
        $37 = (($left_reader_accum$06) - ($36))|0;
        $38 = (($37) + ($35))|0;
        $39 = (($right_reader_buf$07) + 4|0);
        $40 = HEAP32[$right_reader_buf$07>>2]|0;
        $41 = $right_reader_accum$08 >> $2;
        $42 = (($right_reader_accum$08) - ($41))|0;
        $43 = (($42) + ($40))|0;
        $44 = $l$0&65535;
        HEAP16[$out$04>>1] = $44;
        $45 = $r$0&65535;
        $46 = (($out$04) + 2|0);
        HEAP16[$46>>1] = $45;
        $47 = (($out$04) + 4|0);
        $48 = (($$011) + -1)|0;
        $49 = ($48|0)==(0);
        if ($49) {
         $center_reader_accum$0$lcssa = $29;$left_reader_accum$0$lcssa = $38;$right_reader_accum$0$lcssa = $43;
         break;
        } else {
         $$011 = $48;$center_reader_accum$010 = $29;$center_reader_buf$09 = $25;$left_reader_accum$06 = $38;$left_reader_buf$05 = $34;$out$04 = $47;$right_reader_accum$08 = $43;$right_reader_buf$07 = $39;
        }
       }
       HEAP32[$7>>2] = $center_reader_accum$0$lcssa;
       HEAP32[$5>>2] = $right_reader_accum$0$lcssa;
       HEAP32[$3>>2] = $left_reader_accum$0$lcssa;
       STACKTOP = sp;return;
      }
      function __ZN13Stereo_Buffer20mix_stereo_no_centerEPsl($this,$out_,$count) {
       $this = $this|0;
       $out_ = $out_|0;
       $count = $count|0;
       var $$04 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
       var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$0 = 0, $left_reader_accum$0$lcssa = 0;
       var $left_reader_accum$06 = 0, $left_reader_buf$05 = 0, $out$03 = 0, $r$0 = 0, $right_reader_accum$0$lcssa = 0, $right_reader_accum$08 = 0, $right_reader_buf$07 = 0, $sext = 0, $sext1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 84|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = (($this) + 80|0);
       $4 = HEAP32[$3>>2]|0;
       $5 = (($this) + 124|0);
       $6 = HEAP32[$5>>2]|0;
       $7 = ($count|0)==(0);
       if ($7) {
        $left_reader_accum$0$lcssa = $4;$right_reader_accum$0$lcssa = $6;
        HEAP32[$5>>2] = $right_reader_accum$0$lcssa;
        HEAP32[$3>>2] = $left_reader_accum$0$lcssa;
        STACKTOP = sp;return;
       }
       $8 = (($this) + 116|0);
       $9 = (($this) + 72|0);
       $10 = HEAP32[$8>>2]|0;
       $11 = HEAP32[$9>>2]|0;
       $$04 = $count;$left_reader_accum$06 = $4;$left_reader_buf$05 = $11;$out$03 = $out_;$right_reader_accum$08 = $6;$right_reader_buf$07 = $10;
       while(1) {
        $12 = $left_reader_accum$06 >> 14;
        $sext = $12 << 16;
        $13 = $sext >> 16;
        $14 = ($13|0)==($12|0);
        if ($14) {
         $l$0 = $12;
        } else {
         $15 = $left_reader_accum$06 >> 31;
         $16 = (32767 - ($15))|0;
         $l$0 = $16;
        }
        $17 = $right_reader_accum$08 >> 14;
        $sext1 = $17 << 16;
        $18 = $sext1 >> 16;
        $19 = ($18|0)==($17|0);
        if ($19) {
         $r$0 = $17;
        } else {
         $20 = $right_reader_accum$08 >> 31;
         $21 = (32767 - ($20))|0;
         $r$0 = $21;
        }
        $22 = (($left_reader_buf$05) + 4|0);
        $23 = HEAP32[$left_reader_buf$05>>2]|0;
        $24 = $left_reader_accum$06 >> $2;
        $25 = (($left_reader_accum$06) - ($24))|0;
        $26 = (($25) + ($23))|0;
        $27 = (($right_reader_buf$07) + 4|0);
        $28 = HEAP32[$right_reader_buf$07>>2]|0;
        $29 = $right_reader_accum$08 >> $2;
        $30 = (($right_reader_accum$08) - ($29))|0;
        $31 = (($30) + ($28))|0;
        $32 = $l$0&65535;
        HEAP16[$out$03>>1] = $32;
        $33 = $r$0&65535;
        $34 = (($out$03) + 2|0);
        HEAP16[$34>>1] = $33;
        $35 = (($out$03) + 4|0);
        $36 = (($$04) + -1)|0;
        $37 = ($36|0)==(0);
        if ($37) {
         $left_reader_accum$0$lcssa = $26;$right_reader_accum$0$lcssa = $31;
         break;
        } else {
         $$04 = $36;$left_reader_accum$06 = $26;$left_reader_buf$05 = $22;$out$03 = $35;$right_reader_accum$08 = $31;$right_reader_buf$07 = $27;
        }
       }
       HEAP32[$5>>2] = $right_reader_accum$0$lcssa;
       HEAP32[$3>>2] = $left_reader_accum$0$lcssa;
       STACKTOP = sp;return;
      }
      function __ZN12Multi_BufferD1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       STACKTOP = sp;return;
      }
      function __ZN12Multi_BufferD0Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $this;
       __ZN12Multi_BufferdlEPv($1);
       STACKTOP = sp;return;
      }
      function __ZN13Stereo_Buffer7channelEii($agg$result,$this,u$0,u$1) {
       $agg$result = $agg$result|0;
       $this = $this|0;
       u$0 = u$0|0;
       u$1 = u$1|0;
       var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 152|0);
       $2 = $agg$result;
       $3 = $1;
       ;HEAP32[$2+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$2+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$3+8>>2]|0;
       STACKTOP = sp;return;
      }
      function __ZNK13Stereo_Buffer13samples_availEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 20|0);
       $2 = (__ZNK11Blip_Buffer13samples_availEv($1)|0);
       $3 = $2 << 1;
       STACKTOP = sp;return ($3|0);
      }
      function __ZN9Music_Emu16clear_track_varsEv($this) {
       $this = $this|0;
       var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 260|0);
       HEAP32[$1>>2] = -1;
       $2 = (($this) + 264|0);
       HEAP32[$2>>2] = 0;
       $3 = (($this) + 268|0);
       HEAP32[$3>>2] = 0;
       $4 = (($this) + 272|0);
       HEAP8[$4] = 1;
       $5 = (($this) + 273|0);
       HEAP8[$5] = 1;
       $6 = (($this) + 276|0);
       HEAP32[$6>>2] = 1073741824;
       $7 = (($this) + 280|0);
       HEAP32[$7>>2] = 1;
       $8 = (($this) + 292|0);
       HEAP32[$8>>2] = 0;
       $9 = (($this) + 296|0);
       HEAP32[$9>>2] = 0;
       $10 = (($this) + 300|0);
       HEAP32[$10>>2] = 0;
       $11 = ($this);
       (__ZN8Gme_File7warningEv($11)|0);
       STACKTOP = sp;return;
      }
      function __ZN8Gme_File7warningEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 16|0);
       $2 = HEAP32[$1>>2]|0;
       HEAP32[$1>>2] = 0;
       STACKTOP = sp;return ($2|0);
      }
      function __ZN9Music_Emu6unloadEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 232|0);
       HEAP32[$1>>2] = 0;
       __ZN9Music_Emu16clear_track_varsEv($this);
       $2 = ($this);
       __ZN8Gme_File6unloadEv($2);
       STACKTOP = sp;return;
      }
      function __ZN9Music_EmuC2Ev($this) {
       $this = $this|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       __ZN8Gme_FileC2Ev($1);
       $2 = ($this);
       HEAP32[$2>>2] = ((((43984) + 8|0)));
       $3 = (($this) + 304|0);
       __ZN13blargg_vectorIsEC1Ev($3);
       $4 = (($this) + 312|0);
       HEAP32[$4>>2] = 0;
       $5 = (($this) + 256|0);
       HEAP32[$5>>2] = 0;
       $6 = (($this) + 236|0);
       HEAP32[$6>>2] = 0;
       $7 = (($this) + 240|0);
       HEAPF64[$7>>3] = 1.0;
       $8 = (($this) + 248|0);
       HEAPF64[$8>>3] = 1.0;
       $9 = (($this) + 224|0);
       HEAP32[$9>>2] = 2;
       $10 = (($this) + 284|0);
       HEAP32[$10>>2] = 3;
       $11 = (($this) + 288|0);
       HEAP8[$11] = 0;
       $12 = (($this) + 144|0);
       HEAPF64[$12>>3] = -1.0;
       $13 = (($this) + 152|0);
       HEAPF64[$13>>3] = 60.0;
       __ZN9Music_Emu15set_voice_namesEPKPKc($this,((44064)));
       __ZN9Music_Emu6unloadEv($this);
       STACKTOP = sp;return;
      }
      function __ZN9Music_EmuD0Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       __ZN9Music_EmuD2Ev($this);
       $1 = $this;
       __ZN8Gme_FiledlEPv($1);
       STACKTOP = sp;return;
      }
      function __ZN9Music_EmuD2Ev($this) {
       $this = $this|0;
       var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       HEAP32[$1>>2] = ((((43984) + 8|0)));
       $2 = (($this) + 312|0);
       $3 = HEAP32[$2>>2]|0;
       $4 = ($3|0)==(0|0);
       if (!($4)) {
        $5 = $3;
        $6 = HEAP32[$5>>2]|0;
        $7 = (($6) + 4|0);
        $8 = HEAP32[$7>>2]|0;
        FUNCTION_TABLE_vi[$8 & 127]($3);
       }
       $9 = (($this) + 304|0);
       __ZN13blargg_vectorIsED1Ev($9);
       $10 = ($this);
       __ZN8Gme_FileD2Ev($10);
       STACKTOP = sp;return;
      }
      function __ZN9Music_Emu15set_sample_rateEl($this,$rate) {
       $this = $this|0;
       $rate = $rate|0;
       var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (__ZNK9Music_Emu11sample_rateEv($this)|0);
       $2 = ($1|0)==(0);
       if (!($2)) {
        ___assert_fail(((44160)|0),((44176)|0),80,((44216)|0));
        // unreachable;
       }
       $3 = $this;
       $4 = HEAP32[$3>>2]|0;
       $5 = (($4) + 40|0);
       $6 = HEAP32[$5>>2]|0;
       $7 = (FUNCTION_TABLE_iii[$6 & 63]($this,$rate)|0);
       $8 = ($7|0)==(0|0);
       if (!($8)) {
        $$0 = $7;
        STACKTOP = sp;return ($$0|0);
       }
       $9 = (($this) + 304|0);
       $10 = (__ZN13blargg_vectorIsE6resizeEj($9,2048)|0);
       $11 = ($10|0)==(0|0);
       if (!($11)) {
        $$0 = $10;
        STACKTOP = sp;return ($$0|0);
       }
       $12 = (($this) + 256|0);
       HEAP32[$12>>2] = $rate;
       $$0 = 0;
       STACKTOP = sp;return ($$0|0);
      }
      function __ZN9Music_Emu8pre_loadEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (__ZNK9Music_Emu11sample_rateEv($this)|0);
       $2 = ($1|0)==(0);
       if ($2) {
        ___assert_fail(((44232)|0),((44176)|0),89,((44248)|0));
        // unreachable;
       } else {
        $3 = ($this);
        __ZN8Gme_File8pre_loadEv($3);
        STACKTOP = sp;return;
       }
      }
      function __ZN9Music_Emu13set_equalizerERK15gme_equalizer_t($this,$eq) {
       $this = $this|0;
       $eq = $eq|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
       sp = STACKTOP;
       $1 = (($this) + 144|0);
       $2 = $1;
       $3 = $eq;
       dest=$2+0|0; src=$3+0|0; stop=dest+80|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));;
       $4 = $this;
       $5 = HEAP32[$4>>2]|0;
       $6 = (($5) + 44|0);
       $7 = HEAP32[$6>>2]|0;
       FUNCTION_TABLE_vii[$7 & 31]($this,$eq);
       STACKTOP = sp;return;
      }
      function __ZN9Music_Emu11mute_voicesEi($this,$mask) {
       $this = $this|0;
       $mask = $mask|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (__ZNK9Music_Emu11sample_rateEv($this)|0);
       $2 = ($1|0)==(0);
       if ($2) {
        ___assert_fail(((44232)|0),((44176)|0),111,((44264)|0));
        // unreachable;
       } else {
        $3 = (($this) + 236|0);
        HEAP32[$3>>2] = $mask;
        $4 = $this;
        $5 = HEAP32[$4>>2]|0;
        $6 = (($5) + 52|0);
        $7 = HEAP32[$6>>2]|0;
        FUNCTION_TABLE_vii[$7 & 31]($this,$mask);
        STACKTOP = sp;return;
       }
      }
      function __ZN9Music_Emu9set_tempoEd($this,$t) {
       $this = $this|0;
       $t = +$t;
       var $$0 = 0.0, $$1 = 0.0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (__ZNK9Music_Emu11sample_rateEv($this)|0);
       $2 = ($1|0)==(0);
       if ($2) {
        ___assert_fail(((44232)|0),((44176)|0),118,((44280)|0));
        // unreachable;
       } else {
        $3 = $t < 0.0200000000000000004163;
        $$0 = $3 ? 0.0200000000000000004163 : $t;
        $4 = $$0 > 4.0;
        $$1 = $4 ? 4.0 : $$0;
        $5 = (($this) + 240|0);
        HEAPF64[$5>>3] = $$1;
        $6 = $this;
        $7 = HEAP32[$6>>2]|0;
        $8 = (($7) + 56|0);
        $9 = HEAP32[$8>>2]|0;
        FUNCTION_TABLE_vid[$9 & 15]($this,$$1);
        STACKTOP = sp;return;
       }
      }
      function __ZN9Music_Emu10post_load_Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0.0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 240|0);
       $2 = +HEAPF64[$1>>3];
       __ZN9Music_Emu9set_tempoEd($this,$2);
       __ZN9Music_Emu13remute_voicesEv($this);
       STACKTOP = sp;return;
      }
      function __ZN9Music_Emu11start_trackEi($this,$track) {
       $this = $this|0;
       $track = $track|0;
       var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
       var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $remapped = 0, label = 0;
       var sp = 0;
       sp = STACKTOP;
       STACKTOP = STACKTOP + 8|0;
       $remapped = sp;
       __ZN9Music_Emu16clear_track_varsEv($this);
       HEAP32[$remapped>>2] = $track;
       $1 = ($this);
       $2 = (__ZNK8Gme_File12remap_track_EPi($1,$remapped)|0);
       $3 = ($2|0)==(0|0);
       if (!($3)) {
        $$0 = $2;
        STACKTOP = sp;return ($$0|0);
       }
       $4 = (($this) + 260|0);
       HEAP32[$4>>2] = $track;
       $5 = $this;
       $6 = HEAP32[$5>>2]|0;
       $7 = (($6) + 60|0);
       $8 = HEAP32[$7>>2]|0;
       $9 = HEAP32[$remapped>>2]|0;
       $10 = (FUNCTION_TABLE_iii[$8 & 63]($this,$9)|0);
       $11 = ($10|0)==(0|0);
       if (!($11)) {
        $$0 = $10;
        STACKTOP = sp;return ($$0|0);
       }
       $12 = (($this) + 272|0);
       HEAP8[$12] = 0;
       $13 = (($this) + 273|0);
       HEAP8[$13] = 0;
       $14 = (($this) + 288|0);
       $15 = HEAP8[$14]|0;
       $16 = ($15<<24>>24)==(0);
       if ($16) {
        $17 = (($this) + 224|0);
        $18 = HEAP32[$17>>2]|0;
        $19 = $18 << 1;
        $20 = (__ZNK9Music_Emu11sample_rateEv($this)|0);
        $21 = Math_imul($19, $20)|0;
        $22 = (($this) + 268|0);
        $23 = (($this) + 300|0);
        while(1) {
         $24 = HEAP32[$22>>2]|0;
         $25 = ($24|0)<($21|0);
         if (!($25)) {
          break;
         }
         __ZN9Music_Emu8fill_bufEv($this);
         $26 = HEAP32[$23>>2]|0;
         $27 = HEAP8[$12]|0;
         $28 = $27&255;
         $29 = $28 | $26;
         $30 = ($29|0)==(0);
         if (!($30)) {
          break;
         }
        }
        $31 = (($this) + 300|0);
        $32 = HEAP32[$31>>2]|0;
        HEAP32[$22>>2] = $32;
        $33 = (($this) + 264|0);
        HEAP32[$33>>2] = 0;
        $34 = (($this) + 292|0);
        HEAP32[$34>>2] = 0;
        $35 = (($this) + 296|0);
        HEAP32[$35>>2] = 0;
       }
       $36 = (__ZNK9Music_Emu11track_endedEv($this)|0);
       if (!($36)) {
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
       }
       $37 = (__ZN8Gme_File7warningEv($1)|0);
       $$0 = $37;
       STACKTOP = sp;return ($$0|0);
      }
      function __ZN9Music_Emu8fill_bufEv($this) {
       $this = $this|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 300|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = ($2|0)==(0);
       if (!($3)) {
        ___assert_fail(((44320)|0),((44176)|0),324,((44336)|0));
        // unreachable;
       }
       $4 = (($this) + 272|0);
       $5 = HEAP8[$4]|0;
       $6 = ($5<<24>>24)==(0);
       do {
        if ($6) {
         $7 = (($this) + 304|0);
         $8 = (__ZNK13blargg_vectorIsE5beginEv($7)|0);
         __ZN9Music_Emu8emu_playElPs($this,2048,$8);
         $9 = (__ZNK13blargg_vectorIsE5beginEv($7)|0);
         $10 = (__ZL13count_silencePsl($9,2048)|0);
         $11 = ($10|0)<(2048);
         if (!($11)) {
          break;
         }
         $12 = (($this) + 268|0);
         $13 = HEAP32[$12>>2]|0;
         $14 = (($13) - ($10))|0;
         $15 = (($this) + 292|0);
         HEAP32[$15>>2] = $14;
         HEAP32[$1>>2] = 2048;
         STACKTOP = sp;return;
        }
       } while(0);
       $16 = (($this) + 296|0);
       $17 = HEAP32[$16>>2]|0;
       $18 = (($17) + 2048)|0;
       HEAP32[$16>>2] = $18;
       STACKTOP = sp;return;
      }
      function __ZN9Music_Emu18end_track_if_errorEPKc($this,$err) {
       $this = $this|0;
       $err = $err|0;
       var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($err|0)==(0|0);
       if ($1) {
        STACKTOP = sp;return;
       }
       $2 = (($this) + 272|0);
       HEAP8[$2] = 1;
       $3 = ($this);
       __ZN8Gme_File11set_warningEPKc($3,$err);
       STACKTOP = sp;return;
      }
      function __ZNK9Music_Emu13current_trackEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 260|0);
       $2 = HEAP32[$1>>2]|0;
       STACKTOP = sp;return ($2|0);
      }
      function __ZL3minll386($x,$y) {
       $x = $x|0;
       $y = $y|0;
       var $1 = 0, $x$y = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($x|0)<($y|0);
       $x$y = $1 ? $x : $y;
       STACKTOP = sp;return ($x$y|0);
      }
      function __ZN9Music_Emu5skip_El($this,$count) {
       $this = $this|0;
       $count = $count|0;
       var $$0 = 0, $$02$lcssa = 0, $$025 = 0, $$1 = 0, $$1$ = 0, $$1$ph = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
       var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($count|0)>(30000);
       do {
        if ($1) {
         $2 = (($this) + 236|0);
         $3 = HEAP32[$2>>2]|0;
         __ZN9Music_Emu11mute_voicesEi($this,-1);
         $4 = (($this) + 272|0);
         $5 = $this;
         $6 = (($this) + 304|0);
         $$025 = $count;
         while(1) {
          $8 = HEAP8[$4]|0;
          $9 = ($8<<24>>24)==(0);
          if (!($9)) {
           $$02$lcssa = $$025;
           label = 6;
           break;
          }
          $10 = HEAP32[$5>>2]|0;
          $11 = (($10) + 64|0);
          $12 = HEAP32[$11>>2]|0;
          $13 = (__ZNK13blargg_vectorIsE5beginEv($6)|0);
          $14 = (FUNCTION_TABLE_iiii[$12 & 63]($this,2048,$13)|0);
          $15 = ($14|0)==(0|0);
          $16 = (($$025) + -2048)|0;
          if (!($15)) {
           $$0 = $14;
           label = 11;
           break;
          }
          $7 = ($16|0)>(15000);
          if ($7) {
           $$025 = $16;
          } else {
           $$02$lcssa = $16;
           label = 6;
           break;
          }
         }
         if ((label|0) == 6) {
          __ZN9Music_Emu11mute_voicesEi($this,$3);
          $$1$ph = $$02$lcssa;
          break;
         }
         else if ((label|0) == 11) {
          STACKTOP = sp;return ($$0|0);
         }
        } else {
         $$1$ph = $count;
        }
       } while(0);
       $17 = (($this) + 272|0);
       $18 = $this;
       $19 = (($this) + 304|0);
       $$1 = $$1$ph;
       while(1) {
        $20 = ($$1|0)==(0);
        if ($20) {
         $$0 = 0;
         label = 11;
         break;
        }
        $21 = HEAP8[$17]|0;
        $22 = ($21<<24>>24)==(0);
        if (!($22)) {
         $$0 = 0;
         label = 11;
         break;
        }
        $23 = ($$1|0)<(2048);
        $$1$ = $23 ? $$1 : 2048;
        $24 = (($$1) - ($$1$))|0;
        $25 = HEAP32[$18>>2]|0;
        $26 = (($25) + 64|0);
        $27 = HEAP32[$26>>2]|0;
        $28 = (__ZNK13blargg_vectorIsE5beginEv($19)|0);
        $29 = (FUNCTION_TABLE_iiii[$27 & 63]($this,$$1$,$28)|0);
        $30 = ($29|0)==(0|0);
        if ($30) {
         $$1 = $24;
        } else {
         $$0 = $29;
         label = 11;
         break;
        }
       }
       if ((label|0) == 11) {
        STACKTOP = sp;return ($$0|0);
       }
       return 0|0;
      }
      function __ZN9Music_Emu11handle_fadeElPs($this,$out_count,$out) {
       $this = $this|0;
       $out_count = $out_count|0;
       $out = $out|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
       var $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count$02 = 0, $count$02$phi = 0, $i$03 = 0, $io$01 = 0, $io$01$phi = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($out_count|0)>(0);
       if (!($1)) {
        STACKTOP = sp;return;
       }
       $2 = (($this) + 264|0);
       $3 = HEAP32[$2>>2]|0;
       $4 = (($this) + 276|0);
       $5 = HEAP32[$4>>2]|0;
       $6 = (($this) + 280|0);
       $7 = HEAP32[$6>>2]|0;
       $8 = (($this) + 272|0);
       $9 = (($this) + 273|0);
       $i$03 = 0;
       while(1) {
        $10 = (($3) + ($i$03))|0;
        $11 = (($10) - ($5))|0;
        $12 = (($11|0) / 512)&-1;
        $13 = (__ZL7int_loglii($12,$7)|0);
        $14 = ($13|0)<(64);
        if ($14) {
         HEAP8[$8] = 1;
         HEAP8[$9] = 1;
        }
        $15 = (($out_count) - ($i$03))|0;
        $16 = (__ZL3minll386(512,$15)|0);
        $17 = ($16|0)==(0);
        if (!($17)) {
         $18 = (($out) + ($i$03<<1)|0);
         $count$02 = $16;$io$01 = $18;
         while(1) {
          $19 = HEAP16[$io$01>>1]|0;
          $20 = $19 << 16 >> 16;
          $21 = Math_imul($20, $13)|0;
          $22 = $21 >>> 14;
          $23 = $22&65535;
          HEAP16[$io$01>>1] = $23;
          $24 = (($io$01) + 2|0);
          $25 = (($count$02) + -1)|0;
          $26 = ($25|0)==(0);
          if ($26) {
           break;
          } else {
           $io$01$phi = $24;$count$02$phi = $25;$io$01 = $io$01$phi;$count$02 = $count$02$phi;
          }
         }
        }
        $27 = (($i$03) + 512)|0;
        $28 = ($27|0)<($out_count|0);
        if ($28) {
         $i$03 = $27;
        } else {
         break;
        }
       }
       STACKTOP = sp;return;
      }
      function __ZL7int_loglii($x,$step) {
       $x = $x|0;
       $step = $step|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($x|0) / ($step|0))&-1;
       $2 = Math_imul($1, $step)|0;
       $3 = (($x) - ($2))|0;
       $4 = $3 << 14;
       $5 = (($4|0) / ($step|0))&-1;
       $6 = (16384 - ($5))|0;
       $7 = $5 >> 1;
       $8 = (($6) + ($7))|0;
       $9 = $8 >> $1;
       STACKTOP = sp;return ($9|0);
      }
      function __ZN9Music_Emu8emu_playElPs($this,$count,$out) {
       $this = $this|0;
       $count = $count|0;
       $out = $out|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 268|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = (($2) + ($count))|0;
       HEAP32[$1>>2] = $3;
       $4 = (($this) + 260|0);
       $5 = HEAP32[$4>>2]|0;
       $6 = ($5|0)>(-1);
       do {
        if ($6) {
         $7 = (($this) + 272|0);
         $8 = HEAP8[$7]|0;
         $9 = ($8<<24>>24)==(0);
         if (!($9)) {
          break;
         }
         $10 = $this;
         $11 = HEAP32[$10>>2]|0;
         $12 = (($11) + 64|0);
         $13 = HEAP32[$12>>2]|0;
         $14 = (FUNCTION_TABLE_iiii[$13 & 63]($this,$count,$out)|0);
         __ZN9Music_Emu18end_track_if_errorEPKc($this,$14);
         STACKTOP = sp;return;
        }
       } while(0);
       $15 = $out;
       $16 = $count << 1;
       _memset(($15|0),0,($16|0))|0;
       STACKTOP = sp;return;
      }
      function __ZL13count_silencePsl($begin,$size) {
       $begin = $begin|0;
       $size = $size|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, $p$0$phi = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = HEAP16[$begin>>1]|0;
       HEAP16[$begin>>1] = 16;
       $2 = (($begin) + ($size<<1)|0);
       $p$0 = $2;
       while(1) {
        $3 = (($p$0) + -2|0);
        $4 = HEAP16[$3>>1]|0;
        $5 = $4 << 16 >> 16;
        $6 = (($5) + 8)|0;
        $7 = ($6>>>0)<(17);
        if ($7) {
         $p$0$phi = $3;$p$0 = $p$0$phi;
        } else {
         break;
        }
       }
       HEAP16[$begin>>1] = $1;
       $8 = $3;
       $9 = $begin;
       $10 = (($8) - ($9))|0;
       $11 = $10 >> 1;
       $12 = (($size) - ($11))|0;
       STACKTOP = sp;return ($12|0);
      }
      function __ZN9Music_Emu4playElPs($this,$out_count,$out) {
       $this = $this|0;
       $out_count = $out_count|0;
       $out = $out|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
       var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
       var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
       var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
       var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $pos$0 = 0, $pos$1 = 0, label = 0;
       var sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 273|0);
       $2 = HEAP8[$1]|0;
       $3 = ($2<<24>>24)==(0);
       if (!($3)) {
        $4 = $out;
        $5 = $out_count << 1;
        _memset(($4|0),0,($5|0))|0;
        $95 = (($this) + 264|0);
        $96 = HEAP32[$95>>2]|0;
        $97 = (($96) + ($out_count))|0;
        HEAP32[$95>>2] = $97;
        STACKTOP = sp;return (0|0);
       }
       $6 = (__ZNK9Music_Emu13current_trackEv($this)|0);
       $7 = ($6|0)>(-1);
       if (!($7)) {
        ___assert_fail(((44296)|0),((44176)|0),347,((44352)|0));
        // unreachable;
       }
       $8 = $out_count & 1;
       $9 = ($8|0)==(0);
       if (!($9)) {
        ___assert_fail(((44360)|0),((44176)|0),348,((44352)|0));
        // unreachable;
       }
       $10 = (($this) + 268|0);
       $11 = HEAP32[$10>>2]|0;
       $12 = (($this) + 264|0);
       $13 = HEAP32[$12>>2]|0;
       $14 = ($11|0)<($13|0);
       if ($14) {
        ___assert_fail(((44384)|0),((44176)|0),350,((44352)|0));
        // unreachable;
       }
       $15 = (($this) + 296|0);
       $16 = HEAP32[$15>>2]|0;
       $17 = ($16|0)==(0);
       do {
        if ($17) {
         $pos$0 = 0;
        } else {
         $18 = (($this) + 284|0);
         $19 = HEAP32[$18>>2]|0;
         $20 = (($13) + ($out_count))|0;
         $21 = (($this) + 292|0);
         $22 = HEAP32[$21>>2]|0;
         $23 = (($20) - ($22))|0;
         $24 = Math_imul($23, $19)|0;
         $25 = (($24) + ($22))|0;
         $26 = (($this) + 300|0);
         $27 = HEAP32[$10>>2]|0;
         $28 = ($27|0)<($25|0);
         L16: do {
          if ($28) {
           $29 = (($this) + 272|0);
           while(1) {
            $30 = HEAP32[$26>>2]|0;
            $31 = HEAP8[$29]|0;
            $32 = $31&255;
            $33 = $32 | $30;
            $34 = ($33|0)==(0);
            if (!($34)) {
             break L16;
            }
            __ZN9Music_Emu8fill_bufEv($this);
            $35 = HEAP32[$10>>2]|0;
            $36 = ($35|0)<($25|0);
            if (!($36)) {
             break;
            }
           }
          }
         } while(0);
         $37 = HEAP32[$15>>2]|0;
         $38 = (__ZL3minll386($37,$out_count)|0);
         $39 = $out;
         $40 = $38 << 1;
         _memset(($39|0),0,($40|0))|0;
         $41 = HEAP32[$15>>2]|0;
         $42 = (($41) - ($38))|0;
         HEAP32[$15>>2] = $42;
         $43 = HEAP32[$10>>2]|0;
         $44 = HEAP32[$21>>2]|0;
         $45 = (($43) - ($44))|0;
         $46 = (__ZNK9Music_Emu11sample_rateEv($this)|0);
         $47 = ($46*12)|0;
         $48 = ($45|0)>($47|0);
         if (!($48)) {
          $pos$0 = $38;
          break;
         }
         $49 = (($this) + 272|0);
         HEAP8[$49] = 1;
         HEAP8[$1] = 1;
         HEAP32[$15>>2] = 0;
         $50 = (($this) + 300|0);
         HEAP32[$50>>2] = 0;
         $pos$0 = $38;
        }
       } while(0);
       $51 = (($this) + 300|0);
       $52 = HEAP32[$51>>2]|0;
       $53 = ($52|0)==(0);
       if ($53) {
        $pos$1 = $pos$0;
       } else {
        $54 = (($out_count) - ($pos$0))|0;
        $55 = (__ZL3minll386($52,$54)|0);
        $56 = (($out) + ($pos$0<<1)|0);
        $57 = $56;
        $58 = (($this) + 304|0);
        $59 = (__ZNK13blargg_vectorIsE5beginEv($58)|0);
        $60 = (2048 - ($52))|0;
        $61 = (($59) + ($60<<1)|0);
        $62 = $61;
        $63 = $55 << 1;
        _memcpy(($57|0),($62|0),($63|0))|0;
        $64 = HEAP32[$51>>2]|0;
        $65 = (($64) - ($55))|0;
        HEAP32[$51>>2] = $65;
        $66 = (($55) + ($pos$0))|0;
        $pos$1 = $66;
       }
       $67 = (($out_count) - ($pos$1))|0;
       $68 = ($pos$1|0)==($out_count|0);
       do {
        if (!($68)) {
         $69 = (($out) + ($pos$1<<1)|0);
         __ZN9Music_Emu8emu_playElPs($this,$67,$69);
         $70 = (($this) + 272|0);
         $71 = HEAP8[$70]|0;
         $72 = HEAP8[$1]|0;
         $73 = $72 | $71;
         HEAP8[$1] = $73;
         $74 = (($this) + 288|0);
         $75 = HEAP8[$74]|0;
         $76 = ($75<<24>>24)==(0);
         if (!($76)) {
          $77 = HEAP32[$12>>2]|0;
          $78 = (($this) + 276|0);
          $79 = HEAP32[$78>>2]|0;
          $80 = ($77|0)>($79|0);
          if (!($80)) {
           break;
          }
         }
         $81 = (__ZL13count_silencePsl($69,$67)|0);
         $82 = ($81|0)<($67|0);
         if ($82) {
          $83 = HEAP32[$10>>2]|0;
          $84 = (($83) - ($81))|0;
          $85 = (($this) + 292|0);
          HEAP32[$85>>2] = $84;
         }
         $86 = HEAP32[$10>>2]|0;
         $87 = (($this) + 292|0);
         $88 = HEAP32[$87>>2]|0;
         $89 = (($86) - ($88))|0;
         $90 = ($89|0)>(2047);
         if (!($90)) {
          break;
         }
         __ZN9Music_Emu8fill_bufEv($this);
        }
       } while(0);
       $91 = HEAP32[$12>>2]|0;
       $92 = (($this) + 276|0);
       $93 = HEAP32[$92>>2]|0;
       $94 = ($91|0)>($93|0);
       if (!($94)) {
        $95 = (($this) + 264|0);
        $96 = HEAP32[$95>>2]|0;
        $97 = (($96) + ($out_count))|0;
        HEAP32[$95>>2] = $97;
        STACKTOP = sp;return (0|0);
       }
       __ZN9Music_Emu11handle_fadeElPs($this,$out_count,$out);
       $95 = (($this) + 264|0);
       $96 = HEAP32[$95>>2]|0;
       $97 = (($96) + ($out_count))|0;
       HEAP32[$95>>2] = $97;
       STACKTOP = sp;return (0|0);
      }
      function __ZN9Gme_Info_16set_sample_rate_El($this,u$0) {
       $this = $this|0;
       u$0 = u$0|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       STACKTOP = sp;return (0|0);
      }
      function __ZN9Gme_Info_8pre_loadEv($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       __ZN8Gme_File8pre_loadEv($1);
       STACKTOP = sp;return;
      }
      function __ZN9Gme_Info_10post_load_Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       STACKTOP = sp;return;
      }
      function __ZN9Gme_Info_14set_equalizer_ERK15gme_equalizer_t($this,u$0) {
       $this = $this|0;
       u$0 = u$0|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       STACKTOP = sp;return;
      }
      function __ZN9Gme_Info_16enable_accuracy_Eb($this,u$0) {
       $this = $this|0;
       u$0 = u$0|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       STACKTOP = sp;return;
      }
      function __ZN9Gme_Info_12mute_voices_Ei($this,u$0) {
       $this = $this|0;
       u$0 = u$0|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       STACKTOP = sp;return;
      }
      function __ZN9Gme_Info_10set_tempo_Ed($this,u$0) {
       $this = $this|0;
       u$0 = +u$0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       STACKTOP = sp;return;
      }
      function __ZN9Gme_Info_12start_track_Ei($this,u$0) {
       $this = $this|0;
       u$0 = u$0|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       STACKTOP = sp;return ((44408)|0);
      }
      function __ZN9Gme_Info_5play_ElPs($this,u$0,u$1) {
       $this = $this|0;
       u$0 = u$0|0;
       u$1 = u$1|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       STACKTOP = sp;return ((44408)|0);
      }
      function __ZN7Nes_ApuC2Ev($this) {
       $this = $this|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 20|0);
       $2 = (($this) + 1992|0);
       __ZN10Nes_SquareC1EPK10Blip_SynthILi12ELi1EE($1,$2);
       $3 = (($this) + 64|0);
       __ZN10Nes_SquareC1EPK10Blip_SynthILi12ELi1EE($3,$2);
       $4 = (($this) + 112|0);
       __ZN9Nes_NoiseC1Ev($4);
       $5 = (($this) + 712|0);
       __ZN12Nes_TriangleC1Ev($5);
       $6 = (($this) + 1304|0);
       __ZN7Nes_DmcC1Ev($6);
       __ZN10Blip_SynthILi12ELi1EEC1Ev($2);
       $7 = (($this) + 1936|0);
       HEAPF64[$7>>3] = 1.0;
       $8 = (($this) + 1372|0);
       HEAP32[$8>>2] = $this;
       $9 = (($this) + 1364|0);
       HEAP32[$9>>2] = 0;
       $10 = (($this) + 1984|0);
       HEAP32[$10>>2] = 0;
       $11 = ($1);
       $12 = ($this);
       HEAP32[$12>>2] = $11;
       $13 = ($3);
       $14 = (($this) + 4|0);
       HEAP32[$14>>2] = $13;
       $15 = ($5);
       $16 = (($this) + 8|0);
       HEAP32[$16>>2] = $15;
       $17 = ($4);
       $18 = (($this) + 12|0);
       HEAP32[$18>>2] = $17;
       $19 = ($6);
       $20 = (($this) + 16|0);
       HEAP32[$20>>2] = $19;
       __ZN7Nes_Apu6outputEP11Blip_Buffer($this,0);
       __ZN7Nes_Apu6volumeEd($this,1.0);
       __ZN7Nes_Apu5resetEbi($this,0,0);
       STACKTOP = sp;return;
      }
      function __ZN10Nes_SquareC1EPK10Blip_SynthILi12ELi1EE($this,$s) {
       $this = $this|0;
       $s = $s|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN10Nes_SquareC2EPK10Blip_SynthILi12ELi1EE($this,$s);
       STACKTOP = sp;return;
      }
      function __ZN9Nes_NoiseC1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN9Nes_NoiseC2Ev($this);
       STACKTOP = sp;return;
      }
      function __ZN12Nes_TriangleC1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN12Nes_TriangleC2Ev($this);
       STACKTOP = sp;return;
      }
      function __ZN7Nes_DmcC1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN7Nes_DmcC2Ev($this);
       STACKTOP = sp;return;
      }
      function __ZN7Nes_Apu6outputEP11Blip_Buffer($this,$buffer) {
       $this = $this|0;
       $buffer = $buffer|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN7Nes_Apu10osc_outputEiP11Blip_Buffer($this,0,$buffer);
       __ZN7Nes_Apu10osc_outputEiP11Blip_Buffer($this,1,$buffer);
       __ZN7Nes_Apu10osc_outputEiP11Blip_Buffer($this,2,$buffer);
       __ZN7Nes_Apu10osc_outputEiP11Blip_Buffer($this,3,$buffer);
       __ZN7Nes_Apu10osc_outputEiP11Blip_Buffer($this,4,$buffer);
       STACKTOP = sp;return;
      }
      function __ZN7Nes_Apu6volumeEd($this,$v) {
       $this = $this|0;
       $v = +$v;
       var $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 1363|0);
       HEAP8[$1] = 0;
       $2 = (($this) + 1992|0);
       $3 = $v * 0.0075199999999999997749;
       __ZN10Blip_SynthILi12ELi1EE6volumeEd($2,$3);
       $4 = (($this) + 744|0);
       $5 = $v * 0.00851000000000000020317;
       __ZN10Blip_SynthILi8ELi1EE6volumeEd($4,$5);
       $6 = (($this) + 152|0);
       $7 = $v * 0.00493999999999999994671;
       __ZN10Blip_SynthILi8ELi1EE6volumeEd($6,$7);
       $8 = (($this) + 1376|0);
       $9 = $v * 0.0033500000000000001131;
       __ZN10Blip_SynthILi8ELi1EE6volumeEd($8,$9);
       STACKTOP = sp;return;
      }
      function __ZN7Nes_Apu5resetEbi($this,$pal_mode,$initial_dmc_dac) {
       $this = $this|0;
       $pal_mode = $pal_mode|0;
       $initial_dmc_dac = $initial_dmc_dac|0;
       var $$pr = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
       var $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $addr$01 = 0, $addr$01$phi = 0, $exitcond = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 1304|0);
       $2 = (($this) + 1362|0);
       $3 = $pal_mode&1;
       HEAP8[$2] = $3;
       $4 = (($this) + 1936|0);
       $5 = +HEAPF64[$4>>3];
       __ZN7Nes_Apu9set_tempoEd($this,$5);
       $6 = (($this) + 20|0);
       __ZN10Nes_Square5resetEv($6);
       $7 = (($this) + 64|0);
       __ZN10Nes_Square5resetEv($7);
       $8 = (($this) + 712|0);
       __ZN12Nes_Triangle5resetEv($8);
       $9 = (($this) + 112|0);
       __ZN9Nes_Noise5resetEv($9);
       __ZN7Nes_Dmc5resetEv($1);
       $10 = (($this) + 1944|0);
       HEAP32[$10>>2] = 0;
       $11 = (($this) + 1948|0);
       HEAP32[$11>>2] = 0;
       $12 = (($this) + 1972|0);
       HEAP32[$12>>2] = 0;
       $13 = (($this) + 1980|0);
       HEAP8[$13] = 0;
       $14 = (($this) + 1952|0);
       HEAP32[$14>>2] = 1073741824;
       $15 = (($this) + 1964|0);
       HEAP32[$15>>2] = 1;
       __ZN7Nes_Apu14write_registerElji($this,0,16407,0);
       __ZN7Nes_Apu14write_registerElji($this,0,16405,0);
       $addr$01 = 16384;
       while(1) {
        $16 = $addr$01 & 3;
        $17 = ($16|0)!=(0);
        $18 = $17 ? 0 : 16;
        __ZN7Nes_Apu14write_registerElji($this,0,$addr$01,$18);
        $19 = (($addr$01) + 1)|0;
        $exitcond = ($19|0)==(16404);
        if ($exitcond) {
         break;
        } else {
         $addr$01$phi = $19;$addr$01 = $addr$01$phi;
        }
       }
       $20 = (($this) + 1352|0);
       HEAP32[$20>>2] = $initial_dmc_dac;
       $21 = (($this) + 1363|0);
       $22 = HEAP8[$21]|0;
       $23 = ($22<<24>>24)==(0);
       if (!($23)) {
        STACKTOP = sp;return;
       }
       $24 = (($this) + 732|0);
       HEAP32[$24>>2] = 15;
       $$pr = HEAP8[$21]|0;
       $25 = ($$pr<<24>>24)==(0);
       if (!($25)) {
        STACKTOP = sp;return;
       }
       $26 = (($this) + 1324|0);
       HEAP32[$26>>2] = $initial_dmc_dac;
       STACKTOP = sp;return;
      }
      function __ZN7Nes_Apu9treble_eqERK9blip_eq_t($this,$eq) {
       $this = $this|0;
       $eq = $eq|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 1992|0);
       __ZN10Blip_SynthILi12ELi1EE9treble_eqERK9blip_eq_t($1,$eq);
       $2 = (($this) + 744|0);
       __ZN10Blip_SynthILi8ELi1EE9treble_eqERK9blip_eq_t($2,$eq);
       $3 = (($this) + 152|0);
       __ZN10Blip_SynthILi8ELi1EE9treble_eqERK9blip_eq_t($3,$eq);
       $4 = (($this) + 1376|0);
       __ZN10Blip_SynthILi8ELi1EE9treble_eqERK9blip_eq_t($4,$eq);
       STACKTOP = sp;return;
      }
      function __ZN7Nes_Apu10osc_outputEiP11Blip_Buffer($this,$osc,$buf) {
       $this = $this|0;
       $osc = $osc|0;
       $buf = $buf|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($osc>>>0)<(5);
       if ($1) {
        $2 = (($this) + ($osc<<2)|0);
        $3 = HEAP32[$2>>2]|0;
        $4 = (($3) + 8|0);
        HEAP32[$4>>2] = $buf;
        STACKTOP = sp;return;
       } else {
        ___assert_fail(((44808)|0),((44840)|0),143,((44880)|0));
        // unreachable;
       }
      }
      function __ZN7Nes_Apu9set_tempoEd($this,$t) {
       $this = $this|0;
       $t = +$t;
       var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $storemerge = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 1936|0);
       HEAPF64[$1>>3] = $t;
       $2 = (($this) + 1362|0);
       $3 = HEAP8[$2]|0;
       $4 = ($3<<24>>24)!=(0);
       $5 = $4 ? 8314 : 7458;
       $6 = (($this) + 1960|0);
       $7 = $t != 1.0;
       if (!($7)) {
        $storemerge = $5;
        HEAP32[$6>>2] = $storemerge;
        STACKTOP = sp;return;
       }
       $8 = (+($5|0));
       $9 = $8 / $t;
       $10 = (~~(($9)));
       $11 = $10 & -2;
       $storemerge = $11;
       HEAP32[$6>>2] = $storemerge;
       STACKTOP = sp;return;
      }
      function __ZN10Nes_Square5resetEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 36|0);
       HEAP32[$1>>2] = 0;
       $2 = ($this);
       __ZN12Nes_Envelope5resetEv($2);
       STACKTOP = sp;return;
      }
      function __ZN12Nes_Triangle5resetEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 28|0);
       HEAP32[$1>>2] = 0;
       $2 = (($this) + 24|0);
       HEAP32[$2>>2] = 1;
       $3 = ($this);
       __ZN7Nes_Osc5resetEv($3);
       STACKTOP = sp;return;
      }
      function __ZN9Nes_Noise5resetEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 32|0);
       HEAP32[$1>>2] = 16384;
       $2 = ($this);
       __ZN12Nes_Envelope5resetEv($2);
       STACKTOP = sp;return;
      }
      function __ZN7Nes_Apu14write_registerElji($this,$time,$addr,$data) {
       $this = $this|0;
       $time = $time|0;
       $addr = $addr|0;
       $data = $data|0;
       var $$lobit = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
       var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
       var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
       var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
       var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $extract$t = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($addr>>>0)>(32);
       if (!($1)) {
        ___assert_fail(((44720)|0),((44584)|0),285,((44736)|0));
        // unreachable;
       }
       $2 = ($data>>>0)<(256);
       if (!($2)) {
        ___assert_fail(((44752)|0),((44584)|0),286,((44736)|0));
        // unreachable;
       }
       $3 = (($addr) + -16384)|0;
       $4 = ($3>>>0)>(23);
       if ($4) {
        STACKTOP = sp;return;
       }
       __ZN7Nes_Apu10run_until_El($this,$time);
       $5 = ($addr>>>0)<(16404);
       if ($5) {
        $6 = $3 >>> 2;
        $7 = (($this) + ($6<<2)|0);
        $8 = HEAP32[$7>>2]|0;
        $9 = $addr & 3;
        $10 = $data&255;
        $11 = (($8) + ($9)|0);
        HEAP8[$11] = $10;
        $12 = ((($8) + ($9)|0) + 4|0);
        HEAP8[$12] = 1;
        $13 = ($6|0)==(4);
        if ($13) {
         $14 = (($this) + 1304|0);
         __ZN7Nes_Dmc14write_registerEii($14,$9,$data);
         STACKTOP = sp;return;
        }
        $15 = ($9|0)==(3);
        if (!($15)) {
         STACKTOP = sp;return;
        }
        $16 = (($this) + 1972|0);
        $17 = HEAP32[$16>>2]|0;
        $18 = 1 << $6;
        $19 = $17 & $18;
        $20 = ($19|0)==(0);
        if (!($20)) {
         $21 = $data >>> 3;
         $22 = $21 & 31;
         $23 = (44776 + ($22)|0);
         $24 = HEAP8[$23]|0;
         $25 = $24&255;
         $26 = (($8) + 12|0);
         HEAP32[$26>>2] = $25;
        }
        $27 = ($3>>>0)<(8);
        if (!($27)) {
         STACKTOP = sp;return;
        }
        $28 = (($8) + 32|0);
        HEAP32[$28>>2] = (7);
        STACKTOP = sp;return;
       }
       if ((($addr|0) == 16405)) {
        $29 = $data & 16;
        $30 = ($29|0)==(0);
        if ($30) {
         $31 = (($this) + 16|0);
         $32 = HEAP32[$31>>2]|0;
         $33 = (($32) + 12|0);
         HEAP32[$33>>2] = 0;
        }
        $34 = $data & 8;
        $35 = ($34|0)==(0);
        if ($35) {
         $64 = (($this) + 12|0);
         $65 = HEAP32[$64>>2]|0;
         $66 = (($65) + 12|0);
         HEAP32[$66>>2] = 0;
        }
        $67 = $data & 4;
        $68 = ($67|0)==(0);
        if ($68) {
         $69 = (($this) + 8|0);
         $70 = HEAP32[$69>>2]|0;
         $71 = (($70) + 12|0);
         HEAP32[$71>>2] = 0;
        }
        $72 = $data & 2;
        $73 = ($72|0)==(0);
        if ($73) {
         $74 = (($this) + 4|0);
         $75 = HEAP32[$74>>2]|0;
         $76 = (($75) + 12|0);
         HEAP32[$76>>2] = 0;
        }
        $77 = $data & 1;
        $78 = ($77|0)==(0);
        if ($78) {
         $79 = ($this);
         $80 = HEAP32[$79>>2]|0;
         $81 = (($80) + 12|0);
         HEAP32[$81>>2] = 0;
        }
        $82 = (($this) + 1304|0);
        $83 = (($this) + 1361|0);
        $84 = HEAP8[$83]|0;
        HEAP8[$83] = 0;
        $85 = (($this) + 1972|0);
        $86 = HEAP32[$85>>2]|0;
        HEAP32[$85>>2] = $data;
        $87 = $data & 16;
        $88 = ($87|0)==(0);
        do {
         if ($88) {
          $36 = (($this) + 1356|0);
          HEAP32[$36>>2] = 1073741824;
         } else {
          $37 = $86 & 16;
          $38 = ($37|0)==(0);
          $extract$t = ($84<<24>>24)==(0);
          if ($38) {
           __ZN7Nes_Dmc5startEv($82);
          }
          if (!($extract$t)) {
           break;
          }
          STACKTOP = sp;return;
         }
        } while(0);
        __ZN7Nes_Apu11irq_changedEv($this);
        STACKTOP = sp;return;
       } else if ((($addr|0) == 16407)) {
        $39 = (($this) + 1976|0);
        HEAP32[$39>>2] = $data;
        $40 = $data & 64;
        $$lobit = $40 >>> 6;
        $41 = $$lobit ^ 1;
        $42 = (($this) + 1980|0);
        $43 = HEAP8[$42]|0;
        $44 = $43&255;
        $45 = $44 & $41;
        $46 = $45&255;
        HEAP8[$42] = $46;
        $47 = (($this) + 1956|0);
        HEAP32[$47>>2] = 1073741824;
        $48 = (($this) + 1964|0);
        $49 = HEAP32[$48>>2]|0;
        $50 = $49 & 1;
        HEAP32[$48>>2] = $50;
        $51 = (($this) + 1968|0);
        HEAP32[$51>>2] = 0;
        $52 = $data & 128;
        $53 = ($52|0)==(0);
        do {
         if ($53) {
          $54 = ($40|0)==(0);
          HEAP32[$51>>2] = 1;
          $55 = (($this) + 1960|0);
          $56 = HEAP32[$55>>2]|0;
          $57 = HEAP32[$48>>2]|0;
          $58 = (($57) + ($56))|0;
          HEAP32[$48>>2] = $58;
          if (!($54)) {
           break;
          }
          $59 = HEAP32[$55>>2]|0;
          $60 = ($59*3)|0;
          $61 = (($time) + 1)|0;
          $62 = (($61) + ($58))|0;
          $63 = (($62) + ($60))|0;
          HEAP32[$47>>2] = $63;
         }
        } while(0);
        __ZN7Nes_Apu11irq_changedEv($this);
        STACKTOP = sp;return;
       } else {
        STACKTOP = sp;return;
       }
      }
      function __ZN7Nes_Apu11irq_changedEv($this) {
       $this = $this|0;
       var $$ = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
       var $new_irq$0 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 1356|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = (($this) + 1361|0);
       $4 = HEAP8[$3]|0;
       $5 = (($this) + 1980|0);
       $6 = HEAP8[$5]|0;
       $7 = $6 | $4;
       $8 = ($7<<24>>24)==(0);
       if ($8) {
        $9 = (($this) + 1956|0);
        $10 = HEAP32[$9>>2]|0;
        $11 = ($2|0)>($10|0);
        $$ = $11 ? $10 : $2;
        $new_irq$0 = $$;
       } else {
        $new_irq$0 = 0;
       }
       $12 = (($this) + 1952|0);
       $13 = HEAP32[$12>>2]|0;
       $14 = ($new_irq$0|0)==($13|0);
       if ($14) {
        STACKTOP = sp;return;
       }
       HEAP32[$12>>2] = $new_irq$0;
       $15 = (($this) + 1984|0);
       $16 = HEAP32[$15>>2]|0;
       $17 = ($16|0)==(0|0);
       if ($17) {
        STACKTOP = sp;return;
       }
       $18 = (($this) + 1988|0);
       $19 = HEAP32[$18>>2]|0;
       FUNCTION_TABLE_vi[$16 & 127]($19);
       STACKTOP = sp;return;
      }
      function __ZN7Nes_Apu10run_until_El($this,$end_time) {
       $this = $this|0;
       $end_time = $end_time|0;
       var $$neg = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
       var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
       var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
       var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $end_time$ = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 1944|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = ($2|0)>($end_time|0);
       if ($3) {
        ___assert_fail(((44624)|0),((44584)|0),150,((44648)|0));
        // unreachable;
       }
       $4 = ($2|0)==($end_time|0);
       if ($4) {
        STACKTOP = sp;return;
       }
       $5 = (($this) + 1948|0);
       $6 = HEAP32[$5>>2]|0;
       $7 = ($6|0)<($end_time|0);
       if ($7) {
        HEAP32[$5>>2] = $end_time;
        $8 = (($this) + 1304|0);
        __ZN7Nes_Dmc3runEll($8,$6,$end_time);
       }
       $9 = (($this) + 1964|0);
       $10 = (($this) + 20|0);
       $11 = (($this) + 64|0);
       $12 = (($this) + 712|0);
       $13 = (($this) + 112|0);
       $14 = (($this) + 1960|0);
       $15 = (($this) + 1968|0);
       $16 = ($10);
       $17 = ($11);
       $18 = ($13);
       $19 = (($this) + 1976|0);
       $20 = (($this) + 1956|0);
       $21 = (($this) + 1980|0);
       $22 = ($10);
       $23 = ($11);
       $24 = ($13);
       $25 = ($12);
       $26 = (($this) + 1362|0);
       $27 = (($this) + 1362|0);
       $28 = (($this) + 1976|0);
       $29 = (($this) + 1362|0);
       while(1) {
        $30 = HEAP32[$1>>2]|0;
        $31 = HEAP32[$9>>2]|0;
        $32 = (($31) + ($30))|0;
        $33 = ($32|0)>($end_time|0);
        $end_time$ = $33 ? $end_time : $32;
        $34 = (($31) + ($30))|0;
        $35 = (($34) - ($end_time$))|0;
        HEAP32[$9>>2] = $35;
        $36 = HEAP32[$1>>2]|0;
        __ZN10Nes_Square3runEll($10,$36,$end_time$);
        $37 = HEAP32[$1>>2]|0;
        __ZN10Nes_Square3runEll($11,$37,$end_time$);
        $38 = HEAP32[$1>>2]|0;
        __ZN12Nes_Triangle3runEll($12,$38,$end_time$);
        $39 = HEAP32[$1>>2]|0;
        __ZN9Nes_Noise3runEll($13,$39,$end_time$);
        HEAP32[$1>>2] = $end_time$;
        $40 = ($end_time$|0)==($end_time|0);
        if ($40) {
         break;
        }
        $41 = HEAP32[$14>>2]|0;
        HEAP32[$9>>2] = $41;
        $42 = HEAP32[$15>>2]|0;
        $43 = (($42) + 1)|0;
        HEAP32[$15>>2] = $43;
        do {
         if ((($42|0) == 3)) {
          HEAP32[$15>>2] = 0;
          $61 = HEAP32[$28>>2]|0;
          $62 = $61 & 128;
          $63 = ($62|0)==(0);
          if ($63) {
           break;
          }
          $64 = HEAP32[$14>>2]|0;
          $65 = HEAP8[$29]|0;
          $66 = ($65<<24>>24)!=(0);
          $$neg = $66 ? -2 : -6;
          $67 = HEAP32[$9>>2]|0;
          $68 = (($67) + ($64))|0;
          $69 = (($68) + ($$neg))|0;
          HEAP32[$9>>2] = $69;
         } else if ((($42|0) == 0)) {
          $44 = HEAP32[$19>>2]|0;
          $45 = $44 & 192;
          $46 = ($45|0)==(0);
          if (!($46)) {
           label = 11;
           break;
          }
          $47 = HEAP32[$14>>2]|0;
          $48 = $47 << 2;
          $49 = (($end_time$) + 2)|0;
          $50 = (($49) + ($48))|0;
          HEAP32[$20>>2] = $50;
          HEAP8[$21] = 1;
          label = 11;
         } else if ((($42|0) == 1)) {
          $57 = HEAP8[$27]|0;
          $58 = ($57<<24>>24)==(0);
          if (!($58)) {
           break;
          }
          $59 = HEAP32[$9>>2]|0;
          $60 = (($59) + -2)|0;
          HEAP32[$9>>2] = $60;
         } else if ((($42|0) == 2)) {
          label = 11;
         }
        } while(0);
        do {
         if ((label|0) == 11) {
          label = 0;
          __ZN7Nes_Osc12clock_lengthEi($22,32);
          __ZN7Nes_Osc12clock_lengthEi($23,32);
          __ZN7Nes_Osc12clock_lengthEi($24,32);
          __ZN7Nes_Osc12clock_lengthEi($25,128);
          __ZN10Nes_Square11clock_sweepEi($10,-1);
          __ZN10Nes_Square11clock_sweepEi($11,0);
          $51 = HEAP8[$26]|0;
          $52 = ($51<<24>>24)==(0);
          if ($52) {
           break;
          }
          $53 = HEAP32[$15>>2]|0;
          $54 = ($53|0)==(3);
          if (!($54)) {
           break;
          }
          $55 = HEAP32[$9>>2]|0;
          $56 = (($55) + -2)|0;
          HEAP32[$9>>2] = $56;
         }
        } while(0);
        __ZN12Nes_Triangle20clock_linear_counterEv($12);
        __ZN12Nes_Envelope14clock_envelopeEv($16);
        __ZN12Nes_Envelope14clock_envelopeEv($17);
        __ZN12Nes_Envelope14clock_envelopeEv($18);
       }
       STACKTOP = sp;return;
      }
      function __ZN7Nes_Apu9end_frameEl($this,$end_time) {
       $this = $this|0;
       $end_time = $end_time|0;
       var $$ = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
       var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 1944|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = ($2|0)<($end_time|0);
       if ($3) {
        __ZN7Nes_Apu10run_until_El($this,$end_time);
       }
       $4 = (($this) + 1363|0);
       $5 = HEAP8[$4]|0;
       $6 = ($5<<24>>24)==(0);
       if (!($6)) {
        $7 = (($this) + 1304|0);
        $8 = (($this) + 20|0);
        $9 = HEAP32[$1>>2]|0;
        __Z12zero_apu_oscI10Nes_SquareEvPT_l($8,$9);
        $10 = (($this) + 64|0);
        $11 = HEAP32[$1>>2]|0;
        __Z12zero_apu_oscI10Nes_SquareEvPT_l($10,$11);
        $12 = (($this) + 712|0);
        $13 = HEAP32[$1>>2]|0;
        __Z12zero_apu_oscI12Nes_TriangleEvPT_l($12,$13);
        $14 = (($this) + 112|0);
        $15 = HEAP32[$1>>2]|0;
        __Z12zero_apu_oscI9Nes_NoiseEvPT_l($14,$15);
        $16 = HEAP32[$1>>2]|0;
        __Z12zero_apu_oscI7Nes_DmcEvPT_l($7,$16);
       }
       $17 = HEAP32[$1>>2]|0;
       $18 = (($17) - ($end_time))|0;
       HEAP32[$1>>2] = $18;
       $19 = ($18|0)>(-1);
       if (!($19)) {
        ___assert_fail(((44664)|0),((44584)|0),254,((44680)|0));
        // unreachable;
       }
       $20 = (($this) + 1948|0);
       $21 = HEAP32[$20>>2]|0;
       $22 = (($21) - ($end_time))|0;
       HEAP32[$20>>2] = $22;
       $23 = ($22|0)>(-1);
       if (!($23)) {
        ___assert_fail(((44696)|0),((44584)|0),257,((44680)|0));
        // unreachable;
       }
       $24 = (($this) + 1956|0);
       $25 = HEAP32[$24>>2]|0;
       $26 = ($25|0)==(1073741824);
       if (!($26)) {
        $27 = (($25) - ($end_time))|0;
        HEAP32[$24>>2] = $27;
       }
       $28 = (($this) + 1356|0);
       $29 = HEAP32[$28>>2]|0;
       $30 = ($29|0)==(1073741824);
       if (!($30)) {
        $31 = (($29) - ($end_time))|0;
        HEAP32[$28>>2] = $31;
       }
       $32 = (($this) + 1952|0);
       $33 = HEAP32[$32>>2]|0;
       $34 = ($33|0)==(1073741824);
       if ($34) {
        STACKTOP = sp;return;
       } else {
        $35 = (($33) - ($end_time))|0;
        $36 = ($35|0)<(0);
        $$ = $36 ? 0 : $35;
        HEAP32[$32>>2] = $$;
        STACKTOP = sp;return;
       }
      }
      function __Z12zero_apu_oscI10Nes_SquareEvPT_l($osc,$time) {
       $osc = $osc|0;
       $time = $time|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($osc) + 8|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = (($osc) + 20|0);
       $4 = HEAP32[$3>>2]|0;
       HEAP32[$3>>2] = 0;
       $5 = ($2|0)==(0|0);
       $6 = ($4|0)==(0);
       $or$cond = $5 | $6;
       if ($or$cond) {
        STACKTOP = sp;return;
       }
       $7 = (($osc) + 40|0);
       $8 = HEAP32[$7>>2]|0;
       $9 = (0 - ($4))|0;
       __ZNK10Blip_SynthILi12ELi1EE6offsetEiiP11Blip_Buffer($8,$time,$9,$2);
       STACKTOP = sp;return;
      }
      function __Z12zero_apu_oscI12Nes_TriangleEvPT_l($osc,$time) {
       $osc = $osc|0;
       $time = $time|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($osc) + 8|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = (($osc) + 20|0);
       $4 = HEAP32[$3>>2]|0;
       HEAP32[$3>>2] = 0;
       $5 = ($2|0)==(0|0);
       $6 = ($4|0)==(0);
       $or$cond = $5 | $6;
       if ($or$cond) {
        STACKTOP = sp;return;
       }
       $7 = (($osc) + 32|0);
       $8 = (0 - ($4))|0;
       __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($7,$time,$8,$2);
       STACKTOP = sp;return;
      }
      function __Z12zero_apu_oscI9Nes_NoiseEvPT_l($osc,$time) {
       $osc = $osc|0;
       $time = $time|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($osc) + 8|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = (($osc) + 20|0);
       $4 = HEAP32[$3>>2]|0;
       HEAP32[$3>>2] = 0;
       $5 = ($2|0)==(0|0);
       $6 = ($4|0)==(0);
       $or$cond = $5 | $6;
       if ($or$cond) {
        STACKTOP = sp;return;
       }
       $7 = (($osc) + 40|0);
       $8 = (0 - ($4))|0;
       __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($7,$time,$8,$2);
       STACKTOP = sp;return;
      }
      function __Z12zero_apu_oscI7Nes_DmcEvPT_l($osc,$time) {
       $osc = $osc|0;
       $time = $time|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($osc) + 8|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = (($osc) + 20|0);
       $4 = HEAP32[$3>>2]|0;
       HEAP32[$3>>2] = 0;
       $5 = ($2|0)==(0|0);
       $6 = ($4|0)==(0);
       $or$cond = $5 | $6;
       if ($or$cond) {
        STACKTOP = sp;return;
       }
       $7 = (($osc) + 72|0);
       $8 = (0 - ($4))|0;
       __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($7,$time,$8,$2);
       STACKTOP = sp;return;
      }
      function __ZN7Nes_Apu11read_statusEl($this,$time) {
       $this = $this|0;
       $time = $time|0;
       var $$ = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
       var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
       var $7 = 0, $8 = 0, $9 = 0, $not$ = 0, $result$1$1 = 0, $result$1$1$ = 0, $result$1$3 = 0, $result$1$3$ = 0, $result$2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($time) + -1)|0;
       __ZN7Nes_Apu10run_until_El($this,$1);
       $2 = (($this) + 1361|0);
       $3 = HEAP8[$2]|0;
       $4 = $3&255;
       $5 = $4 << 7;
       $6 = (($this) + 1980|0);
       $7 = HEAP8[$6]|0;
       $8 = $7&255;
       $9 = $8 << 6;
       $10 = $9 | $5;
       $11 = ($this);
       $12 = HEAP32[$11>>2]|0;
       $13 = (($12) + 12|0);
       $14 = HEAP32[$13>>2]|0;
       $not$ = ($14|0)!=(0);
       $15 = $not$&1;
       $$ = $10 | $15;
       $16 = (($this) + 4|0);
       $17 = HEAP32[$16>>2]|0;
       $18 = (($17) + 12|0);
       $19 = HEAP32[$18>>2]|0;
       $20 = ($19|0)==(0);
       $21 = $$ | 2;
       $result$1$1 = $20 ? $$ : $21;
       $22 = (($this) + 8|0);
       $23 = HEAP32[$22>>2]|0;
       $24 = (($23) + 12|0);
       $25 = HEAP32[$24>>2]|0;
       $26 = ($25|0)==(0);
       $27 = $result$1$1 | 4;
       $result$1$1$ = $26 ? $result$1$1 : $27;
       $28 = (($this) + 12|0);
       $29 = HEAP32[$28>>2]|0;
       $30 = (($29) + 12|0);
       $31 = HEAP32[$30>>2]|0;
       $32 = ($31|0)==(0);
       $33 = $result$1$1$ | 8;
       $result$1$3 = $32 ? $result$1$1$ : $33;
       $34 = (($this) + 16|0);
       $35 = HEAP32[$34>>2]|0;
       $36 = (($35) + 12|0);
       $37 = HEAP32[$36>>2]|0;
       $38 = ($37|0)==(0);
       $39 = $result$1$3 | 16;
       $result$1$3$ = $38 ? $result$1$3 : $39;
       __ZN7Nes_Apu10run_until_El($this,$time);
       $40 = HEAP8[$6]|0;
       $41 = ($40<<24>>24)==(0);
       if ($41) {
        $result$2 = $result$1$3$;
        STACKTOP = sp;return ($result$2|0);
       }
       $42 = $result$1$3$ | 64;
       HEAP8[$6] = 0;
       __ZN7Nes_Apu11irq_changedEv($this);
       $result$2 = $42;
       STACKTOP = sp;return ($result$2|0);
      }
      function __ZN12Nes_Envelope5resetEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 24|0);
       HEAP32[$1>>2] = 0;
       $2 = (($this) + 28|0);
       HEAP32[$2>>2] = 0;
       $3 = ($this);
       __ZN7Nes_Osc5resetEv($3);
       STACKTOP = sp;return;
      }
      function __ZN7Nes_Osc5resetEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 16|0);
       HEAP32[$1>>2] = 0;
       $2 = (($this) + 20|0);
       HEAP32[$2>>2] = 0;
       STACKTOP = sp;return;
      }
      function __ZN7Nes_DmcC2Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 72|0);
       __ZN10Blip_SynthILi8ELi1EEC1Ev($1);
       STACKTOP = sp;return;
      }
      function __ZN12Nes_TriangleC2Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 32|0);
       __ZN10Blip_SynthILi8ELi1EEC1Ev($1);
       STACKTOP = sp;return;
      }
      function __ZN9Nes_NoiseC2Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 40|0);
       __ZN10Blip_SynthILi8ELi1EEC1Ev($1);
       STACKTOP = sp;return;
      }
      function __ZN10Nes_SquareC2EPK10Blip_SynthILi12ELi1EE($this,$s) {
       $this = $this|0;
       $s = $s|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 40|0);
       HEAP32[$1>>2] = $s;
       STACKTOP = sp;return;
      }
      function __ZN7Nsf_Emu8cpu_readEj($this,$addr) {
       $this = $this|0;
       $addr = $addr|0;
       var $$0 = 0, $$sum = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
       var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $addr & 2047;
       $2 = (($this) + 336|0);
       $3 = $2;
       $$sum = (($1) + 336)|0;
       $4 = (($this) + ($$sum)|0);
       $5 = HEAP8[$4]|0;
       $6 = $5&255;
       $7 = $addr & 57344;
       $8 = ($7|0)==(0);
       L1: do {
        if ($8) {
         $$0 = $6;
        } else {
         $9 = (__ZN7Nes_Cpu8get_codeEj($3,$addr)|0);
         $10 = HEAP8[$9]|0;
         $11 = $10&255;
         $12 = ($addr>>>0)>(32767);
         if ($12) {
          $$0 = $11;
          break;
         }
         $13 = $addr & 8191;
         $14 = ((($this) + ($13)|0) + 5576|0);
         $15 = HEAP8[$14]|0;
         $16 = $15&255;
         $17 = ($addr>>>0)>(24575);
         if ($17) {
          $$0 = $16;
          break;
         }
         if ((($addr|0) == 18432)) {
          label = 6;
         } else if ((($addr|0) == 16405)) {
          $18 = (($this) + 2640|0);
          $19 = (__ZNK7Nes_Cpu4timeEv($3)|0);
          $20 = (__ZN7Nes_Apu11read_statusEl($18,$19)|0);
          $$0 = $20;
          break;
         }
         do {
          if ((label|0) == 6) {
           $21 = (($this) + 2628|0);
           $22 = HEAP32[$21>>2]|0;
           $23 = ($22|0)==(0|0);
           if ($23) {
            break;
           }
           $24 = (__ZN13Nes_Namco_Apu9read_dataEv($22)|0);
           $$0 = $24;
           break L1;
          }
         } while(0);
         $25 = $addr >>> 8;
         $$0 = $25;
        }
       } while(0);
       STACKTOP = sp;return ($$0|0);
      }
      function __ZN7Nes_Cpu8get_codeEj($this,$addr) {
       $this = $this|0;
       $addr = $addr|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $addr >>> 11;
       $2 = (($this) + 2056|0);
       $3 = HEAP32[$2>>2]|0;
       $4 = (($3) + ($1<<2)|0);
       $5 = HEAP32[$4>>2]|0;
       $6 = $addr & 2047;
       $7 = (($5) + ($6)|0);
       STACKTOP = sp;return ($7|0);
      }
      function __ZNK7Nes_Cpu4timeEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 2056|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = (($2) + 136|0);
       $4 = HEAP32[$3>>2]|0;
       $5 = (($2) + 132|0);
       $6 = HEAP32[$5>>2]|0;
       $7 = (($6) + ($4))|0;
       STACKTOP = sp;return ($7|0);
      }
      function __ZN13Nes_Namco_Apu9read_dataEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (__ZN13Nes_Namco_Apu6accessEv($this)|0);
       $2 = HEAP8[$1]|0;
       $3 = $2&255;
       STACKTOP = sp;return ($3|0);
      }
      function __ZN7Nsf_Emu9cpu_writeEji($this,$addr,$data) {
       $this = $this|0;
       $addr = $addr|0;
       $data = $data|0;
       var $$sum = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
       var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $addr ^ 24576;
       $2 = ($1>>>0)<(8192);
       if ($2) {
        $3 = $data&255;
        $4 = ((($this) + ($1)|0) + 5576|0);
        HEAP8[$4] = $3;
        STACKTOP = sp;return;
       }
       $5 = $addr & 57344;
       $6 = ($5|0)==(0);
       if ($6) {
        $7 = $addr & 2047;
        $8 = $data&255;
        $$sum = (($7) + 336)|0;
        $9 = (($this) + ($$sum)|0);
        HEAP8[$9] = $8;
        STACKTOP = sp;return;
       }
       $10 = (($addr) + -16384)|0;
       $11 = ($10>>>0)<(24);
       if ($11) {
        $12 = (($this) + 2640|0);
        $13 = (($this) + 336|0);
        $14 = $13;
        $15 = (__ZNK7Nes_Cpu4timeEv($14)|0);
        __ZN7Nes_Apu14write_registerElji($12,$15,$addr,$data);
        STACKTOP = sp;return;
       }
       $16 = (($addr) + -24568)|0;
       $17 = ($16>>>0)<(8);
       if (!($17)) {
        __ZN7Nsf_Emu14cpu_write_miscEji($this,$addr,$data);
        STACKTOP = sp;return;
       }
       $18 = (($this) + 2604|0);
       $19 = $data << 12;
       $20 = (__ZNK8Rom_DataILi4096EE9mask_addrEl($18,$19)|0);
       $21 = (__ZNK8Rom_DataILi4096EE4sizeEv($18)|0);
       $22 = ($20|0)<($21|0);
       if (!($22)) {
        $23 = $this;
        __ZN8Gme_File11set_warningEPKc($23,(44896));
       }
       $24 = (($this) + 336|0);
       $25 = $24;
       $26 = $addr << 12;
       $27 = (($26) + -100597760)|0;
       $28 = (__ZN8Rom_DataILi4096EE7at_addrEl($18,$20)|0);
       __ZN7Nes_Cpu8map_codeEjjPKvb($25,$27,4096,$28,0);
       STACKTOP = sp;return;
      }
      function __ZNK8Rom_DataILi4096EE9mask_addrEl($this,$addr) {
       $this = $this|0;
       $addr = $addr|0;
       var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 16|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = $2 & $addr;
       STACKTOP = sp;return ($3|0);
      }
      function __ZNK8Rom_DataILi4096EE4sizeEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 20|0);
       $2 = HEAP32[$1>>2]|0;
       STACKTOP = sp;return ($2|0);
      }
      function __ZN7Nes_Cpu8map_codeEjjPKvb($this,$start,$size,$data,$mirror) {
       $this = $this|0;
       $start = $start|0;
       $size = $size|0;
       $data = $data|0;
       $mirror = $mirror|0;
       var $$0$ = 0, $$01 = 0, $$01$phi = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$03 = 0, $n$03$phi = 0, $page$02 = 0, $page$02$phi = 0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $start & 2047;
       $2 = ($1|0)==(0);
       if (!($2)) {
        ___assert_fail(((44912)|0),((44936)|0),92,((44976)|0));
        // unreachable;
       }
       $3 = $size & 2047;
       $4 = ($3|0)==(0);
       if (!($4)) {
        ___assert_fail(((44992)|0),((44936)|0),93,((44976)|0));
        // unreachable;
       }
       $5 = (($size) + ($start))|0;
       $6 = ($5>>>0)<(65537);
       if (!($6)) {
        ___assert_fail(((45016)|0),((44936)|0),94,((44976)|0));
        // unreachable;
       }
       $7 = $size >>> 11;
       $8 = ($7|0)==(0);
       if ($8) {
        STACKTOP = sp;return;
       }
       $9 = $start >>> 11;
       $$01 = $data;$n$03 = $7;$page$02 = $9;
       while(1) {
        $10 = (($page$02) + 1)|0;
        __ZN7Nes_Cpu13set_code_pageEiPKv($this,$page$02,$$01);
        $11 = (($$01) + 2048|0);
        $$0$ = $mirror ? $$01 : $11;
        $12 = (($n$03) + -1)|0;
        $13 = ($12|0)==(0);
        if ($13) {
         break;
        } else {
         $page$02$phi = $10;$n$03$phi = $12;$$01$phi = $$0$;$page$02 = $page$02$phi;$n$03 = $n$03$phi;$$01 = $$01$phi;
        }
       }
       STACKTOP = sp;return;
      }
      function __ZN8Rom_DataILi4096EE7at_addrEl($this,$addr) {
       $this = $this|0;
       $addr = $addr|0;
       var $$ = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (__ZNK8Rom_DataILi4096EE9mask_addrEl($this,$addr)|0);
       $2 = (($this) + 12|0);
       $3 = HEAP32[$2>>2]|0;
       $4 = (($1) - ($3))|0;
       $5 = ($this);
       $6 = (__ZNK13blargg_vectorIhE4sizeEv($5)|0);
       $7 = (($6) + -4104)|0;
       $8 = ($4>>>0)>($7>>>0);
       $$ = $8 ? 0 : $4;
       $9 = (__ZNK13blargg_vectorIhEixEj($5,$$)|0);
       STACKTOP = sp;return ($9|0);
      }
      function __ZN7Nes_Cpu5resetEPKv($this,$unmapped_page) {
       $this = $this|0;
       $unmapped_page = $unmapped_page|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 2060|0);
       $2 = (($this) + 2056|0);
       HEAP32[$2>>2] = $1;
       $3 = (($this) + 2053|0);
       HEAP8[$3] = 4;
       $4 = (($this) + 2054|0);
       HEAP8[$4] = -1;
       $5 = (($this) + 2048|0);
       $6 = (($this) + 2196|0);
       HEAP32[$6>>2] = 0;
       $7 = (($this) + 2192|0);
       HEAP32[$7>>2] = 0;
       $8 = (($this) + 2200|0);
       $9 = $5;
       ;HEAP16[$9+0>>1]=0|0;HEAP16[$9+2>>1]=0|0;HEAP8[$9+4|0]=0|0;
       HEAP32[$8>>2] = 1073741824;
       $10 = (($this) + 2204|0);
       HEAP32[$10>>2] = 1073741824;
       $11 = (($this) + 2208|0);
       HEAP32[$11>>2] = 0;
       __ZN7Nes_Cpu13set_code_pageEiPKv($this,32,$unmapped_page);
       __ZN7Nes_Cpu8map_codeEjjPKvb($this,8192,57344,$unmapped_page,1);
       $12 = ($this);
       __ZN7Nes_Cpu8map_codeEjjPKvb($this,0,8192,$12,1);
       __Z24blargg_verify_byte_orderv();
       STACKTOP = sp;return;
      }
      function __ZN7Nes_Cpu13set_code_pageEiPKv($this,$i,$p) {
       $this = $this|0;
       $i = $i|0;
       $p = $p|0;
       var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 2056|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = (($2) + ($i<<2)|0);
       HEAP32[$3>>2] = $p;
       STACKTOP = sp;return;
      }
      function __ZN7Nes_Cpu3runEl($this,$end_time) {
       $this = $this|0;
       $end_time = $end_time|0;
       var $$ = 0, $$17 = 0, $$18 = 0, $$19 = 0, $$20 = 0, $$mask = 0, $$sum = 0, $$sum11 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum7 = 0, $$sum9 = 0, $1 = 0, $10 = 0, $100 = 0;
       var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
       var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
       var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
       var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
       var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
       var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
       var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
       var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
       var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
       var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
       var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
       var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
       var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
       var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
       var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
       var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
       var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
       var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
       var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
       var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
       var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
       var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
       var $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0;
       var $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0;
       var $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0;
       var $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0;
       var $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0;
       var $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0;
       var $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0;
       var $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0;
       var $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0;
       var $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0;
       var $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0;
       var $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0;
       var $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0;
       var $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0;
       var $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0;
       var $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0;
       var $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0;
       var $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0;
       var $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0;
       var $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0;
       var $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0;
       var $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0;
       var $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0;
       var $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0;
       var $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0;
       var $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0;
       var $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0;
       var $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $a$0 = 0, $a$0$phi = 0, $addr10$0 = 0, $addr13$0 = 0, $c$0 = 0, $c$0$phi = 0, $c$1 = 0;
       var $c$10 = 0, $c$2 = 0, $c$3 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $c$7 = 0, $c$8 = 0, $c$9 = 0, $data$0 = 0, $data$1 = 0, $data$10 = 0, $data$11 = 0, $data$12 = 0, $data$13 = 0, $data$14 = 0, $data$15 = 0, $data$16 = 0, $data$17 = 0, $data$18 = 0;
       var $data$19 = 0, $data$2 = 0, $data$20 = 0, $data$21 = 0, $data$22 = 0, $data$23 = 0, $data$24 = 0, $data$25 = 0, $data$26 = 0, $data$27 = 0, $data$28 = 0, $data$29 = 0, $data$3 = 0, $data$30 = 0, $data$31 = 0, $data$32 = 0, $data$33 = 0, $data$34 = 0, $data$35 = 0, $data$36 = 0;
       var $data$37 = 0, $data$38 = 0, $data$39 = 0, $data$4 = 0, $data$40 = 0, $data$41 = 0, $data$42 = 0, $data$43 = 0, $data$44 = 0, $data$45 = 0, $data$46 = 0, $data$47 = 0, $data$48 = 0, $data$49 = 0, $data$5 = 0, $data$51 = 0, $data$52 = 0, $data$53 = 0, $data$56 = 0, $data$5721 = 0;
       var $data$6 = 0, $data$7 = 0, $data$8 = 0, $data$9 = 0, $nz$0 = 0, $nz$0$phi = 0, $nz$1 = 0, $nz$2 = 0, $nz$3 = 0, $nz$4 = 0, $nz$5 = 0, $nz$6 = 0, $or$cond = 0, $pc$0 = 0, $pc$1 = 0, $pc$1$phi = 0, $pc$10 = 0, $pc$11 = 0, $pc$12 = 0, $pc$13 = 0;
       var $pc$14 = 0, $pc$15 = 0, $pc$16 = 0, $pc$17 = 0, $pc$19 = 0, $pc$2 = 0, $pc$21 = 0, $pc$3 = 0, $pc$4 = 0, $pc$5 = 0, $pc$6 = 0, $pc$7 = 0, $pc$8 = 0, $pc$9 = 0, $s = 0, $s_time$0 = 0, $s_time$0$phi = 0, $s_time$1 = 0, $s_time$10 = 0, $s_time$11 = 0;
       var $s_time$12 = 0, $s_time$13 = 0, $s_time$14 = 0, $s_time$15 = 0, $s_time$16 = 0, $s_time$17 = 0, $s_time$18 = 0, $s_time$19 = 0, $s_time$2 = 0, $s_time$20 = 0, $s_time$21 = 0, $s_time$22 = 0, $s_time$23 = 0, $s_time$24 = 0, $s_time$25 = 0, $s_time$27 = 0, $s_time$3 = 0, $s_time$4 = 0, $s_time$5 = 0, $s_time$6 = 0;
       var $s_time$7 = 0, $s_time$8 = 0, $s_time$9 = 0, $sext = 0, $sp$0 = 0, $sp$0$phi = 0, $sp$1 = 0, $sp$2 = 0, $status$0 = 0, $status$0$phi = 0, $status$1 = 0, $status$2 = 0, $temp25$0 = 0, $temp49$0 = 0, $x$0 = 0, $x$0$phi = 0, $x$0$pn = 0, $x$0$pn10 = 0, $x$0$pn12 = 0, $x$0$pn16 = 0;
       var $x$0$pn6 = 0, $x$0$pn8 = 0, $y$0 = 0, $y$0$phi = 0, label = 0, sp = 0;
       sp = STACKTOP;
       STACKTOP = STACKTOP + 144|0;
       $s = sp;
       __ZN7Nes_Cpu12set_end_timeEl($this,$end_time);
       $1 = $s;
       $2 = (($this) + 2060|0);
       $3 = $2;
       _memcpy(($1|0),($3|0),140)|0;
       $4 = (($this) + 2056|0);
       HEAP32[$4>>2] = $s;
       $5 = (($s) + 136|0);
       $6 = HEAP32[$5>>2]|0;
       $7 = (($this) + 2048|0);
       $8 = HEAP16[$7>>1]|0;
       $9 = $8&65535;
       $10 = (($this) + 2050|0);
       $11 = HEAP8[$10]|0;
       $12 = $11&255;
       $13 = (($this) + 2051|0);
       $14 = HEAP8[$13]|0;
       $15 = $14&255;
       $16 = (($this) + 2052|0);
       $17 = HEAP8[$16]|0;
       $18 = $17&255;
       $19 = (($this) + 2054|0);
       $20 = HEAP8[$19]|0;
       $21 = $20&255;
       $22 = (($21) + 1)|0;
       $23 = $22 | 256;
       $24 = (($this) + 2053|0);
       $25 = HEAP8[$24]|0;
       $26 = $25&255;
       $27 = $26 & 76;
       $28 = $26 << 8;
       $29 = $26 & 2;
       $30 = $29 | $28;
       $31 = $30 ^ 2;
       $32 = (($this) + 2208|0);
       $33 = (($this) + -336|0);
       $34 = $33;
       $35 = (($this) + -336|0);
       $36 = $35;
       $37 = (($this) + -336|0);
       $38 = $37;
       $39 = (($this) + -336|0);
       $40 = $39;
       $41 = (($this) + -336|0);
       $42 = $41;
       $43 = (($this) + -336|0);
       $44 = $43;
       $45 = (($this) + -336|0);
       $46 = $45;
       $47 = (($this) + -336|0);
       $48 = $47;
       $49 = (($this) + -336|0);
       $50 = $49;
       $51 = (($this) + -336|0);
       $52 = $51;
       $53 = (($this) + -336|0);
       $54 = $53;
       $55 = (($this) + -336|0);
       $56 = $55;
       $57 = (($this) + -336|0);
       $58 = $57;
       $59 = (($this) + -336|0);
       $60 = $59;
       $61 = (($this) + -336|0);
       $62 = $61;
       $63 = (($this) + -336|0);
       $64 = $63;
       $65 = (($this) + -336|0);
       $66 = $65;
       $67 = (($this) + -336|0);
       $68 = $67;
       $69 = (($this) + -336|0);
       $70 = $69;
       $71 = (($s) + 132|0);
       $72 = (($this) + 2200|0);
       $73 = (($s) + 132|0);
       $74 = (($this) + 2200|0);
       $75 = (($s) + 132|0);
       $76 = (($this) + 2204|0);
       $77 = (($s) + 124|0);
       $78 = (($s) + 132|0);
       $79 = (($this) + 2204|0);
       $a$0 = $12;$c$0 = $28;$nz$0 = $31;$pc$1 = $9;$s_time$0 = $6;$sp$0 = $23;$status$0 = $27;$x$0 = $15;$y$0 = $18;
       L1: while(1) {
        $81 = $pc$1 >>> 11;
        $82 = (($s) + ($81<<2)|0);
        $83 = HEAP32[$82>>2]|0;
        $84 = $pc$1 & 2047;
        $85 = (($83) + ($84)|0);
        $$sum = (($84) + 1)|0;
        $86 = (($83) + ($$sum)|0);
        $87 = HEAP8[$85]|0;
        $88 = $87&255;
        $89 = (($pc$1) + 1)|0;
        $90 = (45040 + ($88)|0);
        $91 = HEAP8[$90]|0;
        $92 = $91&255;
        $93 = (($92) + ($s_time$0))|0;
        $94 = ($93|0)<(0);
        $95 = ($93|0)<($92|0);
        $or$cond = $94 | $95;
        if (!($or$cond)) {
         HEAP32[$5>>2] = $s_time$0;
         $98 = ($s_time$0|0)<(0);
         if ($98) {
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $s_time$0;$pc$1$phi = $pc$1;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue;
         } else {
          $pc$21 = $pc$1;$s_time$27 = $s_time$0;
          label = 202;
          break;
         }
        }
        $96 = HEAP8[$86]|0;
        $97 = $96&255;
        L6: do {
         switch ($88|0) {
         case 0:  {
          $941 = (($pc$1) + 2)|0;
          $942 = (($93) + 7)|0;
          $943 = $941 >>> 8;
          $944 = $943&255;
          $945 = (($sp$0) + -1)|0;
          $946 = $945 | 256;
          $947 = (($this) + ($946)|0);
          HEAP8[$947] = $944;
          $948 = $941&255;
          $949 = (($sp$0) + -2)|0;
          $950 = $949 | 256;
          $951 = (($this) + ($950)|0);
          HEAP8[$951] = $948;
          $952 = HEAP32[$77>>2]|0;
          $953 = (($952) + 2046|0);
          $954 = (__Z8get_le16PKv($953)|0);
          $955 = (($sp$0) + -3)|0;
          $956 = $955 | 256;
          $957 = $status$0 & 76;
          $958 = $nz$0 >>> 8;
          $959 = $958 | $nz$0;
          $960 = $959 & 128;
          $961 = $957 | $960;
          $962 = $c$0 >>> 8;
          $963 = $962 & 1;
          $964 = $961 | $963;
          $965 = $nz$0 & 255;
          $966 = ($965|0)==(0);
          $967 = $964 | 2;
          $temp49$0 = $966 ? $967 : $964;
          $968 = $temp49$0 | 48;
          $969 = $968&255;
          $970 = (($this) + ($956)|0);
          HEAP8[$970] = $969;
          $971 = $status$0 | 4;
          $972 = $971&255;
          HEAP8[$24] = $972;
          $973 = HEAP32[$78>>2]|0;
          $974 = HEAP32[$79>>2]|0;
          $975 = (($973) - ($974))|0;
          $976 = ($975|0)>(-1);
          if ($976) {
           $y$0$phi = $y$0;$x$0$phi = $x$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $954;$s_time$0 = $942;$sp$0 = $956;$status$0 = $971;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
           continue L1;
          }
          $977 = (($975) + ($942))|0;
          HEAP32[$78>>2] = $974;
          $y$0$phi = $y$0;$x$0$phi = $x$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $954;$s_time$0 = $977;$sp$0 = $956;$status$0 = $971;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 250: case 218: case 122: case 90: case 58: case 26: case 234:  {
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $93;$pc$1$phi = $89;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 181:  {
          $99 = (($97) + ($x$0))|0;
          $100 = $99 & 255;
          $101 = (($this) + ($100)|0);
          $102 = HEAP8[$101]|0;
          $103 = $102&255;
          $104 = (($pc$1) + 2)|0;
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $93;$c$0$phi = $c$0;$a$0 = $103;$nz$0 = $103;$pc$1 = $104;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$c$0 = $c$0$phi;
          continue L1;
          break;
         }
         case 165:  {
          $105 = (($this) + ($97)|0);
          $106 = HEAP8[$105]|0;
          $107 = $106&255;
          $108 = (($pc$1) + 2)|0;
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $93;$c$0$phi = $c$0;$a$0 = $107;$nz$0 = $107;$pc$1 = $108;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$c$0 = $c$0$phi;
          continue L1;
          break;
         }
         case 208:  {
          $109 = $96 << 24 >> 24;
          $110 = (($pc$1) + 2)|0;
          $111 = $nz$0&255;
          $112 = ($111<<24>>24)==(0);
          if ($112) {
           $pc$0 = $110;
           label = 2;
           break L6;
          }
          $113 = $110 & 255;
          $114 = (($109) + ($113))|0;
          $115 = (($109) + ($110))|0;
          $116 = $115 & 65535;
          $117 = $114 >>> 8;
          $118 = $117 & 1;
          $119 = (($118) + ($93))|0;
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $116;$s_time$0 = $119;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 32:  {
          $120 = (($pc$1) + 2)|0;
          $121 = (__Z8get_le16PKv($86)|0);
          $122 = $120 >>> 8;
          $123 = $122&255;
          $124 = (($sp$0) + -1)|0;
          $125 = $124 | 256;
          $126 = (($this) + ($125)|0);
          HEAP8[$126] = $123;
          $127 = (($sp$0) + -2)|0;
          $128 = $127 | 256;
          $129 = $120&255;
          $130 = (($this) + ($128)|0);
          HEAP8[$130] = $129;
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$s_time$0$phi = $93;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $121;$sp$0 = $128;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$s_time$0 = $s_time$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 76:  {
          $131 = (__Z8get_le16PKv($86)|0);
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $93;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $131;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 232:  {
          $132 = (($x$0) + 1)|0;
          $133 = $132 & 255;
          $y$0$phi = $y$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $93;$pc$1$phi = $89;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $132;$x$0 = $133;$y$0 = $y$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 16:  {
          $134 = $96 << 24 >> 24;
          $135 = (($pc$1) + 2)|0;
          $136 = $nz$0 & 32896;
          $137 = ($136|0)==(0);
          if (!($137)) {
           $pc$0 = $135;
           label = 2;
           break L6;
          }
          $138 = $135 & 255;
          $139 = (($134) + ($138))|0;
          $140 = (($134) + ($135))|0;
          $141 = $140 & 65535;
          $142 = $139 >>> 8;
          $143 = $142 & 1;
          $144 = (($143) + ($93))|0;
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $141;$s_time$0 = $144;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 193:  {
          $145 = (($97) + ($x$0))|0;
          $146 = (($145) + 1)|0;
          $147 = $146 & 255;
          $148 = (($this) + ($147)|0);
          $149 = HEAP8[$148]|0;
          $150 = $149&255;
          $151 = $150 << 8;
          $152 = $145 & 255;
          $153 = (($this) + ($152)|0);
          $154 = HEAP8[$153]|0;
          $155 = $154&255;
          $156 = $151 | $155;
          $data$3 = $156;$pc$2 = $89;$s_time$2 = $93;
          label = 22;
          break;
         }
         case 209:  {
          $157 = (($this) + ($97)|0);
          $158 = HEAP8[$157]|0;
          $159 = $158&255;
          $160 = (($159) + ($y$0))|0;
          $161 = (($97) + 1)|0;
          $162 = $161 & 255;
          $163 = (($this) + ($162)|0);
          $164 = HEAP8[$163]|0;
          $165 = $164&255;
          $166 = $165 << 8;
          $167 = (($166) + ($160))|0;
          $168 = $160 >>> 8;
          $169 = (($168) + ($93))|0;
          $data$3 = $167;$pc$2 = $89;$s_time$2 = $169;
          label = 22;
          break;
         }
         case 213:  {
          $170 = (($97) + ($x$0))|0;
          $171 = $170 & 255;
          $data$0 = $171;
          label = 18;
          break;
         }
         case 197:  {
          $data$0 = $97;
          label = 18;
          break;
         }
         case 221:  {
          $x$0$pn16 = $x$0;
          label = 20;
          break;
         }
         case 217:  {
          $x$0$pn16 = $y$0;
          label = 20;
          break;
         }
         case 205:  {
          $data$2 = $97;$s_time$1 = $93;
          label = 21;
          break;
         }
         case 201:  {
          $data$4 = $97;$pc$3 = $89;$s_time$3 = $93;
          label = 23;
          break;
         }
         case 48:  {
          $189 = $96 << 24 >> 24;
          $190 = (($pc$1) + 2)|0;
          $191 = $nz$0 & 32896;
          $192 = ($191|0)==(0);
          if ($192) {
           $pc$0 = $190;
           label = 2;
           break L6;
          }
          $193 = $190 & 255;
          $194 = (($189) + ($193))|0;
          $195 = (($189) + ($190))|0;
          $196 = $195 & 65535;
          $197 = $194 >>> 8;
          $198 = $197 & 1;
          $199 = (($198) + ($93))|0;
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $196;$s_time$0 = $199;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 240:  {
          $200 = $96 << 24 >> 24;
          $201 = (($pc$1) + 2)|0;
          $202 = $nz$0&255;
          $203 = ($202<<24>>24)==(0);
          if (!($203)) {
           $pc$0 = $201;
           label = 2;
           break L6;
          }
          $204 = $201 & 255;
          $205 = (($200) + ($204))|0;
          $206 = (($200) + ($201))|0;
          $207 = $206 & 65535;
          $208 = $205 >>> 8;
          $209 = $208 & 1;
          $210 = (($209) + ($93))|0;
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $207;$s_time$0 = $210;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 149:  {
          $211 = (($97) + ($x$0))|0;
          $212 = $211 & 255;
          $data$5 = $212;
          label = 29;
          break;
         }
         case 133:  {
          $data$5 = $97;
          label = 29;
          break;
         }
         case 200:  {
          $216 = (($y$0) + 1)|0;
          $217 = $216 & 255;
          $x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $93;$pc$1$phi = $89;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $216;$y$0 = $217;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 168:  {
          $y$0$phi = $a$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $93;$pc$1$phi = $89;$nz$0$phi = $a$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 152:  {
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $93;$pc$1$phi = $89;$nz$0$phi = $y$0;$c$0$phi = $c$0;$a$0$phi = $y$0;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 173:  {
          $218 = (__Z8get_le16PKv($86)|0);
          $219 = (($pc$1) + 3)|0;
          HEAP32[$5>>2] = $93;
          $220 = (__ZN7Nsf_Emu8cpu_readEj($36,$218)|0);
          $221 = HEAP32[$5>>2]|0;
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0 = $220;$nz$0 = $220;$pc$1 = $219;$s_time$0 = $221;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;
          continue L1;
          break;
         }
         case 96:  {
          $222 = (($this) + ($sp$0)|0);
          $223 = HEAP8[$222]|0;
          $224 = $223&255;
          $225 = (($224) + 1)|0;
          $226 = (($sp$0) + -255)|0;
          $227 = $226 | 256;
          $228 = (($this) + ($227)|0);
          $229 = HEAP8[$228]|0;
          $230 = $229&255;
          $231 = $230 << 8;
          $232 = (($225) + ($231))|0;
          $233 = (($sp$0) + -254)|0;
          $234 = $233 | 256;
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$s_time$0$phi = $93;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $232;$sp$0 = $234;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$s_time$0 = $s_time$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 153:  {
          $235 = (__Z8get_le16PKv($86)|0);
          $236 = (($235) + ($y$0))|0;
          $237 = (($pc$1) + 3)|0;
          $238 = ($236>>>0)<(2048);
          if (!($238)) {
           $addr10$0 = $236;$pc$4 = $237;
           label = 41;
           break L6;
          }
          $239 = $a$0&255;
          $240 = (($this) + ($236)|0);
          HEAP8[$240] = $239;
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $93;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $237;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 141:  {
          $241 = (__Z8get_le16PKv($86)|0);
          $242 = (($pc$1) + 3)|0;
          $243 = ($241>>>0)<(2048);
          if (!($243)) {
           $addr10$0 = $241;$pc$4 = $242;
           label = 41;
           break L6;
          }
          $244 = $a$0&255;
          $245 = (($this) + ($241)|0);
          HEAP8[$245] = $244;
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $93;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $242;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 157:  {
          $246 = (__Z8get_le16PKv($86)|0);
          $247 = (($246) + ($x$0))|0;
          $248 = (($pc$1) + 3)|0;
          $249 = ($247>>>0)<(2048);
          if (!($249)) {
           $addr10$0 = $247;$pc$4 = $248;
           label = 41;
           break L6;
          }
          $250 = $a$0&255;
          $251 = (($this) + ($247)|0);
          HEAP8[$251] = $250;
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $93;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $248;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 145:  {
          $253 = (($this) + ($97)|0);
          $254 = HEAP8[$253]|0;
          $255 = $254&255;
          $256 = (($255) + ($y$0))|0;
          $257 = (($97) + 1)|0;
          $258 = $257 & 255;
          $259 = (($this) + ($258)|0);
          $260 = HEAP8[$259]|0;
          $261 = $260&255;
          $262 = $261 << 8;
          $263 = (($256) + ($262))|0;
          $264 = (($pc$1) + 2)|0;
          $addr10$0 = $263;$pc$4 = $264;
          label = 41;
          break;
         }
         case 129:  {
          $265 = (($97) + ($x$0))|0;
          $266 = (($265) + 1)|0;
          $267 = $266 & 255;
          $268 = (($this) + ($267)|0);
          $269 = HEAP8[$268]|0;
          $270 = $269&255;
          $271 = $270 << 8;
          $272 = $265 & 255;
          $273 = (($this) + ($272)|0);
          $274 = HEAP8[$273]|0;
          $275 = $274&255;
          $276 = $271 | $275;
          $277 = (($pc$1) + 2)|0;
          $addr10$0 = $276;$pc$4 = $277;
          label = 41;
          break;
         }
         case 169:  {
          $278 = (($pc$1) + 2)|0;
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $93;$c$0$phi = $c$0;$a$0 = $97;$nz$0 = $97;$pc$1 = $278;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$c$0 = $c$0$phi;
          continue L1;
          break;
         }
         case 161:  {
          $279 = (($97) + ($x$0))|0;
          $280 = (($279) + 1)|0;
          $281 = $280 & 255;
          $282 = (($this) + ($281)|0);
          $283 = HEAP8[$282]|0;
          $284 = $283&255;
          $285 = $284 << 8;
          $286 = $279 & 255;
          $287 = (($this) + ($286)|0);
          $288 = HEAP8[$287]|0;
          $289 = $288&255;
          $290 = $285 | $289;
          $291 = (($pc$1) + 2)|0;
          $addr13$0 = $290;$pc$5 = $291;$s_time$4 = $93;
          label = 49;
          break;
         }
         case 177:  {
          $292 = (($this) + ($97)|0);
          $293 = HEAP8[$292]|0;
          $294 = $293&255;
          $295 = (($294) + ($y$0))|0;
          $296 = $295 >>> 8;
          $297 = (($296) + ($93))|0;
          $298 = (($97) + 1)|0;
          $299 = $298 & 255;
          $300 = (($this) + ($299)|0);
          $301 = HEAP8[$300]|0;
          $302 = $301&255;
          $303 = $302 << 8;
          $304 = (($303) + ($295))|0;
          $305 = (($pc$1) + 2)|0;
          $306 = $304 & 2047;
          $307 = $304 >>> 11;
          $308 = (($s) + ($307<<2)|0);
          $309 = HEAP32[$308>>2]|0;
          $310 = (($309) + ($306)|0);
          $311 = HEAP8[$310]|0;
          $312 = $311&255;
          $313 = $304 ^ 32768;
          $314 = ($313>>>0)<(40960);
          if ($314) {
           $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0 = $312;$nz$0 = $312;$pc$1 = $305;$s_time$0 = $297;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;
           continue L1;
          } else {
           $addr13$0 = $304;$pc$5 = $305;$s_time$4 = $297;
           label = 49;
          }
          break;
         }
         case 185:  {
          $315 = (($97) + ($y$0))|0;
          $316 = $315 >>> 8;
          $317 = (($316) + ($93))|0;
          $318 = (__Z8get_le16PKv($86)|0);
          $319 = (($318) + ($y$0))|0;
          $320 = (($pc$1) + 3)|0;
          $321 = $319 & 2047;
          $322 = $319 >>> 11;
          $323 = (($s) + ($322<<2)|0);
          $324 = HEAP32[$323>>2]|0;
          $325 = (($324) + ($321)|0);
          $326 = HEAP8[$325]|0;
          $327 = $326&255;
          $328 = $319 ^ 32768;
          $329 = ($328>>>0)<(40960);
          if ($329) {
           $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0 = $327;$nz$0 = $327;$pc$1 = $320;$s_time$0 = $317;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;
           continue L1;
          } else {
           $addr13$0 = $319;$pc$5 = $320;$s_time$4 = $317;
           label = 49;
          }
          break;
         }
         case 189:  {
          $330 = (($97) + ($x$0))|0;
          $331 = $330 >>> 8;
          $332 = (($331) + ($93))|0;
          $333 = (__Z8get_le16PKv($86)|0);
          $334 = (($333) + ($x$0))|0;
          $335 = (($pc$1) + 3)|0;
          $336 = $334 & 2047;
          $337 = $334 >>> 11;
          $338 = (($s) + ($337<<2)|0);
          $339 = HEAP32[$338>>2]|0;
          $340 = (($339) + ($336)|0);
          $341 = HEAP8[$340]|0;
          $342 = $341&255;
          $343 = $334 ^ 32768;
          $344 = ($343>>>0)<(40960);
          if ($344) {
           $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0 = $342;$nz$0 = $342;$pc$1 = $335;$s_time$0 = $332;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;
           continue L1;
          } else {
           $addr13$0 = $334;$pc$5 = $335;$s_time$4 = $332;
           label = 49;
          }
          break;
         }
         case 80:  {
          $347 = $96 << 24 >> 24;
          $348 = (($pc$1) + 2)|0;
          $349 = $status$0 & 64;
          $350 = ($349|0)==(0);
          if (!($350)) {
           $pc$0 = $348;
           label = 2;
           break L6;
          }
          $351 = $348 & 255;
          $352 = (($347) + ($351))|0;
          $353 = (($347) + ($348))|0;
          $354 = $353 & 65535;
          $355 = $352 >>> 8;
          $356 = $355 & 1;
          $357 = (($356) + ($93))|0;
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $354;$s_time$0 = $357;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 112:  {
          $358 = $96 << 24 >> 24;
          $359 = (($pc$1) + 2)|0;
          $360 = $status$0 & 64;
          $361 = ($360|0)==(0);
          if ($361) {
           $pc$0 = $359;
           label = 2;
           break L6;
          }
          $362 = $359 & 255;
          $363 = (($358) + ($362))|0;
          $364 = (($358) + ($359))|0;
          $365 = $364 & 65535;
          $366 = $363 >>> 8;
          $367 = $366 & 1;
          $368 = (($367) + ($93))|0;
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $365;$s_time$0 = $368;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 176:  {
          $369 = $96 << 24 >> 24;
          $370 = (($pc$1) + 2)|0;
          $371 = $c$0 & 256;
          $372 = ($371|0)==(0);
          if ($372) {
           $pc$0 = $370;
           label = 2;
           break L6;
          }
          $373 = $370 & 255;
          $374 = (($369) + ($373))|0;
          $375 = (($369) + ($370))|0;
          $376 = $375 & 65535;
          $377 = $374 >>> 8;
          $378 = $377 & 1;
          $379 = (($378) + ($93))|0;
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $376;$s_time$0 = $379;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 144:  {
          $380 = $96 << 24 >> 24;
          $381 = (($pc$1) + 2)|0;
          $382 = $c$0 & 256;
          $383 = ($382|0)==(0);
          if (!($383)) {
           $pc$0 = $381;
           label = 2;
           break L6;
          }
          $384 = $381 & 255;
          $385 = (($380) + ($384))|0;
          $386 = (($380) + ($381))|0;
          $387 = $386 & 65535;
          $388 = $385 >>> 8;
          $389 = $388 & 1;
          $390 = (($389) + ($93))|0;
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $387;$s_time$0 = $390;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 148:  {
          $391 = (($97) + ($x$0))|0;
          $392 = $391 & 255;
          $data$6 = $392;
          label = 59;
          break;
         }
         case 132:  {
          $data$6 = $97;
          label = 59;
          break;
         }
         case 150:  {
          $396 = (($97) + ($y$0))|0;
          $397 = $396 & 255;
          $data$7 = $397;
          label = 61;
          break;
         }
         case 134:  {
          $data$7 = $97;
          label = 61;
          break;
         }
         case 182:  {
          $401 = (($97) + ($y$0))|0;
          $402 = $401 & 255;
          $data$8 = $402;
          label = 63;
          break;
         }
         case 166:  {
          $data$8 = $97;
          label = 63;
          break;
         }
         case 162:  {
          $data$9 = $97;
          label = 64;
          break;
         }
         case 180:  {
          $407 = (($97) + ($x$0))|0;
          $408 = $407 & 255;
          $data$10 = $408;
          label = 66;
          break;
         }
         case 164:  {
          $data$10 = $97;
          label = 66;
          break;
         }
         case 160:  {
          $data$11 = $97;
          label = 67;
          break;
         }
         case 188:  {
          $413 = (($97) + ($x$0))|0;
          $414 = $413 >>> 8;
          $415 = (($414) + ($93))|0;
          $data$12 = $413;$s_time$5 = $415;
          label = 69;
          break;
         }
         case 172:  {
          $data$12 = $97;$s_time$5 = $93;
          label = 69;
          break;
         }
         case 190:  {
          $424 = (($97) + ($y$0))|0;
          $425 = $424 >>> 8;
          $426 = (($425) + ($93))|0;
          $data$13 = $424;$s_time$6 = $426;
          label = 71;
          break;
         }
         case 142:  {
          $temp25$0 = $x$0;
          label = 73;
          break;
         }
         case 174:  {
          $data$13 = $97;$s_time$6 = $93;
          label = 71;
          break;
         }
         case 140:  {
          $temp25$0 = $y$0;
          label = 73;
          break;
         }
         case 236:  {
          $441 = (__Z8get_le16PKv($86)|0);
          $442 = (($pc$1) + 2)|0;
          HEAP32[$5>>2] = $93;
          $443 = (__ZN7Nsf_Emu8cpu_readEj($48,$441)|0);
          $444 = HEAP32[$5>>2]|0;
          $data$14 = $443;$pc$6 = $442;$s_time$7 = $444;
          label = 78;
          break;
         }
         case 228:  {
          $445 = (($this) + ($97)|0);
          $446 = HEAP8[$445]|0;
          $447 = $446&255;
          $data$14 = $447;$pc$6 = $89;$s_time$7 = $93;
          label = 78;
          break;
         }
         case 224:  {
          $data$14 = $97;$pc$6 = $89;$s_time$7 = $93;
          label = 78;
          break;
         }
         case 204:  {
          $452 = (__Z8get_le16PKv($86)|0);
          $453 = (($pc$1) + 2)|0;
          HEAP32[$5>>2] = $93;
          $454 = (__ZN7Nsf_Emu8cpu_readEj($50,$452)|0);
          $455 = HEAP32[$5>>2]|0;
          $data$15 = $454;$pc$7 = $453;$s_time$8 = $455;
          label = 81;
          break;
         }
         case 196:  {
          $456 = (($this) + ($97)|0);
          $457 = HEAP8[$456]|0;
          $458 = $457&255;
          $data$15 = $458;$pc$7 = $89;$s_time$8 = $93;
          label = 81;
          break;
         }
         case 192:  {
          $data$15 = $97;$pc$7 = $89;$s_time$8 = $93;
          label = 81;
          break;
         }
         case 33:  {
          $463 = (($97) + ($x$0))|0;
          $464 = (($463) + 1)|0;
          $465 = $464 & 255;
          $466 = (($this) + ($465)|0);
          $467 = HEAP8[$466]|0;
          $468 = $467&255;
          $469 = $468 << 8;
          $470 = $463 & 255;
          $471 = (($this) + ($470)|0);
          $472 = HEAP8[$471]|0;
          $473 = $472&255;
          $474 = $469 | $473;
          $data$19 = $474;$pc$8 = $89;$s_time$10 = $93;
          label = 89;
          break;
         }
         case 49:  {
          $475 = (($this) + ($97)|0);
          $476 = HEAP8[$475]|0;
          $477 = $476&255;
          $478 = (($477) + ($y$0))|0;
          $479 = (($97) + 1)|0;
          $480 = $479 & 255;
          $481 = (($this) + ($480)|0);
          $482 = HEAP8[$481]|0;
          $483 = $482&255;
          $484 = $483 << 8;
          $485 = (($484) + ($478))|0;
          $486 = $478 >>> 8;
          $487 = (($486) + ($93))|0;
          $data$19 = $485;$pc$8 = $89;$s_time$10 = $487;
          label = 89;
          break;
         }
         case 53:  {
          $488 = (($97) + ($x$0))|0;
          $489 = $488 & 255;
          $data$16 = $489;
          label = 85;
          break;
         }
         case 37:  {
          $data$16 = $97;
          label = 85;
          break;
         }
         case 61:  {
          $x$0$pn12 = $x$0;
          label = 87;
          break;
         }
         case 57:  {
          $x$0$pn12 = $y$0;
          label = 87;
          break;
         }
         case 45:  {
          $data$18 = $97;$s_time$9 = $93;
          label = 88;
          break;
         }
         case 41:  {
          $data$20 = $97;$pc$9 = $89;$s_time$11 = $93;
          label = 90;
          break;
         }
         case 65:  {
          $505 = (($97) + ($x$0))|0;
          $506 = (($505) + 1)|0;
          $507 = $506 & 255;
          $508 = (($this) + ($507)|0);
          $509 = HEAP8[$508]|0;
          $510 = $509&255;
          $511 = $510 << 8;
          $512 = $505 & 255;
          $513 = (($this) + ($512)|0);
          $514 = HEAP8[$513]|0;
          $515 = $514&255;
          $516 = $511 | $515;
          $data$24 = $516;$pc$10 = $89;$s_time$13 = $93;
          label = 98;
          break;
         }
         case 81:  {
          $517 = (($this) + ($97)|0);
          $518 = HEAP8[$517]|0;
          $519 = $518&255;
          $520 = (($519) + ($y$0))|0;
          $521 = (($97) + 1)|0;
          $522 = $521 & 255;
          $523 = (($this) + ($522)|0);
          $524 = HEAP8[$523]|0;
          $525 = $524&255;
          $526 = $525 << 8;
          $527 = (($526) + ($520))|0;
          $528 = $520 >>> 8;
          $529 = (($528) + ($93))|0;
          $data$24 = $527;$pc$10 = $89;$s_time$13 = $529;
          label = 98;
          break;
         }
         case 85:  {
          $530 = (($97) + ($x$0))|0;
          $531 = $530 & 255;
          $data$21 = $531;
          label = 94;
          break;
         }
         case 69:  {
          $data$21 = $97;
          label = 94;
          break;
         }
         case 93:  {
          $x$0$pn10 = $x$0;
          label = 96;
          break;
         }
         case 89:  {
          $x$0$pn10 = $y$0;
          label = 96;
          break;
         }
         case 77:  {
          $data$23 = $97;$s_time$12 = $93;
          label = 97;
          break;
         }
         case 73:  {
          $data$25 = $97;$pc$11 = $89;$s_time$14 = $93;
          label = 99;
          break;
         }
         case 1:  {
          $547 = (($97) + ($x$0))|0;
          $548 = (($547) + 1)|0;
          $549 = $548 & 255;
          $550 = (($this) + ($549)|0);
          $551 = HEAP8[$550]|0;
          $552 = $551&255;
          $553 = $552 << 8;
          $554 = $547 & 255;
          $555 = (($this) + ($554)|0);
          $556 = HEAP8[$555]|0;
          $557 = $556&255;
          $558 = $553 | $557;
          $data$29 = $558;$pc$12 = $89;$s_time$16 = $93;
          label = 107;
          break;
         }
         case 17:  {
          $559 = (($this) + ($97)|0);
          $560 = HEAP8[$559]|0;
          $561 = $560&255;
          $562 = (($561) + ($y$0))|0;
          $563 = (($97) + 1)|0;
          $564 = $563 & 255;
          $565 = (($this) + ($564)|0);
          $566 = HEAP8[$565]|0;
          $567 = $566&255;
          $568 = $567 << 8;
          $569 = (($568) + ($562))|0;
          $570 = $562 >>> 8;
          $571 = (($570) + ($93))|0;
          $data$29 = $569;$pc$12 = $89;$s_time$16 = $571;
          label = 107;
          break;
         }
         case 21:  {
          $572 = (($97) + ($x$0))|0;
          $573 = $572 & 255;
          $data$26 = $573;
          label = 103;
          break;
         }
         case 5:  {
          $data$26 = $97;
          label = 103;
          break;
         }
         case 29:  {
          $x$0$pn8 = $x$0;
          label = 105;
          break;
         }
         case 25:  {
          $x$0$pn8 = $y$0;
          label = 105;
          break;
         }
         case 13:  {
          $data$28 = $97;$s_time$15 = $93;
          label = 106;
          break;
         }
         case 9:  {
          $data$30 = $97;$pc$13 = $89;$s_time$17 = $93;
          label = 108;
          break;
         }
         case 44:  {
          $589 = (__Z8get_le16PKv($86)|0);
          $590 = (($pc$1) + 3)|0;
          $591 = $status$0 & -65;
          HEAP32[$5>>2] = $93;
          $592 = (__ZN7Nsf_Emu8cpu_readEj($58,$589)|0);
          $593 = HEAP32[$5>>2]|0;
          $594 = $592 & 64;
          $595 = $594 | $591;
          $596 = $592 & $a$0;
          $597 = ($596|0)==(0);
          $598 = $592 << 8;
          $$17 = $597 ? $598 : $592;
          $y$0$phi = $y$0;$x$0$phi = $x$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $$17;$pc$1 = $590;$s_time$0 = $593;$status$0 = $595;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 36:  {
          $599 = (($this) + ($97)|0);
          $600 = HEAP8[$599]|0;
          $601 = $600&255;
          $602 = (($pc$1) + 2)|0;
          $603 = $status$0 & -65;
          $604 = $601 & 64;
          $605 = $604 | $603;
          $606 = $601 & $a$0;
          $607 = ($606|0)==(0);
          $608 = $601 << 8;
          $$18 = $607 ? $608 : $601;
          $y$0$phi = $y$0;$x$0$phi = $x$0;$sp$0$phi = $sp$0;$s_time$0$phi = $93;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $$18;$pc$1 = $602;$status$0 = $605;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 225:  {
          $609 = (($97) + ($x$0))|0;
          $610 = (($609) + 1)|0;
          $611 = $610 & 255;
          $612 = (($this) + ($611)|0);
          $613 = HEAP8[$612]|0;
          $614 = $613&255;
          $615 = $614 << 8;
          $616 = $609 & 255;
          $617 = (($this) + ($616)|0);
          $618 = HEAP8[$617]|0;
          $619 = $618&255;
          $620 = $615 | $619;
          $data$34 = $620;$pc$14 = $89;$s_time$19 = $93;
          label = 118;
          break;
         }
         case 241:  {
          $621 = (($this) + ($97)|0);
          $622 = HEAP8[$621]|0;
          $623 = $622&255;
          $624 = (($623) + ($y$0))|0;
          $625 = (($97) + 1)|0;
          $626 = $625 & 255;
          $627 = (($this) + ($626)|0);
          $628 = HEAP8[$627]|0;
          $629 = $628&255;
          $630 = $629 << 8;
          $631 = (($630) + ($624))|0;
          $632 = $624 >>> 8;
          $633 = (($632) + ($93))|0;
          $data$34 = $631;$pc$14 = $89;$s_time$19 = $633;
          label = 118;
          break;
         }
         case 245:  {
          $634 = (($97) + ($x$0))|0;
          $635 = $634 & 255;
          $data$31 = $635;
          label = 114;
          break;
         }
         case 229:  {
          $data$31 = $97;
          label = 114;
          break;
         }
         case 253:  {
          $x$0$pn6 = $x$0;
          label = 116;
          break;
         }
         case 249:  {
          $x$0$pn6 = $y$0;
          label = 116;
          break;
         }
         case 237:  {
          $data$33 = $97;$s_time$18 = $93;
          label = 117;
          break;
         }
         case 235: case 233:  {
          $data$35 = $97;$pc$15 = $89;$s_time$20 = $93;
          label = 119;
          break;
         }
         case 97:  {
          $650 = (($97) + ($x$0))|0;
          $651 = (($650) + 1)|0;
          $652 = $651 & 255;
          $653 = (($this) + ($652)|0);
          $654 = HEAP8[$653]|0;
          $655 = $654&255;
          $656 = $655 << 8;
          $657 = $650 & 255;
          $658 = (($this) + ($657)|0);
          $659 = HEAP8[$658]|0;
          $660 = $659&255;
          $661 = $656 | $660;
          $data$39 = $661;$pc$16 = $89;$s_time$22 = $93;
          label = 127;
          break;
         }
         case 113:  {
          $662 = (($this) + ($97)|0);
          $663 = HEAP8[$662]|0;
          $664 = $663&255;
          $665 = (($664) + ($y$0))|0;
          $666 = (($97) + 1)|0;
          $667 = $666 & 255;
          $668 = (($this) + ($667)|0);
          $669 = HEAP8[$668]|0;
          $670 = $669&255;
          $671 = $670 << 8;
          $672 = (($671) + ($665))|0;
          $673 = $665 >>> 8;
          $674 = (($673) + ($93))|0;
          $data$39 = $672;$pc$16 = $89;$s_time$22 = $674;
          label = 127;
          break;
         }
         case 117:  {
          $675 = (($97) + ($x$0))|0;
          $676 = $675 & 255;
          $data$36 = $676;
          label = 123;
          break;
         }
         case 101:  {
          $data$36 = $97;
          label = 123;
          break;
         }
         case 125:  {
          $x$0$pn = $x$0;
          label = 125;
          break;
         }
         case 121:  {
          $x$0$pn = $y$0;
          label = 125;
          break;
         }
         case 109:  {
          $data$38 = $97;$s_time$21 = $93;
          label = 126;
          break;
         }
         case 74:  {
          $c$1 = 0;
          label = 130;
          break;
         }
         case 105:  {
          $data$40 = $97;$pc$17 = $89;$s_time$23 = $93;
          break;
         }
         case 106:  {
          $c$1 = $c$0;
          label = 130;
          break;
         }
         case 10:  {
          $709 = $a$0 << 1;
          $710 = $709 & 254;
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $93;$pc$1$phi = $89;$a$0 = $710;$c$0 = $709;$nz$0 = $709;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;
          continue L1;
          break;
         }
         case 42:  {
          $711 = $a$0 << 1;
          $712 = $c$0 >>> 8;
          $713 = $712 & 1;
          $714 = $711 | $713;
          $715 = $714 & 255;
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $93;$pc$1$phi = $89;$a$0 = $715;$c$0 = $711;$nz$0 = $714;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;
          continue L1;
          break;
         }
         case 94:  {
          $716 = (($97) + ($x$0))|0;
          $data$41 = $716;
          label = 134;
          break;
         }
         case 78:  {
          $data$41 = $97;
          label = 134;
          break;
         }
         case 110:  {
          $c$2 = $c$0;$data$42 = $97;
          label = 135;
          break;
         }
         case 62:  {
          $728 = (($97) + ($x$0))|0;
          $c$3 = $c$0;$data$44 = $728;
          label = 139;
          break;
         }
         case 30:  {
          $729 = (($97) + ($x$0))|0;
          $data$43 = $729;
          label = 138;
          break;
         }
         case 14:  {
          $data$43 = $97;
          label = 138;
          break;
         }
         case 46:  {
          $c$3 = $c$0;$data$44 = $97;
          label = 139;
          break;
         }
         case 126:  {
          $743 = (($97) + ($x$0))|0;
          $c$2 = $c$0;$data$42 = $743;
          label = 135;
          break;
         }
         case 118:  {
          $744 = (($97) + ($x$0))|0;
          $745 = $744 & 255;
          $c$5 = $c$0;$data$47 = $745;
          label = 145;
          break;
         }
         case 86:  {
          $746 = (($97) + ($x$0))|0;
          $747 = $746 & 255;
          $data$46 = $747;
          label = 144;
          break;
         }
         case 70:  {
          $data$46 = $97;
          label = 144;
          break;
         }
         case 102:  {
          $c$5 = $c$0;$data$47 = $97;
          label = 145;
          break;
         }
         case 54:  {
          $756 = (($97) + ($x$0))|0;
          $757 = $756 & 255;
          $c$6 = $c$0;$data$49 = $757;
          label = 149;
          break;
         }
         case 22:  {
          $758 = (($97) + ($x$0))|0;
          $759 = $758 & 255;
          $data$48 = $759;
          label = 148;
          break;
         }
         case 6:  {
          $data$48 = $97;
          label = 148;
          break;
         }
         case 38:  {
          $c$6 = $c$0;$data$49 = $97;
          label = 149;
          break;
         }
         case 202:  {
          $767 = (($x$0) + -1)|0;
          $768 = $767 & 255;
          $y$0$phi = $y$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $93;$pc$1$phi = $89;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $767;$x$0 = $768;$y$0 = $y$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 136:  {
          $769 = (($y$0) + -1)|0;
          $770 = $769 & 255;
          $x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $93;$pc$1$phi = $89;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $769;$y$0 = $770;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 246:  {
          $771 = (($97) + ($x$0))|0;
          $772 = $771 & 255;
          $data$52 = $772;$nz$2 = 1;
          label = 155;
          break;
         }
         case 214:  {
          $773 = (($97) + ($x$0))|0;
          $774 = $773 & 255;
          $data$51 = $774;
          label = 154;
          break;
         }
         case 198:  {
          $data$51 = $97;
          label = 154;
          break;
         }
         case 230:  {
          $data$52 = $97;$nz$2 = 1;
          label = 155;
          break;
         }
         case 254:  {
          $782 = (__Z8get_le16PKv($86)|0);
          $783 = (($782) + ($x$0))|0;
          $data$56 = $783;$nz$4 = 1;
          label = 161;
          break;
         }
         case 238:  {
          $784 = (__Z8get_le16PKv($86)|0);
          $data$56 = $784;$nz$4 = 1;
          label = 161;
          break;
         }
         case 222:  {
          $785 = (__Z8get_le16PKv($86)|0);
          $786 = (($785) + ($x$0))|0;
          $data$56 = $786;$nz$4 = -1;
          label = 161;
          break;
         }
         case 206:  {
          $787 = (__Z8get_le16PKv($86)|0);
          $data$56 = $787;$nz$4 = -1;
          label = 161;
          break;
         }
         case 170:  {
          $y$0$phi = $y$0;$x$0$phi = $a$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $93;$pc$1$phi = $89;$nz$0$phi = $a$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 138:  {
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $93;$pc$1$phi = $89;$nz$0$phi = $x$0;$c$0$phi = $c$0;$a$0$phi = $x$0;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 154:  {
          $793 = (($x$0) + 1)|0;
          $794 = $793 | 256;
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$s_time$0$phi = $93;$pc$1$phi = $89;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$sp$0 = $794;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 186:  {
          $795 = (($sp$0) + 255)|0;
          $796 = $795 & 255;
          $y$0$phi = $y$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $93;$pc$1$phi = $89;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $796;$x$0 = $796;$y$0 = $y$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 72:  {
          $797 = (($sp$0) + -1)|0;
          $798 = $797 | 256;
          $799 = $a$0&255;
          $800 = (($this) + ($798)|0);
          HEAP8[$800] = $799;
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$s_time$0$phi = $93;$pc$1$phi = $89;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$sp$0 = $798;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 104:  {
          $801 = (($this) + ($sp$0)|0);
          $802 = HEAP8[$801]|0;
          $803 = $802&255;
          $804 = (($sp$0) + -255)|0;
          $805 = $804 | 256;
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$s_time$0$phi = $93;$pc$1$phi = $89;$c$0$phi = $c$0;$a$0 = $803;$nz$0 = $803;$sp$0 = $805;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$c$0 = $c$0$phi;
          continue L1;
          break;
         }
         case 64:  {
          $806 = (($this) + ($sp$0)|0);
          $807 = HEAP8[$806]|0;
          $808 = $807&255;
          $809 = (($sp$0) + -255)|0;
          $810 = $809 | 256;
          $811 = (($this) + ($810)|0);
          $812 = HEAP8[$811]|0;
          $813 = $812&255;
          $814 = (($sp$0) + -254)|0;
          $815 = $814 | 256;
          $816 = (($this) + ($815)|0);
          $817 = HEAP8[$816]|0;
          $818 = $817&255;
          $819 = $818 << 8;
          $820 = $819 | $813;
          $821 = (($sp$0) + -253)|0;
          $822 = $821 | 256;
          $823 = $808 & 76;
          $824 = $808 << 8;
          $825 = $808 & 2;
          $826 = $825 | $824;
          $827 = $826 ^ 2;
          $828 = $808 ^ $status$0;
          $829 = $828 & 4;
          $830 = ($829|0)==(0);
          if ($830) {
           $y$0$phi = $y$0;$x$0$phi = $x$0;$s_time$0$phi = $93;$a$0$phi = $a$0;$c$0 = $824;$nz$0 = $827;$pc$1 = $820;$sp$0 = $822;$status$0 = $823;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$s_time$0 = $s_time$0$phi;$a$0 = $a$0$phi;
           continue L1;
          }
          $831 = $823&255;
          HEAP8[$24] = $831;
          $832 = HEAP32[$71>>2]|0;
          $833 = HEAP32[$72>>2]|0;
          $834 = (($832) - ($833))|0;
          $835 = ($834|0)<(1);
          if ($835) {
           $y$0$phi = $y$0;$x$0$phi = $x$0;$s_time$0$phi = $93;$a$0$phi = $a$0;$c$0 = $824;$nz$0 = $827;$pc$1 = $820;$sp$0 = $822;$status$0 = $823;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$s_time$0 = $s_time$0$phi;$a$0 = $a$0$phi;
           continue L1;
          }
          $836 = $808 & 4;
          $837 = ($836|0)==(0);
          if (!($837)) {
           $y$0$phi = $y$0;$x$0$phi = $x$0;$s_time$0$phi = $93;$a$0$phi = $a$0;$c$0 = $824;$nz$0 = $827;$pc$1 = $820;$sp$0 = $822;$status$0 = $823;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$s_time$0 = $s_time$0$phi;$a$0 = $a$0$phi;
           continue L1;
          }
          $838 = (($834) + ($93))|0;
          HEAP32[$71>>2] = $833;
          $y$0$phi = $y$0;$x$0$phi = $x$0;$a$0$phi = $a$0;$c$0 = $824;$nz$0 = $827;$pc$1 = $820;$s_time$0 = $838;$sp$0 = $822;$status$0 = $823;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 40:  {
          $839 = (($this) + ($sp$0)|0);
          $840 = HEAP8[$839]|0;
          $841 = $840&255;
          $842 = (($sp$0) + -255)|0;
          $843 = $842 | 256;
          $844 = $841 ^ $status$0;
          $845 = $841 & 76;
          $846 = $841 << 8;
          $847 = $841 & 2;
          $848 = $847 | $846;
          $849 = $848 ^ 2;
          $850 = $844 & 4;
          $851 = ($850|0)==(0);
          if ($851) {
           $y$0$phi = $y$0;$x$0$phi = $x$0;$s_time$0$phi = $93;$pc$1$phi = $89;$a$0$phi = $a$0;$c$0 = $846;$nz$0 = $849;$sp$0 = $843;$status$0 = $845;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$a$0 = $a$0$phi;
           continue L1;
          }
          $852 = $841 & 4;
          $853 = ($852|0)==(0);
          if ($853) {
           $c$8 = $846;$nz$5 = $849;$sp$1 = $843;$status$1 = $845;
           label = 183;
          } else {
           $c$9 = $846;$nz$6 = $849;$sp$2 = $843;$status$2 = $845;
           label = 189;
          }
          break;
         }
         case 210: case 178: case 146: case 114: case 98: case 82: case 66: case 50: case 34: case 18: case 2:  {
          $pc$21 = $89;$s_time$27 = $93;
          label = 202;
          break L1;
          break;
         }
         case 56:  {
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $93;$pc$1$phi = $89;$nz$0$phi = $nz$0;$a$0$phi = $a$0;$c$0 = -1;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$nz$0 = $nz$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 108:  {
          $870 = (__Z8get_le16PKv($86)|0);
          $871 = $870 >>> 11;
          $872 = (($s) + ($871<<2)|0);
          $873 = HEAP32[$872>>2]|0;
          $874 = $870 & 2047;
          $875 = (($873) + ($874)|0);
          $876 = HEAP8[$875]|0;
          $877 = $876&255;
          $878 = $870 & 1792;
          $879 = (($870) + 1)|0;
          $880 = $879 & 255;
          $881 = $880 | $878;
          $882 = (($873) + ($881)|0);
          $883 = HEAP8[$882]|0;
          $884 = $883&255;
          $885 = $884 << 8;
          $886 = $885 | $877;
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $93;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $886;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 24:  {
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $93;$pc$1$phi = $89;$nz$0$phi = $nz$0;$a$0$phi = $a$0;$c$0 = 0;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$nz$0 = $nz$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 184:  {
          $887 = $status$0 & -65;
          $y$0$phi = $y$0;$x$0$phi = $x$0;$sp$0$phi = $sp$0;$s_time$0$phi = $93;$pc$1$phi = $89;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$status$0 = $887;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 216:  {
          $888 = $status$0 & -9;
          $y$0$phi = $y$0;$x$0$phi = $x$0;$sp$0$phi = $sp$0;$s_time$0$phi = $93;$pc$1$phi = $89;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$status$0 = $888;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 248:  {
          $889 = $status$0 | 8;
          $y$0$phi = $y$0;$x$0$phi = $x$0;$sp$0$phi = $sp$0;$s_time$0$phi = $93;$pc$1$phi = $89;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$status$0 = $889;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 88:  {
          $890 = $status$0 & 4;
          $891 = ($890|0)==(0);
          if ($891) {
           $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $93;$pc$1$phi = $89;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
           continue L1;
          }
          $892 = $status$0 & -5;
          $c$8 = $c$0;$nz$5 = $nz$0;$sp$1 = $sp$0;$status$1 = $892;
          label = 183;
          break;
         }
         case 120:  {
          $903 = $status$0 & 4;
          $904 = ($903|0)==(0);
          if (!($904)) {
           $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $93;$pc$1$phi = $89;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
           continue L1;
          }
          $905 = $status$0 | 4;
          $c$9 = $c$0;$nz$6 = $nz$0;$sp$2 = $sp$0;$status$2 = $905;
          label = 189;
          break;
         }
         case 252: case 220: case 124: case 92: case 60: case 28:  {
          $911 = (($97) + ($x$0))|0;
          $912 = $911 >>> 8;
          $913 = (($912) + ($93))|0;
          $s_time$24 = $913;
          label = 191;
          break;
         }
         case 12:  {
          $s_time$24 = $93;
          label = 191;
          break;
         }
         case 244: case 226: case 212: case 194: case 137: case 130: case 128: case 100: case 84: case 68: case 52: case 20: case 4: case 116:  {
          $pc$19 = $89;$s_time$25 = $93;
          label = 192;
          break;
         }
         case 242:  {
          $916 = ($pc$1>>>0)>(65535);
          if (!($916)) {
           $pc$21 = $pc$1;$s_time$27 = $93;
           label = 202;
           break L1;
          }
          $917 = $pc$1 & 65535;
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $93;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $917;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 255:  {
          $918 = $c$0 | 1;
          $c$10 = $918;
          label = 196;
          break;
         }
         case 8:  {
          $854 = $status$0 & 76;
          $855 = $nz$0 >>> 8;
          $856 = $855 | $nz$0;
          $857 = $856 & 128;
          $858 = $854 | $857;
          $859 = $c$0 >>> 8;
          $860 = $859 & 1;
          $861 = $858 | $860;
          $862 = $nz$0 & 255;
          $863 = ($862|0)==(0);
          $864 = $861 | 2;
          $$19 = $863 ? $864 : $861;
          $865 = (($sp$0) + -1)|0;
          $866 = $865 | 256;
          $867 = $$19 | 48;
          $868 = $867&255;
          $869 = (($this) + ($866)|0);
          HEAP8[$869] = $868;
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$s_time$0$phi = $93;$pc$1$phi = $89;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$sp$0 = $866;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         default: {
          $c$10 = $c$0;
          label = 196;
         }
         }
        } while(0);
        if ((label|0) == 2) {
         label = 0;
         $80 = (($93) + -1)|0;
         $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $pc$0;$s_time$0 = $80;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
         continue;
        }
        else if ((label|0) == 18) {
         label = 0;
         $172 = (($this) + ($data$0)|0);
         $173 = HEAP8[$172]|0;
         $174 = $173&255;
         $data$4 = $174;$pc$3 = $89;$s_time$3 = $93;
         label = 23;
        }
        else if ((label|0) == 20) {
         label = 0;
         $data$1 = (($x$0$pn16) + ($97))|0;
         $175 = $data$1 >>> 8;
         $176 = (($175) + ($93))|0;
         $data$2 = $data$1;$s_time$1 = $176;
         label = 21;
        }
        else if ((label|0) == 29) {
         label = 0;
         $213 = (($pc$1) + 2)|0;
         $214 = $a$0&255;
         $215 = (($this) + ($data$5)|0);
         HEAP8[$215] = $214;
         $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $93;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $213;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
         continue;
        }
        else if ((label|0) == 41) {
         label = 0;
         HEAP32[$5>>2] = $93;
         __ZN7Nsf_Emu9cpu_writeEji($38,$addr10$0,$a$0);
         $252 = HEAP32[$5>>2]|0;
         $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $pc$4;$s_time$0 = $252;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
         continue;
        }
        else if ((label|0) == 49) {
         label = 0;
         HEAP32[$5>>2] = $s_time$4;
         $345 = (__ZN7Nsf_Emu8cpu_readEj($40,$addr13$0)|0);
         $346 = HEAP32[$5>>2]|0;
         $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0 = $345;$nz$0 = $345;$pc$1 = $pc$5;$s_time$0 = $346;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;
         continue;
        }
        else if ((label|0) == 59) {
         label = 0;
         $393 = (($pc$1) + 2)|0;
         $394 = $y$0&255;
         $395 = (($this) + ($data$6)|0);
         HEAP8[$395] = $394;
         $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $93;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $393;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
         continue;
        }
        else if ((label|0) == 61) {
         label = 0;
         $398 = (($pc$1) + 2)|0;
         $399 = $x$0&255;
         $400 = (($this) + ($data$7)|0);
         HEAP8[$400] = $399;
         $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $93;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $398;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
         continue;
        }
        else if ((label|0) == 63) {
         label = 0;
         $403 = (($this) + ($data$8)|0);
         $404 = HEAP8[$403]|0;
         $405 = $404&255;
         $data$9 = $405;
         label = 64;
        }
        else if ((label|0) == 66) {
         label = 0;
         $409 = (($this) + ($data$10)|0);
         $410 = HEAP8[$409]|0;
         $411 = $410&255;
         $data$11 = $411;
         label = 67;
        }
        else if ((label|0) == 69) {
         label = 0;
         $$sum14 = (($84) + 2)|0;
         $416 = (($83) + ($$sum14)|0);
         $417 = HEAP8[$416]|0;
         $418 = $417&255;
         $419 = $418 << 8;
         $420 = (($419) + ($data$12))|0;
         $421 = (($pc$1) + 3)|0;
         HEAP32[$5>>2] = $s_time$5;
         $422 = (__ZN7Nsf_Emu8cpu_readEj($42,$420)|0);
         $423 = HEAP32[$5>>2]|0;
         $x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $422;$pc$1 = $421;$s_time$0 = $423;$y$0 = $422;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
         continue;
        }
        else if ((label|0) == 71) {
         label = 0;
         $$sum13 = (($84) + 2)|0;
         $427 = (($83) + ($$sum13)|0);
         $428 = HEAP8[$427]|0;
         $429 = $428&255;
         $430 = $429 << 8;
         $431 = (($430) + ($data$13))|0;
         $432 = (($pc$1) + 3)|0;
         HEAP32[$5>>2] = $s_time$6;
         $433 = (__ZN7Nsf_Emu8cpu_readEj($44,$431)|0);
         $434 = HEAP32[$5>>2]|0;
         $y$0$phi = $y$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $433;$pc$1 = $432;$s_time$0 = $434;$x$0 = $433;$y$0 = $y$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
         continue;
        }
        else if ((label|0) == 73) {
         label = 0;
         $435 = (__Z8get_le16PKv($86)|0);
         $436 = (($pc$1) + 3)|0;
         $437 = ($435>>>0)<(2048);
         if ($437) {
          $438 = $temp25$0&255;
          $439 = (($this) + ($435)|0);
          HEAP8[$439] = $438;
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $93;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $436;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue;
         } else {
          HEAP32[$5>>2] = $93;
          __ZN7Nsf_Emu9cpu_writeEji($46,$435,$temp25$0);
          $440 = HEAP32[$5>>2]|0;
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $436;$s_time$0 = $440;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue;
         }
        }
        else if ((label|0) == 78) {
         label = 0;
         $448 = (($x$0) - ($data$14))|0;
         $449 = (($pc$6) + 1)|0;
         $450 = $448 ^ -1;
         $451 = $448 & 255;
         $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$a$0$phi = $a$0;$c$0 = $450;$nz$0 = $451;$pc$1 = $449;$s_time$0 = $s_time$7;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$a$0 = $a$0$phi;
         continue;
        }
        else if ((label|0) == 81) {
         label = 0;
         $459 = (($y$0) - ($data$15))|0;
         $460 = (($pc$7) + 1)|0;
         $461 = $459 ^ -1;
         $462 = $459 & 255;
         $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$a$0$phi = $a$0;$c$0 = $461;$nz$0 = $462;$pc$1 = $460;$s_time$0 = $s_time$8;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$a$0 = $a$0$phi;
         continue;
        }
        else if ((label|0) == 85) {
         label = 0;
         $490 = (($this) + ($data$16)|0);
         $491 = HEAP8[$490]|0;
         $492 = $491&255;
         $data$20 = $492;$pc$9 = $89;$s_time$11 = $93;
         label = 90;
        }
        else if ((label|0) == 87) {
         label = 0;
         $data$17 = (($x$0$pn12) + ($97))|0;
         $493 = $data$17 >>> 8;
         $494 = (($493) + ($93))|0;
         $data$18 = $data$17;$s_time$9 = $494;
         label = 88;
        }
        else if ((label|0) == 94) {
         label = 0;
         $532 = (($this) + ($data$21)|0);
         $533 = HEAP8[$532]|0;
         $534 = $533&255;
         $data$25 = $534;$pc$11 = $89;$s_time$14 = $93;
         label = 99;
        }
        else if ((label|0) == 96) {
         label = 0;
         $data$22 = (($x$0$pn10) + ($97))|0;
         $535 = $data$22 >>> 8;
         $536 = (($535) + ($93))|0;
         $data$23 = $data$22;$s_time$12 = $536;
         label = 97;
        }
        else if ((label|0) == 103) {
         label = 0;
         $574 = (($this) + ($data$26)|0);
         $575 = HEAP8[$574]|0;
         $576 = $575&255;
         $data$30 = $576;$pc$13 = $89;$s_time$17 = $93;
         label = 108;
        }
        else if ((label|0) == 105) {
         label = 0;
         $data$27 = (($x$0$pn8) + ($97))|0;
         $577 = $data$27 >>> 8;
         $578 = (($577) + ($93))|0;
         $data$28 = $data$27;$s_time$15 = $578;
         label = 106;
        }
        else if ((label|0) == 114) {
         label = 0;
         $636 = (($this) + ($data$31)|0);
         $637 = HEAP8[$636]|0;
         $638 = $637&255;
         $data$35 = $638;$pc$15 = $89;$s_time$20 = $93;
         label = 119;
        }
        else if ((label|0) == 116) {
         label = 0;
         $data$32 = (($x$0$pn6) + ($97))|0;
         $639 = $data$32 >>> 8;
         $640 = (($639) + ($93))|0;
         $data$33 = $data$32;$s_time$18 = $640;
         label = 117;
        }
        else if ((label|0) == 123) {
         label = 0;
         $677 = (($this) + ($data$36)|0);
         $678 = HEAP8[$677]|0;
         $679 = $678&255;
         $data$40 = $679;$pc$17 = $89;$s_time$23 = $93;
        }
        else if ((label|0) == 125) {
         label = 0;
         $data$37 = (($x$0$pn) + ($97))|0;
         $680 = $data$37 >>> 8;
         $681 = (($680) + ($93))|0;
         $data$38 = $data$37;$s_time$21 = $681;
         label = 126;
        }
        else if ((label|0) == 130) {
         label = 0;
         $704 = $c$1 >>> 1;
         $705 = $704 & 128;
         $706 = $a$0 << 8;
         $707 = $a$0 >>> 1;
         $708 = $705 | $707;
         $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $93;$pc$1$phi = $89;$a$0 = $708;$c$0 = $706;$nz$0 = $708;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;
         continue;
        }
        else if ((label|0) == 134) {
         label = 0;
         $c$2 = 0;$data$42 = $data$41;
         label = 135;
        }
        else if ((label|0) == 138) {
         label = 0;
         $c$3 = 0;$data$44 = $data$43;
         label = 139;
        }
        else if ((label|0) == 144) {
         label = 0;
         $c$5 = 0;$data$47 = $data$46;
         label = 145;
        }
        else if ((label|0) == 148) {
         label = 0;
         $c$6 = 0;$data$49 = $data$48;
         label = 149;
        }
        else if ((label|0) == 154) {
         label = 0;
         $data$52 = $data$51;$nz$2 = -1;
         label = 155;
        }
        else if ((label|0) == 161) {
         label = 0;
         HEAP32[$5>>2] = $93;
         $788 = (__ZN7Nsf_Emu8cpu_readEj($70,$data$56)|0);
         $789 = (($788) + ($nz$4))|0;
         $790 = (($pc$1) + 3)|0;
         $791 = $789 & 255;
         __ZN7Nsf_Emu9cpu_writeEji($70,$data$56,$791);
         $792 = HEAP32[$5>>2]|0;
         $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $789;$pc$1 = $790;$s_time$0 = $792;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
         continue;
        }
        else if ((label|0) == 183) {
         label = 0;
         $893 = $status$1&255;
         HEAP8[$24] = $893;
         $894 = HEAP32[$73>>2]|0;
         $895 = HEAP32[$74>>2]|0;
         $896 = (($894) - ($895))|0;
         $897 = ($896|0)<(1);
         if ($897) {
          $y$0$phi = $y$0;$x$0$phi = $x$0;$s_time$0$phi = $93;$pc$1$phi = $89;$a$0$phi = $a$0;$c$0 = $c$8;$nz$0 = $nz$5;$sp$0 = $sp$1;$status$0 = $status$1;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$a$0 = $a$0$phi;
          continue;
         }
         HEAP32[$73>>2] = $895;
         $898 = (($896) + ($93))|0;
         $899 = ($898|0)<(0);
         if ($899) {
          $y$0$phi = $y$0;$x$0$phi = $x$0;$pc$1$phi = $89;$a$0$phi = $a$0;$c$0 = $c$8;$nz$0 = $nz$5;$s_time$0 = $898;$sp$0 = $sp$1;$status$0 = $status$1;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$pc$1 = $pc$1$phi;$a$0 = $a$0$phi;
          continue;
         }
         $900 = (($898) + 1)|0;
         $901 = ($896|0)<($900|0);
         if ($901) {
          $y$0$phi = $y$0;$x$0$phi = $x$0;$pc$1$phi = $89;$a$0$phi = $a$0;$c$0 = $c$8;$nz$0 = $nz$5;$s_time$0 = $898;$sp$0 = $sp$1;$status$0 = $status$1;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$pc$1 = $pc$1$phi;$a$0 = $a$0$phi;
          continue;
         }
         $902 = (($900) + ($895))|0;
         HEAP32[$73>>2] = $902;
         $y$0$phi = $y$0;$x$0$phi = $x$0;$pc$1$phi = $89;$a$0$phi = $a$0;$c$0 = $c$8;$nz$0 = $nz$5;$s_time$0 = -1;$sp$0 = $sp$1;$status$0 = $status$1;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$pc$1 = $pc$1$phi;$a$0 = $a$0$phi;
         continue;
        }
        else if ((label|0) == 189) {
         label = 0;
         $906 = $status$2&255;
         HEAP8[$24] = $906;
         $907 = HEAP32[$75>>2]|0;
         $908 = HEAP32[$76>>2]|0;
         HEAP32[$75>>2] = $908;
         $909 = (($907) + ($93))|0;
         $910 = (($909) - ($908))|0;
         $y$0$phi = $y$0;$x$0$phi = $x$0;$pc$1$phi = $89;$a$0$phi = $a$0;$c$0 = $c$9;$nz$0 = $nz$6;$s_time$0 = $910;$sp$0 = $sp$2;$status$0 = $status$2;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$pc$1 = $pc$1$phi;$a$0 = $a$0$phi;
         continue;
        }
        else if ((label|0) == 191) {
         label = 0;
         $914 = (($pc$1) + 2)|0;
         $pc$19 = $914;$s_time$25 = $s_time$24;
         label = 192;
        }
        else if ((label|0) == 196) {
         label = 0;
         $919 = HEAP8[$85]|0;
         $920 = $919&255;
         $921 = $920 >>> 2;
         $922 = $921 & 7;
         $923 = (45296 + ($922)|0);
         $924 = HEAP8[$923]|0;
         $925 = $924&255;
         $926 = $920 << 1;
         $927 = $926 & 6;
         $928 = $925 >>> $927;
         $929 = $928 & 3;
         $930 = ($919<<24>>24)==(-100);
         $$ = $930 ? 2 : $929;
         $931 = (($$) + ($89))|0;
         $932 = HEAP32[$32>>2]|0;
         $933 = (($932) + 1)|0;
         HEAP32[$32>>2] = $933;
         $$mask = $920 & 240;
         $934 = ($$mask|0)==(176);
         if (!($934)) {
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $93;$nz$0$phi = $nz$0;$a$0$phi = $a$0;$c$0 = $c$10;$pc$1 = $931;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$nz$0 = $nz$0$phi;$a$0 = $a$0$phi;
          continue;
         }
         if ((($919<<24>>24) == -73)) {
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $93;$nz$0$phi = $nz$0;$a$0$phi = $a$0;$c$0 = $c$10;$pc$1 = $931;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$nz$0 = $nz$0$phi;$a$0 = $a$0$phi;
          continue;
         } else if ((($919<<24>>24) == -77)) {
          $935 = (($this) + ($97)|0);
          $936 = HEAP8[$935]|0;
          $937 = $936&255;
          $data$5721 = $937;
         } else {
          $data$5721 = $97;
         }
         $938 = (($data$5721) + ($y$0))|0;
         $939 = $938 >>> 8;
         $940 = (($939) + ($93))|0;
         $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$a$0$phi = $a$0;$c$0 = $c$10;$pc$1 = $931;$s_time$0 = $940;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$a$0 = $a$0$phi;
         continue;
        }
        if ((label|0) == 21) {
         label = 0;
         $177 = (($pc$1) + 2)|0;
         $$sum15 = (($84) + 2)|0;
         $178 = (($83) + ($$sum15)|0);
         $179 = HEAP8[$178]|0;
         $180 = $179&255;
         $181 = $180 << 8;
         $182 = (($181) + ($data$2))|0;
         $data$3 = $182;$pc$2 = $177;$s_time$2 = $s_time$1;
         label = 22;
        }
        else if ((label|0) == 64) {
         label = 0;
         $406 = (($pc$1) + 2)|0;
         $y$0$phi = $y$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $93;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $data$9;$pc$1 = $406;$x$0 = $data$9;$y$0 = $y$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
         continue;
        }
        else if ((label|0) == 67) {
         label = 0;
         $412 = (($pc$1) + 2)|0;
         $x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $93;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $data$11;$pc$1 = $412;$y$0 = $data$11;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
         continue;
        }
        else if ((label|0) == 88) {
         label = 0;
         $495 = (($pc$1) + 2)|0;
         $$sum11 = (($84) + 2)|0;
         $496 = (($83) + ($$sum11)|0);
         $497 = HEAP8[$496]|0;
         $498 = $497&255;
         $499 = $498 << 8;
         $500 = (($499) + ($data$18))|0;
         $data$19 = $500;$pc$8 = $495;$s_time$10 = $s_time$9;
         label = 89;
        }
        else if ((label|0) == 97) {
         label = 0;
         $537 = (($pc$1) + 2)|0;
         $$sum9 = (($84) + 2)|0;
         $538 = (($83) + ($$sum9)|0);
         $539 = HEAP8[$538]|0;
         $540 = $539&255;
         $541 = $540 << 8;
         $542 = (($541) + ($data$23))|0;
         $data$24 = $542;$pc$10 = $537;$s_time$13 = $s_time$12;
         label = 98;
        }
        else if ((label|0) == 106) {
         label = 0;
         $579 = (($pc$1) + 2)|0;
         $$sum7 = (($84) + 2)|0;
         $580 = (($83) + ($$sum7)|0);
         $581 = HEAP8[$580]|0;
         $582 = $581&255;
         $583 = $582 << 8;
         $584 = (($583) + ($data$28))|0;
         $data$29 = $584;$pc$12 = $579;$s_time$16 = $s_time$15;
         label = 107;
        }
        else if ((label|0) == 117) {
         label = 0;
         $641 = (($pc$1) + 2)|0;
         $$sum5 = (($84) + 2)|0;
         $642 = (($83) + ($$sum5)|0);
         $643 = HEAP8[$642]|0;
         $644 = $643&255;
         $645 = $644 << 8;
         $646 = (($645) + ($data$33))|0;
         $data$34 = $646;$pc$14 = $641;$s_time$19 = $s_time$18;
         label = 118;
        }
        else if ((label|0) == 126) {
         label = 0;
         $682 = (($pc$1) + 2)|0;
         $$sum4 = (($84) + 2)|0;
         $683 = (($83) + ($$sum4)|0);
         $684 = HEAP8[$683]|0;
         $685 = $684&255;
         $686 = $685 << 8;
         $687 = (($686) + ($data$38))|0;
         $data$39 = $687;$pc$16 = $682;$s_time$22 = $s_time$21;
         label = 127;
        }
        else if ((label|0) == 135) {
         label = 0;
         $$sum2 = (($84) + 2)|0;
         $717 = (($83) + ($$sum2)|0);
         $718 = HEAP8[$717]|0;
         $719 = $718&255;
         $720 = $719 << 8;
         $721 = (($720) + ($data$42))|0;
         HEAP32[$5>>2] = $93;
         $722 = (__ZN7Nsf_Emu8cpu_readEj($64,$721)|0);
         $723 = $c$2 >>> 1;
         $724 = $723 & 128;
         $725 = $722 >> 1;
         $726 = $725 | $724;
         $727 = $722 << 8;
         $c$4 = $727;$data$45 = $721;$nz$1 = $726;
         label = 140;
        }
        else if ((label|0) == 139) {
         label = 0;
         $$sum3 = (($84) + 2)|0;
         $730 = (($83) + ($$sum3)|0);
         $731 = HEAP8[$730]|0;
         $732 = $731&255;
         $733 = $732 << 8;
         $734 = (($733) + ($data$44))|0;
         $735 = $c$3 >>> 8;
         $736 = $735 & 1;
         HEAP32[$5>>2] = $93;
         $737 = (__ZN7Nsf_Emu8cpu_readEj($68,$734)|0);
         $738 = $737 << 1;
         $739 = $738 | $736;
         $c$4 = $738;$data$45 = $734;$nz$1 = $739;
         label = 140;
        }
        else if ((label|0) == 145) {
         label = 0;
         $748 = (($this) + ($data$47)|0);
         $749 = HEAP8[$748]|0;
         $750 = $749&255;
         $751 = $c$5 >>> 1;
         $752 = $751 & 128;
         $753 = $750 >>> 1;
         $754 = $753 | $752;
         $755 = $750 << 8;
         $c$7 = $755;$data$53 = $data$47;$nz$3 = $754;
         label = 156;
        }
        else if ((label|0) == 149) {
         label = 0;
         $760 = $c$6 >>> 8;
         $761 = $760 & 1;
         $762 = (($this) + ($data$49)|0);
         $763 = HEAP8[$762]|0;
         $764 = $763&255;
         $765 = $764 << 1;
         $766 = $765 | $761;
         $c$7 = $765;$data$53 = $data$49;$nz$3 = $766;
         label = 156;
        }
        else if ((label|0) == 155) {
         label = 0;
         $775 = (($this) + ($data$52)|0);
         $776 = HEAP8[$775]|0;
         $777 = $776&255;
         $778 = (($777) + ($nz$2))|0;
         $c$7 = $c$0;$data$53 = $data$52;$nz$3 = $778;
         label = 156;
        }
        else if ((label|0) == 192) {
         label = 0;
         $915 = (($pc$19) + 1)|0;
         $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $915;$s_time$0 = $s_time$25;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
         continue;
        }
        if ((label|0) == 22) {
         label = 0;
         HEAP32[$5>>2] = $s_time$2;
         $183 = (__ZN7Nsf_Emu8cpu_readEj($34,$data$3)|0);
         $184 = HEAP32[$5>>2]|0;
         $data$4 = $183;$pc$3 = $pc$2;$s_time$3 = $184;
         label = 23;
        }
        else if ((label|0) == 89) {
         label = 0;
         HEAP32[$5>>2] = $s_time$10;
         $501 = (__ZN7Nsf_Emu8cpu_readEj($52,$data$19)|0);
         $502 = HEAP32[$5>>2]|0;
         $data$20 = $501;$pc$9 = $pc$8;$s_time$11 = $502;
         label = 90;
        }
        else if ((label|0) == 98) {
         label = 0;
         HEAP32[$5>>2] = $s_time$13;
         $543 = (__ZN7Nsf_Emu8cpu_readEj($54,$data$24)|0);
         $544 = HEAP32[$5>>2]|0;
         $data$25 = $543;$pc$11 = $pc$10;$s_time$14 = $544;
         label = 99;
        }
        else if ((label|0) == 107) {
         label = 0;
         HEAP32[$5>>2] = $s_time$16;
         $585 = (__ZN7Nsf_Emu8cpu_readEj($56,$data$29)|0);
         $586 = HEAP32[$5>>2]|0;
         $data$30 = $585;$pc$13 = $pc$12;$s_time$17 = $586;
         label = 108;
        }
        else if ((label|0) == 118) {
         label = 0;
         HEAP32[$5>>2] = $s_time$19;
         $647 = (__ZN7Nsf_Emu8cpu_readEj($60,$data$34)|0);
         $648 = HEAP32[$5>>2]|0;
         $data$35 = $647;$pc$15 = $pc$14;$s_time$20 = $648;
         label = 119;
        }
        else if ((label|0) == 127) {
         label = 0;
         HEAP32[$5>>2] = $s_time$22;
         $688 = (__ZN7Nsf_Emu8cpu_readEj($62,$data$39)|0);
         $689 = HEAP32[$5>>2]|0;
         $data$40 = $688;$pc$17 = $pc$16;$s_time$23 = $689;
        }
        else if ((label|0) == 140) {
         label = 0;
         $740 = (($pc$1) + 3)|0;
         $741 = $nz$1 & 255;
         __ZN7Nsf_Emu9cpu_writeEji($66,$data$45,$741);
         $742 = HEAP32[$5>>2]|0;
         $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$a$0$phi = $a$0;$c$0 = $c$4;$nz$0 = $nz$1;$pc$1 = $740;$s_time$0 = $742;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$a$0 = $a$0$phi;
         continue;
        }
        else if ((label|0) == 156) {
         label = 0;
         $779 = (($pc$1) + 2)|0;
         $780 = $nz$3&255;
         $781 = (($this) + ($data$53)|0);
         HEAP8[$781] = $780;
         $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $93;$a$0$phi = $a$0;$c$0 = $c$7;$nz$0 = $nz$3;$pc$1 = $779;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$a$0 = $a$0$phi;
         continue;
        }
        if ((label|0) == 23) {
         label = 0;
         $185 = (($a$0) - ($data$4))|0;
         $186 = (($pc$3) + 1)|0;
         $187 = $185 ^ -1;
         $188 = $185 & 255;
         $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$a$0$phi = $a$0;$c$0 = $187;$nz$0 = $188;$pc$1 = $186;$s_time$0 = $s_time$3;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$a$0 = $a$0$phi;
         continue;
        }
        else if ((label|0) == 90) {
         label = 0;
         $503 = $data$20 & $a$0;
         $504 = (($pc$9) + 1)|0;
         $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0 = $503;$nz$0 = $503;$pc$1 = $504;$s_time$0 = $s_time$11;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;
         continue;
        }
        else if ((label|0) == 99) {
         label = 0;
         $545 = $data$25 ^ $a$0;
         $546 = (($pc$11) + 1)|0;
         $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0 = $545;$nz$0 = $545;$pc$1 = $546;$s_time$0 = $s_time$14;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;
         continue;
        }
        else if ((label|0) == 108) {
         label = 0;
         $587 = $data$30 | $a$0;
         $588 = (($pc$13) + 1)|0;
         $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0 = $587;$nz$0 = $587;$pc$1 = $588;$s_time$0 = $s_time$17;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;
         continue;
        }
        else if ((label|0) == 119) {
         label = 0;
         $649 = $data$35 ^ 255;
         $data$40 = $649;$pc$17 = $pc$15;$s_time$23 = $s_time$20;
        }
        $690 = $c$0 >>> 8;
        $691 = $690 & 1;
        $692 = $a$0 ^ 128;
        $693 = (($692) + ($691))|0;
        $sext = $data$40 << 24;
        $694 = $sext >> 24;
        $695 = (($693) + ($694))|0;
        $696 = $status$0 & -65;
        $697 = $695 >>> 2;
        $698 = $697 & 64;
        $699 = $698 | $696;
        $700 = (($a$0) + ($691))|0;
        $701 = (($700) + ($data$40))|0;
        $702 = (($pc$17) + 1)|0;
        $703 = $701 & 255;
        $y$0$phi = $y$0;$x$0$phi = $x$0;$sp$0$phi = $sp$0;$a$0 = $703;$c$0 = $701;$nz$0 = $701;$pc$1 = $702;$s_time$0 = $s_time$23;$status$0 = $699;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$sp$0 = $sp$0$phi;
       }
       if ((label|0) == 202) {
        HEAP32[$5>>2] = $s_time$27;
        $978 = $pc$21&65535;
        HEAP16[$7>>1] = $978;
        $979 = (($sp$0) + 255)|0;
        $980 = $979&255;
        HEAP8[$19] = $980;
        $981 = $a$0&255;
        HEAP8[$10] = $981;
        $982 = $x$0&255;
        HEAP8[$13] = $982;
        $983 = $y$0&255;
        HEAP8[$16] = $983;
        $984 = $status$0 & 76;
        $985 = $nz$0 >>> 8;
        $986 = $985 | $nz$0;
        $987 = $986 & 128;
        $988 = $984 | $987;
        $989 = $c$0 >>> 8;
        $990 = $989 & 1;
        $991 = $988 | $990;
        $992 = $nz$0 & 255;
        $993 = ($992|0)==(0);
        $994 = $991 | 2;
        $$20 = $993 ? $994 : $991;
        $995 = $$20&255;
        HEAP8[$24] = $995;
        _memcpy(($3|0),($1|0),140)|0;
        HEAP32[$4>>2] = $2;
        $996 = ($s_time$27|0)<(0);
        STACKTOP = sp;return ($996|0);
       }
       return 0|0;
      }
      function __ZN7Nes_Cpu12set_end_timeEl($this,$t) {
       $this = $this|0;
       $t = $t|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 2204|0);
       HEAP32[$1>>2] = $t;
       $2 = (($this) + 2200|0);
       $3 = HEAP32[$2>>2]|0;
       $4 = (__ZN7Nes_Cpu15update_end_timeEll($this,$t,$3)|0);
       $5 = (($this) + 2056|0);
       $6 = HEAP32[$5>>2]|0;
       $7 = (($6) + 136|0);
       $8 = HEAP32[$7>>2]|0;
       $9 = (($8) + ($4))|0;
       HEAP32[$7>>2] = $9;
       STACKTOP = sp;return;
      }
      function __ZN7Nes_Cpu15update_end_timeEll($this,$t,$irq) {
       $this = $this|0;
       $t = $t|0;
       $irq = $irq|0;
       var $$0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $irq$t = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($irq|0)<($t|0);
       if ($1) {
        $2 = (($this) + 2053|0);
        $3 = HEAP8[$2]|0;
        $4 = $3 & 4;
        $5 = ($4<<24>>24)==(0);
        $irq$t = $5 ? $irq : $t;
        $$0 = $irq$t;
       } else {
        $$0 = $t;
       }
       $6 = (($this) + 2056|0);
       $7 = HEAP32[$6>>2]|0;
       $8 = (($7) + 132|0);
       $9 = HEAP32[$8>>2]|0;
       $10 = (($9) - ($$0))|0;
       HEAP32[$8>>2] = $$0;
       STACKTOP = sp;return ($10|0);
      }
      function __ZN13Nes_Namco_Apu6accessEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 100|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = $2 & 127;
       $4 = $2 & 128;
       $5 = ($4|0)==(0);
       if (!($5)) {
        $6 = (($3) + 1)|0;
        $7 = $6 | 128;
        HEAP32[$1>>2] = $7;
       }
       $8 = ((($this) + ($3)|0) + 104|0);
       STACKTOP = sp;return ($8|0);
      }
      function __ZN12Nes_Fme7_Apu5resetEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, dest = 0, label = 0, sp = 0, stop = 0;
       sp = STACKTOP;
       $1 = (($this) + 48|0);
       HEAP32[$1>>2] = 0;
       $2 = (($this) + 28|0);
       HEAP32[$2>>2] = 0;
       $3 = (($this) + 36|0);
       HEAP32[$3>>2] = 0;
       $4 = (($this) + 44|0);
       HEAP32[$4>>2] = 0;
       $5 = ($this);
       dest=$5+0|0; stop=dest+24|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));;
       STACKTOP = sp;return;
      }
      function __ZN12Nes_Fme7_Apu9run_untilEi($this,$end_time) {
       $this = $this|0;
       $end_time = $end_time|0;
       var $$ = 0, $$1 = 0, $$2 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
       var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
       var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
       var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $delta1$0 = 0, $delta1$0$lobit = 0;
       var $delta1$0$phi = 0, $exitcond = 0, $index$04 = 0, $period$0 = 0, $time$0 = 0, $time$0$phi = 0, $time$1 = 0, $volume$1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 48|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = ($2|0)>($end_time|0);
       if ($3) {
        ___assert_fail(((45320)|0),((45344)|0),43,((45384)|0));
        // unreachable;
       }
       $4 = (($this) + 7|0);
       $5 = (($end_time) + -1)|0;
       $6 = (($this) + 56|0);
       $7 = (($this) + 56|0);
       $index$04 = 0;
       while(1) {
        $8 = (($index$04) + 8)|0;
        $9 = (($this) + ($8)|0);
        $10 = HEAP8[$9]|0;
        $11 = $10&255;
        $12 = ((($this) + ($index$04<<3)|0) + 24|0);
        $13 = HEAP32[$12>>2]|0;
        $14 = ($13|0)==(0|0);
        if (!($14)) {
         $15 = $11 & 15;
         $16 = (45304 + ($15)|0);
         $17 = HEAP8[$16]|0;
         $18 = HEAP8[$4]|0;
         $19 = $17&255;
         $20 = $18&255;
         $21 = $20 >>> $index$04;
         __ZN11Blip_Buffer12set_modifiedEv($13);
         $22 = $21 & 1;
         $23 = $11 & 16;
         $24 = $22 | $23;
         $25 = ($24|0)==(0);
         $$1 = $25 ? $19 : 0;
         $26 = $index$04 << 1;
         $27 = $26 | 1;
         $28 = (($this) + ($27)|0);
         $29 = HEAP8[$28]|0;
         $30 = $29&255;
         $31 = $30 << 12;
         $32 = $31 & 61440;
         $33 = (($this) + ($26)|0);
         $34 = HEAP8[$33]|0;
         $35 = $34&255;
         $36 = $35 << 4;
         $37 = $32 | $36;
         $38 = ($37>>>0)<(50);
         if ($38) {
          $39 = ($37|0)==(0);
          $$2 = $39 ? 16 : $37;
          $period$0 = $$2;$volume$1 = 0;
         } else {
          $period$0 = $37;$volume$1 = $$1;
         }
         $40 = ((($this) + ($index$04)|0) + 14|0);
         $41 = HEAP8[$40]|0;
         $42 = ($41<<24>>24)!=(0);
         $$ = $42 ? $volume$1 : 0;
         $43 = ((($this) + ($index$04<<3)|0) + 28|0);
         $44 = HEAP32[$43>>2]|0;
         $45 = ($$|0)==($44|0);
         if (!($45)) {
          $46 = (($$) - ($44))|0;
          HEAP32[$43>>2] = $$;
          $47 = HEAP32[$1>>2]|0;
          __ZNK10Blip_SynthILi12ELi1EE6offsetEiiP11Blip_Buffer($7,$47,$46,$13);
         }
         $48 = HEAP32[$1>>2]|0;
         $49 = ((($this) + ($index$04<<1)|0) + 18|0);
         $50 = HEAP16[$49>>1]|0;
         $51 = $50&65535;
         $52 = (($51) + ($48))|0;
         $53 = ($52|0)<($end_time|0);
         do {
          if ($53) {
           $54 = ($volume$1|0)==(0);
           if ($54) {
            $63 = (($5) + ($period$0))|0;
            $64 = (($63) - ($52))|0;
            $65 = (($64>>>0) / ($period$0>>>0))&-1;
            $66 = $65 & 1;
            $67 = HEAP8[$40]|0;
            $68 = $67&255;
            $69 = $68 ^ $66;
            $70 = $69&255;
            HEAP8[$40] = $70;
            $71 = Math_imul($65, $period$0)|0;
            $72 = (($71) + ($52))|0;
            $time$1 = $72;
            break;
           }
           $55 = $$ << 1;
           $56 = (($55) - ($volume$1))|0;
           $delta1$0 = $56;$time$0 = $52;
           while(1) {
            $57 = (0 - ($delta1$0))|0;
            __ZNK10Blip_SynthILi12ELi1EE13offset_inlineEiiP11Blip_Buffer($6,$time$0,$57,$13);
            $58 = (($time$0) + ($period$0))|0;
            $59 = ($58|0)<($end_time|0);
            if ($59) {
             $time$0$phi = $58;$delta1$0$phi = $57;$time$0 = $time$0$phi;$delta1$0 = $delta1$0$phi;
            } else {
             break;
            }
           }
           $60 = (($volume$1) - ($delta1$0))|0;
           $61 = $60 >> 1;
           HEAP32[$43>>2] = $61;
           $delta1$0$lobit = $delta1$0 >>> 31;
           $62 = $delta1$0$lobit&255;
           HEAP8[$40] = $62;
           $time$1 = $58;
          } else {
           $time$1 = $52;
          }
         } while(0);
         $73 = (($time$1) - ($end_time))|0;
         $74 = $73&65535;
         HEAP16[$49>>1] = $74;
        }
        $75 = (($index$04) + 1)|0;
        $exitcond = ($75|0)==(3);
        if ($exitcond) {
         break;
        } else {
         $index$04 = $75;
        }
       }
       HEAP32[$1>>2] = $end_time;
       STACKTOP = sp;return;
      }
      function __ZN13Nes_Namco_ApuC2Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 232|0);
       __ZN10Blip_SynthILi12ELi15EEC1Ev($1);
       __ZN13Nes_Namco_Apu6outputEP11Blip_Buffer($this,0);
       __ZN13Nes_Namco_Apu6volumeEd($this,1.0);
       __ZN13Nes_Namco_Apu5resetEv($this);
       STACKTOP = sp;return;
      }
      function __ZN10Blip_SynthILi12ELi15EEC1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN10Blip_SynthILi12ELi15EEC2Ev($this);
       STACKTOP = sp;return;
      }
      function __ZN13Nes_Namco_Apu6outputEP11Blip_Buffer($this,$buf) {
       $this = $this|0;
       $buf = $buf|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN13Nes_Namco_Apu10osc_outputEiP11Blip_Buffer($this,0,$buf);
       __ZN13Nes_Namco_Apu10osc_outputEiP11Blip_Buffer($this,1,$buf);
       __ZN13Nes_Namco_Apu10osc_outputEiP11Blip_Buffer($this,2,$buf);
       __ZN13Nes_Namco_Apu10osc_outputEiP11Blip_Buffer($this,3,$buf);
       __ZN13Nes_Namco_Apu10osc_outputEiP11Blip_Buffer($this,4,$buf);
       __ZN13Nes_Namco_Apu10osc_outputEiP11Blip_Buffer($this,5,$buf);
       __ZN13Nes_Namco_Apu10osc_outputEiP11Blip_Buffer($this,6,$buf);
       __ZN13Nes_Namco_Apu10osc_outputEiP11Blip_Buffer($this,7,$buf);
       STACKTOP = sp;return;
      }
      function __ZN13Nes_Namco_Apu6volumeEd($this,$v) {
       $this = $this|0;
       $v = +$v;
       var $1 = 0, $2 = 0.0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 232|0);
       $2 = $v * 0.0125000000000000006939;
       __ZN10Blip_SynthILi12ELi15EE6volumeEd($1,$2);
       STACKTOP = sp;return;
      }
      function __ZN13Nes_Namco_Apu5resetEv($this) {
       $this = $this|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
       var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
       var $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 96|0);
       $2 = $1;
       _memset(($2|0),0,136)|0;
       $3 = ($this);
       HEAP32[$3>>2] = 0;
       $4 = (($this) + 8|0);
       $5 = (($this) + 20|0);
       $6 = (($this) + 32|0);
       $7 = (($this) + 44|0);
       $8 = (($this) + 56|0);
       $9 = (($this) + 68|0);
       $10 = (($this) + 80|0);
       $11 = (($this) + 92|0);
       HEAP16[$11>>1] = 0;
       $12 = (($this) + 94|0);
       HEAP16[$12>>1] = 0;
       $13 = $4;
       $14 = $13;
       $15 = $14;
       HEAP16[$15>>1]=0&65535;HEAP16[$15+2>>1]=0>>>16;
       $16 = (($14) + 4)|0;
       $17 = $16;
       HEAP16[$17>>1]=0&65535;HEAP16[$17+2>>1]=0>>>16;
       $18 = $5;
       $19 = $18;
       $20 = $19;
       HEAP16[$20>>1]=0&65535;HEAP16[$20+2>>1]=0>>>16;
       $21 = (($19) + 4)|0;
       $22 = $21;
       HEAP16[$22>>1]=0&65535;HEAP16[$22+2>>1]=0>>>16;
       $23 = $6;
       $24 = $23;
       $25 = $24;
       HEAP16[$25>>1]=0&65535;HEAP16[$25+2>>1]=0>>>16;
       $26 = (($24) + 4)|0;
       $27 = $26;
       HEAP16[$27>>1]=0&65535;HEAP16[$27+2>>1]=0>>>16;
       $28 = $7;
       $29 = $28;
       $30 = $29;
       HEAP16[$30>>1]=0&65535;HEAP16[$30+2>>1]=0>>>16;
       $31 = (($29) + 4)|0;
       $32 = $31;
       HEAP16[$32>>1]=0&65535;HEAP16[$32+2>>1]=0>>>16;
       $33 = $8;
       $34 = $33;
       $35 = $34;
       HEAP16[$35>>1]=0&65535;HEAP16[$35+2>>1]=0>>>16;
       $36 = (($34) + 4)|0;
       $37 = $36;
       HEAP16[$37>>1]=0&65535;HEAP16[$37+2>>1]=0>>>16;
       $38 = $9;
       $39 = $38;
       $40 = $39;
       HEAP16[$40>>1]=0&65535;HEAP16[$40+2>>1]=0>>>16;
       $41 = (($39) + 4)|0;
       $42 = $41;
       HEAP16[$42>>1]=0&65535;HEAP16[$42+2>>1]=0>>>16;
       $43 = $10;
       $44 = $43;
       $45 = $44;
       HEAP16[$45>>1]=0&65535;HEAP16[$45+2>>1]=0>>>16;
       $46 = (($44) + 4)|0;
       $47 = $46;
       HEAP16[$47>>1]=0&65535;HEAP16[$47+2>>1]=0>>>16;
       STACKTOP = sp;return;
      }
      function __ZN13Nes_Namco_Apu10osc_outputEiP11Blip_Buffer($this,$i,$buf) {
       $this = $this|0;
       $i = $i|0;
       $buf = $buf|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($i>>>0)<(8);
       if ($1) {
        $2 = ((($this) + (($i*12)|0)|0) + 4|0);
        HEAP32[$2>>2] = $buf;
        STACKTOP = sp;return;
       } else {
        ___assert_fail(((45624)|0),((45656)|0),92,((45696)|0));
        // unreachable;
       }
      }
      function __ZN13Nes_Namco_Apu9end_frameEi($this,$time) {
       $this = $this|0;
       $time = $time|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 96|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = ($2|0)<($time|0);
       if ($3) {
        __ZN13Nes_Namco_Apu9run_untilEi($this,$time);
       }
       $4 = HEAP32[$1>>2]|0;
       $5 = ($4|0)<($time|0);
       if ($5) {
        ___assert_fail(((45400)|0),((45424)|0),72,((45472)|0));
        // unreachable;
       } else {
        $6 = (($4) - ($time))|0;
        HEAP32[$1>>2] = $6;
        STACKTOP = sp;return;
       }
      }
      function __ZN13Nes_Namco_Apu9run_untilEi($this,$nes_end_time) {
       $this = $this|0;
       $nes_end_time = $nes_end_time|0;
       var $$ = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
       var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
       var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
       var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
       var $78 = 0, $79 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$04 = 0, $last_amp$0 = 0, $last_amp$1 = 0, $time$0 = 0, $time$1 = 0, $wave_pos$0 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 231|0);
       $2 = HEAP8[$1]|0;
       $3 = $2&255;
       $4 = $3 >>> 4;
       $5 = $4 & 7;
       $6 = (($5) + 1)|0;
       $7 = $5 ^ 7;
       $8 = (($this) + 96|0);
       $9 = $6 << 6;
       $10 = (($this) + 232|0);
       $i$04 = $7;
       while(1) {
        $11 = ((($this) + (($i$04*12)|0)|0) + 4|0);
        $12 = HEAP32[$11>>2]|0;
        $13 = ($12|0)==(0|0);
        do {
         if (!($13)) {
          __ZN11Blip_Buffer12set_modifiedEv($12);
          $14 = HEAP32[$8>>2]|0;
          $15 = (__ZNK11Blip_Buffer14resampled_timeEi($12,$14)|0);
          $16 = (($this) + (($i$04*12)|0)|0);
          $17 = HEAP32[$16>>2]|0;
          $18 = (($17) + ($15))|0;
          $19 = (__ZNK11Blip_Buffer14resampled_timeEi($12,$nes_end_time)|0);
          HEAP32[$16>>2] = 0;
          $20 = ($18>>>0)<($19>>>0);
          if ($20) {
           $21 = $i$04 << 3;
           $22 = (($21) + 64)|0;
           $23 = ((($this) + ($22)|0) + 104|0);
           $$sum = (($21) + 68)|0;
           $24 = ((($this) + ($$sum)|0) + 104|0);
           $25 = HEAP8[$24]|0;
           $26 = $25&255;
           $27 = $26 & 224;
           $28 = ($27|0)==(0);
           if ($28) {
            break;
           }
           $$sum1 = (($21) + 71)|0;
           $29 = ((($this) + ($$sum1)|0) + 104|0);
           $30 = HEAP8[$29]|0;
           $31 = $30&255;
           $32 = $31 & 15;
           $33 = ($32|0)==(0);
           if ($33) {
            break;
           }
           $34 = $26 << 16;
           $35 = $34 & 196608;
           $$sum2 = (($21) + 66)|0;
           $36 = ((($this) + ($$sum2)|0) + 104|0);
           $37 = HEAP8[$36]|0;
           $38 = $37&255;
           $39 = $38 << 8;
           $40 = $39 | $35;
           $41 = HEAP8[$23]|0;
           $42 = $41&255;
           $43 = $40 | $42;
           $44 = ($43|0)<($9|0);
           if ($44) {
            break;
           }
           $45 = (__ZNK11Blip_Buffer18resampled_durationEi($12,983040)|0);
           $46 = (($45>>>0) / ($43>>>0))&-1;
           $47 = Math_imul($46, $6)|0;
           $48 = $26 & 28;
           $49 = (32 - ($48))|0;
           $50 = ((($this) + (($i$04*12)|0)|0) + 8|0);
           $51 = HEAP16[$50>>1]|0;
           $52 = $51 << 16 >> 16;
           $53 = ((($this) + (($i$04*12)|0)|0) + 10|0);
           $54 = HEAP16[$53>>1]|0;
           $55 = $54 << 16 >> 16;
           $$sum3 = (($21) + 70)|0;
           $56 = ((($this) + ($$sum3)|0) + 104|0);
           $last_amp$0 = $52;$time$0 = $18;$wave_pos$0 = $55;
           while(1) {
            $57 = HEAP8[$56]|0;
            $58 = $57&255;
            $59 = (($58) + ($wave_pos$0))|0;
            $60 = $59 >> 1;
            $61 = ((($this) + ($60)|0) + 104|0);
            $62 = HEAP8[$61]|0;
            $63 = $62&255;
            $64 = $59 << 2;
            $65 = $64 & 4;
            $66 = $63 >>> $65;
            $67 = (($wave_pos$0) + 1)|0;
            $68 = $66 & 15;
            $69 = Math_imul($68, $32)|0;
            $70 = ($69|0)==($last_amp$0|0);
            if ($70) {
             $last_amp$1 = $last_amp$0;
            } else {
             $71 = (($69) - ($last_amp$0))|0;
             __ZNK10Blip_SynthILi12ELi15EE16offset_resampledEjiP11Blip_Buffer($10,$time$0,$71,$12);
             $last_amp$1 = $69;
            }
            $72 = (($time$0) + ($47))|0;
            $73 = ($67|0)<($49|0);
            $$ = $73 ? $67 : 0;
            $74 = ($72>>>0)<($19>>>0);
            if ($74) {
             $last_amp$0 = $last_amp$1;$time$0 = $72;$wave_pos$0 = $$;
            } else {
             break;
            }
           }
           $75 = $$&65535;
           HEAP16[$53>>1] = $75;
           $76 = $last_amp$1&65535;
           HEAP16[$50>>1] = $76;
           $time$1 = $72;
          } else {
           $time$1 = $18;
          }
          $77 = (($time$1) - ($19))|0;
          HEAP32[$16>>2] = $77;
         }
        } while(0);
        $78 = (($i$04) + 1)|0;
        $exitcond = ($78|0)==(8);
        if ($exitcond) {
         break;
        } else {
         $i$04 = $78;
        }
       }
       $79 = (($this) + 96|0);
       HEAP32[$79>>2] = $nes_end_time;
       STACKTOP = sp;return;
      }
      function __ZNK10Blip_SynthILi12ELi15EE16offset_resampledEjiP11Blip_Buffer($this,$time,$delta,$blip_buf) {
       $this = $this|0;
       $time = $time|0;
       $delta = $delta|0;
       $blip_buf = $blip_buf|0;
       var $$sum = 0, $$sum1 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum1415 = 0, $$sum16 = 0, $$sum1718 = 0, $$sum19 = 0, $$sum2 = 0, $$sum2021 = 0, $$sum22 = 0, $$sum2324 = 0, $$sum25 = 0, $$sum2627 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum45 = 0, $$sum6 = 0;
       var $$sum7 = 0, $$sum8 = 0, $$sum910 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
       var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
       var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
       var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
       var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $time >>> 16;
       $2 = (($blip_buf) + 12|0);
       $3 = HEAP32[$2>>2]|0;
       $4 = ($1|0)<($3|0);
       if ($4) {
        $5 = (($this) + 8|0);
        $6 = HEAP32[$5>>2]|0;
        $7 = Math_imul($6, $delta)|0;
        $8 = (($blip_buf) + 8|0);
        $9 = HEAP32[$8>>2]|0;
        $10 = $time >>> 10;
        $11 = $10 & 63;
        $$sum = (64 - ($11))|0;
        $12 = ((($this) + ($$sum<<1)|0) + 40|0);
        $13 = HEAP16[$12>>1]|0;
        $14 = $13 << 16 >> 16;
        $15 = Math_imul($14, $7)|0;
        $$sum1 = (($1) + 2)|0;
        $16 = (($9) + ($$sum1<<2)|0);
        $17 = HEAP32[$16>>2]|0;
        $18 = (($15) + ($17))|0;
        $$sum2 = (($$sum) + 64)|0;
        $19 = ((($this) + ($$sum2<<1)|0) + 40|0);
        $20 = HEAP16[$19>>1]|0;
        $21 = $20 << 16 >> 16;
        $22 = Math_imul($21, $7)|0;
        $$sum3 = (($1) + 3)|0;
        $23 = (($9) + ($$sum3<<2)|0);
        $24 = HEAP32[$23>>2]|0;
        $25 = (($22) + ($24))|0;
        $$sum45 = $$sum | 128;
        $26 = ((($this) + ($$sum45<<1)|0) + 40|0);
        $27 = HEAP16[$26>>1]|0;
        $28 = $27 << 16 >> 16;
        HEAP32[$16>>2] = $18;
        HEAP32[$23>>2] = $25;
        $29 = Math_imul($28, $7)|0;
        $$sum6 = (($1) + 4)|0;
        $30 = (($9) + ($$sum6<<2)|0);
        $31 = HEAP32[$30>>2]|0;
        $32 = (($29) + ($31))|0;
        $$sum7 = (($$sum) + 192)|0;
        $33 = ((($this) + ($$sum7<<1)|0) + 40|0);
        $34 = HEAP16[$33>>1]|0;
        $35 = $34 << 16 >> 16;
        $36 = Math_imul($35, $7)|0;
        $$sum8 = (($1) + 5)|0;
        $37 = (($9) + ($$sum8<<2)|0);
        $38 = HEAP32[$37>>2]|0;
        $39 = (($36) + ($38))|0;
        $$sum910 = $$sum | 256;
        $40 = ((($this) + ($$sum910<<1)|0) + 40|0);
        $41 = HEAP16[$40>>1]|0;
        $42 = $41 << 16 >> 16;
        HEAP32[$30>>2] = $32;
        HEAP32[$37>>2] = $39;
        $43 = Math_imul($42, $7)|0;
        $$sum11 = (($1) + 6)|0;
        $44 = (($9) + ($$sum11<<2)|0);
        $45 = HEAP32[$44>>2]|0;
        $46 = (($43) + ($45))|0;
        $$sum12 = (($$sum) + 320)|0;
        $47 = ((($this) + ($$sum12<<1)|0) + 40|0);
        $48 = HEAP16[$47>>1]|0;
        $49 = $48 << 16 >> 16;
        $50 = Math_imul($49, $7)|0;
        $$sum13 = (($1) + 7)|0;
        $51 = (($9) + ($$sum13<<2)|0);
        $52 = HEAP32[$51>>2]|0;
        $53 = (($50) + ($52))|0;
        $54 = ((($this) + ($11<<1)|0) + 40|0);
        $$sum1415 = $11 | 320;
        $55 = ((($this) + ($$sum1415<<1)|0) + 40|0);
        $56 = HEAP16[$55>>1]|0;
        $57 = $56 << 16 >> 16;
        HEAP32[$44>>2] = $46;
        HEAP32[$51>>2] = $53;
        $58 = Math_imul($57, $7)|0;
        $$sum16 = (($1) + 8)|0;
        $59 = (($9) + ($$sum16<<2)|0);
        $60 = HEAP32[$59>>2]|0;
        $61 = (($58) + ($60))|0;
        $$sum1718 = $11 | 256;
        $62 = ((($this) + ($$sum1718<<1)|0) + 40|0);
        $63 = HEAP16[$62>>1]|0;
        $64 = $63 << 16 >> 16;
        $65 = Math_imul($64, $7)|0;
        $$sum19 = (($1) + 9)|0;
        $66 = (($9) + ($$sum19<<2)|0);
        $67 = HEAP32[$66>>2]|0;
        $68 = (($65) + ($67))|0;
        $$sum2021 = $11 | 192;
        $69 = ((($this) + ($$sum2021<<1)|0) + 40|0);
        $70 = HEAP16[$69>>1]|0;
        $71 = $70 << 16 >> 16;
        HEAP32[$59>>2] = $61;
        HEAP32[$66>>2] = $68;
        $72 = Math_imul($71, $7)|0;
        $$sum22 = (($1) + 10)|0;
        $73 = (($9) + ($$sum22<<2)|0);
        $74 = HEAP32[$73>>2]|0;
        $75 = (($72) + ($74))|0;
        $$sum2324 = $11 | 128;
        $76 = ((($this) + ($$sum2324<<1)|0) + 40|0);
        $77 = HEAP16[$76>>1]|0;
        $78 = $77 << 16 >> 16;
        $79 = Math_imul($78, $7)|0;
        $$sum25 = (($1) + 11)|0;
        $80 = (($9) + ($$sum25<<2)|0);
        $81 = HEAP32[$80>>2]|0;
        $82 = (($79) + ($81))|0;
        $$sum2627 = $11 | 64;
        $83 = ((($this) + ($$sum2627<<1)|0) + 40|0);
        $84 = HEAP16[$83>>1]|0;
        $85 = $84 << 16 >> 16;
        HEAP32[$73>>2] = $75;
        HEAP32[$80>>2] = $82;
        $86 = Math_imul($85, $7)|0;
        $$sum28 = (($1) + 12)|0;
        $87 = (($9) + ($$sum28<<2)|0);
        $88 = HEAP32[$87>>2]|0;
        $89 = (($86) + ($88))|0;
        $90 = HEAP16[$54>>1]|0;
        $91 = $90 << 16 >> 16;
        $92 = Math_imul($91, $7)|0;
        $$sum29 = (($1) + 13)|0;
        $93 = (($9) + ($$sum29<<2)|0);
        $94 = HEAP32[$93>>2]|0;
        $95 = (($92) + ($94))|0;
        HEAP32[$87>>2] = $89;
        HEAP32[$93>>2] = $95;
        STACKTOP = sp;return;
       } else {
        ___assert_fail(((45488)|0),((45560)|0),342,((45600)|0));
        // unreachable;
       }
      }
      function __ZN10Blip_SynthILi12ELi15EEC2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = (($this) + 40|0);
       __ZN11Blip_Synth_C2EPsi($1,$2,12);
       STACKTOP = sp;return;
      }
      function __ZN10Blip_SynthILi12ELi15EE6volumeEd($this,$v) {
       $this = $this|0;
       $v = +$v;
       var $1 = 0, $2 = 0.0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = $v * 0.0666666666666666657414;
       __ZN11Blip_Synth_11volume_unitEd($1,$2);
       STACKTOP = sp;return;
      }
      function __ZN7Nes_Osc12clock_lengthEi($this,$halt_mask) {
       $this = $this|0;
       $halt_mask = $halt_mask|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 12|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = ($2|0)==(0);
       do {
        if (!($3)) {
         $4 = ($this);
         $5 = HEAP8[$4]|0;
         $6 = $5&255;
         $7 = $6 & $halt_mask;
         $8 = ($7|0)==(0);
         if (!($8)) {
          break;
         }
         $9 = (($2) + -1)|0;
         HEAP32[$1>>2] = $9;
        }
       } while(0);
       STACKTOP = sp;return;
      }
      function __ZN12Nes_Envelope14clock_envelopeEv($this) {
       $this = $this|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
       var $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = HEAP8[$1]|0;
       $3 = $2&255;
       $4 = $3 & 15;
       $5 = (($this) + 7|0);
       $6 = HEAP8[$5]|0;
       $7 = ($6<<24>>24)==(0);
       if (!($7)) {
        HEAP8[$5] = 0;
        $8 = (($this) + 28|0);
        HEAP32[$8>>2] = $4;
        $9 = (($this) + 24|0);
        HEAP32[$9>>2] = 15;
        STACKTOP = sp;return;
       }
       $10 = (($this) + 28|0);
       $11 = HEAP32[$10>>2]|0;
       $12 = (($11) + -1)|0;
       HEAP32[$10>>2] = $12;
       $13 = ($11|0)<(1);
       if (!($13)) {
        STACKTOP = sp;return;
       }
       HEAP32[$10>>2] = $4;
       $14 = (($this) + 24|0);
       $15 = HEAP32[$14>>2]|0;
       $16 = HEAP8[$1]|0;
       $17 = $16&255;
       $18 = $17 & 32;
       $19 = $18 | $15;
       $20 = ($19|0)==(0);
       if ($20) {
        STACKTOP = sp;return;
       }
       $21 = (($15) + 15)|0;
       $22 = $21 & 15;
       HEAP32[$14>>2] = $22;
       STACKTOP = sp;return;
      }
      function __ZNK12Nes_Envelope6volumeEv($this) {
       $this = $this|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 12|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = ($2|0)==(0);
       do {
        if ($3) {
         $12 = 0;
        } else {
         $4 = ($this);
         $5 = HEAP8[$4]|0;
         $6 = $5&255;
         $7 = $6 & 16;
         $8 = ($7|0)==(0);
         if ($8) {
          $10 = (($this) + 24|0);
          $11 = HEAP32[$10>>2]|0;
          $12 = $11;
          break;
         } else {
          $9 = $6 & 15;
          $12 = $9;
          break;
         }
        }
       } while(0);
       STACKTOP = sp;return ($12|0);
      }
      function __ZN10Nes_Square11clock_sweepEi($this,$negative_adjust) {
       $this = $this|0;
       $negative_adjust = $negative_adjust|0;
       var $$ = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
       var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0, $or$cond2 = 0, label = 0;
       var sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 1|0);
       $2 = HEAP8[$1]|0;
       $3 = $2&255;
       $4 = (($this) + 36|0);
       $5 = HEAP32[$4>>2]|0;
       $6 = (($5) + -1)|0;
       HEAP32[$4>>2] = $6;
       $7 = ($5|0)<(1);
       do {
        if ($7) {
         $8 = ($this);
         $9 = (($this) + 5|0);
         HEAP8[$9] = 1;
         $10 = (__ZNK7Nes_Osc6periodEv($8)|0);
         $11 = $3 & 7;
         $12 = $3 & 128;
         $notlhs = ($11|0)!=(0);
         $notrhs = ($12|0)!=(0);
         $or$cond$not = $notrhs & $notlhs;
         $13 = ($10|0)>(7);
         $or$cond2 = $or$cond$not & $13;
         if (!($or$cond2)) {
          break;
         }
         $14 = $10 >> $11;
         $15 = $3 & 8;
         $16 = ($15|0)==(0);
         $17 = (($negative_adjust) - ($14))|0;
         $$ = $16 ? $14 : $17;
         $18 = (($$) + ($10))|0;
         $19 = ($18|0)<(2048);
         if (!($19)) {
          break;
         }
         $20 = $18&255;
         $21 = (($this) + 2|0);
         HEAP8[$21] = $20;
         $22 = (($this) + 3|0);
         $23 = HEAP8[$22]|0;
         $24 = $23&255;
         $25 = $24 & 248;
         $26 = $18 >>> 8;
         $27 = $26 & 7;
         $28 = $25 | $27;
         $29 = $28&255;
         HEAP8[$22] = $29;
        }
       } while(0);
       $30 = (($this) + 5|0);
       $31 = HEAP8[$30]|0;
       $32 = ($31<<24>>24)==(0);
       if ($32) {
        STACKTOP = sp;return;
       }
       HEAP8[$30] = 0;
       $33 = $3 >>> 4;
       $34 = $33 & 7;
       HEAP32[$4>>2] = $34;
       STACKTOP = sp;return;
      }
      function __ZNK7Nes_Osc6periodEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 3|0);
       $2 = HEAP8[$1]|0;
       $3 = $2&255;
       $4 = $3 << 8;
       $5 = $4 & 1792;
       $6 = (($this) + 2|0);
       $7 = HEAP8[$6]|0;
       $8 = $7&255;
       $9 = $5 | $8;
       STACKTOP = sp;return ($9|0);
      }
      function __ZN10Nes_Square3runEll($this,$time,$end_time) {
       $this = $this|0;
       $time = $time|0;
       $end_time = $end_time|0;
       var $$ = 0, $$0 = 0, $$1 = 0, $$2 = 0, $$3 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
       var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
       var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
       var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $amp$1 = 0, $delta1$0 = 0;
       var $delta1$1 = 0, $or$cond = 0, $or$cond4 = 0, $phase$0 = 0, $phase$0$phi = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = (__ZNK7Nes_Osc6periodEv($1)|0);
       $3 = $2 << 1;
       $4 = (($3) + 2)|0;
       $5 = (($this) + 8|0);
       $6 = HEAP32[$5>>2]|0;
       $7 = ($6|0)==(0|0);
       if ($7) {
        $8 = (($this) + 16|0);
        $9 = HEAP32[$8>>2]|0;
        $10 = (($9) + ($time))|0;
        $11 = (__ZN10Nes_Square14maintain_phaseElll($this,$10,$end_time,$4)|0);
        $12 = (($11) - ($end_time))|0;
        HEAP32[$8>>2] = $12;
        STACKTOP = sp;return;
       }
       __ZN11Blip_Buffer12set_modifiedEv($6);
       $13 = (($this) + 1|0);
       $14 = HEAP8[$13]|0;
       $15 = $14&255;
       $16 = ($this);
       $17 = (__ZNK12Nes_Envelope6volumeEv($16)|0);
       $18 = ($17|0)==(0);
       $19 = ($2|0)<(8);
       $or$cond = $18 | $19;
       do {
        if ($or$cond) {
         label = 5;
        } else {
         $20 = $15 & 8;
         $21 = $15 & 7;
         $22 = ($20|0)!=(0);
         $23 = $2 >> $21;
         $$ = $22 ? 0 : $23;
         $24 = (($$) + ($2))|0;
         $25 = ($24|0)>(2047);
         if ($25) {
          label = 5;
          break;
         }
         $37 = ($this);
         $38 = HEAP8[$37]|0;
         $39 = $38&255;
         $40 = $39 >>> 6;
         $41 = 1 << $40;
         $42 = ($40|0)==(3);
         $$2 = $42 ? $17 : 0;
         $$3 = $42 ? 2 : $41;
         $43 = (($this) + 32|0);
         $44 = HEAP32[$43>>2]|0;
         $45 = ($44|0)<($$3|0);
         $46 = $45 ? $17 : 0;
         $amp$1 = $46 ^ $$2;
         $47 = (__ZN7Nes_Osc10update_ampEi($1,$amp$1)|0);
         $48 = ($47|0)==(0);
         if (!($48)) {
          $49 = (($this) + 40|0);
          $50 = HEAP32[$49>>2]|0;
          $51 = HEAP32[$5>>2]|0;
          __ZNK10Blip_SynthILi12ELi1EE6offsetEiiP11Blip_Buffer($50,$time,$47,$51);
         }
         $52 = (($this) + 16|0);
         $53 = HEAP32[$52>>2]|0;
         $54 = (($53) + ($time))|0;
         $55 = ($54|0)<($end_time|0);
         if (!($55)) {
          $$1 = $54;
          break;
         }
         $56 = HEAP32[$5>>2]|0;
         $57 = (($this) + 40|0);
         $58 = HEAP32[$57>>2]|0;
         $59 = $amp$1 << 1;
         $60 = (($59) - ($17))|0;
         $61 = HEAP32[$43>>2]|0;
         $$0 = $54;$delta1$0 = $60;$phase$0 = $61;
         while(1) {
          $62 = (($phase$0) + 1)|0;
          $63 = $62 & 7;
          $64 = ($63|0)==(0);
          $65 = ($63|0)==($$3|0);
          $or$cond4 = $64 | $65;
          if ($or$cond4) {
           $66 = (0 - ($delta1$0))|0;
           __ZNK10Blip_SynthILi12ELi1EE13offset_inlineEiiP11Blip_Buffer($58,$$0,$66,$56);
           $delta1$1 = $66;
          } else {
           $delta1$1 = $delta1$0;
          }
          $67 = (($$0) + ($4))|0;
          $68 = ($67|0)<($end_time|0);
          if ($68) {
           $phase$0$phi = $63;$$0 = $67;$delta1$0 = $delta1$1;$phase$0 = $phase$0$phi;
          } else {
           break;
          }
         }
         $69 = (($delta1$1) + ($17))|0;
         $70 = $69 >> 1;
         $71 = (($this) + 20|0);
         HEAP32[$71>>2] = $70;
         HEAP32[$43>>2] = $63;
         $$1 = $67;
        }
       } while(0);
       if ((label|0) == 5) {
        $26 = (($this) + 20|0);
        $27 = HEAP32[$26>>2]|0;
        $28 = ($27|0)==(0);
        if (!($28)) {
         $29 = (($this) + 40|0);
         $30 = HEAP32[$29>>2]|0;
         $31 = (0 - ($27))|0;
         $32 = HEAP32[$5>>2]|0;
         __ZNK10Blip_SynthILi12ELi1EE6offsetEiiP11Blip_Buffer($30,$time,$31,$32);
         HEAP32[$26>>2] = 0;
        }
        $33 = (($this) + 16|0);
        $34 = HEAP32[$33>>2]|0;
        $35 = (($34) + ($time))|0;
        $36 = (__ZN10Nes_Square14maintain_phaseElll($this,$35,$end_time,$4)|0);
        $$1 = $36;
       }
       $72 = (($$1) - ($end_time))|0;
       $73 = (($this) + 16|0);
       HEAP32[$73>>2] = $72;
       STACKTOP = sp;return;
      }
      function __ZN10Nes_Square14maintain_phaseElll($this,$time,$end_time,$timer_period) {
       $this = $this|0;
       $time = $time|0;
       $end_time = $end_time|0;
       $timer_period = $timer_period|0;
       var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($end_time) - ($time))|0;
       $2 = ($1|0)>(0);
       if (!($2)) {
        $$0 = $time;
        STACKTOP = sp;return ($$0|0);
       }
       $3 = (($timer_period) + -1)|0;
       $4 = (($3) + ($1))|0;
       $5 = (($4|0) / ($timer_period|0))&-1;
       $6 = (($this) + 32|0);
       $7 = HEAP32[$6>>2]|0;
       $8 = (($7) + ($5))|0;
       $9 = $8 & 7;
       HEAP32[$6>>2] = $9;
       $10 = Math_imul($5, $timer_period)|0;
       $11 = (($10) + ($time))|0;
       $$0 = $11;
       STACKTOP = sp;return ($$0|0);
      }
      function __ZN7Nes_Osc10update_ampEi($this,$amp) {
       $this = $this|0;
       $amp = $amp|0;
       var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 20|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = (($amp) - ($2))|0;
       HEAP32[$1>>2] = $amp;
       STACKTOP = sp;return ($3|0);
      }
      function __ZN12Nes_Triangle20clock_linear_counterEv($this) {
       $this = $this|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 7|0);
       $2 = HEAP8[$1]|0;
       $3 = ($2<<24>>24)==(0);
       do {
        if ($3) {
         $9 = (($this) + 28|0);
         $10 = HEAP32[$9>>2]|0;
         $11 = ($10|0)==(0);
         if ($11) {
          break;
         }
         $12 = (($10) + -1)|0;
         HEAP32[$9>>2] = $12;
        } else {
         $4 = ($this);
         $5 = HEAP8[$4]|0;
         $6 = $5&255;
         $7 = $6 & 127;
         $8 = (($this) + 28|0);
         HEAP32[$8>>2] = $7;
        }
       } while(0);
       $13 = ($this);
       $14 = HEAP8[$13]|0;
       $15 = ($14<<24>>24)<(0);
       if ($15) {
        STACKTOP = sp;return;
       }
       HEAP8[$1] = 0;
       STACKTOP = sp;return;
      }
      function __ZN12Nes_Triangle3runEll($this,$time,$end_time) {
       $this = $this|0;
       $time = $time|0;
       $end_time = $end_time|0;
       var $$ = 0, $$0 = 0, $$1 = 0, $$2 = 0, $$phase$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
       var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
       var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond1 = 0, $phase$0 = 0, $phase$1 = 0, $volume$0 = 0;
       var $volume$1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = (__ZNK7Nes_Osc6periodEv($1)|0);
       $3 = (($2) + 1)|0;
       $4 = (($this) + 8|0);
       $5 = HEAP32[$4>>2]|0;
       $6 = ($5|0)==(0|0);
       if ($6) {
        $7 = (($this) + 16|0);
        $8 = HEAP32[$7>>2]|0;
        $9 = (($8) + ($time))|0;
        HEAP32[$7>>2] = 0;
        $10 = (($this) + 12|0);
        $11 = HEAP32[$10>>2]|0;
        $12 = ($11|0)==(0);
        if ($12) {
         STACKTOP = sp;return;
        }
        $13 = (($this) + 28|0);
        $14 = HEAP32[$13>>2]|0;
        $15 = ($14|0)!=(0);
        $16 = ($2|0)>(1);
        $or$cond = $15 & $16;
        if (!($or$cond)) {
         STACKTOP = sp;return;
        }
        $17 = (__ZN12Nes_Triangle14maintain_phaseElll($this,$9,$end_time,$3)|0);
        $18 = (($17) - ($end_time))|0;
        HEAP32[$7>>2] = $18;
        STACKTOP = sp;return;
       }
       __ZN11Blip_Buffer12set_modifiedEv($5);
       $19 = (__ZNK12Nes_Triangle8calc_ampEv($this)|0);
       $20 = (__ZN7Nes_Osc10update_ampEi($1,$19)|0);
       $21 = ($20|0)==(0);
       if (!($21)) {
        $22 = (($this) + 32|0);
        $23 = HEAP32[$4>>2]|0;
        __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($22,$time,$20,$23);
       }
       $24 = (($this) + 16|0);
       $25 = HEAP32[$24>>2]|0;
       $26 = (($25) + ($time))|0;
       $27 = (($this) + 12|0);
       $28 = HEAP32[$27>>2]|0;
       $29 = ($28|0)==(0);
       do {
        if ($29) {
         $$1 = $end_time;
        } else {
         $30 = (($this) + 28|0);
         $31 = HEAP32[$30>>2]|0;
         $32 = ($31|0)==(0);
         $33 = ($3|0)<(3);
         $or$cond1 = $32 | $33;
         if ($or$cond1) {
          $$1 = $end_time;
          break;
         }
         $34 = ($26|0)<($end_time|0);
         if (!($34)) {
          $$1 = $26;
          break;
         }
         $35 = HEAP32[$4>>2]|0;
         $36 = (($this) + 24|0);
         $37 = HEAP32[$36>>2]|0;
         $38 = ($37|0)>(16);
         $39 = (($37) + -16)|0;
         $$ = $38 ? $39 : $37;
         $$2 = $38 ? -1 : 1;
         $40 = (($this) + 32|0);
         $$0 = $26;$phase$0 = $$;$volume$0 = $$2;
         while(1) {
          $41 = (($phase$0) + -1)|0;
          $42 = ($41|0)==(0);
          if ($42) {
           $43 = (0 - ($volume$0))|0;
           $phase$1 = 16;$volume$1 = $43;
          } else {
           __ZNK10Blip_SynthILi8ELi1EE13offset_inlineEiiP11Blip_Buffer($40,$$0,$volume$0,$35);
           $phase$1 = $41;$volume$1 = $volume$0;
          }
          $44 = (($$0) + ($3))|0;
          $45 = ($44|0)<($end_time|0);
          if ($45) {
           $$0 = $44;$phase$0 = $phase$1;$volume$0 = $volume$1;
          } else {
           break;
          }
         }
         $46 = ($volume$1|0)<(0);
         $47 = (($phase$1) + 16)|0;
         $$phase$1 = $46 ? $47 : $phase$1;
         HEAP32[$36>>2] = $$phase$1;
         $48 = (__ZNK12Nes_Triangle8calc_ampEv($this)|0);
         $49 = (($this) + 20|0);
         HEAP32[$49>>2] = $48;
         $$1 = $44;
        }
       } while(0);
       $50 = (($$1) - ($end_time))|0;
       HEAP32[$24>>2] = $50;
       STACKTOP = sp;return;
      }
      function __ZN12Nes_Triangle14maintain_phaseElll($this,$time,$end_time,$timer_period) {
       $this = $this|0;
       $time = $time|0;
       $end_time = $end_time|0;
       $timer_period = $timer_period|0;
       var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($end_time) - ($time))|0;
       $2 = ($1|0)>(0);
       if (!($2)) {
        $$0 = $time;
        STACKTOP = sp;return ($$0|0);
       }
       $3 = (($timer_period) + -1)|0;
       $4 = (($3) + ($1))|0;
       $5 = (($4|0) / ($timer_period|0))&-1;
       $6 = (($this) + 24|0);
       $7 = HEAP32[$6>>2]|0;
       $8 = (1 - ($5))|0;
       $9 = (($8) + ($7))|0;
       $10 = $9 & 31;
       $11 = (($10) + 1)|0;
       HEAP32[$6>>2] = $11;
       $12 = Math_imul($5, $timer_period)|0;
       $13 = (($12) + ($time))|0;
       $$0 = $13;
       STACKTOP = sp;return ($$0|0);
      }
      function __ZNK12Nes_Triangle8calc_ampEv($this) {
       $this = $this|0;
       var $$ = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 24|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = (16 - ($2))|0;
       $4 = ($3|0)<(0);
       $5 = (($2) + -17)|0;
       $$ = $4 ? $5 : $3;
       STACKTOP = sp;return ($$|0);
      }
      function __ZN7Nes_Dmc5resetEv($this) {
       $this = $this|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 24|0);
       HEAP32[$1>>2] = 0;
       $2 = (($this) + 48|0);
       HEAP32[$2>>2] = 0;
       $3 = (($this) + 32|0);
       HEAP32[$3>>2] = 0;
       $4 = (($this) + 36|0);
       HEAP32[$4>>2] = 1;
       $5 = (($this) + 40|0);
       HEAP32[$5>>2] = 0;
       $6 = (($this) + 44|0);
       HEAP8[$6] = 0;
       $7 = (($this) + 45|0);
       HEAP8[$7] = 1;
       $8 = (($this) + 52|0);
       HEAP32[$8>>2] = 1073741824;
       $9 = (($this) + 57|0);
       HEAP8[$9] = 0;
       $10 = (($this) + 56|0);
       HEAP8[$10] = 0;
       $11 = ($this);
       __ZN7Nes_Osc5resetEv($11);
       $12 = (($this) + 28|0);
       HEAP32[$12>>2] = 428;
       STACKTOP = sp;return;
      }
      function __ZN7Nes_Dmc10recalc_irqEv($this) {
       $this = $this|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
       var $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $irq$0 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 56|0);
       $2 = HEAP8[$1]|0;
       $3 = ($2<<24>>24)==(0);
       do {
        if ($3) {
         $irq$0 = 1073741824;
        } else {
         $4 = (($this) + 12|0);
         $5 = HEAP32[$4>>2]|0;
         $6 = ($5|0)==(0);
         if ($6) {
          $irq$0 = 1073741824;
          break;
         }
         $7 = (($this) + 68|0);
         $8 = HEAP32[$7>>2]|0;
         $9 = (($8) + 1948|0);
         $10 = HEAP32[$9>>2]|0;
         $11 = (($this) + 16|0);
         $12 = HEAP32[$11>>2]|0;
         $13 = $5 << 3;
         $14 = (($this) + 36|0);
         $15 = HEAP32[$14>>2]|0;
         $16 = (($13) + -9)|0;
         $17 = (($16) + ($15))|0;
         $18 = (($this) + 28|0);
         $19 = HEAP32[$18>>2]|0;
         $20 = Math_imul($17, $19)|0;
         $21 = (($10) + 1)|0;
         $22 = (($21) + ($12))|0;
         $23 = (($22) + ($20))|0;
         $irq$0 = $23;
        }
       } while(0);
       $24 = (($this) + 52|0);
       $25 = HEAP32[$24>>2]|0;
       $26 = ($irq$0|0)==($25|0);
       if ($26) {
        STACKTOP = sp;return;
       }
       HEAP32[$24>>2] = $irq$0;
       $27 = (($this) + 68|0);
       $28 = HEAP32[$27>>2]|0;
       __ZN7Nes_Apu11irq_changedEv($28);
       STACKTOP = sp;return;
      }
      function __ZN7Nes_Dmc14write_registerEii($this,$addr,$data) {
       $this = $this|0;
       $addr = $addr|0;
       $data = $data|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
       var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       if ((($addr|0) == 1)) {
        $19 = (($this) + 48|0);
        $20 = HEAP32[$19>>2]|0;
        $21 = $data & 127;
        HEAP32[$19>>2] = $21;
        $22 = (($this) + 59|0);
        $23 = HEAP8[$22]|0;
        $24 = ($23<<24>>24)==(0);
        if (!($24)) {
         STACKTOP = sp;return;
        }
        $25 = (45776 + ($20)|0);
        $26 = (45776 + ($21)|0);
        $27 = HEAP8[$25]|0;
        $28 = HEAP8[$26]|0;
        $29 = $28&255;
        $30 = $27&255;
        $31 = (($30) + ($21))|0;
        $32 = (($31) - ($29))|0;
        $33 = (($this) + 20|0);
        HEAP32[$33>>2] = $32;
        STACKTOP = sp;return;
       } else if ((($addr|0) == 0)) {
        $1 = $data & 15;
        $2 = (($this) + 58|0);
        $3 = HEAP8[$2]|0;
        $4 = $3&255;
        $5 = (((45712) + ($4<<5)|0) + ($1<<1)|0);
        $6 = HEAP16[$5>>1]|0;
        $7 = $6 << 16 >> 16;
        $8 = (($this) + 28|0);
        HEAP32[$8>>2] = $7;
        $9 = $data & 192;
        $10 = ($9|0)==(128);
        $11 = (($this) + 56|0);
        $12 = $10&1;
        HEAP8[$11] = $12;
        $13 = $10&1;
        $14 = (($this) + 57|0);
        $15 = HEAP8[$14]|0;
        $16 = $15&255;
        $17 = $16 & $13;
        $18 = $17&255;
        HEAP8[$14] = $18;
        __ZN7Nes_Dmc10recalc_irqEv($this);
        STACKTOP = sp;return;
       } else {
        STACKTOP = sp;return;
       }
      }
      function __ZN7Nes_Dmc5startEv($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN7Nes_Dmc13reload_sampleEv($this);
       __ZN7Nes_Dmc11fill_bufferEv($this);
       __ZN7Nes_Dmc10recalc_irqEv($this);
       STACKTOP = sp;return;
      }
      function __ZN7Nes_Dmc13reload_sampleEv($this) {
       $this = $this|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 2|0);
       $2 = HEAP8[$1]|0;
       $3 = $2&255;
       $4 = $3 << 6;
       $5 = $4 | 16384;
       $6 = (($this) + 24|0);
       HEAP32[$6>>2] = $5;
       $7 = (($this) + 3|0);
       $8 = HEAP8[$7]|0;
       $9 = $8&255;
       $10 = $9 << 4;
       $11 = $10 | 1;
       $12 = (($this) + 12|0);
       HEAP32[$12>>2] = $11;
       STACKTOP = sp;return;
      }
      function __ZN7Nes_Dmc11fill_bufferEv($this) {
       $this = $this|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
       var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 44|0);
       $2 = HEAP8[$1]|0;
       $3 = ($2<<24>>24)==(0);
       if (!($3)) {
        STACKTOP = sp;return;
       }
       $4 = (($this) + 12|0);
       $5 = HEAP32[$4>>2]|0;
       $6 = ($5|0)==(0);
       if ($6) {
        STACKTOP = sp;return;
       }
       $7 = (($this) + 60|0);
       $8 = HEAP32[$7>>2]|0;
       $9 = ($8|0)==(0|0);
       if ($9) {
        ___assert_fail(((45904)|0),((45920)|0),380,((45960)|0));
        // unreachable;
       }
       $10 = (($this) + 64|0);
       $11 = HEAP32[$10>>2]|0;
       $12 = (($this) + 24|0);
       $13 = HEAP32[$12>>2]|0;
       $14 = (($13) + 32768)|0;
       $15 = (FUNCTION_TABLE_iii[$8 & 63]($11,$14)|0);
       $16 = (($this) + 32|0);
       HEAP32[$16>>2] = $15;
       $17 = HEAP32[$12>>2]|0;
       $18 = (($17) + 1)|0;
       $19 = $18 & 32767;
       HEAP32[$12>>2] = $19;
       HEAP8[$1] = 1;
       $20 = HEAP32[$4>>2]|0;
       $21 = (($20) + -1)|0;
       HEAP32[$4>>2] = $21;
       $22 = ($21|0)==(0);
       if (!($22)) {
        STACKTOP = sp;return;
       }
       $23 = ($this);
       $24 = HEAP8[$23]|0;
       $25 = $24 & 64;
       $26 = ($25<<24>>24)==(0);
       if ($26) {
        $27 = (($this) + 68|0);
        $28 = HEAP32[$27>>2]|0;
        $29 = (($28) + 1972|0);
        $30 = HEAP32[$29>>2]|0;
        $31 = $30 & -17;
        HEAP32[$29>>2] = $31;
        $32 = (($this) + 56|0);
        $33 = HEAP8[$32]|0;
        $34 = (($this) + 57|0);
        HEAP8[$34] = $33;
        $35 = (($this) + 52|0);
        HEAP32[$35>>2] = 1073741824;
        $36 = HEAP32[$27>>2]|0;
        __ZN7Nes_Apu11irq_changedEv($36);
        STACKTOP = sp;return;
       } else {
        __ZN7Nes_Dmc13reload_sampleEv($this);
        STACKTOP = sp;return;
       }
      }
      function __ZN7Nes_Dmc3runEll($this,$time,$end_time) {
       $this = $this|0;
       $time = $time|0;
       $end_time = $end_time|0;
       var $$0 = 0, $$1 = 0, $$2 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
       var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
       var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
       var $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $bits$0 = 0, $bits$1 = 0, $bits$2 = 0, $bits_remain$0 = 0, $bits_remain$1 = 0, $bits_remain$2 = 0, $dac$0 = 0, $dac$1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = (($this) + 48|0);
       $3 = HEAP32[$2>>2]|0;
       $4 = (__ZN7Nes_Osc10update_ampEi($1,$3)|0);
       $5 = (($this) + 8|0);
       $6 = HEAP32[$5>>2]|0;
       $7 = ($6|0)==(0|0);
       do {
        if ($7) {
         $8 = (($this) + 45|0);
         HEAP8[$8] = 1;
        } else {
         __ZN11Blip_Buffer12set_modifiedEv($6);
         $9 = ($4|0)==(0);
         if ($9) {
          break;
         }
         $10 = (($this) + 72|0);
         $11 = HEAP32[$5>>2]|0;
         __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($10,$time,$4,$11);
        }
       } while(0);
       $12 = (($this) + 16|0);
       $13 = HEAP32[$12>>2]|0;
       $14 = (($13) + ($time))|0;
       $15 = ($14|0)<($end_time|0);
       if (!($15)) {
        $$2 = $14;
        $63 = (($$2) - ($end_time))|0;
        HEAP32[$12>>2] = $63;
        STACKTOP = sp;return;
       }
       $16 = (($this) + 36|0);
       $17 = HEAP32[$16>>2]|0;
       $18 = (($this) + 45|0);
       $19 = HEAP8[$18]|0;
       $20 = ($19<<24>>24)==(0);
       do {
        if ($20) {
         label = 9;
        } else {
         $21 = (($this) + 44|0);
         $22 = HEAP8[$21]|0;
         $23 = ($22<<24>>24)==(0);
         if (!($23)) {
          label = 9;
          break;
         }
         $24 = (($this) + 28|0);
         $25 = HEAP32[$24>>2]|0;
         $26 = (($end_time) + -1)|0;
         $27 = (($26) - ($14))|0;
         $28 = (($27) + ($25))|0;
         $29 = (($28|0) / ($25|0))&-1;
         $30 = (($17) + 7)|0;
         $31 = (($29|0) % 8)&-1;
         $32 = (($30) - ($31))|0;
         $33 = (($32|0) % 8)&-1;
         $34 = (($33) + 1)|0;
         $35 = Math_imul($29, $25)|0;
         $36 = (($35) + ($14))|0;
         $$1 = $36;$bits_remain$2 = $34;
        }
       } while(0);
       if ((label|0) == 9) {
        $37 = HEAP32[$5>>2]|0;
        $38 = (($this) + 28|0);
        $39 = HEAP32[$38>>2]|0;
        $40 = (($this) + 40|0);
        $41 = HEAP32[$40>>2]|0;
        $42 = HEAP32[$2>>2]|0;
        $43 = (($this) + 72|0);
        $44 = (($this) + 44|0);
        $45 = (($this) + 32|0);
        $46 = ($37|0)==(0|0);
        $$0 = $14;$bits$0 = $41;$bits_remain$0 = $17;$dac$0 = $42;
        while(1) {
         $47 = HEAP8[$18]|0;
         $48 = ($47<<24>>24)==(0);
         do {
          if ($48) {
           $49 = $bits$0 << 2;
           $50 = $49 & 4;
           $51 = (($50) + -2)|0;
           $52 = $bits$0 >> 1;
           $53 = (($51) + ($dac$0))|0;
           $54 = ($53>>>0)<(128);
           if (!($54)) {
            $bits$1 = $52;$dac$1 = $dac$0;
            break;
           }
           __ZNK10Blip_SynthILi8ELi1EE13offset_inlineEiiP11Blip_Buffer($43,$$0,$51,$37);
           $bits$1 = $52;$dac$1 = $53;
          } else {
           $bits$1 = $bits$0;$dac$1 = $dac$0;
          }
         } while(0);
         $55 = (($$0) + ($39))|0;
         $56 = (($bits_remain$0) + -1)|0;
         $57 = ($56|0)==(0);
         do {
          if ($57) {
           $58 = HEAP8[$44]|0;
           $59 = ($58<<24>>24)==(0);
           if ($59) {
            HEAP8[$18] = 1;
            $bits$2 = $bits$1;$bits_remain$1 = 8;
            break;
           }
           HEAP8[$18] = 0;
           $60 = HEAP32[$45>>2]|0;
           HEAP8[$44] = 0;
           if ($46) {
            HEAP8[$18] = 1;
           }
           __ZN7Nes_Dmc11fill_bufferEv($this);
           $bits$2 = $60;$bits_remain$1 = 8;
          } else {
           $bits$2 = $bits$1;$bits_remain$1 = $56;
          }
         } while(0);
         $61 = ($55|0)<($end_time|0);
         if ($61) {
          $$0 = $55;$bits$0 = $bits$2;$bits_remain$0 = $bits_remain$1;$dac$0 = $dac$1;
         } else {
          break;
         }
        }
        HEAP32[$2>>2] = $dac$1;
        $62 = (($this) + 20|0);
        HEAP32[$62>>2] = $dac$1;
        HEAP32[$40>>2] = $bits$2;
        $$1 = $55;$bits_remain$2 = $bits_remain$1;
       }
       HEAP32[$16>>2] = $bits_remain$2;
       $$2 = $$1;
       $63 = (($$2) - ($end_time))|0;
       HEAP32[$12>>2] = $63;
       STACKTOP = sp;return;
      }
      function __ZN9Nes_Noise3runEll($this,$time,$end_time) {
       $this = $this|0;
       $time = $time|0;
       $end_time = $end_time|0;
       var $$0 = 0, $$0$phi = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
       var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
       var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
       var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0;
       var $9 = 0, $delta1$0 = 0, $delta1$1 = 0, $noise$0 = 0, $rtime$0 = 0, $sum = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 2|0);
       $2 = HEAP8[$1]|0;
       $3 = $2&255;
       $4 = $3 & 15;
       $5 = ((45976) + ($4<<1)|0);
       $6 = HEAP16[$5>>1]|0;
       $7 = $6 << 16 >> 16;
       $8 = (($this) + 8|0);
       $9 = HEAP32[$8>>2]|0;
       $10 = ($9|0)==(0|0);
       if ($10) {
        $11 = (($this) + 16|0);
        $12 = HEAP32[$11>>2]|0;
        $13 = (($12) + ($time))|0;
        $14 = (($end_time) + -1)|0;
        $15 = (($14) + ($7))|0;
        $16 = (($15) - ($13))|0;
        $17 = (($16|0) % ($7|0))&-1;
        $sum = (($17) + ($end_time))|0;
        $18 = (($13) - ($sum))|0;
        $19 = (($18) + ($16))|0;
        HEAP32[$11>>2] = $19;
        STACKTOP = sp;return;
       }
       $20 = ($this);
       __ZN11Blip_Buffer12set_modifiedEv($9);
       $21 = ($this);
       $22 = (__ZNK12Nes_Envelope6volumeEv($21)|0);
       $23 = (($this) + 32|0);
       $24 = HEAP32[$23>>2]|0;
       $25 = $24 & 1;
       $26 = ($25|0)!=(0);
       $27 = $26 ? $22 : 0;
       $28 = (__ZN7Nes_Osc10update_ampEi($20,$27)|0);
       $29 = ($28|0)==(0);
       if (!($29)) {
        $30 = (($this) + 40|0);
        $31 = HEAP32[$8>>2]|0;
        __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($30,$time,$28,$31);
       }
       $32 = (($this) + 16|0);
       $33 = HEAP32[$32>>2]|0;
       $34 = (($33) + ($time))|0;
       $35 = ($34|0)<($end_time|0);
       do {
        if ($35) {
         $36 = ($22|0)==(0);
         if ($36) {
          $37 = (($end_time) + -1)|0;
          $38 = (($37) + ($7))|0;
          $39 = (($38) - ($34))|0;
          $40 = (($39|0) % ($7|0))&-1;
          $41 = (($39) - ($40))|0;
          $42 = (($41) + ($34))|0;
          $43 = HEAP8[$1]|0;
          $44 = ($43<<24>>24)<(0);
          if ($44) {
           $$1 = $42;
           break;
          }
          $45 = HEAP32[$23>>2]|0;
          $46 = $45 << 13;
          $47 = $45 << 14;
          $48 = $46 ^ $47;
          $49 = $48 & 16384;
          $50 = $45 >> 1;
          $51 = $49 | $50;
          HEAP32[$23>>2] = $51;
          $$1 = $42;
          break;
         }
         $52 = HEAP32[$8>>2]|0;
         $53 = (__ZNK11Blip_Buffer18resampled_durationEi($52,$7)|0);
         $54 = (__ZNK11Blip_Buffer14resampled_timeEi($52,$34)|0);
         $55 = HEAP32[$23>>2]|0;
         $56 = $27 << 1;
         $57 = (($56) - ($22))|0;
         $58 = HEAP8[$1]|0;
         $59 = ($58<<24>>24)<(0);
         $60 = $59 ? 8 : 13;
         $61 = (($this) + 40|0);
         $$0 = $34;$delta1$0 = $57;$noise$0 = $55;$rtime$0 = $54;
         while(1) {
          $62 = $noise$0 << $60;
          $63 = $noise$0 << 14;
          $64 = $62 ^ $63;
          $65 = (($$0) + ($7))|0;
          $66 = (($noise$0) + 1)|0;
          $67 = $66 & 2;
          $68 = ($67|0)==(0);
          if ($68) {
           $delta1$1 = $delta1$0;
          } else {
           $69 = (0 - ($delta1$0))|0;
           __ZNK10Blip_SynthILi8ELi1EE16offset_resampledEjiP11Blip_Buffer($61,$rtime$0,$69,$52);
           $delta1$1 = $69;
          }
          $70 = (($rtime$0) + ($53))|0;
          $71 = $64 & 16384;
          $72 = $noise$0 >> 1;
          $73 = $71 | $72;
          $74 = ($65|0)<($end_time|0);
          if ($74) {
           $$0$phi = $65;$delta1$0 = $delta1$1;$noise$0 = $73;$rtime$0 = $70;$$0 = $$0$phi;
          } else {
           break;
          }
         }
         $75 = (($delta1$1) + ($22))|0;
         $76 = $75 >> 1;
         $77 = (($this) + 20|0);
         HEAP32[$77>>2] = $76;
         HEAP32[$23>>2] = $73;
         $$1 = $65;
        } else {
         $$1 = $34;
        }
       } while(0);
       $78 = (($$1) - ($end_time))|0;
       HEAP32[$32>>2] = $78;
       STACKTOP = sp;return;
      }
      function __ZN12Nes_Vrc6_ApuC2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 80|0);
       __ZN10Blip_SynthILi8ELi1EEC1Ev($1);
       $2 = (($this) + 640|0);
       __ZN10Blip_SynthILi12ELi1EEC1Ev($2);
       __ZN12Nes_Vrc6_Apu6outputEP11Blip_Buffer($this,0);
       __ZN12Nes_Vrc6_Apu6volumeEd($this,1.0);
       __ZN12Nes_Vrc6_Apu5resetEv($this);
       STACKTOP = sp;return;
      }
      function __ZN12Nes_Vrc6_Apu6outputEP11Blip_Buffer($this,$buf) {
       $this = $this|0;
       $buf = $buf|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN12Nes_Vrc6_Apu10osc_outputEiP11Blip_Buffer($this,0,$buf);
       __ZN12Nes_Vrc6_Apu10osc_outputEiP11Blip_Buffer($this,1,$buf);
       __ZN12Nes_Vrc6_Apu10osc_outputEiP11Blip_Buffer($this,2,$buf);
       STACKTOP = sp;return;
      }
      function __ZN12Nes_Vrc6_Apu6volumeEd($this,$v) {
       $this = $this|0;
       $v = +$v;
       var $1 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 80|0);
       $2 = $v * 0.00623870967741935438661;
       __ZN10Blip_SynthILi8ELi1EE6volumeEd($1,$2);
       $3 = (($this) + 640|0);
       $4 = $v * 0.00644666666666666651753;
       __ZN10Blip_SynthILi12ELi1EE6volumeEd($3,$4);
       STACKTOP = sp;return;
      }
      function __ZN12Nes_Vrc6_Apu5resetEv($this) {
       $this = $this|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 72|0);
       HEAP32[$1>>2] = 0;
       $scevgep3 = ($this);
       ;HEAP8[$scevgep3+0|0]=0|0;HEAP8[$scevgep3+1|0]=0|0;HEAP8[$scevgep3+2|0]=0|0;
       $2 = (($this) + 8|0);
       HEAP32[$2>>2] = 0;
       $3 = (($this) + 12|0);
       HEAP32[$3>>2] = 0;
       $4 = (($this) + 16|0);
       HEAP32[$4>>2] = 1;
       $5 = (($this) + 20|0);
       $6 = $5;
       ;HEAP32[$6+0>>2]=0|0;HEAP16[$6+4>>1]=0|0;HEAP8[$6+6|0]=0|0;
       $7 = (($this) + 32|0);
       HEAP32[$7>>2] = 0;
       $8 = (($this) + 36|0);
       HEAP32[$8>>2] = 0;
       $9 = (($this) + 40|0);
       HEAP32[$9>>2] = 1;
       $10 = (($this) + 44|0);
       $11 = $10;
       ;HEAP32[$11+0>>2]=0|0;HEAP16[$11+4>>1]=0|0;HEAP8[$11+6|0]=0|0;
       $12 = (($this) + 56|0);
       HEAP32[$12>>2] = 0;
       $13 = (($this) + 60|0);
       HEAP32[$13>>2] = 0;
       $14 = (($this) + 64|0);
       HEAP32[$14>>2] = 1;
       $15 = (($this) + 68|0);
       HEAP32[$15>>2] = 0;
       STACKTOP = sp;return;
      }
      function __ZN12Nes_Vrc6_Apu10osc_outputEiP11Blip_Buffer($this,$i,$buf) {
       $this = $this|0;
       $i = $i|0;
       $buf = $buf|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($i>>>0)<(3);
       if ($1) {
        $2 = ((($this) + (($i*24)|0)|0) + 4|0);
        HEAP32[$2>>2] = $buf;
        STACKTOP = sp;return;
       } else {
        ___assert_fail(((46216)|0),((46248)|0),78,((46288)|0));
        // unreachable;
       }
      }
      function __ZN12Nes_Vrc6_Apu9run_untilEi($this,$time) {
       $this = $this|0;
       $time = $time|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 72|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = ($2|0)>($time|0);
       if ($3) {
        ___assert_fail(((46008)|0),((46032)|0),48,((46072)|0));
        // unreachable;
       } else {
        $4 = ($this);
        __ZN12Nes_Vrc6_Apu10run_squareERNS_8Vrc6_OscEi($this,$4,$time);
        $5 = (($this) + 24|0);
        __ZN12Nes_Vrc6_Apu10run_squareERNS_8Vrc6_OscEi($this,$5,$time);
        __ZN12Nes_Vrc6_Apu7run_sawEi($this,$time);
        HEAP32[$1>>2] = $time;
        STACKTOP = sp;return;
       }
      }
      function __ZN12Nes_Vrc6_Apu10run_squareERNS_8Vrc6_OscEi($this,$osc,$end_time) {
       $this = $this|0;
       $osc = $osc|0;
       $end_time = $end_time|0;
       var $$ = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
       var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
       var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $brmerge = 0, $brmerge$not = 0, $or$cond = 0, $phase$0 = 0, $phase$11 = 0, $time$0 = 0, $time$1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($osc) + 4|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = ($2|0)==(0|0);
       if ($3) {
        STACKTOP = sp;return;
       }
       __ZN11Blip_Buffer12set_modifiedEv($2);
       $4 = ($osc);
       $5 = HEAP8[$4]|0;
       $6 = $5&255;
       $7 = $6 & 15;
       $8 = (($osc) + 2|0);
       $9 = HEAP8[$8]|0;
       $10 = ($9<<24>>24)<(0);
       $$ = $10 ? $7 : 0;
       $11 = $6 & 128;
       $12 = $6 >>> 4;
       $13 = $12 & 7;
       $14 = (($13) + 1)|0;
       $15 = ($11|0)!=(0);
       if ($15) {
        label = 4;
       } else {
        $16 = (($osc) + 16|0);
        $17 = HEAP32[$16>>2]|0;
        $18 = ($17|0)<($14|0);
        if ($18) {
         label = 4;
        } else {
         $19 = 0;
        }
       }
       if ((label|0) == 4) {
        $19 = $$;
       }
       $20 = (($osc) + 12|0);
       $21 = HEAP32[$20>>2]|0;
       $22 = (($this) + 72|0);
       $23 = HEAP32[$22>>2]|0;
       $24 = ($19|0)==($21|0);
       if (!($24)) {
        $25 = (($19) - ($21))|0;
        HEAP32[$20>>2] = $19;
        $26 = (($this) + 640|0);
        __ZNK10Blip_SynthILi12ELi1EE6offsetEiiP11Blip_Buffer($26,$23,$25,$2);
       }
       $27 = (($osc) + 8|0);
       $28 = HEAP32[$27>>2]|0;
       $29 = (($28) + ($23))|0;
       HEAP32[$27>>2] = 0;
       $30 = (__ZNK12Nes_Vrc6_Apu8Vrc6_Osc6periodEv($osc)|0);
       $31 = ($$|0)==(0);
       $brmerge = $31 | $15;
       $brmerge$not = $brmerge ^ 1;
       $32 = ($30|0)>(4);
       $or$cond = $32 & $brmerge$not;
       if (!($or$cond)) {
        STACKTOP = sp;return;
       }
       $33 = ($29|0)<($end_time|0);
       if ($33) {
        $34 = (($osc) + 16|0);
        $35 = HEAP32[$34>>2]|0;
        $36 = (($this) + 640|0);
        $37 = (($this) + 640|0);
        $38 = (0 - ($$))|0;
        $phase$0 = $35;$time$0 = $29;
        while(1) {
         $39 = (($phase$0) + 1)|0;
         $40 = ($39|0)==(16);
         do {
          if ($40) {
           HEAP32[$20>>2] = $$;
           __ZNK10Blip_SynthILi12ELi1EE6offsetEiiP11Blip_Buffer($36,$time$0,$$,$2);
           $phase$11 = 0;
          } else {
           $41 = ($39|0)==($14|0);
           if (!($41)) {
            $phase$11 = $39;
            break;
           }
           HEAP32[$20>>2] = 0;
           __ZNK10Blip_SynthILi12ELi1EE6offsetEiiP11Blip_Buffer($37,$time$0,$38,$2);
           $phase$11 = $39;
          }
         } while(0);
         $42 = (($time$0) + ($30))|0;
         $43 = ($42|0)<($end_time|0);
         if ($43) {
          $phase$0 = $phase$11;$time$0 = $42;
         } else {
          break;
         }
        }
        HEAP32[$34>>2] = $phase$11;
        $time$1 = $42;
       } else {
        $time$1 = $29;
       }
       $44 = (($time$1) - ($end_time))|0;
       HEAP32[$27>>2] = $44;
       STACKTOP = sp;return;
      }
      function __ZN12Nes_Vrc6_Apu7run_sawEi($this,$end_time) {
       $this = $this|0;
       $end_time = $end_time|0;
       var $$ = 0, $$amp$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
       var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0;
       var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $amp$0 = 0, $last_amp$0 = 0, $last_amp$1 = 0, $last_amp$2 = 0, $last_amp$3 = 0, $phase$0 = 0, $phase$0$phi = 0, $time$0 = 0, $time$1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 48|0);
       $2 = (($this) + 52|0);
       $3 = HEAP32[$2>>2]|0;
       $4 = ($3|0)==(0|0);
       if ($4) {
        STACKTOP = sp;return;
       }
       __ZN11Blip_Buffer12set_modifiedEv($3);
       $5 = (($this) + 68|0);
       $6 = HEAP32[$5>>2]|0;
       $7 = ($1);
       $8 = HEAP8[$7]|0;
       $9 = $8&255;
       $10 = $9 & 63;
       $11 = (($this) + 72|0);
       $12 = HEAP32[$11>>2]|0;
       $13 = (($this) + 60|0);
       $14 = HEAP32[$13>>2]|0;
       $15 = (($this) + 50|0);
       $16 = HEAP8[$15]|0;
       $17 = ($16<<24>>24)<(0);
       do {
        if ($17) {
         $18 = $10 | $6;
         $19 = ($18|0)==(0);
         if ($19) {
          label = 4;
          break;
         }
         $24 = (($this) + 56|0);
         $25 = HEAP32[$24>>2]|0;
         $26 = (($25) + ($12))|0;
         $27 = ($26|0)<($end_time|0);
         if ($27) {
          $28 = (__ZNK12Nes_Vrc6_Apu8Vrc6_Osc6periodEv($1)|0);
          $29 = $28 << 1;
          $30 = (($this) + 64|0);
          $31 = HEAP32[$30>>2]|0;
          $32 = (($this) + 80|0);
          $amp$0 = $6;$last_amp$0 = $14;$phase$0 = $31;$time$0 = $26;
          while(1) {
           $33 = (($phase$0) + -1)|0;
           $34 = ($33|0)==(0);
           $$ = $34 ? 7 : $33;
           $$amp$0 = $34 ? 0 : $amp$0;
           $35 = $$amp$0 >> 3;
           $36 = ($35|0)==($last_amp$0|0);
           if ($36) {
            $last_amp$1 = $last_amp$0;
           } else {
            $37 = (($35) - ($last_amp$0))|0;
            __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($32,$time$0,$37,$3);
            $last_amp$1 = $35;
           }
           $38 = (($time$0) + ($29))|0;
           $39 = (($$amp$0) + ($10))|0;
           $40 = $39 & 255;
           $41 = ($38|0)<($end_time|0);
           if ($41) {
            $phase$0$phi = $$;$amp$0 = $40;$last_amp$0 = $last_amp$1;$time$0 = $38;$phase$0 = $phase$0$phi;
           } else {
            break;
           }
          }
          HEAP32[$30>>2] = $$;
          HEAP32[$5>>2] = $40;
          $last_amp$2 = $last_amp$1;$time$1 = $38;
         } else {
          $last_amp$2 = $14;$time$1 = $26;
         }
         $42 = (($time$1) - ($end_time))|0;
         HEAP32[$24>>2] = $42;
         $last_amp$3 = $last_amp$2;
        } else {
         label = 4;
        }
       } while(0);
       if ((label|0) == 4) {
        $20 = (($this) + 56|0);
        HEAP32[$20>>2] = 0;
        $21 = $6 >> 3;
        $22 = (($21) - ($14))|0;
        $23 = (($this) + 80|0);
        __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($23,$12,$22,$3);
        $last_amp$3 = $21;
       }
       HEAP32[$13>>2] = $last_amp$3;
       STACKTOP = sp;return;
      }
      function __ZN12Nes_Vrc6_Apu9write_oscEiiii($this,$time,$osc_index,$reg,$data) {
       $this = $this|0;
       $time = $time|0;
       $osc_index = $osc_index|0;
       $reg = $reg|0;
       $data = $data|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($osc_index>>>0)<(3);
       if (!($1)) {
        ___assert_fail(((46088)|0),((46032)|0),57,((46128)|0));
        // unreachable;
       }
       $2 = ($reg>>>0)<(3);
       if ($2) {
        __ZN12Nes_Vrc6_Apu9run_untilEi($this,$time);
        $3 = $data&255;
        $4 = ((($this) + (($osc_index*24)|0)|0) + ($reg)|0);
        HEAP8[$4] = $3;
        STACKTOP = sp;return;
       } else {
        ___assert_fail(((46144)|0),((46032)|0),58,((46128)|0));
        // unreachable;
       }
      }
      function __ZN12Nes_Vrc6_Apu9end_frameEi($this,$time) {
       $this = $this|0;
       $time = $time|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 72|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = ($2|0)<($time|0);
       if ($3) {
        __ZN12Nes_Vrc6_Apu9run_untilEi($this,$time);
       }
       $4 = HEAP32[$1>>2]|0;
       $5 = ($4|0)<($time|0);
       if ($5) {
        ___assert_fail(((46176)|0),((46032)|0),69,((46200)|0));
        // unreachable;
       } else {
        $6 = (($4) - ($time))|0;
        HEAP32[$1>>2] = $6;
        STACKTOP = sp;return;
       }
      }
      function __ZNK12Nes_Vrc6_Apu8Vrc6_Osc6periodEv($this) {
       $this = $this|0;
       var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 2|0);
       $2 = HEAP8[$1]|0;
       $3 = $2&255;
       $4 = $3 << 8;
       $5 = $4 & 3840;
       $6 = (($this) + 1|0);
       $7 = HEAP8[$6]|0;
       $8 = $7&255;
       $9 = $5 | $8;
       $10 = (($9) + 1)|0;
       STACKTOP = sp;return ($10|0);
      }
      function __ZN7Nsf_Emu8pcm_readEPvj($emu,$addr) {
       $emu = $emu|0;
       $addr = $addr|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($emu) + 336|0);
       $2 = $1;
       $3 = (__ZN7Nes_Cpu8get_codeEj($2,$addr)|0);
       $4 = HEAP8[$3]|0;
       $5 = $4&255;
       STACKTOP = sp;return ($5|0);
      }
      function __ZN7Nsf_EmuC2Ev($this) {
       $this = $this|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 336|0);
       $2 = $1;
       __ZN7Nes_CpuC2Ev($2);
       $3 = ($this);
       __ZN11Classic_EmuC2Ev($3);
       $4 = $this;
       HEAP32[$4>>2] = (((46384) + 8|0));
       $5 = (($this) + 2604|0);
       __ZN8Rom_DataILi4096EEC1Ev($5);
       $6 = (($this) + 2640|0);
       __ZN7Nes_ApuC2Ev($6);
       $7 = ($this);
       $8 = (($this) + 2632|0);
       HEAP32[$8>>2] = 0;
       $9 = (($this) + 2628|0);
       HEAP32[$9>>2] = 0;
       $10 = (($this) + 2636|0);
       HEAP32[$10>>2] = 0;
       $11 = $this;
       __ZN8Gme_File8set_typeEPK11gme_type_t_($11,(46488));
       $12 = $this;
       __ZN9Music_Emu21set_silence_lookaheadEi($12,6);
       __ZN7Nes_Apu10dmc_readerEPFiPvjES0_($6,36,$7);
       __ZN9Music_Emu13set_equalizerERK15gme_equalizer_t($12,(46304));
       __ZN9Music_Emu8set_gainEd($12,1.39999999999999991118);
       $13 = (($this) + 13768|0);
       _memset(($13|0),-14,2056)|0;
       STACKTOP = sp;return;
      }
      function __ZN7Nes_CpuC2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 2060|0);
       $2 = (($this) + 2056|0);
       HEAP32[$2>>2] = $1;
       STACKTOP = sp;return;
      }
      function __ZN8Rom_DataILi4096EEC1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN8Rom_DataILi4096EEC2Ev($this);
       STACKTOP = sp;return;
      }
      function __ZN7Nes_Apu10dmc_readerEPFiPvjES0_($this,$func,$user_data) {
       $this = $this|0;
       $func = $func|0;
       $user_data = $user_data|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 1368|0);
       HEAP32[$1>>2] = $user_data;
       $2 = (($this) + 1364|0);
       HEAP32[$2>>2] = $func;
       STACKTOP = sp;return;
      }
      function __ZN8Rom_DataILi4096EED1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN8Rom_DataILi4096EED2Ev($this);
       STACKTOP = sp;return;
      }
      function __ZN7Nsf_EmuD0Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       __ZN7Nsf_EmuD2Ev($this);
       $1 = ($this);
       __ZN8Gme_FiledlEPv($1);
       STACKTOP = sp;return;
      }
      function __ZN7Nsf_EmuD2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $this;
       HEAP32[$1>>2] = (((46384) + 8|0));
       $2 = $this;
       $3 = HEAP32[$2>>2]|0;
       $4 = (($3) + 8|0);
       $5 = HEAP32[$4>>2]|0;
       FUNCTION_TABLE_vi[$5 & 127]($this);
       $6 = (($this) + 2604|0);
       __ZN8Rom_DataILi4096EED1Ev($6);
       $7 = ($this);
       __ZN11Classic_EmuD2Ev($7);
       STACKTOP = sp;return;
      }
      function __ZN7Nsf_Emu6unloadEv($this) {
       $this = $this|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 2632|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = ($2|0)==(0|0);
       if (!($3)) {
        $4 = ($2);
        __ZN12Nes_Vrc6_ApudlEPv($4);
       }
       HEAP32[$1>>2] = 0;
       $5 = (($this) + 2628|0);
       $6 = HEAP32[$5>>2]|0;
       $7 = ($6|0)==(0|0);
       if (!($7)) {
        $8 = $6;
        __ZN13Nes_Namco_ApudlEPv($8);
       }
       HEAP32[$5>>2] = 0;
       $9 = (($this) + 2636|0);
       $10 = HEAP32[$9>>2]|0;
       $11 = ($10|0)==(0|0);
       if (!($11)) {
        $12 = ($10);
        __ZN12Nes_Fme7_ApudlEPv($12);
       }
       HEAP32[$9>>2] = 0;
       $13 = (($this) + 2604|0);
       __ZN8Rom_DataILi4096EE5clearEv($13);
       $14 = $this;
       __ZN9Music_Emu6unloadEv($14);
       STACKTOP = sp;return;
      }
      function __ZN12Nes_Vrc6_ApudlEPv($p) {
       $p = $p|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       _free($p);
       STACKTOP = sp;return;
      }
      function __ZN13Nes_Namco_ApudlEPv($p) {
       $p = $p|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       _free($p);
       STACKTOP = sp;return;
      }
      function __ZN12Nes_Fme7_ApudlEPv($p) {
       $p = $p|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       _free($p);
       STACKTOP = sp;return;
      }
      function __ZN8Rom_DataILi4096EE5clearEv($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       __ZN13blargg_vectorIhE5clearEv($1);
       STACKTOP = sp;return;
      }
      function __ZNK7Nsf_Emu11track_info_EP12track_info_ti($this,$out,u$0) {
       $this = $this|0;
       $out = $out|0;
       u$0 = u$0|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 5448|0);
       __ZL15copy_nsf_fieldsRKN7Nsf_Emu8header_tEP12track_info_t($1,$out);
       STACKTOP = sp;return (0|0);
      }
      function __ZL15copy_nsf_fieldsRKN7Nsf_Emu8header_tEP12track_info_t($h,$out) {
       $h = $h|0;
       $out = $out|0;
       var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($out) + 272|0);
       $2 = (($h) + 14|0);
       __ZN8Gme_File11copy_field_EPcPKci($1,$2,32);
       $3 = (($out) + 784|0);
       $4 = (($h) + 46|0);
       __ZN8Gme_File11copy_field_EPcPKci($3,$4,32);
       $5 = (($out) + 1040|0);
       $6 = (($h) + 78|0);
       __ZN8Gme_File11copy_field_EPcPKci($5,$6,32);
       $7 = (($h) + 123|0);
       $8 = HEAP8[$7]|0;
       $9 = ($8<<24>>24)==(0);
       if ($9) {
        STACKTOP = sp;return;
       }
       $10 = (($out) + 16|0);
       __ZN8Gme_File11copy_field_EPcPKc($10,(47496));
       STACKTOP = sp;return;
      }
      function __ZN7Nsf_Emu10set_tempo_Ed($this,$t) {
       $this = $this|0;
       $t = +$t;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
       var $playback_rate$0 = 0, $standard_rate$0 = 0, $standard_rate$0$playback_rate$0 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 5558|0);
       $2 = (__Z8get_le16PKv($1)|0);
       $3 = (($this) + 2568|0);
       HEAPF64[$3>>3] = 1789772.72726999991573;
       $4 = (($this) + 2592|0);
       HEAP32[$4>>2] = 357366;
       $5 = (($this) + 2576|0);
       $6 = HEAP8[$5]|0;
       $7 = ($6<<24>>24)==(0);
       if ($7) {
        $playback_rate$0 = $2;$standard_rate$0 = 16666;
       } else {
        HEAP32[$4>>2] = 398964;
        HEAPF64[$3>>3] = 1662607.125;
        $8 = (($this) + 5568|0);
        $9 = (__Z8get_le16PKv($8)|0);
        $playback_rate$0 = $9;$standard_rate$0 = 20000;
       }
       $10 = ($playback_rate$0|0)==(0);
       $standard_rate$0$playback_rate$0 = $10 ? $standard_rate$0 : $playback_rate$0;
       $11 = ($standard_rate$0$playback_rate$0|0)!=($standard_rate$0|0);
       $12 = $t != 1.0;
       $or$cond = $11 | $12;
       if (!($or$cond)) {
        $19 = (($this) + 2640|0);
        __ZN7Nes_Apu9set_tempoEd($19,$t);
        STACKTOP = sp;return;
       }
       $13 = (+($standard_rate$0$playback_rate$0>>>0));
       $14 = +HEAPF64[$3>>3];
       $15 = $13 * $14;
       $16 = $t * 83333.3333333333284827;
       $17 = $15 / $16;
       $18 = (~~(($17)));
       HEAP32[$4>>2] = $18;
       $19 = (($this) + 2640|0);
       __ZN7Nes_Apu9set_tempoEd($19,$t);
       STACKTOP = sp;return;
      }
      function __ZN7Nsf_Emu10init_soundEv($this) {
       $this = $this|0;
       var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
       var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0;
       var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $adjusted_gain$0 = 0.0, $adjusted_gain$1 = 0.0, $adjusted_gain$2 = 0.0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 5571|0);
       $2 = HEAP8[$1]|0;
       $3 = $2 & -50;
       $4 = ($3<<24>>24)==(0);
       if (!($4)) {
        $5 = $this;
        __ZN8Gme_File11set_warningEPKc($5,(46512));
       }
       $6 = $this;
       __ZN9Music_Emu15set_voice_countEi($6,5);
       __ZN9Music_Emu15set_voice_namesEPKPKc($6,((46560)));
       $7 = ($this);
       __ZN11Classic_Emu15set_voice_typesEPKi($7,((46648)));
       $8 = (+__ZNK9Music_Emu4gainEv($6));
       $9 = HEAP8[$1]|0;
       $10 = $9 & 49;
       $11 = ($10<<24>>24)==(0);
       if (!($11)) {
        __ZN9Music_Emu15set_voice_countEi($6,8);
       }
       $12 = HEAP8[$1]|0;
       $13 = $12 & 16;
       $14 = ($13<<24>>24)==(0);
       do {
        if ($14) {
         $adjusted_gain$0 = $8;
        } else {
         $15 = (__ZN13Nes_Namco_ApunwEj(1048)|0);
         $16 = ($15|0)==(0|0);
         if (!($16)) {
          $18 = $15;
          __ZN13Nes_Namco_ApuC2Ev($18);
          $19 = (($this) + 2628|0);
          HEAP32[$19>>2] = $18;
          $20 = $8 * 0.75;
          __ZN9Music_Emu15set_voice_countEi($6,13);
          __ZN9Music_Emu15set_voice_namesEPKPKc($6,((46728)));
          $adjusted_gain$0 = $20;
          break;
         }
         $17 = (($this) + 2628|0);
         HEAP32[$17>>2] = 0;
         $$0 = (46712);
         STACKTOP = sp;return ($$0|0);
        }
       } while(0);
       $21 = HEAP8[$1]|0;
       $22 = $21 & 1;
       $23 = ($22<<24>>24)==(0);
       do {
        if ($23) {
         $adjusted_gain$1 = $adjusted_gain$0;
        } else {
         $24 = (__ZN12Nes_Vrc6_ApunwEj(1456)|0);
         $25 = ($24|0)==(0|0);
         if ($25) {
          $26 = (($this) + 2632|0);
          HEAP32[$26>>2] = 0;
          $$0 = (46712);
          STACKTOP = sp;return ($$0|0);
         } else {
          $27 = $24;
          __ZN12Nes_Vrc6_ApuC2Ev($27);
          $28 = (($this) + 2632|0);
          HEAP32[$28>>2] = $27;
          $29 = $adjusted_gain$0 * 0.75;
          __ZN9Music_Emu15set_voice_countEi($6,8);
          __ZN9Music_Emu15set_voice_namesEPKPKc($6,((46848)));
          $30 = HEAP8[$1]|0;
          $31 = $30 & 16;
          $32 = ($31<<24>>24)==(0);
          if ($32) {
           $adjusted_gain$1 = $29;
           break;
          }
          __ZN9Music_Emu15set_voice_countEi($6,16);
          __ZN9Music_Emu15set_voice_namesEPKPKc($6,((46928)));
          $adjusted_gain$1 = $29;
          break;
         }
        }
       } while(0);
       $33 = HEAP8[$1]|0;
       $34 = $33 & 32;
       $35 = ($34<<24>>24)==(0);
       do {
        if ($35) {
         $adjusted_gain$2 = $adjusted_gain$1;
        } else {
         $36 = (__ZN12Nes_Fme7_ApunwEj(872)|0);
         $37 = ($36|0)==(0|0);
         if (!($37)) {
          $39 = $36;
          __ZN12Nes_Fme7_ApuC1Ev($39);
          $40 = (($this) + 2636|0);
          HEAP32[$40>>2] = $39;
          $41 = $adjusted_gain$1 * 0.75;
          __ZN9Music_Emu15set_voice_countEi($6,8);
          __ZN9Music_Emu15set_voice_namesEPKPKc($6,((46992)));
          $adjusted_gain$2 = $41;
          break;
         }
         $38 = (($this) + 2636|0);
         HEAP32[$38>>2] = 0;
         $$0 = (46712);
         STACKTOP = sp;return ($$0|0);
        }
       } while(0);
       $42 = (($this) + 2628|0);
       $43 = HEAP32[$42>>2]|0;
       $44 = ($43|0)==(0|0);
       if (!($44)) {
        __ZN13Nes_Namco_Apu6volumeEd($43,$adjusted_gain$2);
       }
       $45 = (($this) + 2632|0);
       $46 = HEAP32[$45>>2]|0;
       $47 = ($46|0)==(0|0);
       if (!($47)) {
        __ZN12Nes_Vrc6_Apu6volumeEd($46,$adjusted_gain$2);
       }
       $48 = (($this) + 2636|0);
       $49 = HEAP32[$48>>2]|0;
       $50 = ($49|0)==(0|0);
       if (!($50)) {
        __ZN12Nes_Fme7_Apu6volumeEd($49,$adjusted_gain$2);
       }
       $51 = (($this) + 2640|0);
       __ZN7Nes_Apu6volumeEd($51,$adjusted_gain$2);
       $$0 = 0;
       STACKTOP = sp;return ($$0|0);
      }
      function __ZN13Nes_Namco_ApunwEj($s) {
       $s = $s|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (_malloc($s)|0);
       STACKTOP = sp;return ($1|0);
      }
      function __ZN12Nes_Vrc6_ApunwEj($s) {
       $s = $s|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (_malloc($s)|0);
       STACKTOP = sp;return ($1|0);
      }
      function __ZN12Nes_Fme7_ApunwEj($s) {
       $s = $s|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (_malloc($s)|0);
       STACKTOP = sp;return ($1|0);
      }
      function __ZN12Nes_Fme7_ApuC1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN12Nes_Fme7_ApuC2Ev($this);
       STACKTOP = sp;return;
      }
      function __ZN12Nes_Fme7_Apu6volumeEd($this,$v) {
       $this = $this|0;
       $v = +$v;
       var $1 = 0, $2 = 0.0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 56|0);
       $2 = $v * 0.00197916666666666683436;
       __ZN10Blip_SynthILi12ELi1EE6volumeEd($1,$2);
       STACKTOP = sp;return;
      }
      function __ZN7Nsf_Emu5load_ER11Data_Reader($this,$in) {
       $this = $this|0;
       $in = $in|0;
       var $$ = 0, $$0 = 0, $$2 = 0, $$pr = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
       var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
       var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
       var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $8 = 0, $9 = 0;
       var $i$03 = 0, $i$03$phi = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 2604|0);
       $2 = (($this) + 5448|0);
       $3 = (__ZN8Rom_DataILi4096EE4loadER11Data_ReaderiPvi($1,$in,128,$2,0)|0);
       $4 = ($3|0)==(0|0);
       if (!($4)) {
        $$0 = $3;
        STACKTOP = sp;return ($$0|0);
       }
       $5 = $this;
       $6 = (($this) + 5454|0);
       $7 = HEAP8[$6]|0;
       $8 = $7&255;
       __ZN8Gme_File15set_track_countEi($5,$8);
       $9 = (__ZL16check_nsf_headerPKv($2)|0);
       $10 = ($9|0)==(0|0);
       if (!($10)) {
        $$0 = $9;
        STACKTOP = sp;return ($$0|0);
       }
       $11 = (($this) + 5453|0);
       $12 = HEAP8[$11]|0;
       $13 = ($12<<24>>24)==(1);
       if (!($13)) {
        __ZN8Gme_File11set_warningEPKc($5,(47040));
       }
       $14 = (__ZN7Nsf_Emu10init_soundEv($this)|0);
       $15 = ($14|0)==(0|0);
       if (!($15)) {
        $$0 = $14;
        STACKTOP = sp;return ($$0|0);
       }
       $16 = (($this) + 5456|0);
       $17 = (__Z8get_le16PKv($16)|0);
       $18 = (($this) + 5458|0);
       $19 = (__Z8get_le16PKv($18)|0);
       $20 = (($this) + 2556|0);
       HEAP32[$20>>2] = $19;
       $21 = (($this) + 5460|0);
       $22 = (__Z8get_le16PKv($21)|0);
       $23 = (($this) + 2560|0);
       HEAP32[$23>>2] = $22;
       $24 = ($17|0)==(0);
       $$2 = $24 ? 32768 : $17;
       $25 = HEAP32[$20>>2]|0;
       $26 = ($25|0)==(0);
       if ($26) {
        HEAP32[$20>>2] = 32768;
        $$pr = HEAP32[$23>>2]|0;
        $27 = $$pr;
       } else {
        $27 = $22;
       }
       $28 = ($27|0)==(0);
       if ($28) {
        HEAP32[$23>>2] = 32768;
       }
       $29 = ($$2>>>0)<(32768);
       do {
        if (!($29)) {
         $30 = HEAP32[$20>>2]|0;
         $31 = ($30>>>0)<(32768);
         if ($31) {
          break;
         }
         $34 = $$2 & 4095;
         __ZN8Rom_DataILi4096EE8set_addrEl($1,$34);
         $35 = (__ZNK8Rom_DataILi4096EE4sizeEv($1)|0);
         $36 = (($35|0) / 4096)&-1;
         $37 = (($$2) + -32768)|0;
         $38 = $37 >>> 12;
         $i$03 = 0;
         while(1) {
          $40 = (($i$03) - ($38))|0;
          $41 = ($40>>>0)>=($36>>>0);
          $42 = $40&255;
          $43 = $41 ? 0 : $42;
          $44 = ((($this) + ($i$03)|0) + 2548|0);
          HEAP8[$44] = $43;
          $45 = ((($this) + ($i$03)|0) + 5560|0);
          $46 = HEAP8[$45]|0;
          $47 = ($46<<24>>24)==(0);
          $48 = (($i$03) + 1)|0;
          if (!($47)) {
           label = 16;
           break;
          }
          $39 = ($48|0)<(8);
          if ($39) {
           $i$03$phi = $48;$i$03 = $i$03$phi;
          } else {
           break;
          }
         }
         if ((label|0) == 16) {
          $49 = (($this) + 2548|0);
          $50 = (($this) + 5560|0);
          $51 = $50;
          $52 = $49;
          $53 = $51;
          $54 = $53;
          $55 = HEAPU8[$54]|(HEAPU8[$54+1|0]<<8)|(HEAPU8[$54+2|0]<<16)|(HEAPU8[$54+3|0]<<24);
          $56 = (($53) + 4)|0;
          $57 = $56;
          $58 = HEAPU8[$57]|(HEAPU8[$57+1|0]<<8)|(HEAPU8[$57+2|0]<<16)|(HEAPU8[$57+3|0]<<24);
          $59 = $52;
          $60 = $59;
          HEAP8[$60]=$55&255;HEAP8[$60+1|0]=($55>>8)&255;HEAP8[$60+2|0]=($55>>16)&255;HEAP8[$60+3|0]=$55>>24;
          $61 = (($59) + 4)|0;
          $62 = $61;
          HEAP8[$62]=$58&255;HEAP8[$62+1|0]=($58>>8)&255;HEAP8[$62+2|0]=($58>>16)&255;HEAP8[$62+3|0]=$58>>24;
         }
         $63 = (($this) + 5570|0);
         $64 = HEAP8[$63]|0;
         $65 = $64 & 3;
         $66 = ($65<<24>>24)==(1);
         $67 = (($this) + 2576|0);
         $68 = $66&1;
         HEAP8[$67] = $68;
         HEAP8[$63] = 0;
         $69 = $this;
         $70 = (+__ZNK9Music_Emu5tempoEv($69));
         __ZN9Music_Emu9set_tempoEd($69,$70);
         $71 = ($this);
         $72 = (($this) + 2568|0);
         $73 = +HEAPF64[$72>>3];
         $74 = $73 + 0.5;
         $75 = (~~(($74)));
         $76 = (__ZN11Classic_Emu12setup_bufferEl($71,$75)|0);
         $$0 = $76;
         STACKTOP = sp;return ($$0|0);
        }
       } while(0);
       $32 = (__ZN8Gme_File7warningEv($5)|0);
       $33 = ($32|0)!=(0|0);
       $$ = $33 ? $32 : (47064);
       $$0 = $$;
       STACKTOP = sp;return ($$0|0);
      }
      function __ZN8Rom_DataILi4096EE4loadER11Data_ReaderiPvi($this,$in,$header_size,$header_out,$fill) {
       $this = $this|0;
       $in = $in|0;
       $header_size = $header_size|0;
       $header_out = $header_out|0;
       $fill = $fill|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = (__ZN9Rom_Data_14load_rom_data_ER11Data_ReaderiPvil($1,$in,$header_size,$header_out,$fill,4104)|0);
       STACKTOP = sp;return ($2|0);
      }
      function __ZL16check_nsf_headerPKv($header) {
       $header = $header|0;
       var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (_memcmp($header,(47352),5)|0);
       $2 = ($1|0)==(0);
       $3 = HEAP32[(40024)>>2]|0;
       $$0 = $2 ? 0 : $3;
       STACKTOP = sp;return ($$0|0);
      }
      function __ZN8Rom_DataILi4096EE8set_addrEl($this,$addr) {
       $this = $this|0;
       $addr = $addr|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       __ZN9Rom_Data_9set_addr_Eli($1,$addr,4096);
       STACKTOP = sp;return;
      }
      function __ZN7Nsf_Emu9update_eqERK9blip_eq_t($this,$eq) {
       $this = $this|0;
       $eq = $eq|0;
       var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 2640|0);
       __ZN7Nes_Apu9treble_eqERK9blip_eq_t($1,$eq);
       $2 = (($this) + 2628|0);
       $3 = HEAP32[$2>>2]|0;
       $4 = ($3|0)==(0|0);
       if (!($4)) {
        __ZN13Nes_Namco_Apu9treble_eqERK9blip_eq_t($3,$eq);
       }
       $5 = (($this) + 2632|0);
       $6 = HEAP32[$5>>2]|0;
       $7 = ($6|0)==(0|0);
       if (!($7)) {
        __ZN12Nes_Vrc6_Apu9treble_eqERK9blip_eq_t($6,$eq);
       }
       $8 = (($this) + 2636|0);
       $9 = HEAP32[$8>>2]|0;
       $10 = ($9|0)==(0|0);
       if ($10) {
        STACKTOP = sp;return;
       }
       __ZN12Nes_Fme7_Apu9treble_eqERK9blip_eq_t($9,$eq);
       STACKTOP = sp;return;
      }
      function __ZN13Nes_Namco_Apu9treble_eqERK9blip_eq_t($this,$eq) {
       $this = $this|0;
       $eq = $eq|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 232|0);
       __ZN10Blip_SynthILi12ELi15EE9treble_eqERK9blip_eq_t($1,$eq);
       STACKTOP = sp;return;
      }
      function __ZN12Nes_Vrc6_Apu9treble_eqERK9blip_eq_t($this,$eq) {
       $this = $this|0;
       $eq = $eq|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 80|0);
       __ZN10Blip_SynthILi8ELi1EE9treble_eqERK9blip_eq_t($1,$eq);
       $2 = (($this) + 640|0);
       __ZN10Blip_SynthILi12ELi1EE9treble_eqERK9blip_eq_t($2,$eq);
       STACKTOP = sp;return;
      }
      function __ZN12Nes_Fme7_Apu9treble_eqERK9blip_eq_t($this,$eq) {
       $this = $this|0;
       $eq = $eq|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 56|0);
       __ZN10Blip_SynthILi12ELi1EE9treble_eqERK9blip_eq_t($1,$eq);
       STACKTOP = sp;return;
      }
      function __ZN7Nsf_Emu9set_voiceEiP11Blip_BufferS1_S1_($this,$i,$buf,u$0,u$1) {
       $this = $this|0;
       $i = $i|0;
       $buf = $buf|0;
       u$0 = u$0|0;
       u$1 = u$1|0;
       var $$ = 0, $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
       var $or$cond1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($i|0)<(5);
       if ($1) {
        $2 = (($this) + 2640|0);
        __ZN7Nes_Apu10osc_outputEiP11Blip_Buffer($2,$i,$buf);
        STACKTOP = sp;return;
       }
       $3 = (($i) + -5)|0;
       $4 = (($this) + 2636|0);
       $5 = HEAP32[$4>>2]|0;
       $6 = ($5|0)!=(0|0);
       $7 = ($3|0)<(3);
       $or$cond = $6 & $7;
       if ($or$cond) {
        __ZN12Nes_Fme7_Apu10osc_outputEiP11Blip_Buffer($5,$3,$buf);
        STACKTOP = sp;return;
       }
       $8 = (($this) + 2632|0);
       $9 = HEAP32[$8>>2]|0;
       $10 = ($9|0)==(0|0);
       do {
        if ($10) {
         $$0 = $3;
        } else {
         if (!($7)) {
          $13 = (($i) + -8)|0;
          $$0 = $13;
          break;
         }
         $11 = (($i) + -6)|0;
         $12 = ($11|0)<(0);
         $$ = $12 ? 2 : $11;
         __ZN12Nes_Vrc6_Apu10osc_outputEiP11Blip_Buffer($9,$$,$buf);
         STACKTOP = sp;return;
        }
       } while(0);
       $14 = (($this) + 2628|0);
       $15 = HEAP32[$14>>2]|0;
       $16 = ($15|0)!=(0|0);
       $17 = ($$0|0)<(8);
       $or$cond1 = $16 & $17;
       if (!($or$cond1)) {
        STACKTOP = sp;return;
       }
       __ZN13Nes_Namco_Apu10osc_outputEiP11Blip_Buffer($15,$$0,$buf);
       STACKTOP = sp;return;
      }
      function __ZN12Nes_Fme7_Apu10osc_outputEiP11Blip_Buffer($this,$i,$buf) {
       $this = $this|0;
       $i = $i|0;
       $buf = $buf|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($i>>>0)<(3);
       if ($1) {
        $2 = ((($this) + ($i<<3)|0) + 24|0);
        HEAP32[$2>>2] = $buf;
        STACKTOP = sp;return;
       } else {
        ___assert_fail(((47304)|0),((47248)|0),77,((47336)|0));
        // unreachable;
       }
      }
      function __ZN7Nsf_Emu14cpu_write_miscEji($this,$addr,$data) {
       $this = $this|0;
       $addr = $addr|0;
       $data = $data|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0;
       var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 2628|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = ($2|0)==(0|0);
       do {
        if (!($3)) {
         if ((($addr|0) == 63488)) {
          __ZN13Nes_Namco_Apu10write_addrEi($2,$data);
          STACKTOP = sp;return;
         } else if ((($addr|0) == 18432)) {
          $4 = (($this) + 336|0);
          $5 = $4;
          $6 = (__ZNK7Nes_Cpu4timeEv($5)|0);
          __ZN13Nes_Namco_Apu10write_dataEii($2,$6,$data);
          STACKTOP = sp;return;
         } else {
          break;
         }
        }
       } while(0);
       $7 = ($addr>>>0)>(49151);
       do {
        if ($7) {
         $8 = (($this) + 2636|0);
         $9 = HEAP32[$8>>2]|0;
         $10 = ($9|0)==(0|0);
         if ($10) {
          break;
         }
         $11 = $addr & 57344;
         if ((($11|0) == 49152)) {
          __ZN12Nes_Fme7_Apu11write_latchEi($9,$data);
          STACKTOP = sp;return;
         } else if ((($11|0) == 57344)) {
          $12 = (($this) + 336|0);
          $13 = $12;
          $14 = (__ZNK7Nes_Cpu4timeEv($13)|0);
          __ZN12Nes_Fme7_Apu10write_dataEii($9,$14,$data);
          STACKTOP = sp;return;
         } else {
          break;
         }
        }
       } while(0);
       $15 = (($this) + 2632|0);
       $16 = HEAP32[$15>>2]|0;
       $17 = ($16|0)==(0|0);
       if ($17) {
        STACKTOP = sp;return;
       }
       $18 = $addr & 4095;
       $19 = (($addr) + -36864)|0;
       $20 = ($19>>>0)<(12288);
       $21 = ($18>>>0)<(3);
       $or$cond = $20 & $21;
       if (!($or$cond)) {
        STACKTOP = sp;return;
       }
       $22 = $19 >>> 12;
       $23 = (($this) + 336|0);
       $24 = $23;
       $25 = (__ZNK7Nes_Cpu4timeEv($24)|0);
       __ZN12Nes_Vrc6_Apu9write_oscEiiii($16,$25,$22,$18,$data);
       STACKTOP = sp;return;
      }
      function __ZN13Nes_Namco_Apu10write_dataEii($this,$time,$data) {
       $this = $this|0;
       $time = $time|0;
       $data = $data|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       __ZN13Nes_Namco_Apu9run_untilEi($this,$time);
       $1 = $data&255;
       $2 = (__ZN13Nes_Namco_Apu6accessEv($this)|0);
       HEAP8[$2] = $1;
       STACKTOP = sp;return;
      }
      function __ZN13Nes_Namco_Apu10write_addrEi($this,$v) {
       $this = $this|0;
       $v = $v|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 100|0);
       HEAP32[$1>>2] = $v;
       STACKTOP = sp;return;
      }
      function __ZN12Nes_Fme7_Apu11write_latchEi($this,$data) {
       $this = $this|0;
       $data = $data|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $data&255;
       $2 = (($this) + 17|0);
       HEAP8[$2] = $1;
       STACKTOP = sp;return;
      }
      function __ZN12Nes_Fme7_Apu10write_dataEii($this,$time,$data) {
       $this = $this|0;
       $time = $time|0;
       $data = $data|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 17|0);
       $2 = HEAP8[$1]|0;
       $3 = ($2&255)>(13);
       if ($3) {
        STACKTOP = sp;return;
       }
       __ZN12Nes_Fme7_Apu9run_untilEi($this,$time);
       $4 = $data&255;
       $5 = HEAP8[$1]|0;
       $6 = $5&255;
       $7 = (($this) + ($6)|0);
       HEAP8[$7] = $4;
       STACKTOP = sp;return;
      }
      function __ZN7Nsf_Emu12start_track_Ei($this,$track) {
       $this = $this|0;
       $track = $track|0;
       var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
       var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
       var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
       var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = (__ZN11Classic_Emu12start_track_Ei($1,$track)|0);
       $3 = ($2|0)==(0|0);
       if (!($3)) {
        $$0 = $2;
        STACKTOP = sp;return ($$0|0);
       }
       $4 = (($this) + 336|0);
       $5 = $4;
       _memset(($4|0),0,2048)|0;
       $6 = (($this) + 5576|0);
       _memset(($6|0),0,8192)|0;
       $7 = (($this) + 13768|0);
       __ZN7Nes_Cpu5resetEPKv($5,$7);
       __ZN7Nes_Cpu8map_codeEjjPKvb($5,24576,8192,$6,0);
       $8 = (($this) + 2548|0);
       $9 = HEAP8[$8]|0;
       $10 = $9&255;
       __ZN7Nsf_Emu9cpu_writeEji($this,24568,$10);
       $11 = (($this) + 2549|0);
       $12 = HEAP8[$11]|0;
       $13 = $12&255;
       __ZN7Nsf_Emu9cpu_writeEji($this,24569,$13);
       $14 = (($this) + 2550|0);
       $15 = HEAP8[$14]|0;
       $16 = $15&255;
       __ZN7Nsf_Emu9cpu_writeEji($this,24570,$16);
       $17 = (($this) + 2551|0);
       $18 = HEAP8[$17]|0;
       $19 = $18&255;
       __ZN7Nsf_Emu9cpu_writeEji($this,24571,$19);
       $20 = (($this) + 2552|0);
       $21 = HEAP8[$20]|0;
       $22 = $21&255;
       __ZN7Nsf_Emu9cpu_writeEji($this,24572,$22);
       $23 = (($this) + 2553|0);
       $24 = HEAP8[$23]|0;
       $25 = $24&255;
       __ZN7Nsf_Emu9cpu_writeEji($this,24573,$25);
       $26 = (($this) + 2554|0);
       $27 = HEAP8[$26]|0;
       $28 = $27&255;
       __ZN7Nsf_Emu9cpu_writeEji($this,24574,$28);
       $29 = (($this) + 2555|0);
       $30 = HEAP8[$29]|0;
       $31 = $30&255;
       __ZN7Nsf_Emu9cpu_writeEji($this,24575,$31);
       $32 = (($this) + 2640|0);
       $33 = (($this) + 2576|0);
       $34 = HEAP8[$33]|0;
       $35 = ($34<<24>>24)!=(0);
       $36 = (($this) + 5570|0);
       $37 = HEAP8[$36]|0;
       $38 = $37 & 32;
       $39 = ($38<<24>>24)!=(0);
       $40 = $39 ? 63 : 0;
       __ZN7Nes_Apu5resetEbi($32,$35,$40);
       __ZN7Nes_Apu14write_registerElji($32,0,16405,15);
       $41 = HEAP8[$36]|0;
       $42 = $41 & 16;
       $43 = ($42<<24>>24)!=(0);
       $44 = $43 ? 128 : 0;
       __ZN7Nes_Apu14write_registerElji($32,0,16407,$44);
       $45 = (($this) + 2628|0);
       $46 = HEAP32[$45>>2]|0;
       $47 = ($46|0)==(0|0);
       if (!($47)) {
        __ZN13Nes_Namco_Apu5resetEv($46);
       }
       $48 = (($this) + 2632|0);
       $49 = HEAP32[$48>>2]|0;
       $50 = ($49|0)==(0|0);
       if (!($50)) {
        __ZN12Nes_Vrc6_Apu5resetEv($49);
       }
       $51 = (($this) + 2636|0);
       $52 = HEAP32[$51>>2]|0;
       $53 = ($52|0)==(0|0);
       if (!($53)) {
        __ZN12Nes_Fme7_Apu5resetEv($52);
       }
       $54 = (($this) + 2600|0);
       HEAP32[$54>>2] = 4;
       $55 = (($this) + 2596|0);
       HEAP32[$55>>2] = 0;
       $56 = (($this) + 2592|0);
       $57 = HEAP32[$56>>2]|0;
       $58 = (($57|0) / 12)&-1;
       $59 = (($this) + 2588|0);
       HEAP32[$59>>2] = $58;
       $60 = (($this) + 2578|0);
       HEAP16[$60>>1] = 24568;
       $61 = (($this) + 847|0);
       HEAP8[$61] = 95;
       $62 = (($this) + 846|0);
       HEAP8[$62] = -9;
       $63 = (($this) + 2384|0);
       $64 = (($this) + 2390|0);
       HEAP8[$64] = -3;
       $65 = (($this) + 2556|0);
       $66 = HEAP32[$65>>2]|0;
       $67 = $66&65535;
       $68 = $63;
       HEAP16[$68>>1] = $67;
       $69 = $track&255;
       $70 = (($this) + 2386|0);
       HEAP8[$70] = $69;
       $71 = HEAP8[$33]|0;
       $72 = (($this) + 2387|0);
       HEAP8[$72] = $71;
       $$0 = 0;
       STACKTOP = sp;return ($$0|0);
      }
      function __ZN7Nsf_Emu10run_clocksERii($this,$duration,u$0) {
       $this = $this|0;
       $duration = $duration|0;
       u$0 = u$0|0;
       var $$ = 0, $$sum = 0, $$sum1 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $12 = 0, $13 = 0;
       var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
       var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
       var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
       var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
       var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 336|0);
       $2 = $1;
       __ZN7Nes_Cpu8set_timeEl($2,0);
       $3 = (__ZNK7Nes_Cpu4timeEv($2)|0);
       $4 = HEAP32[$duration>>2]|0;
       $5 = ($3|0)<($4|0);
       if ($5) {
        $6 = (($this) + 2588|0);
        $7 = (($this) + 2384|0);
        $8 = $7;
        $9 = (($this) + 2600|0);
        $10 = (($this) + 2578|0);
        $11 = ($10);
        $12 = $10;
        $13 = $7;
        $14 = $this;
        $15 = (($this) + 2592|0);
        $16 = (($this) + 2596|0);
        $17 = (($this) + 2600|0);
        $18 = (($this) + 2384|0);
        $19 = $18;
        $20 = (($this) + 2560|0);
        $21 = (($this) + 2390|0);
        $22 = (($this) + 2578|0);
        $23 = $18;
        $24 = $22;
        $25 = $4;$26 = $3;
        while(1) {
         $27 = HEAP32[$6>>2]|0;
         $28 = (__ZL3minii512($27,$25)|0);
         $29 = (($26) + 32767)|0;
         $30 = (__ZL3minll513($28,$29)|0);
         $31 = (__ZN7Nes_Cpu3runEl($2,$30)|0);
         do {
          if ($31) {
           $32 = HEAP16[$8>>1]|0;
           $33 = ($32<<16>>16)==(24568);
           if (!($33)) {
            __ZN8Gme_File11set_warningEPKc($14,(47112));
            $34 = HEAP16[$8>>1]|0;
            $35 = (($34) + 1)<<16>>16;
            HEAP16[$8>>1] = $35;
            break;
           }
           HEAP32[$9>>2] = 1;
           $36 = HEAP16[$11>>1]|0;
           $37 = ($36<<16>>16)==(24568);
           if ($37) {
            __ZN7Nes_Cpu8set_timeEl($2,$30);
            break;
           } else {
            $38 = $12;
            $39 = $38;
            $40 = HEAPU16[$39>>1]|(HEAPU16[$39+2>>1]<<16);
            $41 = (($38) + 4)|0;
            $42 = $41;
            $43 = HEAPU16[$42>>1]|(HEAPU16[$42+2>>1]<<16);
            $44 = $13;
            $45 = $44;
            HEAP16[$45>>1]=$40&65535;HEAP16[$45+2>>1]=$40>>>16;
            $46 = (($44) + 4)|0;
            $47 = $46;
            HEAP16[$47>>1]=$43&65535;HEAP16[$47+2>>1]=$43>>>16;
            HEAP16[$11>>1] = 24568;
            break;
           }
          }
         } while(0);
         $48 = (__ZNK7Nes_Cpu4timeEv($2)|0);
         $49 = HEAP32[$6>>2]|0;
         $50 = ($48|0)<($49|0);
         do {
          if (!($50)) {
           $51 = HEAP32[$15>>2]|0;
           $52 = HEAP32[$16>>2]|0;
           $53 = (($52) + ($51))|0;
           $54 = (($53|0) / 12)&-1;
           $55 = Math_imul($54, -12)|0;
           $56 = (($55) + ($51))|0;
           HEAP32[$16>>2] = $56;
           $57 = HEAP32[$6>>2]|0;
           $58 = (($57) + ($54))|0;
           HEAP32[$6>>2] = $58;
           $59 = HEAP32[$17>>2]|0;
           $60 = ($59|0)==(0);
           if ($60) {
            break;
           }
           $61 = (($59) + -1)|0;
           HEAP32[$17>>2] = $61;
           $62 = ($61|0)==(0);
           if (!($62)) {
            break;
           }
           $63 = HEAP16[$19>>1]|0;
           $64 = ($63<<16>>16)==(24568);
           if (!($64)) {
            $65 = $23;
            $66 = $65;
            $67 = HEAPU16[$66>>1]|(HEAPU16[$66+2>>1]<<16);
            $68 = (($65) + 4)|0;
            $69 = $68;
            $70 = HEAPU16[$69>>1]|(HEAPU16[$69+2>>1]<<16);
            $71 = $24;
            $72 = $71;
            HEAP16[$72>>1]=$67&65535;HEAP16[$72+2>>1]=$67>>>16;
            $73 = (($71) + 4)|0;
            $74 = $73;
            HEAP16[$74>>1]=$70&65535;HEAP16[$74+2>>1]=$70>>>16;
           }
           $75 = HEAP32[$20>>2]|0;
           $76 = $75&65535;
           HEAP16[$19>>1] = $76;
           $77 = HEAP8[$21]|0;
           $78 = (($77) + -1)<<24>>24;
           HEAP8[$21] = $78;
           $79 = $77&255;
           $80 = $79 | 256;
           $$sum = (($80) + 336)|0;
           $81 = (($this) + ($$sum)|0);
           HEAP8[$81] = 95;
           $82 = HEAP8[$21]|0;
           $83 = (($82) + -1)<<24>>24;
           HEAP8[$21] = $83;
           $84 = $82&255;
           $85 = $84 | 256;
           $$sum1 = (($85) + 336)|0;
           $86 = (($this) + ($$sum1)|0);
           HEAP8[$86] = -9;
          }
         } while(0);
         $87 = (__ZNK7Nes_Cpu4timeEv($2)|0);
         $88 = HEAP32[$duration>>2]|0;
         $89 = ($87|0)<($88|0);
         if ($89) {
          $25 = $88;$26 = $87;
         } else {
          break;
         }
        }
       }
       $90 = (__ZNK7Nes_Cpu11error_countEv($2)|0);
       $91 = ($90|0)==(0);
       if (!($91)) {
        __ZN7Nes_Cpu17clear_error_countEv($2);
        $92 = $this;
        __ZN8Gme_File11set_warningEPKc($92,(47112));
       }
       $93 = (__ZNK7Nes_Cpu4timeEv($2)|0);
       HEAP32[$duration>>2] = $93;
       $94 = (($this) + 2588|0);
       $95 = HEAP32[$94>>2]|0;
       $96 = (($95) - ($93))|0;
       $97 = ($96|0)<(0);
       $$ = $97 ? 0 : $96;
       HEAP32[$94>>2] = $$;
       $98 = (($this) + 2640|0);
       $99 = HEAP32[$duration>>2]|0;
       __ZN7Nes_Apu9end_frameEl($98,$99);
       $100 = (($this) + 2628|0);
       $101 = HEAP32[$100>>2]|0;
       $102 = ($101|0)==(0|0);
       if (!($102)) {
        $103 = HEAP32[$duration>>2]|0;
        __ZN13Nes_Namco_Apu9end_frameEi($101,$103);
       }
       $104 = (($this) + 2632|0);
       $105 = HEAP32[$104>>2]|0;
       $106 = ($105|0)==(0|0);
       if (!($106)) {
        $107 = HEAP32[$duration>>2]|0;
        __ZN12Nes_Vrc6_Apu9end_frameEi($105,$107);
       }
       $108 = (($this) + 2636|0);
       $109 = HEAP32[$108>>2]|0;
       $110 = ($109|0)==(0|0);
       if ($110) {
        STACKTOP = sp;return (0|0);
       }
       $111 = HEAP32[$duration>>2]|0;
       __ZN12Nes_Fme7_Apu9end_frameEi($109,$111);
       STACKTOP = sp;return (0|0);
      }
      function __ZN7Nes_Cpu8set_timeEl($this,$t) {
       $this = $this|0;
       $t = $t|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 2056|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = (($2) + 132|0);
       $4 = HEAP32[$3>>2]|0;
       $5 = (($t) - ($4))|0;
       $6 = (($2) + 136|0);
       HEAP32[$6>>2] = $5;
       STACKTOP = sp;return;
      }
      function __ZL3minii512($x,$y) {
       $x = $x|0;
       $y = $y|0;
       var $1 = 0, $x$y = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($x|0)<($y|0);
       $x$y = $1 ? $x : $y;
       STACKTOP = sp;return ($x$y|0);
      }
      function __ZL3minll513($x,$y) {
       $x = $x|0;
       $y = $y|0;
       var $1 = 0, $x$y = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($x|0)<($y|0);
       $x$y = $1 ? $x : $y;
       STACKTOP = sp;return ($x$y|0);
      }
      function __ZNK7Nes_Cpu11error_countEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 2208|0);
       $2 = HEAP32[$1>>2]|0;
       STACKTOP = sp;return ($2|0);
      }
      function __ZN7Nes_Cpu17clear_error_countEv($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 2208|0);
       HEAP32[$1>>2] = 0;
       STACKTOP = sp;return;
      }
      function __ZN12Nes_Fme7_Apu9end_frameEi($this,$time) {
       $this = $this|0;
       $time = $time|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 48|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = ($2|0)<($time|0);
       if ($3) {
        __ZN12Nes_Fme7_Apu9run_untilEi($this,$time);
       }
       $4 = HEAP32[$1>>2]|0;
       $5 = ($4|0)<($time|0);
       if ($5) {
        ___assert_fail(((47224)|0),((47248)|0),115,((47288)|0));
        // unreachable;
       } else {
        $6 = (($4) - ($time))|0;
        HEAP32[$1>>2] = $6;
        STACKTOP = sp;return;
       }
      }
      function __ZN10Blip_SynthILi12ELi15EE9treble_eqERK9blip_eq_t($this,$eq) {
       $this = $this|0;
       $eq = $eq|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       __ZN11Blip_Synth_9treble_eqERK9blip_eq_t($1,$eq);
       STACKTOP = sp;return;
      }
      function __ZN12Nes_Fme7_ApuC2Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 56|0);
       __ZN10Blip_SynthILi12ELi1EEC1Ev($1);
       __ZN12Nes_Fme7_Apu6outputEP11Blip_Buffer($this,0);
       __ZN12Nes_Fme7_Apu6volumeEd($this,1.0);
       __ZN12Nes_Fme7_Apu5resetEv($this);
       STACKTOP = sp;return;
      }
      function __ZN12Nes_Fme7_Apu6outputEP11Blip_Buffer($this,$buf) {
       $this = $this|0;
       $buf = $buf|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN12Nes_Fme7_Apu10osc_outputEiP11Blip_Buffer($this,0,$buf);
       __ZN12Nes_Fme7_Apu10osc_outputEiP11Blip_Buffer($this,1,$buf);
       __ZN12Nes_Fme7_Apu10osc_outputEiP11Blip_Buffer($this,2,$buf);
       STACKTOP = sp;return;
      }
      function __ZL11new_nsf_emuv() {
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (__ZN8Gme_FilenwEj(15824)|0);
       $2 = ($1|0)==(0|0);
       if ($2) {
        $4 = 0;
       } else {
        $3 = $1;
        __ZN7Nsf_EmuC2Ev($3);
        $4 = $3;
       }
       $5 = $4;
       STACKTOP = sp;return ($5|0);
      }
      function __ZL12new_nsf_filev() {
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (__ZN8Gme_FilenwEj(448)|0);
       $2 = ($1|0)==(0|0);
       if ($2) {
        $4 = 0;
       } else {
        $3 = $1;
        __ZN8Nsf_FileC1Ev($3);
        $4 = $3;
       }
       $5 = $4;
       STACKTOP = sp;return ($5|0);
      }
      function __ZN8Nsf_FileC1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN8Nsf_FileC2Ev($this);
       STACKTOP = sp;return;
      }
      function __ZN8Nsf_FileC2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $this;
       __ZN9Gme_Info_C2Ev($1);
       $2 = $this;
       HEAP32[$2>>2] = (((47384) + 8|0));
       $3 = $this;
       __ZN8Gme_File8set_typeEPK11gme_type_t_($3,(46488));
       STACKTOP = sp;return;
      }
      function __ZN8Nsf_FileD1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN8Nsf_FileD2Ev($this);
       STACKTOP = sp;return;
      }
      function __ZN8Nsf_FileD0Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       __ZN8Nsf_FileD1Ev($this);
       $1 = ($this);
       __ZN8Gme_FiledlEPv($1);
       STACKTOP = sp;return;
      }
      function __ZN8Nsf_File5load_ER11Data_Reader($this,$in) {
       $this = $this|0;
       $in = $in|0;
       var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
       var $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $in;
       $2 = HEAP32[$1>>2]|0;
       $3 = (($2) + 12|0);
       $4 = HEAP32[$3>>2]|0;
       $5 = (($this) + 316|0);
       $6 = (FUNCTION_TABLE_iiii[$4 & 63]($in,$5,128)|0);
       $7 = ($6|0)==(0|0);
       if (!($7)) {
        $8 = ($6|0)==((37504)|0);
        $9 = HEAP32[(40024)>>2]|0;
        $10 = $8 ? $9 : $6;
        $$0 = $10;
        STACKTOP = sp;return ($$0|0);
       }
       $11 = (($this) + 439|0);
       $12 = HEAP8[$11]|0;
       $13 = $12 & -50;
       $14 = ($13<<24>>24)==(0);
       if (!($14)) {
        $15 = $this;
        __ZN8Gme_File11set_warningEPKc($15,(46512));
       }
       $16 = $this;
       $17 = (($this) + 322|0);
       $18 = HEAP8[$17]|0;
       $19 = $18&255;
       __ZN8Gme_File15set_track_countEi($16,$19);
       $20 = (__ZL16check_nsf_headerPKv($5)|0);
       $$0 = $20;
       STACKTOP = sp;return ($$0|0);
      }
      function __ZNK8Nsf_File11track_info_EP12track_info_ti($this,$out,u$0) {
       $this = $this|0;
       $out = $out|0;
       u$0 = u$0|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 316|0);
       __ZL15copy_nsf_fieldsRKN7Nsf_Emu8header_tEP12track_info_t($1,$out);
       STACKTOP = sp;return (0|0);
      }
      function __ZN8Nsf_FileD2Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $this;
       __ZN9Gme_Info_D2Ev($1);
       STACKTOP = sp;return;
      }
      function __ZN8Rom_DataILi4096EED2Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       __ZN9Rom_Data_D2Ev($1);
       STACKTOP = sp;return;
      }
      function __ZN8Rom_DataILi4096EEC2Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       __ZN9Rom_Data_C2Ev($1);
       STACKTOP = sp;return;
      }
      function __ZN9Nsfe_InfoC2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 1152|0);
       __ZN13blargg_vectorIcEC1Ev($1);
       $2 = (($this) + 1160|0);
       __ZN13blargg_vectorIPKcEC1Ev($2);
       $3 = (($this) + 1168|0);
       __ZN13blargg_vectorIhEC1Ev($3);
       $4 = (($this) + 1176|0);
       __ZN13blargg_vectorIA4_cEC1Ev($4);
       $5 = (($this) + 1188|0);
       HEAP8[$5] = 0;
       STACKTOP = sp;return;
      }
      function __ZN13blargg_vectorIPKcEC1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN13blargg_vectorIPKcEC2Ev($this);
       STACKTOP = sp;return;
      }
      function __ZN13blargg_vectorIA4_cEC1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN13blargg_vectorIA4_cEC2Ev($this);
       STACKTOP = sp;return;
      }
      function __ZN13blargg_vectorIPKcED1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN13blargg_vectorIPKcED2Ev($this);
       STACKTOP = sp;return;
      }
      function __ZN9Nsfe_InfoD2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 1176|0);
       __ZN13blargg_vectorIA4_cED1Ev($1);
       $2 = (($this) + 1168|0);
       __ZN13blargg_vectorIhED1Ev($2);
       $3 = (($this) + 1160|0);
       __ZN13blargg_vectorIPKcED1Ev($3);
       $4 = (($this) + 1152|0);
       __ZN13blargg_vectorIcED1Ev($4);
       STACKTOP = sp;return;
      }
      function __ZN13blargg_vectorIA4_cED1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN13blargg_vectorIA4_cED2Ev($this);
       STACKTOP = sp;return;
      }
      function __ZN9Nsfe_Info16disable_playlistEb($this,$b) {
       $this = $this|0;
       $b = $b|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 1188|0);
       $2 = $b&1;
       HEAP8[$1] = $2;
       $3 = (($this) + 1168|0);
       $4 = (__ZNK13blargg_vectorIhE4sizeEv($3)|0);
       $5 = $4&255;
       $6 = (($this) + 6|0);
       HEAP8[$6] = $5;
       $7 = ($5<<24>>24)==(0);
       do {
        if (!($7)) {
         $8 = HEAP8[$1]|0;
         $9 = ($8<<24>>24)==(0);
         if (!($9)) {
          break;
         }
         STACKTOP = sp;return;
        }
       } while(0);
       $10 = (($this) + 1184|0);
       $11 = HEAP32[$10>>2]|0;
       $12 = $11&255;
       HEAP8[$6] = $12;
       STACKTOP = sp;return;
      }
      function __ZNK9Nsfe_Info11remap_trackEi($this,$track) {
       $this = $this|0;
       $track = $track|0;
       var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 1188|0);
       $2 = HEAP8[$1]|0;
       $3 = ($2<<24>>24)==(0);
       do {
        if ($3) {
         $4 = (($this) + 1168|0);
         $5 = (__ZNK13blargg_vectorIhE4sizeEv($4)|0);
         $6 = ($5>>>0)>($track>>>0);
         if (!($6)) {
          $$0 = $track;
          break;
         }
         $7 = (__ZNK13blargg_vectorIhEixEj($4,$track)|0);
         $8 = HEAP8[$7]|0;
         $9 = $8&255;
         $$0 = $9;
        } else {
         $$0 = $track;
        }
       } while(0);
       STACKTOP = sp;return ($$0|0);
      }
      function __ZN9Nsfe_Info4loadER11Data_ReaderP7Nsf_Emu($this,$in,$nsf_emu) {
       $this = $this|0;
       $in = $in|0;
       $nsf_emu = $nsf_emu|0;
       var $$0$ = 0, $$011 = 0, $$011$phi = 0, $$08 = 0, $$1 = 0, $$3 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
       var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
       var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
       var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
       var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
       var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
       var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $block_header = 0, $chars = 0, $finfo = 0, $rem = 0, $signature = 0, $strs = 0, $sub = 0, dest = 0, label = 0;
       var sp = 0, src = 0, stop = 0;
       sp = STACKTOP;
       STACKTOP = STACKTOP + 80|0;
       $signature = sp;
       $block_header = sp + 8|0;
       $finfo = sp + 16|0;
       $chars = sp + 32|0;
       $strs = sp + 40|0;
       $sub = sp + 48|0;
       $rem = sp + 64|0;
       $1 = $in;
       $2 = HEAP32[$1>>2]|0;
       $3 = (($2) + 12|0);
       $4 = HEAP32[$3>>2]|0;
       $5 = ($signature);
       $6 = (FUNCTION_TABLE_iiii[$4 & 63]($in,$5,4)|0);
       $7 = ($6|0)==(0|0);
       if (!($7)) {
        $8 = ($6|0)==((37504)|0);
        $9 = HEAP32[(40024)>>2]|0;
        $10 = $8 ? $9 : $6;
        $$3 = $10;
        STACKTOP = sp;return ($$3|0);
       }
       $11 = (_memcmp($5,(47504),4)|0);
       $12 = ($11|0)==(0);
       if (!($12)) {
        $13 = HEAP32[(40024)>>2]|0;
        $$3 = $13;
        STACKTOP = sp;return ($$3|0);
       }
       $14 = (($this) + 1152|0);
       __ZN13blargg_vectorIcE5clearEv($14);
       $15 = (($this) + 1160|0);
       __ZN13blargg_vectorIPKcE5clearEv($15);
       $16 = (($this) + 1168|0);
       __ZN13blargg_vectorIhE5clearEv($16);
       $17 = (($this) + 1176|0);
       __ZN13blargg_vectorIA4_cE5clearEv($17);
       $18 = ($this);
       dest=$18+0|0; src=((47512))+0|0; stop=dest+128|0; do { HEAP8[dest]=HEAP8[src]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));;
       $19 = ($block_header);
       $20 = (($block_header) + 4|0);
       $21 = $in;
       $22 = (($finfo) + 8|0);
       $23 = (($finfo) + 9|0);
       $24 = ($finfo);
       $25 = $in;
       $26 = (($finfo) + 6|0);
       $27 = (($this) + 122|0);
       $28 = (($finfo) + 7|0);
       $29 = (($this) + 123|0);
       $30 = (($this) + 6|0);
       $31 = (($this) + 1184|0);
       $32 = (($this) + 7|0);
       $33 = (($this) + 8|0);
       $34 = (($this) + 112|0);
       $35 = (($this) + 896|0);
       $36 = (($this) + 640|0);
       $37 = (($this) + 384|0);
       $38 = (($this) + 128|0);
       $39 = ($nsf_emu|0)==(0|0);
       $40 = $in;
       $41 = ($sub);
       $42 = $nsf_emu;
       $43 = ($rem);
       $$011 = 0;
       while(1) {
        $44 = HEAP32[$1>>2]|0;
        $45 = (($44) + 12|0);
        $46 = HEAP32[$45>>2]|0;
        $47 = (FUNCTION_TABLE_iiii[$46 & 63]($in,$19,8)|0);
        $48 = ($47|0)==(0|0);
        if (!($48)) {
         $$3 = $47;
         label = 34;
         break;
        }
        $49 = (__Z8get_le32PKv($19)|0);
        $50 = (__Z8get_le32PKv($20)|0);
        if ((($50|0) == 1330007625)) {
         $51 = ($49|0)<(8);
         if ($51) {
          $$3 = (47640);
          label = 34;
          break;
         }
         HEAP8[$22] = 1;
         HEAP8[$23] = 0;
         $52 = HEAP32[$1>>2]|0;
         $53 = (($52) + 12|0);
         $54 = HEAP32[$53>>2]|0;
         $55 = (__ZL3minll523($49)|0);
         $56 = (FUNCTION_TABLE_iiii[$54 & 63]($in,$24,$55)|0);
         $57 = ($56|0)==(0|0);
         if (!($57)) {
          $$3 = $56;
          label = 34;
          break;
         }
         $58 = ($49|0)>(16);
         if ($58) {
          $59 = HEAP32[$25>>2]|0;
          $60 = (($59) + 20|0);
          $61 = HEAP32[$60>>2]|0;
          $62 = (($49) + -16)|0;
          $63 = (FUNCTION_TABLE_iii[$61 & 63]($in,$62)|0);
          $64 = ($63|0)==(0|0);
          if (!($64)) {
           $$3 = $63;
           label = 34;
           break;
          }
         }
         $65 = HEAP8[$26]|0;
         HEAP8[$27] = $65;
         $66 = HEAP8[$28]|0;
         HEAP8[$29] = $66;
         $67 = HEAP8[$22]|0;
         HEAP8[$30] = $67;
         $68 = HEAP8[$22]|0;
         $69 = $68&255;
         HEAP32[$31>>2] = $69;
         $70 = HEAP8[$23]|0;
         HEAP8[$32] = $70;
         ;HEAP8[$33+0|0]=HEAP8[$24+0|0]|0;HEAP8[$33+1|0]=HEAP8[$24+1|0]|0;HEAP8[$33+2|0]=HEAP8[$24+2|0]|0;HEAP8[$33+3|0]=HEAP8[$24+3|0]|0;HEAP8[$33+4|0]=HEAP8[$24+4|0]|0;HEAP8[$33+5|0]=HEAP8[$24+5|0]|0;
         $$011$phi = $$011;$$011 = $$011$phi;
         continue;
        } else if ((($50|0) == 1263419714)) {
         $71 = ($49|0)>(8);
         if ($71) {
          $$3 = (47640);
          label = 34;
          break;
         }
         $72 = HEAP32[$1>>2]|0;
         $73 = (($72) + 12|0);
         $74 = HEAP32[$73>>2]|0;
         $75 = (FUNCTION_TABLE_iiii[$74 & 63]($in,$34,$49)|0);
         $76 = ($75|0)==(0|0);
         if ($76) {
          $$011$phi = $$011;$$011 = $$011$phi;
          continue;
         } else {
          $$3 = $75;
          label = 34;
          break;
         }
        } else if ((($50|0) == 1752462689)) {
         __ZN13blargg_vectorIcEC1Ev($chars);
         __ZN13blargg_vectorIPKcEC1Ev($strs);
         $77 = (__ZL9read_strsR11Data_ReaderlR13blargg_vectorIcERS1_IPKcE($in,$49,$chars,$strs)|0);
         $78 = ($77|0)==(0|0);
         do {
          if ($78) {
           $79 = (__ZNK13blargg_vectorIPKcE4sizeEv($strs)|0);
           $80 = ($79|0)>(3);
           if ($80) {
            $81 = (__ZNK13blargg_vectorIPKcEixEj($strs,3)|0);
            $82 = HEAP32[$81>>2]|0;
            __ZL8copy_strPKcPci($82,$35);
           }
           $83 = ($79|0)>(2);
           if ($83) {
            $84 = (__ZNK13blargg_vectorIPKcEixEj($strs,2)|0);
            $85 = HEAP32[$84>>2]|0;
            __ZL8copy_strPKcPci($85,$36);
           }
           $86 = ($79|0)>(1);
           if ($86) {
            $87 = (__ZNK13blargg_vectorIPKcEixEj($strs,1)|0);
            $88 = HEAP32[$87>>2]|0;
            __ZL8copy_strPKcPci($88,$37);
           }
           $89 = ($79|0)>(0);
           if (!($89)) {
            $$08 = 1;$$1 = $$011;
            break;
           }
           $90 = (__ZNK13blargg_vectorIPKcEixEj($strs,0)|0);
           $91 = HEAP32[$90>>2]|0;
           __ZL8copy_strPKcPci($91,$38);
           $$08 = 1;$$1 = $$011;
          } else {
           $$08 = 0;$$1 = $77;
          }
         } while(0);
         __ZN13blargg_vectorIPKcED1Ev($strs);
         __ZN13blargg_vectorIcED1Ev($chars);
         if ($$08) {
          $$011 = $$1;
          continue;
         } else {
          $$3 = $$1;
          label = 34;
          break;
         }
        } else if ((($50|0) == 1701669236)) {
         $92 = (($49|0) / 4)&-1;
         $93 = (__ZN13blargg_vectorIA4_cE6resizeEj($17,$92)|0);
         $94 = ($93|0)==(0|0);
         if (!($94)) {
          $$3 = $93;
          label = 34;
          break;
         }
         $95 = HEAP32[$1>>2]|0;
         $96 = (($95) + 12|0);
         $97 = HEAP32[$96>>2]|0;
         $98 = (__ZNK13blargg_vectorIA4_cE5beginEv($17)|0);
         $99 = ($98);
         $100 = (__ZNK13blargg_vectorIA4_cE4sizeEv($17)|0);
         $101 = $100 << 2;
         $102 = (FUNCTION_TABLE_iiii[$97 & 63]($in,$99,$101)|0);
         $103 = ($102|0)==(0|0);
         if ($103) {
          $$011$phi = $$011;$$011 = $$011$phi;
          continue;
         } else {
          $$3 = $102;
          label = 34;
          break;
         }
        } else if ((($50|0) == 1818389620)) {
         $104 = (__ZL9read_strsR11Data_ReaderlR13blargg_vectorIcERS1_IPKcE($in,$49,$14,$15)|0);
         $105 = ($104|0)==(0|0);
         if ($105) {
          $$011$phi = $$011;$$011 = $$011$phi;
          continue;
         } else {
          $$3 = $104;
          label = 34;
          break;
         }
        } else if ((($50|0) == 1953721456)) {
         $106 = (__ZN13blargg_vectorIhE6resizeEj($16,$49)|0);
         $107 = ($106|0)==(0|0);
         if (!($107)) {
          $$3 = $106;
          label = 34;
          break;
         }
         $108 = HEAP32[$1>>2]|0;
         $109 = (($108) + 12|0);
         $110 = HEAP32[$109>>2]|0;
         $111 = (__ZNK13blargg_vectorIhEixEj($16,0)|0);
         $112 = (FUNCTION_TABLE_iiii[$110 & 63]($in,$111,$49)|0);
         $113 = ($112|0)==(0|0);
         if ($113) {
          $$011$phi = $$011;$$011 = $$011$phi;
          continue;
         } else {
          $$3 = $112;
          label = 34;
          break;
         }
        } else if ((($50|0) == 1096040772)) {
         if ($39) {
          $114 = HEAP32[$40>>2]|0;
          $115 = (($114) + 20|0);
          $116 = HEAP32[$115>>2]|0;
          $117 = (FUNCTION_TABLE_iii[$116 & 63]($in,$49)|0);
          $118 = ($117|0)==(0|0);
          if ($118) {
           $$011$phi = $$011;$$011 = $$011$phi;
           continue;
          } else {
           $$3 = $117;
           label = 34;
           break;
          }
         } else {
          __ZN13Subset_ReaderC2EP11Data_Readerl($sub,$in,$49);
          __ZN16Remaining_ReaderC2EPKvlP11Data_Reader($rem,$18,128,$41);
          $119 = (__ZN8Gme_File4loadER11Data_Reader($42,$43)|0);
          $120 = ($119|0)==(0|0);
          $$0$ = $120 ? $$011 : $119;
          if ($120) {
           $$011 = $$0$;
           continue;
          } else {
           $$3 = $$0$;
           label = 34;
           break;
          }
         }
        } else if ((($50|0) == 1145980238)) {
         $$3 = 0;
         label = 34;
         break;
        } else {
         $121 = HEAP32[$21>>2]|0;
         $122 = (($121) + 20|0);
         $123 = HEAP32[$122>>2]|0;
         $124 = (FUNCTION_TABLE_iii[$123 & 63]($in,$49)|0);
         $125 = ($124|0)==(0|0);
         if ($125) {
          $$011$phi = $$011;$$011 = $$011$phi;
          continue;
         } else {
          $$3 = $124;
          label = 34;
          break;
         }
        }
       }
       if ((label|0) == 34) {
        STACKTOP = sp;return ($$3|0);
       }
       return 0|0;
      }
      function __ZN13blargg_vectorIPKcE5clearEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = HEAP32[$1>>2]|0;
       $3 = $2;
       HEAP32[$1>>2] = 0;
       $4 = (($this) + 4|0);
       HEAP32[$4>>2] = 0;
       _free($3);
       STACKTOP = sp;return;
      }
      function __ZN13blargg_vectorIA4_cE5clearEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = HEAP32[$1>>2]|0;
       $3 = ($2);
       HEAP32[$1>>2] = 0;
       $4 = (($this) + 4|0);
       HEAP32[$4>>2] = 0;
       _free($3);
       STACKTOP = sp;return;
      }
      function __ZL3minll523($x) {
       $x = $x|0;
       var $1 = 0, $x$ = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($x|0)<(16);
       $x$ = $1 ? $x : 16;
       STACKTOP = sp;return ($x$|0);
      }
      function __ZL9read_strsR11Data_ReaderlR13blargg_vectorIcERS1_IPKcE($in,$size,$chars,$strs) {
       $in = $in|0;
       $size = $size|0;
       $chars = $chars|0;
       $strs = $strs|0;
       var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
       var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count$0$lcssa = 0, $count$03 = 0, $i$04 = 0, $i$1$lcssa = 0, $i$11 = 0, $i$11$phi = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($size) + 1)|0;
       $2 = (__ZN13blargg_vectorIcE6resizeEj($chars,$1)|0);
       $3 = ($2|0)==(0|0);
       if (!($3)) {
        $$0 = $2;
        STACKTOP = sp;return ($$0|0);
       }
       $4 = (__ZNK13blargg_vectorIcEixEj($chars,$size)|0);
       HEAP8[$4] = 0;
       $5 = $in;
       $6 = HEAP32[$5>>2]|0;
       $7 = (($6) + 12|0);
       $8 = HEAP32[$7>>2]|0;
       $9 = (__ZNK13blargg_vectorIcEixEj($chars,0)|0);
       $10 = (FUNCTION_TABLE_iiii[$8 & 63]($in,$9,$size)|0);
       $11 = ($10|0)==(0|0);
       if (!($11)) {
        $$0 = $10;
        STACKTOP = sp;return ($$0|0);
       }
       $12 = (__ZN13blargg_vectorIPKcE6resizeEj($strs,128)|0);
       $13 = ($12|0)==(0|0);
       if (!($13)) {
        $$0 = $12;
        STACKTOP = sp;return ($$0|0);
       }
       $14 = ($size|0)>(0);
       L10: do {
        if ($14) {
         $count$03 = 0;$i$04 = 0;
         while(1) {
          $15 = (__ZNK13blargg_vectorIPKcE4sizeEv($strs)|0);
          $16 = ($15|0)>($count$03|0);
          if (!($16)) {
           $17 = $count$03 << 1;
           $18 = (__ZN13blargg_vectorIPKcE6resizeEj($strs,$17)|0);
           $19 = ($18|0)==(0|0);
           if (!($19)) {
            $$0 = $18;
            break;
           }
          }
          $20 = (__ZNK13blargg_vectorIcEixEj($chars,$i$04)|0);
          $21 = (($count$03) + 1)|0;
          $22 = (__ZNK13blargg_vectorIPKcEixEj($strs,$count$03)|0);
          HEAP32[$22>>2] = $20;
          $23 = ($i$04|0)<($size|0);
          L16: do {
           if ($23) {
            $i$11 = $i$04;
            while(1) {
             $25 = (__ZNK13blargg_vectorIcEixEj($chars,$i$11)|0);
             $26 = HEAP8[$25]|0;
             $27 = ($26<<24>>24)==(0);
             $28 = (($i$11) + 1)|0;
             if ($27) {
              $i$1$lcssa = $i$11;
              break L16;
             }
             $24 = ($28|0)<($size|0);
             if ($24) {
              $i$11$phi = $28;$i$11 = $i$11$phi;
             } else {
              $i$1$lcssa = $28;
              break;
             }
            }
           } else {
            $i$1$lcssa = $i$04;
           }
          } while(0);
          $29 = (($i$1$lcssa) + 1)|0;
          $30 = ($29|0)<($size|0);
          if ($30) {
           $count$03 = $21;$i$04 = $29;
          } else {
           $count$0$lcssa = $21;
           break L10;
          }
         }
         STACKTOP = sp;return ($$0|0);
        } else {
         $count$0$lcssa = 0;
        }
       } while(0);
       $31 = (__ZN13blargg_vectorIPKcE6resizeEj($strs,$count$0$lcssa)|0);
       $$0 = $31;
       STACKTOP = sp;return ($$0|0);
      }
      function __ZNK13blargg_vectorIPKcE4sizeEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 4|0);
       $2 = HEAP32[$1>>2]|0;
       STACKTOP = sp;return ($2|0);
      }
      function __ZL8copy_strPKcPci($in,$out) {
       $in = $in|0;
       $out = $out|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($out) + 255|0);
       HEAP8[$1] = 0;
       (_strncpy(($out|0),($in|0),255)|0);
       STACKTOP = sp;return;
      }
      function __ZNK13blargg_vectorIPKcEixEj($this,$n) {
       $this = $this|0;
       $n = $n|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 4|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = ($2>>>0)<($n>>>0);
       if ($3) {
        ___assert_fail(((47816)|0),((47832)|0),58,((47872)|0));
        // unreachable;
       } else {
        $4 = ($this);
        $5 = HEAP32[$4>>2]|0;
        $6 = (($5) + ($n<<2)|0);
        STACKTOP = sp;return ($6|0);
       }
       return 0|0;
      }
      function __ZN13blargg_vectorIA4_cE6resizeEj($this,$n) {
       $this = $this|0;
       $n = $n|0;
       var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = HEAP32[$1>>2]|0;
       $3 = ($2);
       $4 = $n << 2;
       $5 = (_realloc($3,$4)|0);
       $6 = ($5|0)!=(0|0);
       $7 = ($n|0)==(0);
       $or$cond = $6 | $7;
       if (!($or$cond)) {
        $$0 = (47888);
        STACKTOP = sp;return ($$0|0);
       }
       $8 = $5;
       HEAP32[$1>>2] = $8;
       $9 = (($this) + 4|0);
       HEAP32[$9>>2] = $n;
       $$0 = 0;
       STACKTOP = sp;return ($$0|0);
      }
      function __ZNK13blargg_vectorIA4_cE5beginEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = HEAP32[$1>>2]|0;
       STACKTOP = sp;return ($2|0);
      }
      function __ZNK13blargg_vectorIA4_cE4sizeEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 4|0);
       $2 = HEAP32[$1>>2]|0;
       STACKTOP = sp;return ($2|0);
      }
      function __ZNK9Nsfe_Info11track_info_EP12track_info_ti($this,$out,$track) {
       $this = $this|0;
       $out = $out|0;
       $track = $track|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
       var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (__ZNK9Nsfe_Info11remap_trackEi($this,$track)|0);
       $2 = (($this) + 1176|0);
       $3 = (__ZNK13blargg_vectorIA4_cE4sizeEv($2)|0);
       $4 = ($1>>>0)<($3>>>0);
       do {
        if ($4) {
         $5 = (__ZNK13blargg_vectorIA4_cEixEj($2,$1)|0);
         $6 = ($5);
         $7 = (__Z8get_le32PKv($6)|0);
         $8 = ($7|0)>(0);
         if (!($8)) {
          break;
         }
         $9 = (($out) + 4|0);
         HEAP32[$9>>2] = $7;
        }
       } while(0);
       $10 = (($this) + 1160|0);
       $11 = (__ZNK13blargg_vectorIPKcE4sizeEv($10)|0);
       $12 = ($1>>>0)<($11>>>0);
       if ($12) {
        $13 = (($out) + 528|0);
        $14 = (__ZNK13blargg_vectorIPKcEixEj($10,$1)|0);
        $15 = HEAP32[$14>>2]|0;
        __ZN8Gme_File11copy_field_EPcPKc($13,$15);
       }
       $16 = (($out) + 272|0);
       $17 = (($this) + 128|0);
       __ZN8Gme_File11copy_field_EPcPKci($16,$17,256);
       $18 = (($out) + 784|0);
       $19 = (($this) + 384|0);
       __ZN8Gme_File11copy_field_EPcPKci($18,$19,256);
       $20 = (($out) + 1040|0);
       $21 = (($this) + 640|0);
       __ZN8Gme_File11copy_field_EPcPKci($20,$21,256);
       $22 = (($out) + 1552|0);
       $23 = (($this) + 896|0);
       __ZN8Gme_File11copy_field_EPcPKci($22,$23,256);
       STACKTOP = sp;return (0|0);
      }
      function __ZNK13blargg_vectorIA4_cEixEj($this,$n) {
       $this = $this|0;
       $n = $n|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 4|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = ($2>>>0)<($n>>>0);
       if ($3) {
        ___assert_fail(((47816)|0),((47832)|0),58,((47872)|0));
        // unreachable;
       } else {
        $4 = ($this);
        $5 = HEAP32[$4>>2]|0;
        $6 = (($5) + ($n<<2)|0);
        STACKTOP = sp;return ($6|0);
       }
       return 0|0;
      }
      function __ZN8Nsfe_EmuC2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       __ZN7Nsf_EmuC2Ev($1);
       $2 = $this;
       HEAP32[$2>>2] = (((47656) + 8|0));
       $3 = (($this) + 15824|0);
       __ZN9Nsfe_InfoC2Ev($3);
       $4 = (($this) + 17016|0);
       HEAP8[$4] = 0;
       $5 = $this;
       __ZN8Gme_File8set_typeEPK11gme_type_t_($5,(47760));
       STACKTOP = sp;return;
      }
      function __ZN8Nsfe_EmuD0Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       __ZN8Nsfe_EmuD2Ev($this);
       $1 = ($this);
       __ZN8Gme_FiledlEPv($1);
       STACKTOP = sp;return;
      }
      function __ZN8Nsfe_EmuD2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $this;
       HEAP32[$1>>2] = (((47656) + 8|0));
       $2 = (($this) + 15824|0);
       __ZN9Nsfe_InfoD2Ev($2);
       $3 = ($this);
       __ZN7Nsf_EmuD2Ev($3);
       STACKTOP = sp;return;
      }
      function __ZN8Nsfe_Emu6unloadEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 17016|0);
       $2 = HEAP8[$1]|0;
       $3 = ($2<<24>>24)==(0);
       if ($3) {
        $4 = (($this) + 15824|0);
        __ZN9Nsfe_Info6unloadEv($4);
       }
       $5 = ($this);
       __ZN7Nsf_Emu6unloadEv($5);
       STACKTOP = sp;return;
      }
      function __ZN9Nsfe_Info6unloadEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 1152|0);
       __ZN13blargg_vectorIcE5clearEv($1);
       $2 = (($this) + 1160|0);
       __ZN13blargg_vectorIPKcE5clearEv($2);
       $3 = (($this) + 1168|0);
       __ZN13blargg_vectorIhE5clearEv($3);
       $4 = (($this) + 1176|0);
       __ZN13blargg_vectorIA4_cE5clearEv($4);
       STACKTOP = sp;return;
      }
      function __ZNK8Nsfe_Emu11track_info_EP12track_info_ti($this,$out,$track) {
       $this = $this|0;
       $out = $out|0;
       $track = $track|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 15824|0);
       (__ZNK9Nsfe_Info11track_info_EP12track_info_ti($1,$out,$track)|0);
       STACKTOP = sp;return (0|0);
      }
      function __ZN8Nsfe_Emu5load_ER11Data_Reader($this,$in) {
       $this = $this|0;
       $in = $in|0;
       var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 17016|0);
       $2 = HEAP8[$1]|0;
       $3 = ($2<<24>>24)==(0);
       if ($3) {
        HEAP8[$1] = 1;
        $6 = (($this) + 15824|0);
        $7 = ($this);
        $8 = (__ZN9Nsfe_Info4loadER11Data_ReaderP7Nsf_Emu($6,$in,$7)|0);
        HEAP8[$1] = 0;
        __ZN8Nsfe_Emu16disable_playlistEb($this,0);
        $$0 = $8;
        STACKTOP = sp;return ($$0|0);
       } else {
        $4 = ($this);
        $5 = (__ZN7Nsf_Emu5load_ER11Data_Reader($4,$in)|0);
        $$0 = $5;
        STACKTOP = sp;return ($$0|0);
       }
       return 0|0;
      }
      function __ZN8Nsfe_Emu16disable_playlistEb($this,$b) {
       $this = $this|0;
       $b = $b|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 15824|0);
       __ZN9Nsfe_Info16disable_playlistEb($1,$b);
       $2 = $this;
       $3 = (($this) + 15830|0);
       $4 = HEAP8[$3]|0;
       $5 = $4&255;
       __ZN8Gme_File15set_track_countEi($2,$5);
       STACKTOP = sp;return;
      }
      function __ZN8Nsfe_Emu15clear_playlist_Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN8Nsfe_Emu16disable_playlistEb($this,1);
       STACKTOP = sp;return;
      }
      function __ZN8Nsfe_Emu12start_track_Ei($this,$track) {
       $this = $this|0;
       $track = $track|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = (($this) + 15824|0);
       $3 = (__ZNK9Nsfe_Info11remap_trackEi($2,$track)|0);
       $4 = (__ZN7Nsf_Emu12start_track_Ei($1,$3)|0);
       STACKTOP = sp;return ($4|0);
      }
      function __ZN13blargg_vectorIA4_cED2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = HEAP32[$1>>2]|0;
       $3 = ($2);
       _free($3);
       STACKTOP = sp;return;
      }
      function __ZN13blargg_vectorIPKcED2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = HEAP32[$1>>2]|0;
       $3 = $2;
       _free($3);
       STACKTOP = sp;return;
      }
      function __ZN13blargg_vectorIA4_cEC2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       HEAP32[$1>>2] = 0;
       $2 = (($this) + 4|0);
       HEAP32[$2>>2] = 0;
       STACKTOP = sp;return;
      }
      function __ZN13blargg_vectorIPKcEC2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       HEAP32[$1>>2] = 0;
       $2 = (($this) + 4|0);
       HEAP32[$2>>2] = 0;
       STACKTOP = sp;return;
      }
      function __ZL12new_nsfe_emuv() {
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (__ZN8Gme_FilenwEj(17024)|0);
       $2 = ($1|0)==(0|0);
       if ($2) {
        $4 = 0;
       } else {
        $3 = $1;
        __ZN8Nsfe_EmuC2Ev($3);
        $4 = $3;
       }
       $5 = $4;
       STACKTOP = sp;return ($5|0);
      }
      function __ZL13new_nsfe_filev() {
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (__ZN8Gme_FilenwEj(1512)|0);
       $2 = ($1|0)==(0|0);
       if ($2) {
        $4 = 0;
       } else {
        $3 = $1;
        __ZN9Nsfe_FileC1Ev($3);
        $4 = $3;
       }
       $5 = $4;
       STACKTOP = sp;return ($5|0);
      }
      function __ZN9Nsfe_FileC1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN9Nsfe_FileC2Ev($this);
       STACKTOP = sp;return;
      }
      function __ZN9Nsfe_FileC2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $this;
       __ZN9Gme_Info_C2Ev($1);
       $2 = $this;
       HEAP32[$2>>2] = (((47920) + 8|0));
       $3 = (($this) + 316|0);
       __ZN9Nsfe_InfoC2Ev($3);
       $4 = $this;
       __ZN8Gme_File8set_typeEPK11gme_type_t_($4,(47760));
       STACKTOP = sp;return;
      }
      function __ZN9Nsfe_FileD1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN9Nsfe_FileD2Ev($this);
       STACKTOP = sp;return;
      }
      function __ZN9Nsfe_FileD0Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       __ZN9Nsfe_FileD1Ev($this);
       $1 = ($this);
       __ZN8Gme_FiledlEPv($1);
       STACKTOP = sp;return;
      }
      function __ZN9Nsfe_File5load_ER11Data_Reader($this,$in) {
       $this = $this|0;
       $in = $in|0;
       var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 316|0);
       $2 = (__ZN9Nsfe_Info4loadER11Data_ReaderP7Nsf_Emu($1,$in,0)|0);
       $3 = ($2|0)==(0|0);
       if (!($3)) {
        $$0 = $2;
        STACKTOP = sp;return ($$0|0);
       }
       __ZN9Nsfe_Info16disable_playlistEb($1,0);
       $4 = $this;
       $5 = (($this) + 322|0);
       $6 = HEAP8[$5]|0;
       $7 = $6&255;
       __ZN8Gme_File15set_track_countEi($4,$7);
       $$0 = 0;
       STACKTOP = sp;return ($$0|0);
      }
      function __ZNK9Nsfe_File11track_info_EP12track_info_ti($this,$out,$track) {
       $this = $this|0;
       $out = $out|0;
       $track = $track|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 316|0);
       (__ZNK9Nsfe_Info11track_info_EP12track_info_ti($1,$out,$track)|0);
       STACKTOP = sp;return (0|0);
      }
      function __ZN9Nsfe_FileD2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $this;
       HEAP32[$1>>2] = (((47920) + 8|0));
       $2 = (($this) + 316|0);
       __ZN9Nsfe_InfoD2Ev($2);
       $3 = $this;
       __ZN9Gme_Info_D2Ev($3);
       STACKTOP = sp;return;
      }
      function __ZNK13blargg_vectorIcEixEj($this,$n) {
       $this = $this|0;
       $n = $n|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 4|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = ($2>>>0)<($n>>>0);
       if ($3) {
        ___assert_fail(((47816)|0),((47832)|0),58,((47872)|0));
        // unreachable;
       } else {
        $4 = ($this);
        $5 = HEAP32[$4>>2]|0;
        $6 = (($5) + ($n)|0);
        STACKTOP = sp;return ($6|0);
       }
       return 0|0;
      }
      function __ZN13blargg_vectorIPKcE6resizeEj($this,$n) {
       $this = $this|0;
       $n = $n|0;
       var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = HEAP32[$1>>2]|0;
       $3 = $2;
       $4 = $n << 2;
       $5 = (_realloc($3,$4)|0);
       $6 = ($5|0)!=(0|0);
       $7 = ($n|0)==(0);
       $or$cond = $6 | $7;
       if (!($or$cond)) {
        $$0 = (47888);
        STACKTOP = sp;return ($$0|0);
       }
       $8 = $5;
       HEAP32[$1>>2] = $8;
       $9 = (($this) + 4|0);
       HEAP32[$9>>2] = $n;
       $$0 = 0;
       STACKTOP = sp;return ($$0|0);
      }
      function __ZN12Sap_Apu_ImplC2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       __ZN10Blip_SynthILi12ELi1EEC1Ev($1);
       $2 = (($this) + 816|0);
       __ZL8gen_polymiPh(12,2,$2);
       $3 = (($this) + 818|0);
       __ZL8gen_polymiPh(264,64,$3);
       $4 = (($this) + 882|0);
       __ZL8gen_polymiPh(67584,16384,$4);
       STACKTOP = sp;return;
      }
      function __ZL8gen_polymiPh($mask,$count,$out) {
       $mask = $mask|0;
       $count = $count|0;
       $out = $out|0;
       var $$0 = 0, $$0$phi = 0, $$01 = 0, $$01$phi = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
       var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
       var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0;
       var $8 = 0, $9 = 0, $n$0 = 0, $n$0$phi = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $$0 = $out;$$01 = $count;$n$0 = 1;
       while(1) {
        $1 = $n$0 & 1;
        $2 = $n$0 >>> 1;
        $3 = (0 - ($1))|0;
        $4 = $3 & $mask;
        $5 = $4 ^ $2;
        $6 = $5 & 1;
        $7 = $6 << 1;
        $8 = $7 | $1;
        $9 = $5 >>> 1;
        $10 = (0 - ($6))|0;
        $11 = $10 & $mask;
        $12 = $11 ^ $9;
        $13 = $12 & 1;
        $14 = $13 << 2;
        $15 = $14 | $8;
        $16 = $12 >>> 1;
        $17 = (0 - ($13))|0;
        $18 = $17 & $mask;
        $19 = $18 ^ $16;
        $20 = $19 & 1;
        $21 = $20 << 3;
        $22 = $21 | $15;
        $23 = $19 >>> 1;
        $24 = (0 - ($20))|0;
        $25 = $24 & $mask;
        $26 = $25 ^ $23;
        $27 = $26 & 1;
        $28 = $27 << 4;
        $29 = $28 | $22;
        $30 = $26 >>> 1;
        $31 = (0 - ($27))|0;
        $32 = $31 & $mask;
        $33 = $32 ^ $30;
        $34 = $33 & 1;
        $35 = $34 << 5;
        $36 = $35 | $29;
        $37 = $33 >>> 1;
        $38 = (0 - ($34))|0;
        $39 = $38 & $mask;
        $40 = $39 ^ $37;
        $41 = $40 & 1;
        $42 = $41 << 6;
        $43 = $42 | $36;
        $44 = $40 >>> 1;
        $45 = (0 - ($41))|0;
        $46 = $45 & $mask;
        $47 = $46 ^ $44;
        $48 = $47 & 1;
        $49 = $48 << 7;
        $50 = $49 | $43;
        $51 = $47 >>> 1;
        $52 = (0 - ($48))|0;
        $53 = $52 & $mask;
        $54 = $53 ^ $51;
        $55 = $50&255;
        $56 = (($$0) + 1|0);
        HEAP8[$$0] = $55;
        $57 = (($$01) + -1)|0;
        $58 = ($57|0)==(0);
        if ($58) {
         break;
        } else {
         $n$0$phi = $54;$$01$phi = $57;$$0$phi = $56;$n$0 = $n$0$phi;$$01 = $$01$phi;$$0 = $$0$phi;
        }
       }
       STACKTOP = sp;return;
      }
      function __ZN7Sap_ApuC2Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 80|0);
       HEAP32[$1>>2] = 0;
       __ZN7Sap_Apu10osc_outputEiP11Blip_Buffer($this,0,0);
       __ZN7Sap_Apu10osc_outputEiP11Blip_Buffer($this,1,0);
       __ZN7Sap_Apu10osc_outputEiP11Blip_Buffer($this,2,0);
       __ZN7Sap_Apu10osc_outputEiP11Blip_Buffer($this,3,0);
       STACKTOP = sp;return;
      }
      function __ZN7Sap_Apu10osc_outputEiP11Blip_Buffer($this,$i,$b) {
       $this = $this|0;
       $i = $i|0;
       $b = $b|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($i>>>0)<(4);
       if ($1) {
        $2 = ((($this) + (($i*20)|0)|0) + 16|0);
        HEAP32[$2>>2] = $b;
        STACKTOP = sp;return;
       } else {
        ___assert_fail(((48056)|0),((48088)|0),73,((48128)|0));
        // unreachable;
       }
      }
      function __ZN7Sap_Apu5resetEP12Sap_Apu_Impl($this,$new_impl) {
       $this = $this|0;
       $new_impl = $new_impl|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 80|0);
       HEAP32[$1>>2] = $new_impl;
       $2 = (($this) + 84|0);
       $3 = $2;
       ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;HEAP32[$3+12>>2]=0|0;HEAP32[$3+16>>2]=0|0;
       $4 = ($this);
       ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
       $5 = (($this) + 20|0);
       ;HEAP32[$5+0>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;HEAP32[$5+12>>2]=0|0;
       $6 = (($this) + 40|0);
       ;HEAP32[$6+0>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;HEAP32[$6+12>>2]=0|0;
       $7 = (($this) + 60|0);
       ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;HEAP32[$7+12>>2]=0|0;
       STACKTOP = sp;return;
      }
      function __ZN7Sap_Apu9run_untilEi($this,$end_time) {
       $this = $this|0;
       $end_time = $end_time|0;
       var $$ = 0, $$$ = 0, $$1 = 0, $$1$ = 0, $$20 = 0, $$4 = 0, $$6 = 0, $$lobit = 0, $$sum = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
       var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
       var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
       var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
       var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
       var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
       var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
       var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
       var $delta1$0 = 0, $exitcond = 0, $i$015 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $osc_last_amp$0 = 0, $osc_last_amp$1$ph = 0, $osc_last_amp$2$lcssa = 0, $osc_last_amp$29 = 0, $osc_last_amp$3 = 0, $period2$0 = 0, $poly$1 = 0, $poly5_inc$0 = 0, $poly_inc$0 = 0, $poly_len$1 = 0, $poly_pos$0 = 0, $poly_pos$1 = 0, $poly_pos$2 = 0, $poly_pos$3$lcssa = 0;
       var $poly_pos$37 = 0, $poly_pos$5 = 0, $time$0 = 0, $time$1$lcssa = 0, $time$110 = 0, $time$2 = 0, $time$3 = 0, $time$4 = 0, $time2$0 = 0, $time2$1 = 0, $time2$2 = 0, $time2$2$end_time = 0, $time2$2$phi = 0, $volume$1 = 0, $volume$2 = 0, $volume$2$ = 0, $volume$3$ph = 0, $volume$4 = 0, $wave$0 = 0, $wave$1 = 0;
       var $wave$2$lcssa = 0, $wave$28 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       __ZN7Sap_Apu12calc_periodsEv($this);
       $1 = (($this) + 80|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = (($2) + 882|0);
       $4 = (($this) + 100|0);
       $5 = HEAP32[$4>>2]|0;
       $6 = $5 & 128;
       $7 = ($6|0)==(0);
       $8 = (($2) + 818|0);
       $$ = $7 ? 131071 : 511;
       $$1 = $7 ? $3 : $8;
       $9 = (($this) + 96|0);
       $10 = HEAP32[$9>>2]|0;
       $11 = (($10|0) % ($$|0))&-1;
       HEAP32[$9>>2] = $11;
       $12 = (($this) + 84|0);
       $13 = HEAP32[$12>>2]|0;
       $14 = (($2) + 816|0);
       $15 = (($this) + 92|0);
       $16 = (($this) + 88|0);
       $17 = ($2);
       $18 = ($2);
       $19 = ($2);
       $20 = $13;$i$015 = 0;
       while(1) {
        $21 = ((($this) + (($i$015*20)|0)|0) + 8|0);
        $22 = HEAP32[$21>>2]|0;
        $23 = (($22) + ($20))|0;
        $24 = ((($this) + (($i$015*20)|0)|0) + 12|0);
        $25 = HEAP32[$24>>2]|0;
        $26 = ((($this) + (($i$015*20)|0)|0) + 16|0);
        $27 = HEAP32[$26>>2]|0;
        $28 = ($27|0)==(0|0);
        L3: do {
         if ($28) {
          $time$3 = $23;
         } else {
          __ZN11Blip_Buffer12set_modifiedEv($27);
          $29 = ((($this) + (($i$015*20)|0)|0) + 1|0);
          $30 = HEAP8[$29]|0;
          $31 = $30&255;
          $32 = $31 << 1;
          $33 = $32 & 30;
          $34 = ($33|0)!=(0);
          $35 = $31 & 16;
          $36 = ($35|0)==(0);
          $or$cond = $34 & $36;
          do {
           if ($or$cond) {
            $37 = $31 & 160;
            $38 = ($37|0)==(160);
            $39 = ($25|0)<(74);
            $or$cond3 = $38 & $39;
            if ($or$cond3) {
             break;
            }
            $46 = HEAP32[$4>>2]|0;
            $47 = (48032 + ($i$015)|0);
            $48 = HEAP8[$47]|0;
            $49 = $48&255;
            $50 = $49 & $46;
            $51 = ($50|0)==(0);
            do {
             if ($51) {
              $period2$0 = 0;$time2$0 = $end_time;$volume$1 = $33;
             } else {
              $$sum = (($i$015) + 2)|0;
              $52 = ((($this) + (($$sum*20)|0)|0) + 12|0);
              $53 = HEAP32[$52>>2]|0;
              $54 = HEAP32[$12>>2]|0;
              $55 = ((($this) + (($$sum*20)|0)|0) + 8|0);
              $56 = HEAP32[$55>>2]|0;
              $57 = (($56) + ($54))|0;
              $58 = ((($this) + (($i$015*20)|0)|0) + 3|0);
              $59 = HEAP8[$58]|0;
              $60 = ($59<<24>>24)==(0);
              if ($60) {
               $period2$0 = $53;$time2$0 = $57;$volume$1 = $33;
               break;
              }
              $61 = ((($this) + (($i$015*20)|0)|0) + 4|0);
              $62 = HEAP32[$61>>2]|0;
              $63 = (($62) - ($33))|0;
              HEAP32[$61>>2] = $63;
              $64 = (0 - ($33))|0;
              $period2$0 = $53;$time2$0 = $57;$volume$1 = $64;
             }
            } while(0);
            $65 = ($23|0)<($end_time|0);
            $66 = ($time2$0|0)<($end_time|0);
            $or$cond5 = $65 | $66;
            if ($or$cond5) {
             $67 = ((($this) + (($i$015*20)|0)|0) + 2|0);
             $68 = HEAP8[$67]|0;
             $69 = $68&255;
             $70 = $69 & 1;
             $71 = $31 & 32;
             $72 = ($71|0)==(0);
             if ($72) {
              $73 = $31 & 64;
              $74 = ($73|0)==(0);
              $$1$ = $74 ? $$1 : $14;
              $$$ = $74 ? $$ : 15;
              $$20 = $74 ? $9 : $15;
              $poly_pos$0 = HEAP32[$$20>>2]|0;
              $75 = (($25|0) % ($$$|0))&-1;
              $76 = HEAP32[$21>>2]|0;
              $77 = (($76) + ($poly_pos$0))|0;
              $78 = (($77|0) % ($$$|0))&-1;
              $poly$1 = $$1$;$poly_inc$0 = $75;$poly_len$1 = $$$;$poly_pos$1 = $78;
             } else {
              $poly$1 = (48040);$poly_inc$0 = 1;$poly_len$1 = 16;$poly_pos$1 = $70;
             }
             $79 = (($poly_inc$0) - ($poly_len$1))|0;
             $80 = $31 & 128;
             $81 = ($80|0)==(0);
             if ($81) {
              $82 = HEAP32[$21>>2]|0;
              $83 = HEAP32[$16>>2]|0;
              $84 = (($83) + ($82))|0;
              $85 = (($84|0) % 31)&-1;
              $86 = (__Z9run_poly5mi(377253537,$85)|0);
              $87 = (($25|0) % 31)&-1;
              $poly5_inc$0 = $87;$wave$0 = $86;
             } else {
              $poly5_inc$0 = 0;$wave$0 = 377253537;
             }
             $88 = ((($this) + (($i$015*20)|0)|0) + 4|0);
             $89 = HEAP32[$88>>2]|0;
             $osc_last_amp$0 = $89;$poly_pos$2 = $poly_pos$1;$time$0 = $23;$time2$1 = $time2$0;$volume$2 = $volume$1;$wave$1 = $wave$0;
             while(1) {
              $90 = (0 - ($volume$2))|0;
              $91 = ($time2$1|0)<($time$0|0);
              do {
               if ($91) {
                $92 = ($volume$2|0)<(0);
                $volume$2$ = $92 ? $volume$2 : 0;
                $delta1$0 = (($volume$2$) - ($osc_last_amp$0))|0;
                $93 = ($volume$2$|0)==($osc_last_amp$0|0);
                if ($93) {
                 $osc_last_amp$1$ph = $osc_last_amp$0;$volume$3$ph = $volume$2;
                 break;
                }
                $94 = (($osc_last_amp$0) - ($volume$2))|0;
                $95 = (($94) + ($delta1$0))|0;
                __ZNK10Blip_SynthILi12ELi1EE6offsetEiiP11Blip_Buffer($17,$time2$1,$delta1$0,$27);
                $osc_last_amp$1$ph = $95;$volume$3$ph = $90;
               } else {
                $osc_last_amp$1$ph = $osc_last_amp$0;$volume$3$ph = $volume$2;
               }
              } while(0);
              $time2$2 = $time2$1;
              while(1) {
               $96 = ($time2$2|0)>($time$0|0);
               $97 = (($time2$2) + ($period2$0))|0;
               if ($96) {
                break;
               } else {
                $time2$2$phi = $97;$time2$2 = $time2$2$phi;
               }
              }
              $98 = ($time2$2|0)<($end_time|0);
              $time2$2$end_time = $98 ? $time2$2 : $end_time;
              $99 = ($time$0|0)<($time2$2$end_time|0);
              if ($99) {
               $osc_last_amp$29 = $osc_last_amp$1$ph;$poly_pos$37 = $poly_pos$2;$time$110 = $time$0;$wave$28 = $wave$1;
               while(1) {
                $100 = $wave$28 & 1;
                $101 = ($100|0)==(0);
                do {
                 if ($101) {
                  $osc_last_amp$3 = $osc_last_amp$29;$poly_pos$5 = $poly_pos$37;
                 } else {
                  $102 = $poly_pos$37 >> 3;
                  $103 = (($poly$1) + ($102)|0);
                  $104 = HEAP8[$103]|0;
                  $105 = $104&255;
                  $106 = $poly_pos$37 & 7;
                  $107 = $105 >>> $106;
                  $108 = $107 & 1;
                  $109 = (0 - ($108))|0;
                  $110 = $volume$3$ph & $109;
                  $111 = (($poly_pos$37) + ($79))|0;
                  $112 = ($111|0)<(0);
                  $113 = (($poly_pos$37) + ($poly_inc$0))|0;
                  $$6 = $112 ? $113 : $111;
                  $114 = ($110|0)==($osc_last_amp$29|0);
                  if ($114) {
                   $osc_last_amp$3 = $osc_last_amp$29;$poly_pos$5 = $$6;
                   break;
                  }
                  $115 = (($110) - ($osc_last_amp$29))|0;
                  __ZNK10Blip_SynthILi12ELi1EE6offsetEiiP11Blip_Buffer($18,$time$110,$115,$27);
                  $osc_last_amp$3 = $110;$poly_pos$5 = $$6;
                 }
                } while(0);
                $116 = (__Z9run_poly5mi($wave$28,$poly5_inc$0)|0);
                $117 = (($time$110) + ($25))|0;
                $118 = ($117|0)<($time2$2$end_time|0);
                if ($118) {
                 $osc_last_amp$29 = $osc_last_amp$3;$poly_pos$37 = $poly_pos$5;$time$110 = $117;$wave$28 = $116;
                } else {
                 $osc_last_amp$2$lcssa = $osc_last_amp$3;$poly_pos$3$lcssa = $poly_pos$5;$time$1$lcssa = $117;$wave$2$lcssa = $116;
                 break;
                }
               }
              } else {
               $osc_last_amp$2$lcssa = $osc_last_amp$1$ph;$poly_pos$3$lcssa = $poly_pos$2;$time$1$lcssa = $time$0;$wave$2$lcssa = $wave$1;
              }
              $119 = ($time$1$lcssa|0)<($end_time|0);
              if ($119) {
               $osc_last_amp$0 = $osc_last_amp$2$lcssa;$poly_pos$2 = $poly_pos$3$lcssa;$time$0 = $time$1$lcssa;$time2$1 = $time2$2;$volume$2 = $volume$3$ph;$wave$1 = $wave$2$lcssa;
               continue;
              }
              if ($98) {
               $osc_last_amp$0 = $osc_last_amp$2$lcssa;$poly_pos$2 = $poly_pos$3$lcssa;$time$0 = $time$1$lcssa;$time2$1 = $time2$2;$volume$2 = $volume$3$ph;$wave$1 = $wave$2$lcssa;
              } else {
               break;
              }
             }
             $120 = $poly_pos$3$lcssa&255;
             HEAP8[$67] = $120;
             HEAP32[$88>>2] = $osc_last_amp$2$lcssa;
             $time$2 = $time$1$lcssa;$volume$4 = $volume$3$ph;
            } else {
             $time$2 = $23;$volume$4 = $volume$1;
            }
            $121 = ((($this) + (($i$015*20)|0)|0) + 3|0);
            HEAP8[$121] = 0;
            $122 = ($volume$4|0)<(0);
            if (!($122)) {
             $time$3 = $time$2;
             break L3;
            }
            $123 = ((($this) + (($i$015*20)|0)|0) + 4|0);
            $124 = HEAP32[$123>>2]|0;
            $125 = (($124) - ($volume$4))|0;
            HEAP32[$123>>2] = $125;
            HEAP8[$121] = 1;
            $time$3 = $time$2;
            break L3;
           }
          } while(0);
          $$lobit = $35 >>> 4;
          $40 = $$lobit ^ 1;
          $$4 = $33 >>> $40;
          $41 = ((($this) + (($i$015*20)|0)|0) + 4|0);
          $42 = HEAP32[$41>>2]|0;
          $43 = ($$4|0)==($42|0);
          if ($43) {
           $time$3 = $23;
           break;
          }
          $44 = (($$4) - ($42))|0;
          HEAP32[$41>>2] = $$4;
          $45 = HEAP32[$12>>2]|0;
          __ZNK10Blip_SynthILi12ELi1EE6offsetEiiP11Blip_Buffer($19,$45,$44,$27);
          $time$3 = $23;
         }
        } while(0);
        $126 = (($end_time) - ($time$3))|0;
        $127 = ($126|0)>(0);
        if ($127) {
         $128 = (($25) + -1)|0;
         $129 = (($128) + ($126))|0;
         $130 = (($129|0) / ($25|0))&-1;
         $131 = ((($this) + (($i$015*20)|0)|0) + 2|0);
         $132 = HEAP8[$131]|0;
         $133 = $132&255;
         $134 = $133 ^ $130;
         $135 = $134&255;
         HEAP8[$131] = $135;
         $136 = Math_imul($130, $25)|0;
         $137 = (($136) + ($time$3))|0;
         $time$4 = $137;
        } else {
         $time$4 = $time$3;
        }
        $138 = (($time$4) - ($end_time))|0;
        HEAP32[$21>>2] = $138;
        $139 = (($i$015) + 1)|0;
        $140 = HEAP32[$12>>2]|0;
        $exitcond = ($139|0)==(4);
        if ($exitcond) {
         break;
        } else {
         $20 = $140;$i$015 = $139;
        }
       }
       $141 = (($end_time) - ($140))|0;
       HEAP32[$12>>2] = $end_time;
       $142 = (($this) + 92|0);
       $143 = HEAP32[$142>>2]|0;
       $144 = (($143) + ($141))|0;
       $145 = (($144|0) % 15)&-1;
       HEAP32[$142>>2] = $145;
       $146 = (($this) + 88|0);
       $147 = HEAP32[$146>>2]|0;
       $148 = (($147) + ($141))|0;
       $149 = (($148|0) % 31)&-1;
       HEAP32[$146>>2] = $149;
       $150 = HEAP32[$9>>2]|0;
       $151 = (($150) + ($141))|0;
       HEAP32[$9>>2] = $151;
       STACKTOP = sp;return;
      }
      function __ZN7Sap_Apu12calc_periodsEv($this) {
       $this = $this|0;
       var $$ = 0, $$sum = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
       var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, $period$1 = 0, label = 0;
       var sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 100|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = $2 & 1;
       $4 = ($3|0)!=(0);
       $$ = $4 ? 114 : 28;
       $i$01 = 0;
       while(1) {
        $5 = (($this) + (($i$01*20)|0)|0);
        $6 = HEAP8[$5]|0;
        $7 = $6&255;
        $8 = (($7) + 1)|0;
        $9 = Math_imul($8, $$)|0;
        $10 = HEAP32[$1>>2]|0;
        $11 = (48048 + ($i$01)|0);
        $12 = HEAP8[$11]|0;
        $13 = $12&255;
        $14 = $13 & $10;
        $15 = ($14|0)==(0);
        do {
         if ($15) {
          $period$1 = $9;
         } else {
          $16 = (($7) + 4)|0;
          $17 = $i$01 & 1;
          $18 = ($17|0)==(0);
          if ($18) {
           $period$1 = $16;
           break;
          }
          $19 = $7 << 8;
          $$sum = (($i$01) + -1)|0;
          $20 = (($this) + (($$sum*20)|0)|0);
          $21 = HEAP8[$20]|0;
          $22 = $21&255;
          $23 = $22 | $19;
          $24 = (($23) + 7)|0;
          $25 = (($i$01) + -1)|0;
          $26 = (48048 + ($25)|0);
          $27 = HEAP8[$26]|0;
          $28 = $27&255;
          $29 = $28 & $10;
          $30 = ($29|0)==(0);
          if (!($30)) {
           $period$1 = $24;
           break;
          }
          $31 = (($23) + 1)|0;
          $32 = Math_imul($31, $$)|0;
          $period$1 = $32;
         }
        } while(0);
        $33 = ((($this) + (($i$01*20)|0)|0) + 12|0);
        HEAP32[$33>>2] = $period$1;
        $34 = (($i$01) + 1)|0;
        $exitcond = ($34|0)==(4);
        if ($exitcond) {
         break;
        } else {
         $i$01 = $34;
        }
       }
       STACKTOP = sp;return;
      }
      function __Z9run_poly5mi($in,$shift) {
       $in = $in|0;
       $shift = $shift|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $in << $shift;
       $2 = $1 & 2147483647;
       $3 = (31 - ($shift))|0;
       $4 = $in >>> $3;
       $5 = $2 | $4;
       STACKTOP = sp;return ($5|0);
      }
      function __ZN7Sap_Apu10write_dataEiji($this,$time,$addr,$data) {
       $this = $this|0;
       $time = $time|0;
       $addr = $addr|0;
       $data = $data|0;
       var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       __ZN7Sap_Apu9run_untilEi($this,$time);
       $1 = $addr >>> 1;
       $2 = $1 ^ 26880;
       $3 = ($2>>>0)<(4);
       if ($3) {
        $4 = $data&255;
        $5 = $addr & 1;
        $6 = ((($this) + (($2*20)|0)|0) + ($5)|0);
        HEAP8[$6] = $4;
        STACKTOP = sp;return;
       }
       if ((($addr|0) == 53768)) {
        $7 = (($this) + 100|0);
        HEAP32[$7>>2] = $data;
        STACKTOP = sp;return;
       } else if ((($addr|0) == 53769)) {
        $8 = (($this) + 8|0);
        HEAP32[$8>>2] = 0;
        $9 = (($this) + 28|0);
        HEAP32[$9>>2] = 0;
        $10 = (($this) + 48|0);
        HEAP32[$10>>2] = 0;
        $11 = (($this) + 68|0);
        HEAP32[$11>>2] = 0;
        STACKTOP = sp;return;
       } else {
        STACKTOP = sp;return;
       }
      }
      function __ZN7Sap_Apu9end_frameEi($this,$end_time) {
       $this = $this|0;
       $end_time = $end_time|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 84|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = ($2|0)<($end_time|0);
       if ($3) {
        __ZN7Sap_Apu9run_untilEi($this,$end_time);
       }
       $4 = HEAP32[$1>>2]|0;
       $5 = (($4) - ($end_time))|0;
       HEAP32[$1>>2] = $5;
       STACKTOP = sp;return;
      }
      function __ZN7Sap_Emu9cpu_writeEji($this,$addr,$data) {
       $this = $this|0;
       $addr = $addr|0;
       $data = $data|0;
       var $$mask = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $data&255;
       $2 = ((($this) + ($addr)|0) + 1428|0);
       HEAP8[$2] = $1;
       $$mask = $addr & -256;
       $3 = ($$mask|0)==(53760);
       if (!($3)) {
        STACKTOP = sp;return;
       }
       __ZN7Sap_Emu10cpu_write_Eji($this,$addr,$data);
       STACKTOP = sp;return;
      }
      function __ZN7Sap_Emu8cpu_readEj($this,$addr) {
       $this = $this|0;
       $addr = $addr|0;
       var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ((($this) + ($addr)|0) + 1428|0);
       $2 = HEAP8[$1]|0;
       $3 = $2&255;
       STACKTOP = sp;return ($3|0);
      }
      function __ZN7Sap_Cpu5resetEPv($this,$new_mem) {
       $this = $this|0;
       $new_mem = $new_mem|0;
       var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 12|0);
       $2 = (($this) + 8|0);
       HEAP32[$2>>2] = $1;
       $3 = (($this) + 28|0);
       HEAP32[$3>>2] = $new_mem;
       $4 = (($this) + 5|0);
       HEAP8[$4] = 4;
       $5 = (($this) + 6|0);
       HEAP8[$5] = -1;
       $6 = (($this) + 16|0);
       HEAP32[$6>>2] = 0;
       $7 = ($1);
       HEAP32[$7>>2] = 0;
       $8 = (($this) + 20|0);
       $9 = $this;
       ;HEAP16[$9+0>>1]=0|0;HEAP16[$9+2>>1]=0|0;HEAP8[$9+4|0]=0|0;
       HEAP32[$8>>2] = 1073741824;
       $10 = (($this) + 24|0);
       HEAP32[$10>>2] = 1073741824;
       __Z24blargg_verify_byte_orderv();
       STACKTOP = sp;return;
      }
      function __ZN7Sap_Cpu3runEl($this,$end_time) {
       $this = $this|0;
       $end_time = $end_time|0;
       var $$ = 0, $$15 = 0, $$16 = 0, $$17 = 0, $$18 = 0, $$sum = 0, $$sum1 = 0, $$sum11 = 0, $$sum12 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
       var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
       var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
       var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
       var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
       var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
       var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
       var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
       var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
       var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
       var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0;
       var $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
       var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
       var $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
       var $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0;
       var $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
       var $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0;
       var $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0;
       var $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0;
       var $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0;
       var $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0;
       var $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0;
       var $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0;
       var $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0;
       var $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0;
       var $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0;
       var $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0;
       var $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0;
       var $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0;
       var $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0;
       var $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0;
       var $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0;
       var $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0;
       var $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0;
       var $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0;
       var $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0;
       var $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0;
       var $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0;
       var $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0;
       var $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0;
       var $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0;
       var $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0;
       var $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0;
       var $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0;
       var $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0;
       var $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0;
       var $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0;
       var $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0 = 0, $a$0$phi = 0, $addr10$0 = 0, $addr13$0 = 0, $c$0 = 0;
       var $c$0$phi = 0, $c$1 = 0, $c$2 = 0, $c$3 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $c$7 = 0, $c$8 = 0, $c$9 = 0, $data$0 = 0, $data$1 = 0, $data$10 = 0, $data$11 = 0, $data$12 = 0, $data$13 = 0, $data$14 = 0, $data$15 = 0, $data$16 = 0, $data$17 = 0;
       var $data$18 = 0, $data$19 = 0, $data$2 = 0, $data$20 = 0, $data$21 = 0, $data$22 = 0, $data$23 = 0, $data$24 = 0, $data$25 = 0, $data$26 = 0, $data$27 = 0, $data$28 = 0, $data$29 = 0, $data$3 = 0, $data$30 = 0, $data$31 = 0, $data$32 = 0, $data$33 = 0, $data$34 = 0, $data$35 = 0;
       var $data$36 = 0, $data$37 = 0, $data$38 = 0, $data$39 = 0, $data$4 = 0, $data$40 = 0, $data$41 = 0, $data$42 = 0, $data$43 = 0, $data$44 = 0, $data$45 = 0, $data$46 = 0, $data$47 = 0, $data$48 = 0, $data$49 = 0, $data$5 = 0, $data$51 = 0, $data$52 = 0, $data$53 = 0, $data$56 = 0;
       var $data$6 = 0, $data$7 = 0, $data$8 = 0, $data$9 = 0, $illegal_encountered$0$off0 = 0, $new_time$0 = 0, $nz$0 = 0, $nz$0$phi = 0, $nz$1 = 0, $nz$2 = 0, $nz$3 = 0, $nz$4 = 0, $nz$5 = 0, $nz$6 = 0, $or$cond = 0, $pc$0 = 0, $pc$1 = 0, $pc$1$phi = 0, $pc$10 = 0, $pc$11 = 0;
       var $pc$12 = 0, $pc$13 = 0, $pc$14 = 0, $pc$15 = 0, $pc$16 = 0, $pc$17 = 0, $pc$19 = 0, $pc$2 = 0, $pc$3 = 0, $pc$4 = 0, $pc$5 = 0, $pc$6 = 0, $pc$7 = 0, $pc$8 = 0, $pc$9 = 0, $s = 0, $s_time$0 = 0, $s_time$0$phi = 0, $s_time$1 = 0, $s_time$10 = 0;
       var $s_time$11 = 0, $s_time$12 = 0, $s_time$13 = 0, $s_time$14 = 0, $s_time$15 = 0, $s_time$16 = 0, $s_time$17 = 0, $s_time$18 = 0, $s_time$19 = 0, $s_time$2 = 0, $s_time$20 = 0, $s_time$21 = 0, $s_time$22 = 0, $s_time$23 = 0, $s_time$24 = 0, $s_time$25 = 0, $s_time$27 = 0, $s_time$3 = 0, $s_time$4 = 0, $s_time$5 = 0;
       var $s_time$6 = 0, $s_time$9 = 0, $sext = 0, $sp$0 = 0, $sp$0$phi = 0, $sp$1 = 0, $sp$2 = 0, $status$0 = 0, $status$0$phi = 0, $status$1 = 0, $status$2 = 0, $temp25$0 = 0, $temp48$0 = 0, $tmpcast = 0, $x$0 = 0, $x$0$phi = 0, $x$0$pn = 0, $x$0$pn10 = 0, $x$0$pn14 = 0, $x$0$pn4 = 0;
       var $x$0$pn6 = 0, $x$0$pn8 = 0, $y$0 = 0, $y$0$phi = 0, label = 0, sp = 0;
       sp = STACKTOP;
       STACKTOP = STACKTOP + 8|0;
       $s = sp;
       $tmpcast = $s;
       __ZN7Sap_Cpu12set_end_timeEl($this,$end_time);
       $1 = (($this) + 12|0);
       $2 = $1;
       $3 = $2;
       $4 = $3;
       $5 = HEAP32[$4>>2]|0;
       $6 = (($3) + 4)|0;
       $7 = $6;
       $8 = HEAP32[$7>>2]|0;
       $9 = $s;
       $10 = $9;
       HEAP32[$10>>2] = $5;
       $11 = (($9) + 4)|0;
       $12 = $11;
       HEAP32[$12>>2] = $8;
       $13 = (($this) + 8|0);
       HEAP32[$13>>2] = $tmpcast;
       $14 = (($tmpcast) + 4|0);
       $15 = HEAP32[$14>>2]|0;
       $16 = (($this) + 28|0);
       $17 = HEAP32[$16>>2]|0;
       $18 = ($this);
       $19 = HEAP16[$18>>1]|0;
       $20 = $19&65535;
       $21 = (($this) + 2|0);
       $22 = HEAP8[$21]|0;
       $23 = $22&255;
       $24 = (($this) + 3|0);
       $25 = HEAP8[$24]|0;
       $26 = $25&255;
       $27 = (($this) + 4|0);
       $28 = HEAP8[$27]|0;
       $29 = $28&255;
       $30 = (($this) + 6|0);
       $31 = HEAP8[$30]|0;
       $32 = $31&255;
       $33 = (($32) + 1)|0;
       $34 = $33 | 256;
       $35 = (($this) + 5|0);
       $36 = HEAP8[$35]|0;
       $37 = $36&255;
       $38 = $37 & 76;
       $39 = $37 << 8;
       $40 = $37 & 2;
       $41 = $40 | $39;
       $42 = $41 ^ 2;
       $43 = (($this) + 24|0);
       $44 = (($this) + -336|0);
       $45 = $44;
       $46 = (($this) + -336|0);
       $47 = $46;
       $48 = (($this) + -336|0);
       $49 = $48;
       $50 = (($this) + -336|0);
       $51 = $50;
       $52 = (($this) + -336|0);
       $53 = $52;
       $54 = (($this) + -336|0);
       $55 = $54;
       $56 = (($this) + -336|0);
       $57 = $56;
       $58 = (($this) + -336|0);
       $59 = $58;
       $60 = (($this) + -336|0);
       $61 = $60;
       $62 = (($this) + -336|0);
       $63 = $62;
       $64 = (($this) + -336|0);
       $65 = $64;
       $66 = (($this) + -336|0);
       $67 = $66;
       $68 = (($this) + -336|0);
       $69 = $68;
       $70 = (($this) + -336|0);
       $71 = $70;
       $72 = (($this) + -336|0);
       $73 = $72;
       $74 = (($this) + -336|0);
       $75 = $74;
       $76 = (($this) + -336|0);
       $77 = $76;
       $78 = (($this) + -336|0);
       $79 = $78;
       $80 = (($this) + -336|0);
       $81 = $80;
       $82 = (($this) + 20|0);
       $83 = $s;
       $84 = $s;
       $85 = (($this) + 20|0);
       $86 = $s;
       $87 = (($17) + 65534|0);
       $88 = $s;
       $a$0 = $23;$c$0 = $39;$nz$0 = $42;$pc$1 = $20;$s_time$0 = $15;$sp$0 = $34;$status$0 = $38;$x$0 = $26;$y$0 = $29;
       L1: while(1) {
        $90 = $status$0 & 4;
        $91 = ($90|0)!=(0);
        $92 = (($17) + ($pc$1)|0);
        $93 = HEAP8[$92]|0;
        $94 = $93&255;
        $95 = (($pc$1) + 1)|0;
        $96 = (($17) + ($95)|0);
        $97 = (48144 + ($94)|0);
        $98 = HEAP8[$97]|0;
        $99 = $98&255;
        $100 = (($99) + ($s_time$0))|0;
        $101 = ($100|0)<(0);
        $102 = ($100|0)<($99|0);
        $or$cond = $101 | $102;
        if (!($or$cond)) {
         HEAP32[$14>>2] = $s_time$0;
         $105 = ($s_time$0|0)<(0);
         if ($105) {
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $s_time$0;$pc$1$phi = $pc$1;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue;
         } else {
          $illegal_encountered$0$off0 = 0;$s_time$27 = $s_time$0;
          label = 195;
          break;
         }
        }
        $103 = HEAP8[$96]|0;
        $104 = $103&255;
        L6: do {
         switch ($94|0) {
         case 89:  {
          $x$0$pn8 = $y$0;
          label = 96;
          break;
         }
         case 5:  {
          $data$26 = $104;
          label = 103;
          break;
         }
         case 25:  {
          $x$0$pn6 = $y$0;
          label = 105;
          break;
         }
         case 93:  {
          $x$0$pn8 = $x$0;
          label = 96;
          break;
         }
         case 36:  {
          $575 = (($17) + ($104)|0);
          $576 = HEAP8[$575]|0;
          $577 = $576&255;
          $578 = (($pc$1) + 2)|0;
          $579 = $status$0 & -65;
          $580 = $577 & 64;
          $581 = $580 | $579;
          $582 = $577 & $a$0;
          $583 = ($582|0)==(0);
          $584 = $577 << 8;
          $$15 = $583 ? $584 : $577;
          $y$0$phi = $y$0;$x$0$phi = $x$0;$sp$0$phi = $sp$0;$s_time$0$phi = $100;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $$15;$pc$1 = $578;$status$0 = $581;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 113:  {
          $637 = (($17) + ($104)|0);
          $638 = HEAP8[$637]|0;
          $639 = $638&255;
          $640 = (($639) + ($y$0))|0;
          $641 = (($104) + 1)|0;
          $642 = $641 & 255;
          $643 = (($17) + ($642)|0);
          $644 = HEAP8[$643]|0;
          $645 = $644&255;
          $646 = $645 << 8;
          $647 = (($646) + ($640))|0;
          $648 = $640 >>> 8;
          $649 = (($648) + ($100))|0;
          $data$39 = $647;$pc$16 = $95;$s_time$22 = $649;
          label = 127;
          break;
         }
         case 117:  {
          $650 = (($104) + ($x$0))|0;
          $651 = $650 & 255;
          $data$36 = $651;
          label = 123;
          break;
         }
         case 29:  {
          $x$0$pn6 = $x$0;
          label = 105;
          break;
         }
         case 17:  {
          $537 = (($17) + ($104)|0);
          $538 = HEAP8[$537]|0;
          $539 = $538&255;
          $540 = (($539) + ($y$0))|0;
          $541 = (($104) + 1)|0;
          $542 = $541 & 255;
          $543 = (($17) + ($542)|0);
          $544 = HEAP8[$543]|0;
          $545 = $544&255;
          $546 = $545 << 8;
          $547 = (($546) + ($540))|0;
          $548 = $540 >>> 8;
          $549 = (($548) + ($100))|0;
          $data$29 = $547;$pc$12 = $95;$s_time$16 = $549;
          label = 107;
          break;
         }
         case 77:  {
          $data$23 = $104;$s_time$12 = $100;
          label = 97;
          break;
         }
         case 13:  {
          $data$28 = $104;$s_time$15 = $100;
          label = 106;
          break;
         }
         case 109:  {
          $data$38 = $104;$s_time$21 = $100;
          label = 126;
          break;
         }
         case 85:  {
          $509 = (($104) + ($x$0))|0;
          $510 = $509 & 255;
          $data$21 = $510;
          label = 94;
          break;
         }
         case 9:  {
          $data$30 = $104;$pc$13 = $95;$s_time$17 = $100;
          label = 108;
          break;
         }
         case 10:  {
          $683 = $a$0 << 1;
          $684 = $683 & 254;
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $100;$pc$1$phi = $95;$a$0 = $684;$c$0 = $683;$nz$0 = $683;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;
          continue L1;
          break;
         }
         case 42:  {
          $685 = $a$0 << 1;
          $686 = $c$0 >>> 8;
          $687 = $686 & 1;
          $688 = $685 | $687;
          $689 = $688 & 255;
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $100;$pc$1$phi = $95;$a$0 = $689;$c$0 = $685;$nz$0 = $688;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;
          continue L1;
          break;
         }
         case 94:  {
          $690 = (($104) + ($x$0))|0;
          $data$41 = $690;
          label = 134;
          break;
         }
         case 78:  {
          $data$41 = $104;
          label = 134;
          break;
         }
         case 237:  {
          $data$33 = $104;$s_time$18 = $100;
          label = 117;
          break;
         }
         case 241:  {
          $597 = (($17) + ($104)|0);
          $598 = HEAP8[$597]|0;
          $599 = $598&255;
          $600 = (($599) + ($y$0))|0;
          $601 = (($104) + 1)|0;
          $602 = $601 & 255;
          $603 = (($17) + ($602)|0);
          $604 = HEAP8[$603]|0;
          $605 = $604&255;
          $606 = $605 << 8;
          $607 = (($606) + ($600))|0;
          $608 = $600 >>> 8;
          $609 = (($608) + ($100))|0;
          $data$34 = $607;$pc$14 = $95;$s_time$19 = $609;
          label = 118;
          break;
         }
         case 245:  {
          $610 = (($104) + ($x$0))|0;
          $611 = $610 & 255;
          $data$31 = $611;
          label = 114;
          break;
         }
         case 229:  {
          $data$31 = $104;
          label = 114;
          break;
         }
         case 38:  {
          $c$6 = $c$0;$data$49 = $104;
          label = 149;
          break;
         }
         case 202:  {
          $741 = (($x$0) + -1)|0;
          $742 = $741 & 255;
          $y$0$phi = $y$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $100;$pc$1$phi = $95;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $741;$x$0 = $742;$y$0 = $y$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 136:  {
          $743 = (($y$0) + -1)|0;
          $744 = $743 & 255;
          $x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $100;$pc$1$phi = $95;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $743;$y$0 = $744;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 246:  {
          $745 = (($104) + ($x$0))|0;
          $746 = $745 & 255;
          $data$52 = $746;$nz$2 = 1;
          label = 155;
          break;
         }
         case 214:  {
          $747 = (($104) + ($x$0))|0;
          $748 = $747 & 255;
          $data$51 = $748;
          label = 154;
          break;
         }
         case 198:  {
          $data$51 = $104;
          label = 154;
          break;
         }
         case 230:  {
          $data$52 = $104;$nz$2 = 1;
          label = 155;
          break;
         }
         case 106:  {
          $c$1 = $c$0;
          label = 130;
          break;
         }
         case 44:  {
          $566 = (__Z8get_le16PKv($96)|0);
          $567 = (($pc$1) + 3)|0;
          $568 = $status$0 & -65;
          $569 = (__ZN7Sap_Emu8cpu_readEj($69,$566)|0);
          $570 = $569 & 64;
          $571 = $570 | $568;
          $572 = $569 & $a$0;
          $573 = ($572|0)==(0);
          $574 = $569 << 8;
          $$ = $573 ? $574 : $569;
          $y$0$phi = $y$0;$x$0$phi = $x$0;$sp$0$phi = $sp$0;$s_time$0$phi = $100;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $$;$pc$1 = $567;$status$0 = $571;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 21:  {
          $550 = (($104) + ($x$0))|0;
          $551 = $550 & 255;
          $data$26 = $551;
          label = 103;
          break;
         }
         case 101:  {
          $data$36 = $104;
          label = 123;
          break;
         }
         case 125:  {
          $x$0$pn = $x$0;
          label = 125;
          break;
         }
         case 225:  {
          $585 = (($104) + ($x$0))|0;
          $586 = (($585) + 1)|0;
          $587 = $586 & 255;
          $588 = (($17) + ($587)|0);
          $589 = HEAP8[$588]|0;
          $590 = $589&255;
          $591 = $590 << 8;
          $592 = $585 & 255;
          $593 = (($17) + ($592)|0);
          $594 = HEAP8[$593]|0;
          $595 = $594&255;
          $596 = $591 | $595;
          $data$34 = $596;$pc$14 = $95;$s_time$19 = $100;
          label = 118;
          break;
         }
         case 253:  {
          $x$0$pn4 = $x$0;
          label = 116;
          break;
         }
         case 249:  {
          $x$0$pn4 = $y$0;
          label = 116;
          break;
         }
         case 102:  {
          $c$5 = $c$0;$data$47 = $104;
          label = 145;
          break;
         }
         case 54:  {
          $730 = (($104) + ($x$0))|0;
          $731 = $730 & 255;
          $c$6 = $c$0;$data$49 = $731;
          label = 149;
          break;
         }
         case 22:  {
          $732 = (($104) + ($x$0))|0;
          $733 = $732 & 255;
          $data$48 = $733;
          label = 148;
          break;
         }
         case 6:  {
          $data$48 = $104;
          label = 148;
          break;
         }
         case 121:  {
          $x$0$pn = $y$0;
          label = 125;
          break;
         }
         case 81:  {
          $496 = (($17) + ($104)|0);
          $497 = HEAP8[$496]|0;
          $498 = $497&255;
          $499 = (($498) + ($y$0))|0;
          $500 = (($104) + 1)|0;
          $501 = $500 & 255;
          $502 = (($17) + ($501)|0);
          $503 = HEAP8[$502]|0;
          $504 = $503&255;
          $505 = $504 << 8;
          $506 = (($505) + ($499))|0;
          $507 = $499 >>> 8;
          $508 = (($507) + ($100))|0;
          $data$24 = $506;$pc$10 = $95;$s_time$13 = $508;
          label = 98;
          break;
         }
         case 69:  {
          $data$21 = $104;
          label = 94;
          break;
         }
         case 74:  {
          $c$1 = 0;
          label = 130;
          break;
         }
         case 105:  {
          $data$40 = $104;$pc$17 = $95;$s_time$23 = $100;
          break;
         }
         case 110:  {
          $c$2 = $c$0;$data$42 = $104;
          label = 135;
          break;
         }
         case 62:  {
          $702 = (($104) + ($x$0))|0;
          $c$3 = $c$0;$data$44 = $702;
          label = 139;
          break;
         }
         case 30:  {
          $703 = (($104) + ($x$0))|0;
          $data$43 = $703;
          label = 138;
          break;
         }
         case 14:  {
          $data$43 = $104;
          label = 138;
          break;
         }
         case 46:  {
          $c$3 = $c$0;$data$44 = $104;
          label = 139;
          break;
         }
         case 126:  {
          $717 = (($104) + ($x$0))|0;
          $c$2 = $c$0;$data$42 = $717;
          label = 135;
          break;
         }
         case 118:  {
          $718 = (($104) + ($x$0))|0;
          $719 = $718 & 255;
          $c$5 = $c$0;$data$47 = $719;
          label = 145;
          break;
         }
         case 86:  {
          $720 = (($104) + ($x$0))|0;
          $721 = $720 & 255;
          $data$46 = $721;
          label = 144;
          break;
         }
         case 70:  {
          $data$46 = $104;
          label = 144;
          break;
         }
         case 235: case 233:  {
          $data$35 = $104;$pc$15 = $95;$s_time$20 = $100;
          label = 119;
          break;
         }
         case 97:  {
          $625 = (($104) + ($x$0))|0;
          $626 = (($625) + 1)|0;
          $627 = $626 & 255;
          $628 = (($17) + ($627)|0);
          $629 = HEAP8[$628]|0;
          $630 = $629&255;
          $631 = $630 << 8;
          $632 = $625 & 255;
          $633 = (($17) + ($632)|0);
          $634 = HEAP8[$633]|0;
          $635 = $634&255;
          $636 = $631 | $635;
          $data$39 = $636;$pc$16 = $95;$s_time$22 = $100;
          label = 127;
          break;
         }
         case 1:  {
          $525 = (($104) + ($x$0))|0;
          $526 = (($525) + 1)|0;
          $527 = $526 & 255;
          $528 = (($17) + ($527)|0);
          $529 = HEAP8[$528]|0;
          $530 = $529&255;
          $531 = $530 << 8;
          $532 = $525 & 255;
          $533 = (($17) + ($532)|0);
          $534 = HEAP8[$533]|0;
          $535 = $534&255;
          $536 = $531 | $535;
          $data$29 = $536;$pc$12 = $95;$s_time$16 = $100;
          label = 107;
          break;
         }
         case 73:  {
          $data$25 = $104;$pc$11 = $95;$s_time$14 = $100;
          label = 99;
          break;
         }
         case 254:  {
          $756 = (__Z8get_le16PKv($96)|0);
          $757 = (($756) + ($x$0))|0;
          $data$56 = $757;$nz$4 = 1;
          label = 161;
          break;
         }
         case 238:  {
          $758 = (__Z8get_le16PKv($96)|0);
          $data$56 = $758;$nz$4 = 1;
          label = 161;
          break;
         }
         case 222:  {
          $759 = (__Z8get_le16PKv($96)|0);
          $760 = (($759) + ($x$0))|0;
          $data$56 = $760;$nz$4 = -1;
          label = 161;
          break;
         }
         case 206:  {
          $761 = (__Z8get_le16PKv($96)|0);
          $data$56 = $761;$nz$4 = -1;
          label = 161;
          break;
         }
         case 170:  {
          $y$0$phi = $y$0;$x$0$phi = $a$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $100;$pc$1$phi = $95;$nz$0$phi = $a$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 138:  {
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $100;$pc$1$phi = $95;$nz$0$phi = $x$0;$c$0$phi = $c$0;$a$0$phi = $x$0;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 154:  {
          $767 = (($x$0) + 1)|0;
          $768 = $767 | 256;
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$s_time$0$phi = $100;$pc$1$phi = $95;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$sp$0 = $768;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 186:  {
          $769 = (($sp$0) + 255)|0;
          $770 = $769 & 255;
          $y$0$phi = $y$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $100;$pc$1$phi = $95;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $770;$x$0 = $770;$y$0 = $y$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 72:  {
          $771 = (($sp$0) + -1)|0;
          $772 = $771 | 256;
          $773 = $a$0&255;
          $774 = (($17) + ($772)|0);
          HEAP8[$774] = $773;
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$s_time$0$phi = $100;$pc$1$phi = $95;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$sp$0 = $772;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 104:  {
          $775 = (($17) + ($sp$0)|0);
          $776 = HEAP8[$775]|0;
          $777 = $776&255;
          $778 = (($sp$0) + -255)|0;
          $779 = $778 | 256;
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$s_time$0$phi = $100;$pc$1$phi = $95;$c$0$phi = $c$0;$a$0 = $777;$nz$0 = $777;$sp$0 = $779;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$c$0 = $c$0$phi;
          continue L1;
          break;
         }
         case 64:  {
          $780 = (($17) + ($sp$0)|0);
          $781 = HEAP8[$780]|0;
          $782 = $781&255;
          $783 = (($sp$0) + -255)|0;
          $784 = $783 | 256;
          $785 = (($17) + ($784)|0);
          $786 = HEAP8[$785]|0;
          $787 = $786&255;
          $788 = (($sp$0) + -254)|0;
          $789 = $788 | 256;
          $790 = (($17) + ($789)|0);
          $791 = HEAP8[$790]|0;
          $792 = $791&255;
          $793 = $792 << 8;
          $794 = $793 | $787;
          $795 = (($sp$0) + -253)|0;
          $796 = $795 | 256;
          $797 = $782 & 76;
          $798 = $782 << 8;
          $799 = $782 & 2;
          $800 = $799 | $798;
          $801 = $800 ^ 2;
          $802 = $797&255;
          HEAP8[$35] = $802;
          $803 = $782 ^ $status$0;
          $804 = $803 & 4;
          $805 = ($804|0)==(0);
          if ($805) {
           $y$0$phi = $y$0;$x$0$phi = $x$0;$s_time$0$phi = $100;$a$0$phi = $a$0;$c$0 = $798;$nz$0 = $801;$pc$1 = $794;$sp$0 = $796;$status$0 = $797;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$s_time$0 = $s_time$0$phi;$a$0 = $a$0$phi;
           continue L1;
          }
          $806 = HEAP32[$43>>2]|0;
          $807 = $782 & 4;
          $808 = ($807|0)==(0);
          if ($808) {
           $809 = HEAP32[$82>>2]|0;
           $810 = ($806|0)>($809|0);
           $$16 = $810 ? $809 : $806;
           $new_time$0 = $$16;
          } else {
           $new_time$0 = $806;
          }
          $811 = HEAP32[$83>>2]|0;
          HEAP32[$83>>2] = $new_time$0;
          $812 = (($100) - ($new_time$0))|0;
          $813 = (($812) + ($811))|0;
          $y$0$phi = $y$0;$x$0$phi = $x$0;$a$0$phi = $a$0;$c$0 = $798;$nz$0 = $801;$pc$1 = $794;$s_time$0 = $813;$sp$0 = $796;$status$0 = $797;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 40:  {
          $814 = (($17) + ($sp$0)|0);
          $815 = HEAP8[$814]|0;
          $816 = $815&255;
          $817 = (($sp$0) + -255)|0;
          $818 = $817 | 256;
          $819 = $816 ^ $status$0;
          $820 = $816 & 76;
          $821 = $816 << 8;
          $822 = $816 & 2;
          $823 = $822 | $821;
          $824 = $823 ^ 2;
          $825 = $819 & 4;
          $826 = ($825|0)==(0);
          if ($826) {
           $y$0$phi = $y$0;$x$0$phi = $x$0;$s_time$0$phi = $100;$pc$1$phi = $95;$a$0$phi = $a$0;$c$0 = $821;$nz$0 = $824;$sp$0 = $818;$status$0 = $820;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$a$0 = $a$0$phi;
           continue L1;
          }
          $827 = $816 & 4;
          $828 = ($827|0)==(0);
          if ($828) {
           $c$8 = $821;$nz$5 = $824;$sp$1 = $818;$status$1 = $820;
           label = 183;
          } else {
           $c$9 = $821;$nz$6 = $824;$sp$2 = $818;$status$2 = $820;
           label = 189;
          }
          break;
         }
         case 8:  {
          $829 = $status$0 & 76;
          $830 = $nz$0 >>> 8;
          $831 = $830 | $nz$0;
          $832 = $831 & 128;
          $833 = $829 | $832;
          $834 = $c$0 >>> 8;
          $835 = $834 & 1;
          $836 = $833 | $835;
          $837 = $nz$0 & 255;
          $838 = ($837|0)==(0);
          $839 = $836 | 2;
          $$17 = $838 ? $839 : $836;
          $840 = (($sp$0) + -1)|0;
          $841 = $840 | 256;
          $842 = $$17 | 48;
          $843 = $842&255;
          $844 = (($17) + ($841)|0);
          HEAP8[$844] = $843;
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$s_time$0$phi = $100;$pc$1$phi = $95;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$sp$0 = $841;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 56:  {
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $100;$pc$1$phi = $95;$nz$0$phi = $nz$0;$a$0$phi = $a$0;$c$0 = -1;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$nz$0 = $nz$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 108:  {
          $845 = (__Z8get_le16PKv($96)|0);
          $846 = (($17) + ($845)|0);
          $847 = HEAP8[$846]|0;
          $848 = $847&255;
          $849 = $845 & 65280;
          $850 = (($845) + 1)|0;
          $851 = $850 & 255;
          $852 = $851 | $849;
          $853 = (($17) + ($852)|0);
          $854 = HEAP8[$853]|0;
          $855 = $854&255;
          $856 = $855 << 8;
          $857 = $856 | $848;
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $100;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $857;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 24:  {
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $100;$pc$1$phi = $95;$nz$0$phi = $nz$0;$a$0$phi = $a$0;$c$0 = 0;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$nz$0 = $nz$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 184:  {
          $858 = $status$0 & -65;
          $y$0$phi = $y$0;$x$0$phi = $x$0;$sp$0$phi = $sp$0;$s_time$0$phi = $100;$pc$1$phi = $95;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$status$0 = $858;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 216:  {
          $859 = $status$0 & -9;
          $y$0$phi = $y$0;$x$0$phi = $x$0;$sp$0$phi = $sp$0;$s_time$0$phi = $100;$pc$1$phi = $95;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$status$0 = $859;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 248:  {
          $860 = $status$0 | 8;
          $y$0$phi = $y$0;$x$0$phi = $x$0;$sp$0$phi = $sp$0;$s_time$0$phi = $100;$pc$1$phi = $95;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$status$0 = $860;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 88:  {
          if (!($91)) {
           $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $100;$pc$1$phi = $95;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
           continue L1;
          }
          $861 = $status$0 & -5;
          $c$8 = $c$0;$nz$5 = $nz$0;$sp$1 = $sp$0;$status$1 = $861;
          label = 183;
          break;
         }
         case 120:  {
          if ($91) {
           $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $100;$pc$1$phi = $95;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
           continue L1;
          }
          $872 = $status$0 | 4;
          $c$9 = $c$0;$nz$6 = $nz$0;$sp$2 = $sp$0;$status$2 = $872;
          label = 189;
          break;
         }
         case 252: case 220: case 124: case 92: case 60: case 28:  {
          $878 = (($104) + ($x$0))|0;
          $879 = $878 >>> 8;
          $880 = (($879) + ($100))|0;
          $s_time$24 = $880;
          label = 191;
          break;
         }
         case 12:  {
          $s_time$24 = $100;
          label = 191;
          break;
         }
         case 244: case 226: case 212: case 194: case 137: case 130: case 128: case 100: case 84: case 68: case 52: case 20: case 4: case 116:  {
          $pc$19 = $95;$s_time$25 = $100;
          label = 192;
          break;
         }
         case 0:  {
          $883 = ($pc$1>>>0)>(65278);
          if ($883) {
           $illegal_encountered$0$off0 = 0;$s_time$27 = $100;
           label = 195;
           break L1;
          }
          $884 = (($pc$1) + 2)|0;
          $885 = $884 >>> 8;
          $886 = $885&255;
          $887 = (($sp$0) + -1)|0;
          $888 = $887 | 256;
          $889 = (($17) + ($888)|0);
          HEAP8[$889] = $886;
          $890 = $884&255;
          $891 = (($sp$0) + -2)|0;
          $892 = $891 | 256;
          $893 = (($17) + ($892)|0);
          HEAP8[$893] = $890;
          $894 = (__Z8get_le16PKv($87)|0);
          $895 = (($sp$0) + -3)|0;
          $896 = $895 | 256;
          $897 = $status$0 & 76;
          $898 = $nz$0 >>> 8;
          $899 = $898 | $nz$0;
          $900 = $899 & 128;
          $901 = $897 | $900;
          $902 = $c$0 >>> 8;
          $903 = $902 & 1;
          $904 = $901 | $903;
          $905 = $nz$0 & 255;
          $906 = ($905|0)==(0);
          $907 = $904 | 2;
          $temp48$0 = $906 ? $907 : $904;
          $908 = $temp48$0 | 48;
          $909 = $908&255;
          $910 = (($17) + ($896)|0);
          HEAP8[$910] = $909;
          $911 = $status$0 & -13;
          $912 = $911 | 4;
          $913 = $912&255;
          HEAP8[$35] = $913;
          $914 = HEAP32[$88>>2]|0;
          $915 = HEAP32[$43>>2]|0;
          HEAP32[$88>>2] = $915;
          $916 = (($100) + 7)|0;
          $917 = (($916) + ($914))|0;
          $918 = (($917) - ($915))|0;
          $y$0$phi = $y$0;$x$0$phi = $x$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $894;$s_time$0 = $918;$sp$0 = $896;$status$0 = $912;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 250: case 218: case 122: case 90: case 58: case 26: case 234:  {
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $100;$pc$1$phi = $95;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 181:  {
          $106 = (($104) + ($x$0))|0;
          $107 = $106 & 255;
          $108 = (($17) + ($107)|0);
          $109 = HEAP8[$108]|0;
          $110 = $109&255;
          $111 = (($pc$1) + 2)|0;
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $100;$c$0$phi = $c$0;$a$0 = $110;$nz$0 = $110;$pc$1 = $111;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$c$0 = $c$0$phi;
          continue L1;
          break;
         }
         case 165:  {
          $112 = (($17) + ($104)|0);
          $113 = HEAP8[$112]|0;
          $114 = $113&255;
          $115 = (($pc$1) + 2)|0;
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $100;$c$0$phi = $c$0;$a$0 = $114;$nz$0 = $114;$pc$1 = $115;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$c$0 = $c$0$phi;
          continue L1;
          break;
         }
         case 208:  {
          $116 = $103 << 24 >> 24;
          $117 = (($pc$1) + 2)|0;
          $118 = $nz$0&255;
          $119 = ($118<<24>>24)==(0);
          if ($119) {
           $pc$0 = $117;
           label = 2;
           break L6;
          }
          $120 = $117 & 255;
          $121 = (($116) + ($120))|0;
          $122 = (($116) + ($117))|0;
          $123 = $121 >>> 8;
          $124 = $123 & 1;
          $125 = (($124) + ($100))|0;
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $122;$s_time$0 = $125;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 76:  {
          $137 = (__Z8get_le16PKv($96)|0);
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $100;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $137;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 32:  {
          $126 = (($pc$1) + 2)|0;
          $127 = (__Z8get_le16PKv($96)|0);
          $128 = $126 >>> 8;
          $129 = $128&255;
          $130 = (($sp$0) + -1)|0;
          $131 = $130 | 256;
          $132 = (($17) + ($131)|0);
          HEAP8[$132] = $129;
          $133 = (($sp$0) + -2)|0;
          $134 = $133 | 256;
          $135 = $126&255;
          $136 = (($17) + ($134)|0);
          HEAP8[$136] = $135;
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$s_time$0$phi = $100;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $127;$sp$0 = $134;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$s_time$0 = $s_time$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 232:  {
          $138 = (($x$0) + 1)|0;
          $139 = $138 & 255;
          $y$0$phi = $y$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $100;$pc$1$phi = $95;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $138;$x$0 = $139;$y$0 = $y$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 16:  {
          $140 = $103 << 24 >> 24;
          $141 = (($pc$1) + 2)|0;
          $142 = $nz$0 & 32896;
          $143 = ($142|0)==(0);
          if (!($143)) {
           $pc$0 = $141;
           label = 2;
           break L6;
          }
          $144 = $141 & 255;
          $145 = (($140) + ($144))|0;
          $146 = (($140) + ($141))|0;
          $147 = $145 >>> 8;
          $148 = $147 & 1;
          $149 = (($148) + ($100))|0;
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $146;$s_time$0 = $149;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 193:  {
          $150 = (($104) + ($x$0))|0;
          $151 = (($150) + 1)|0;
          $152 = $151 & 255;
          $153 = (($17) + ($152)|0);
          $154 = HEAP8[$153]|0;
          $155 = $154&255;
          $156 = $155 << 8;
          $157 = $150 & 255;
          $158 = (($17) + ($157)|0);
          $159 = HEAP8[$158]|0;
          $160 = $159&255;
          $161 = $156 | $160;
          $data$3 = $161;$pc$2 = $95;$s_time$2 = $100;
          label = 22;
          break;
         }
         case 209:  {
          $162 = (($17) + ($104)|0);
          $163 = HEAP8[$162]|0;
          $164 = $163&255;
          $165 = (($164) + ($y$0))|0;
          $166 = (($104) + 1)|0;
          $167 = $166 & 255;
          $168 = (($17) + ($167)|0);
          $169 = HEAP8[$168]|0;
          $170 = $169&255;
          $171 = $170 << 8;
          $172 = (($171) + ($165))|0;
          $173 = $165 >>> 8;
          $174 = (($173) + ($100))|0;
          $data$3 = $172;$pc$2 = $95;$s_time$2 = $174;
          label = 22;
          break;
         }
         case 213:  {
          $175 = (($104) + ($x$0))|0;
          $176 = $175 & 255;
          $data$0 = $176;
          label = 18;
          break;
         }
         case 197:  {
          $data$0 = $104;
          label = 18;
          break;
         }
         case 221:  {
          $x$0$pn14 = $x$0;
          label = 20;
          break;
         }
         case 217:  {
          $x$0$pn14 = $y$0;
          label = 20;
          break;
         }
         case 205:  {
          $data$2 = $104;$s_time$1 = $100;
          label = 21;
          break;
         }
         case 201:  {
          $data$4 = $104;$pc$3 = $95;$s_time$3 = $100;
          label = 23;
          break;
         }
         case 48:  {
          $193 = $103 << 24 >> 24;
          $194 = (($pc$1) + 2)|0;
          $195 = $nz$0 & 32896;
          $196 = ($195|0)==(0);
          if ($196) {
           $pc$0 = $194;
           label = 2;
           break L6;
          }
          $197 = $194 & 255;
          $198 = (($193) + ($197))|0;
          $199 = (($193) + ($194))|0;
          $200 = $198 >>> 8;
          $201 = $200 & 1;
          $202 = (($201) + ($100))|0;
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $199;$s_time$0 = $202;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 240:  {
          $203 = $103 << 24 >> 24;
          $204 = (($pc$1) + 2)|0;
          $205 = $nz$0&255;
          $206 = ($205<<24>>24)==(0);
          if (!($206)) {
           $pc$0 = $204;
           label = 2;
           break L6;
          }
          $207 = $204 & 255;
          $208 = (($203) + ($207))|0;
          $209 = (($203) + ($204))|0;
          $210 = $208 >>> 8;
          $211 = $210 & 1;
          $212 = (($211) + ($100))|0;
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $209;$s_time$0 = $212;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 149:  {
          $213 = (($104) + ($x$0))|0;
          $214 = $213 & 255;
          $data$5 = $214;
          label = 29;
          break;
         }
         case 133:  {
          $data$5 = $104;
          label = 29;
          break;
         }
         case 200:  {
          $218 = (($y$0) + 1)|0;
          $219 = $218 & 255;
          $x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $100;$pc$1$phi = $95;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $218;$y$0 = $219;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 168:  {
          $y$0$phi = $a$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $100;$pc$1$phi = $95;$nz$0$phi = $a$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 152:  {
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $100;$pc$1$phi = $95;$nz$0$phi = $y$0;$c$0$phi = $c$0;$a$0$phi = $y$0;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 173:  {
          $220 = (__Z8get_le16PKv($96)|0);
          $221 = (($pc$1) + 3)|0;
          $222 = (__ZN7Sap_Emu8cpu_readEj($47,$220)|0);
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $100;$c$0$phi = $c$0;$a$0 = $222;$nz$0 = $222;$pc$1 = $221;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$c$0 = $c$0$phi;
          continue L1;
          break;
         }
         case 96:  {
          $223 = (($17) + ($sp$0)|0);
          $224 = HEAP8[$223]|0;
          $225 = $224&255;
          $226 = (($225) + 1)|0;
          $227 = (($sp$0) + -255)|0;
          $228 = $227 | 256;
          $229 = (($17) + ($228)|0);
          $230 = HEAP8[$229]|0;
          $231 = $230&255;
          $232 = $231 << 8;
          $233 = (($226) + ($232))|0;
          $234 = (($sp$0) + -254)|0;
          $235 = $234 | 256;
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$s_time$0$phi = $100;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $233;$sp$0 = $235;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$s_time$0 = $s_time$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 153:  {
          $236 = (__Z8get_le16PKv($96)|0);
          $237 = (($236) + ($y$0))|0;
          $238 = (($pc$1) + 3)|0;
          $239 = ($237>>>0)<(2048);
          if (!($239)) {
           $addr10$0 = $237;$pc$4 = $238;
           label = 41;
           break L6;
          }
          $240 = $a$0&255;
          $241 = (($17) + ($237)|0);
          HEAP8[$241] = $240;
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $100;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $238;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 141:  {
          $242 = (__Z8get_le16PKv($96)|0);
          $243 = (($pc$1) + 3)|0;
          $244 = ($242>>>0)<(2048);
          if (!($244)) {
           $addr10$0 = $242;$pc$4 = $243;
           label = 41;
           break L6;
          }
          $245 = $a$0&255;
          $246 = (($17) + ($242)|0);
          HEAP8[$246] = $245;
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $100;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $243;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 157:  {
          $247 = (__Z8get_le16PKv($96)|0);
          $248 = (($247) + ($x$0))|0;
          $249 = (($pc$1) + 3)|0;
          $250 = ($248>>>0)<(2048);
          if (!($250)) {
           $addr10$0 = $248;$pc$4 = $249;
           label = 41;
           break L6;
          }
          $251 = $a$0&255;
          $252 = (($17) + ($248)|0);
          HEAP8[$252] = $251;
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $100;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $249;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 145:  {
          $254 = (($17) + ($104)|0);
          $255 = HEAP8[$254]|0;
          $256 = $255&255;
          $257 = (($256) + ($y$0))|0;
          $258 = (($104) + 1)|0;
          $259 = $258 & 255;
          $260 = (($17) + ($259)|0);
          $261 = HEAP8[$260]|0;
          $262 = $261&255;
          $263 = $262 << 8;
          $264 = (($257) + ($263))|0;
          $265 = (($pc$1) + 2)|0;
          $addr10$0 = $264;$pc$4 = $265;
          label = 41;
          break;
         }
         case 129:  {
          $266 = (($104) + ($x$0))|0;
          $267 = (($266) + 1)|0;
          $268 = $267 & 255;
          $269 = (($17) + ($268)|0);
          $270 = HEAP8[$269]|0;
          $271 = $270&255;
          $272 = $271 << 8;
          $273 = $266 & 255;
          $274 = (($17) + ($273)|0);
          $275 = HEAP8[$274]|0;
          $276 = $275&255;
          $277 = $272 | $276;
          $278 = (($pc$1) + 2)|0;
          $addr10$0 = $277;$pc$4 = $278;
          label = 41;
          break;
         }
         case 169:  {
          $279 = (($pc$1) + 2)|0;
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $100;$c$0$phi = $c$0;$a$0 = $104;$nz$0 = $104;$pc$1 = $279;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$c$0 = $c$0$phi;
          continue L1;
          break;
         }
         case 161:  {
          $280 = (($104) + ($x$0))|0;
          $281 = (($280) + 1)|0;
          $282 = $281 & 255;
          $283 = (($17) + ($282)|0);
          $284 = HEAP8[$283]|0;
          $285 = $284&255;
          $286 = $285 << 8;
          $287 = $280 & 255;
          $288 = (($17) + ($287)|0);
          $289 = HEAP8[$288]|0;
          $290 = $289&255;
          $291 = $286 | $290;
          $292 = (($pc$1) + 2)|0;
          $addr13$0 = $291;$pc$5 = $292;$s_time$4 = $100;
          label = 49;
          break;
         }
         case 177:  {
          $293 = (($17) + ($104)|0);
          $294 = HEAP8[$293]|0;
          $295 = $294&255;
          $296 = (($295) + ($y$0))|0;
          $297 = $296 >>> 8;
          $298 = (($297) + ($100))|0;
          $299 = (($104) + 1)|0;
          $300 = $299 & 255;
          $301 = (($17) + ($300)|0);
          $302 = HEAP8[$301]|0;
          $303 = $302&255;
          $304 = $303 << 8;
          $305 = (($304) + ($296))|0;
          $306 = (($pc$1) + 2)|0;
          $307 = (($17) + ($305)|0);
          $308 = HEAP8[$307]|0;
          $309 = $308&255;
          $310 = $305 ^ 32768;
          $311 = ($310>>>0)<(40960);
          if ($311) {
           $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0 = $309;$nz$0 = $309;$pc$1 = $306;$s_time$0 = $298;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;
           continue L1;
          } else {
           $addr13$0 = $305;$pc$5 = $306;$s_time$4 = $298;
           label = 49;
          }
          break;
         }
         case 185:  {
          $312 = (($104) + ($y$0))|0;
          $313 = $312 >>> 8;
          $314 = (($313) + ($100))|0;
          $315 = (__Z8get_le16PKv($96)|0);
          $316 = (($315) + ($y$0))|0;
          $317 = (($pc$1) + 3)|0;
          $318 = (($17) + ($316)|0);
          $319 = HEAP8[$318]|0;
          $320 = $319&255;
          $321 = $316 ^ 32768;
          $322 = ($321>>>0)<(40960);
          if ($322) {
           $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0 = $320;$nz$0 = $320;$pc$1 = $317;$s_time$0 = $314;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;
           continue L1;
          } else {
           $addr13$0 = $316;$pc$5 = $317;$s_time$4 = $314;
           label = 49;
          }
          break;
         }
         case 189:  {
          $323 = (($104) + ($x$0))|0;
          $324 = $323 >>> 8;
          $325 = (($324) + ($100))|0;
          $326 = (__Z8get_le16PKv($96)|0);
          $327 = (($326) + ($x$0))|0;
          $328 = (($pc$1) + 3)|0;
          $329 = (($17) + ($327)|0);
          $330 = HEAP8[$329]|0;
          $331 = $330&255;
          $332 = $327 ^ 32768;
          $333 = ($332>>>0)<(40960);
          if ($333) {
           $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0 = $331;$nz$0 = $331;$pc$1 = $328;$s_time$0 = $325;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;
           continue L1;
          } else {
           $addr13$0 = $327;$pc$5 = $328;$s_time$4 = $325;
           label = 49;
          }
          break;
         }
         case 80:  {
          $335 = $103 << 24 >> 24;
          $336 = (($pc$1) + 2)|0;
          $337 = $status$0 & 64;
          $338 = ($337|0)==(0);
          if (!($338)) {
           $pc$0 = $336;
           label = 2;
           break L6;
          }
          $339 = $336 & 255;
          $340 = (($335) + ($339))|0;
          $341 = (($335) + ($336))|0;
          $342 = $340 >>> 8;
          $343 = $342 & 1;
          $344 = (($343) + ($100))|0;
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $341;$s_time$0 = $344;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 112:  {
          $345 = $103 << 24 >> 24;
          $346 = (($pc$1) + 2)|0;
          $347 = $status$0 & 64;
          $348 = ($347|0)==(0);
          if ($348) {
           $pc$0 = $346;
           label = 2;
           break L6;
          }
          $349 = $346 & 255;
          $350 = (($345) + ($349))|0;
          $351 = (($345) + ($346))|0;
          $352 = $350 >>> 8;
          $353 = $352 & 1;
          $354 = (($353) + ($100))|0;
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $351;$s_time$0 = $354;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 176:  {
          $355 = $103 << 24 >> 24;
          $356 = (($pc$1) + 2)|0;
          $357 = $c$0 & 256;
          $358 = ($357|0)==(0);
          if ($358) {
           $pc$0 = $356;
           label = 2;
           break L6;
          }
          $359 = $356 & 255;
          $360 = (($355) + ($359))|0;
          $361 = (($355) + ($356))|0;
          $362 = $360 >>> 8;
          $363 = $362 & 1;
          $364 = (($363) + ($100))|0;
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $361;$s_time$0 = $364;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 144:  {
          $365 = $103 << 24 >> 24;
          $366 = (($pc$1) + 2)|0;
          $367 = $c$0 & 256;
          $368 = ($367|0)==(0);
          if (!($368)) {
           $pc$0 = $366;
           label = 2;
           break L6;
          }
          $369 = $366 & 255;
          $370 = (($365) + ($369))|0;
          $371 = (($365) + ($366))|0;
          $372 = $370 >>> 8;
          $373 = $372 & 1;
          $374 = (($373) + ($100))|0;
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $371;$s_time$0 = $374;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue L1;
          break;
         }
         case 148:  {
          $375 = (($104) + ($x$0))|0;
          $376 = $375 & 255;
          $data$6 = $376;
          label = 59;
          break;
         }
         case 132:  {
          $data$6 = $104;
          label = 59;
          break;
         }
         case 150:  {
          $380 = (($104) + ($y$0))|0;
          $381 = $380 & 255;
          $data$7 = $381;
          label = 61;
          break;
         }
         case 134:  {
          $data$7 = $104;
          label = 61;
          break;
         }
         case 182:  {
          $385 = (($104) + ($y$0))|0;
          $386 = $385 & 255;
          $data$8 = $386;
          label = 63;
          break;
         }
         case 166:  {
          $data$8 = $104;
          label = 63;
          break;
         }
         case 162:  {
          $data$9 = $104;
          label = 64;
          break;
         }
         case 180:  {
          $391 = (($104) + ($x$0))|0;
          $392 = $391 & 255;
          $data$10 = $392;
          label = 66;
          break;
         }
         case 164:  {
          $data$10 = $104;
          label = 66;
          break;
         }
         case 160:  {
          $data$11 = $104;
          label = 67;
          break;
         }
         case 188:  {
          $397 = (($104) + ($x$0))|0;
          $398 = $397 >>> 8;
          $399 = (($398) + ($100))|0;
          $data$12 = $397;$s_time$5 = $399;
          label = 69;
          break;
         }
         case 172:  {
          $data$12 = $104;$s_time$5 = $100;
          label = 69;
          break;
         }
         case 190:  {
          $407 = (($104) + ($y$0))|0;
          $408 = $407 >>> 8;
          $409 = (($408) + ($100))|0;
          $data$13 = $407;$s_time$6 = $409;
          label = 71;
          break;
         }
         case 142:  {
          $temp25$0 = $x$0;
          label = 73;
          break;
         }
         case 174:  {
          $data$13 = $104;$s_time$6 = $100;
          label = 71;
          break;
         }
         case 140:  {
          $temp25$0 = $y$0;
          label = 73;
          break;
         }
         case 236:  {
          $423 = (__Z8get_le16PKv($96)|0);
          $424 = (($pc$1) + 2)|0;
          HEAP32[$14>>2] = $100;
          $425 = (__ZN7Sap_Emu8cpu_readEj($59,$423)|0);
          $data$14 = $425;$pc$6 = $424;
          label = 78;
          break;
         }
         case 228:  {
          $426 = (($17) + ($104)|0);
          $427 = HEAP8[$426]|0;
          $428 = $427&255;
          $data$14 = $428;$pc$6 = $95;
          label = 78;
          break;
         }
         case 224:  {
          $data$14 = $104;$pc$6 = $95;
          label = 78;
          break;
         }
         case 204:  {
          $433 = (__Z8get_le16PKv($96)|0);
          $434 = (($pc$1) + 2)|0;
          HEAP32[$14>>2] = $100;
          $435 = (__ZN7Sap_Emu8cpu_readEj($61,$433)|0);
          $data$15 = $435;$pc$7 = $434;
          label = 81;
          break;
         }
         case 196:  {
          $436 = (($17) + ($104)|0);
          $437 = HEAP8[$436]|0;
          $438 = $437&255;
          $data$15 = $438;$pc$7 = $95;
          label = 81;
          break;
         }
         case 192:  {
          $data$15 = $104;$pc$7 = $95;
          label = 81;
          break;
         }
         case 33:  {
          $443 = (($104) + ($x$0))|0;
          $444 = (($443) + 1)|0;
          $445 = $444 & 255;
          $446 = (($17) + ($445)|0);
          $447 = HEAP8[$446]|0;
          $448 = $447&255;
          $449 = $448 << 8;
          $450 = $443 & 255;
          $451 = (($17) + ($450)|0);
          $452 = HEAP8[$451]|0;
          $453 = $452&255;
          $454 = $449 | $453;
          $data$19 = $454;$pc$8 = $95;$s_time$10 = $100;
          label = 89;
          break;
         }
         case 49:  {
          $455 = (($17) + ($104)|0);
          $456 = HEAP8[$455]|0;
          $457 = $456&255;
          $458 = (($457) + ($y$0))|0;
          $459 = (($104) + 1)|0;
          $460 = $459 & 255;
          $461 = (($17) + ($460)|0);
          $462 = HEAP8[$461]|0;
          $463 = $462&255;
          $464 = $463 << 8;
          $465 = (($464) + ($458))|0;
          $466 = $458 >>> 8;
          $467 = (($466) + ($100))|0;
          $data$19 = $465;$pc$8 = $95;$s_time$10 = $467;
          label = 89;
          break;
         }
         case 53:  {
          $468 = (($104) + ($x$0))|0;
          $469 = $468 & 255;
          $data$16 = $469;
          label = 85;
          break;
         }
         case 37:  {
          $data$16 = $104;
          label = 85;
          break;
         }
         case 61:  {
          $x$0$pn10 = $x$0;
          label = 87;
          break;
         }
         case 57:  {
          $x$0$pn10 = $y$0;
          label = 87;
          break;
         }
         case 45:  {
          $data$18 = $104;$s_time$9 = $100;
          label = 88;
          break;
         }
         case 41:  {
          $data$20 = $104;$pc$9 = $95;$s_time$11 = $100;
          label = 90;
          break;
         }
         case 65:  {
          $484 = (($104) + ($x$0))|0;
          $485 = (($484) + 1)|0;
          $486 = $485 & 255;
          $487 = (($17) + ($486)|0);
          $488 = HEAP8[$487]|0;
          $489 = $488&255;
          $490 = $489 << 8;
          $491 = $484 & 255;
          $492 = (($17) + ($491)|0);
          $493 = HEAP8[$492]|0;
          $494 = $493&255;
          $495 = $490 | $494;
          $data$24 = $495;$pc$10 = $95;$s_time$13 = $100;
          label = 98;
          break;
         }
         default: {
          $illegal_encountered$0$off0 = 1;$s_time$27 = $100;
          label = 195;
          break L1;
         }
         }
        } while(0);
        if ((label|0) == 2) {
         label = 0;
         $89 = (($100) + -1)|0;
         $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $pc$0;$s_time$0 = $89;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
         continue;
        }
        else if ((label|0) == 18) {
         label = 0;
         $177 = (($17) + ($data$0)|0);
         $178 = HEAP8[$177]|0;
         $179 = $178&255;
         $data$4 = $179;$pc$3 = $95;$s_time$3 = $100;
         label = 23;
        }
        else if ((label|0) == 20) {
         label = 0;
         $data$1 = (($x$0$pn14) + ($104))|0;
         $180 = $data$1 >>> 8;
         $181 = (($180) + ($100))|0;
         $data$2 = $data$1;$s_time$1 = $181;
         label = 21;
        }
        else if ((label|0) == 29) {
         label = 0;
         $215 = (($pc$1) + 2)|0;
         $216 = $a$0&255;
         $217 = (($17) + ($data$5)|0);
         HEAP8[$217] = $216;
         $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $100;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $215;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
         continue;
        }
        else if ((label|0) == 41) {
         label = 0;
         HEAP32[$14>>2] = $100;
         __ZN7Sap_Emu9cpu_writeEji($49,$addr10$0,$a$0);
         $253 = HEAP32[$14>>2]|0;
         $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $pc$4;$s_time$0 = $253;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
         continue;
        }
        else if ((label|0) == 49) {
         label = 0;
         HEAP32[$14>>2] = $s_time$4;
         $334 = (__ZN7Sap_Emu8cpu_readEj($51,$addr13$0)|0);
         $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0 = $334;$nz$0 = $334;$pc$1 = $pc$5;$s_time$0 = $s_time$4;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;
         continue;
        }
        else if ((label|0) == 59) {
         label = 0;
         $377 = (($pc$1) + 2)|0;
         $378 = $y$0&255;
         $379 = (($17) + ($data$6)|0);
         HEAP8[$379] = $378;
         $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $100;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $377;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
         continue;
        }
        else if ((label|0) == 61) {
         label = 0;
         $382 = (($pc$1) + 2)|0;
         $383 = $x$0&255;
         $384 = (($17) + ($data$7)|0);
         HEAP8[$384] = $383;
         $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $100;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $382;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
         continue;
        }
        else if ((label|0) == 63) {
         label = 0;
         $387 = (($17) + ($data$8)|0);
         $388 = HEAP8[$387]|0;
         $389 = $388&255;
         $data$9 = $389;
         label = 64;
        }
        else if ((label|0) == 66) {
         label = 0;
         $393 = (($17) + ($data$10)|0);
         $394 = HEAP8[$393]|0;
         $395 = $394&255;
         $data$11 = $395;
         label = 67;
        }
        else if ((label|0) == 69) {
         label = 0;
         $$sum12 = (($pc$1) + 2)|0;
         $400 = (($17) + ($$sum12)|0);
         $401 = HEAP8[$400]|0;
         $402 = $401&255;
         $403 = $402 << 8;
         $404 = (($403) + ($data$12))|0;
         $405 = (($pc$1) + 3)|0;
         HEAP32[$14>>2] = $s_time$5;
         $406 = (__ZN7Sap_Emu8cpu_readEj($53,$404)|0);
         $x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $406;$pc$1 = $405;$s_time$0 = $s_time$5;$y$0 = $406;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
         continue;
        }
        else if ((label|0) == 71) {
         label = 0;
         $$sum11 = (($pc$1) + 2)|0;
         $410 = (($17) + ($$sum11)|0);
         $411 = HEAP8[$410]|0;
         $412 = $411&255;
         $413 = $412 << 8;
         $414 = (($413) + ($data$13))|0;
         $415 = (($pc$1) + 3)|0;
         HEAP32[$14>>2] = $s_time$6;
         $416 = (__ZN7Sap_Emu8cpu_readEj($55,$414)|0);
         $y$0$phi = $y$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $416;$pc$1 = $415;$s_time$0 = $s_time$6;$x$0 = $416;$y$0 = $y$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
         continue;
        }
        else if ((label|0) == 73) {
         label = 0;
         $417 = (__Z8get_le16PKv($96)|0);
         $418 = (($pc$1) + 3)|0;
         $419 = ($417>>>0)<(2048);
         if ($419) {
          $420 = $temp25$0&255;
          $421 = (($17) + ($417)|0);
          HEAP8[$421] = $420;
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $100;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $418;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue;
         } else {
          HEAP32[$14>>2] = $100;
          __ZN7Sap_Emu9cpu_writeEji($57,$417,$temp25$0);
          $422 = HEAP32[$14>>2]|0;
          $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $418;$s_time$0 = $422;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
          continue;
         }
        }
        else if ((label|0) == 78) {
         label = 0;
         $429 = (($x$0) - ($data$14))|0;
         $430 = (($pc$6) + 1)|0;
         $431 = $429 ^ -1;
         $432 = $429 & 255;
         $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $100;$a$0$phi = $a$0;$c$0 = $431;$nz$0 = $432;$pc$1 = $430;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$a$0 = $a$0$phi;
         continue;
        }
        else if ((label|0) == 81) {
         label = 0;
         $439 = (($y$0) - ($data$15))|0;
         $440 = (($pc$7) + 1)|0;
         $441 = $439 ^ -1;
         $442 = $439 & 255;
         $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $100;$a$0$phi = $a$0;$c$0 = $441;$nz$0 = $442;$pc$1 = $440;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$a$0 = $a$0$phi;
         continue;
        }
        else if ((label|0) == 85) {
         label = 0;
         $470 = (($17) + ($data$16)|0);
         $471 = HEAP8[$470]|0;
         $472 = $471&255;
         $data$20 = $472;$pc$9 = $95;$s_time$11 = $100;
         label = 90;
        }
        else if ((label|0) == 87) {
         label = 0;
         $data$17 = (($x$0$pn10) + ($104))|0;
         $473 = $data$17 >>> 8;
         $474 = (($473) + ($100))|0;
         $data$18 = $data$17;$s_time$9 = $474;
         label = 88;
        }
        else if ((label|0) == 94) {
         label = 0;
         $511 = (($17) + ($data$21)|0);
         $512 = HEAP8[$511]|0;
         $513 = $512&255;
         $data$25 = $513;$pc$11 = $95;$s_time$14 = $100;
         label = 99;
        }
        else if ((label|0) == 96) {
         label = 0;
         $data$22 = (($x$0$pn8) + ($104))|0;
         $514 = $data$22 >>> 8;
         $515 = (($514) + ($100))|0;
         $data$23 = $data$22;$s_time$12 = $515;
         label = 97;
        }
        else if ((label|0) == 103) {
         label = 0;
         $552 = (($17) + ($data$26)|0);
         $553 = HEAP8[$552]|0;
         $554 = $553&255;
         $data$30 = $554;$pc$13 = $95;$s_time$17 = $100;
         label = 108;
        }
        else if ((label|0) == 105) {
         label = 0;
         $data$27 = (($x$0$pn6) + ($104))|0;
         $555 = $data$27 >>> 8;
         $556 = (($555) + ($100))|0;
         $data$28 = $data$27;$s_time$15 = $556;
         label = 106;
        }
        else if ((label|0) == 114) {
         label = 0;
         $612 = (($17) + ($data$31)|0);
         $613 = HEAP8[$612]|0;
         $614 = $613&255;
         $data$35 = $614;$pc$15 = $95;$s_time$20 = $100;
         label = 119;
        }
        else if ((label|0) == 116) {
         label = 0;
         $data$32 = (($x$0$pn4) + ($104))|0;
         $615 = $data$32 >>> 8;
         $616 = (($615) + ($100))|0;
         $data$33 = $data$32;$s_time$18 = $616;
         label = 117;
        }
        else if ((label|0) == 123) {
         label = 0;
         $652 = (($17) + ($data$36)|0);
         $653 = HEAP8[$652]|0;
         $654 = $653&255;
         $data$40 = $654;$pc$17 = $95;$s_time$23 = $100;
        }
        else if ((label|0) == 125) {
         label = 0;
         $data$37 = (($x$0$pn) + ($104))|0;
         $655 = $data$37 >>> 8;
         $656 = (($655) + ($100))|0;
         $data$38 = $data$37;$s_time$21 = $656;
         label = 126;
        }
        else if ((label|0) == 130) {
         label = 0;
         $678 = $c$1 >>> 1;
         $679 = $678 & 128;
         $680 = $a$0 << 8;
         $681 = $a$0 >>> 1;
         $682 = $679 | $681;
         $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $100;$pc$1$phi = $95;$a$0 = $682;$c$0 = $680;$nz$0 = $682;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;
         continue;
        }
        else if ((label|0) == 134) {
         label = 0;
         $c$2 = 0;$data$42 = $data$41;
         label = 135;
        }
        else if ((label|0) == 138) {
         label = 0;
         $c$3 = 0;$data$44 = $data$43;
         label = 139;
        }
        else if ((label|0) == 144) {
         label = 0;
         $c$5 = 0;$data$47 = $data$46;
         label = 145;
        }
        else if ((label|0) == 148) {
         label = 0;
         $c$6 = 0;$data$49 = $data$48;
         label = 149;
        }
        else if ((label|0) == 154) {
         label = 0;
         $data$52 = $data$51;$nz$2 = -1;
         label = 155;
        }
        else if ((label|0) == 161) {
         label = 0;
         HEAP32[$14>>2] = $100;
         $762 = (__ZN7Sap_Emu8cpu_readEj($81,$data$56)|0);
         $763 = (($762) + ($nz$4))|0;
         $764 = (($pc$1) + 3)|0;
         $765 = $763 & 255;
         __ZN7Sap_Emu9cpu_writeEji($81,$data$56,$765);
         $766 = HEAP32[$14>>2]|0;
         $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $763;$pc$1 = $764;$s_time$0 = $766;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
         continue;
        }
        else if ((label|0) == 183) {
         label = 0;
         $862 = $status$1&255;
         HEAP8[$35] = $862;
         $863 = HEAP32[$84>>2]|0;
         $864 = HEAP32[$85>>2]|0;
         $865 = (($863) - ($864))|0;
         $866 = ($865|0)<(1);
         if ($866) {
          $y$0$phi = $y$0;$x$0$phi = $x$0;$s_time$0$phi = $100;$pc$1$phi = $95;$a$0$phi = $a$0;$c$0 = $c$8;$nz$0 = $nz$5;$sp$0 = $sp$1;$status$0 = $status$1;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$s_time$0 = $s_time$0$phi;$pc$1 = $pc$1$phi;$a$0 = $a$0$phi;
          continue;
         }
         HEAP32[$84>>2] = $864;
         $867 = (($865) + ($100))|0;
         $868 = ($867|0)<(0);
         if ($868) {
          $y$0$phi = $y$0;$x$0$phi = $x$0;$pc$1$phi = $95;$a$0$phi = $a$0;$c$0 = $c$8;$nz$0 = $nz$5;$s_time$0 = $867;$sp$0 = $sp$1;$status$0 = $status$1;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$pc$1 = $pc$1$phi;$a$0 = $a$0$phi;
          continue;
         }
         $869 = (($867) + 1)|0;
         $870 = ($865|0)<($869|0);
         if ($870) {
          $y$0$phi = $y$0;$x$0$phi = $x$0;$pc$1$phi = $95;$a$0$phi = $a$0;$c$0 = $c$8;$nz$0 = $nz$5;$s_time$0 = $867;$sp$0 = $sp$1;$status$0 = $status$1;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$pc$1 = $pc$1$phi;$a$0 = $a$0$phi;
          continue;
         }
         $871 = (($869) + ($864))|0;
         HEAP32[$84>>2] = $871;
         HEAP32[$85>>2] = $871;
         $y$0$phi = $y$0;$x$0$phi = $x$0;$pc$1$phi = $95;$a$0$phi = $a$0;$c$0 = $c$8;$nz$0 = $nz$5;$s_time$0 = -1;$sp$0 = $sp$1;$status$0 = $status$1;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$pc$1 = $pc$1$phi;$a$0 = $a$0$phi;
         continue;
        }
        else if ((label|0) == 189) {
         label = 0;
         $873 = $status$2&255;
         HEAP8[$35] = $873;
         $874 = HEAP32[$86>>2]|0;
         $875 = HEAP32[$43>>2]|0;
         HEAP32[$86>>2] = $875;
         $876 = (($874) + ($100))|0;
         $877 = (($876) - ($875))|0;
         $y$0$phi = $y$0;$x$0$phi = $x$0;$pc$1$phi = $95;$a$0$phi = $a$0;$c$0 = $c$9;$nz$0 = $nz$6;$s_time$0 = $877;$sp$0 = $sp$2;$status$0 = $status$2;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$pc$1 = $pc$1$phi;$a$0 = $a$0$phi;
         continue;
        }
        else if ((label|0) == 191) {
         label = 0;
         $881 = (($pc$1) + 2)|0;
         $pc$19 = $881;$s_time$25 = $s_time$24;
         label = 192;
        }
        if ((label|0) == 21) {
         label = 0;
         $182 = (($pc$1) + 2)|0;
         $183 = (($17) + ($182)|0);
         $184 = HEAP8[$183]|0;
         $185 = $184&255;
         $186 = $185 << 8;
         $187 = (($186) + ($data$2))|0;
         $data$3 = $187;$pc$2 = $182;$s_time$2 = $s_time$1;
         label = 22;
        }
        else if ((label|0) == 64) {
         label = 0;
         $390 = (($pc$1) + 2)|0;
         $y$0$phi = $y$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $100;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $data$9;$pc$1 = $390;$x$0 = $data$9;$y$0 = $y$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
         continue;
        }
        else if ((label|0) == 67) {
         label = 0;
         $396 = (($pc$1) + 2)|0;
         $x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $100;$c$0$phi = $c$0;$a$0$phi = $a$0;$nz$0 = $data$11;$pc$1 = $396;$y$0 = $data$11;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
         continue;
        }
        else if ((label|0) == 88) {
         label = 0;
         $475 = (($pc$1) + 2)|0;
         $476 = (($17) + ($475)|0);
         $477 = HEAP8[$476]|0;
         $478 = $477&255;
         $479 = $478 << 8;
         $480 = (($479) + ($data$18))|0;
         $data$19 = $480;$pc$8 = $475;$s_time$10 = $s_time$9;
         label = 89;
        }
        else if ((label|0) == 97) {
         label = 0;
         $516 = (($pc$1) + 2)|0;
         $517 = (($17) + ($516)|0);
         $518 = HEAP8[$517]|0;
         $519 = $518&255;
         $520 = $519 << 8;
         $521 = (($520) + ($data$23))|0;
         $data$24 = $521;$pc$10 = $516;$s_time$13 = $s_time$12;
         label = 98;
        }
        else if ((label|0) == 106) {
         label = 0;
         $557 = (($pc$1) + 2)|0;
         $558 = (($17) + ($557)|0);
         $559 = HEAP8[$558]|0;
         $560 = $559&255;
         $561 = $560 << 8;
         $562 = (($561) + ($data$28))|0;
         $data$29 = $562;$pc$12 = $557;$s_time$16 = $s_time$15;
         label = 107;
        }
        else if ((label|0) == 117) {
         label = 0;
         $617 = (($pc$1) + 2)|0;
         $618 = (($17) + ($617)|0);
         $619 = HEAP8[$618]|0;
         $620 = $619&255;
         $621 = $620 << 8;
         $622 = (($621) + ($data$33))|0;
         $data$34 = $622;$pc$14 = $617;$s_time$19 = $s_time$18;
         label = 118;
        }
        else if ((label|0) == 126) {
         label = 0;
         $657 = (($pc$1) + 2)|0;
         $658 = (($17) + ($657)|0);
         $659 = HEAP8[$658]|0;
         $660 = $659&255;
         $661 = $660 << 8;
         $662 = (($661) + ($data$38))|0;
         $data$39 = $662;$pc$16 = $657;$s_time$22 = $s_time$21;
         label = 127;
        }
        else if ((label|0) == 135) {
         label = 0;
         $$sum = (($pc$1) + 2)|0;
         $691 = (($17) + ($$sum)|0);
         $692 = HEAP8[$691]|0;
         $693 = $692&255;
         $694 = $693 << 8;
         $695 = (($694) + ($data$42))|0;
         HEAP32[$14>>2] = $100;
         $696 = (__ZN7Sap_Emu8cpu_readEj($75,$695)|0);
         $697 = $c$2 >>> 1;
         $698 = $697 & 128;
         $699 = $696 >> 1;
         $700 = $699 | $698;
         $701 = $696 << 8;
         $c$4 = $701;$data$45 = $695;$nz$1 = $700;
         label = 140;
        }
        else if ((label|0) == 139) {
         label = 0;
         $$sum1 = (($pc$1) + 2)|0;
         $704 = (($17) + ($$sum1)|0);
         $705 = HEAP8[$704]|0;
         $706 = $705&255;
         $707 = $706 << 8;
         $708 = (($707) + ($data$44))|0;
         $709 = $c$3 >>> 8;
         $710 = $709 & 1;
         HEAP32[$14>>2] = $100;
         $711 = (__ZN7Sap_Emu8cpu_readEj($79,$708)|0);
         $712 = $711 << 1;
         $713 = $712 | $710;
         $c$4 = $712;$data$45 = $708;$nz$1 = $713;
         label = 140;
        }
        else if ((label|0) == 145) {
         label = 0;
         $722 = (($17) + ($data$47)|0);
         $723 = HEAP8[$722]|0;
         $724 = $723&255;
         $725 = $c$5 >>> 1;
         $726 = $725 & 128;
         $727 = $724 >>> 1;
         $728 = $727 | $726;
         $729 = $724 << 8;
         $c$7 = $729;$data$53 = $data$47;$nz$3 = $728;
         label = 156;
        }
        else if ((label|0) == 149) {
         label = 0;
         $734 = $c$6 >>> 8;
         $735 = $734 & 1;
         $736 = (($17) + ($data$49)|0);
         $737 = HEAP8[$736]|0;
         $738 = $737&255;
         $739 = $738 << 1;
         $740 = $739 | $735;
         $c$7 = $739;$data$53 = $data$49;$nz$3 = $740;
         label = 156;
        }
        else if ((label|0) == 155) {
         label = 0;
         $749 = (($17) + ($data$52)|0);
         $750 = HEAP8[$749]|0;
         $751 = $750&255;
         $752 = (($751) + ($nz$2))|0;
         $c$7 = $c$0;$data$53 = $data$52;$nz$3 = $752;
         label = 156;
        }
        else if ((label|0) == 192) {
         label = 0;
         $882 = (($pc$19) + 1)|0;
         $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$nz$0$phi = $nz$0;$c$0$phi = $c$0;$a$0$phi = $a$0;$pc$1 = $882;$s_time$0 = $s_time$25;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$nz$0 = $nz$0$phi;$c$0 = $c$0$phi;$a$0 = $a$0$phi;
         continue;
        }
        if ((label|0) == 22) {
         label = 0;
         HEAP32[$14>>2] = $s_time$2;
         $188 = (__ZN7Sap_Emu8cpu_readEj($45,$data$3)|0);
         $data$4 = $188;$pc$3 = $pc$2;$s_time$3 = $s_time$2;
         label = 23;
        }
        else if ((label|0) == 89) {
         label = 0;
         HEAP32[$14>>2] = $s_time$10;
         $481 = (__ZN7Sap_Emu8cpu_readEj($63,$data$19)|0);
         $data$20 = $481;$pc$9 = $pc$8;$s_time$11 = $s_time$10;
         label = 90;
        }
        else if ((label|0) == 98) {
         label = 0;
         HEAP32[$14>>2] = $s_time$13;
         $522 = (__ZN7Sap_Emu8cpu_readEj($65,$data$24)|0);
         $data$25 = $522;$pc$11 = $pc$10;$s_time$14 = $s_time$13;
         label = 99;
        }
        else if ((label|0) == 107) {
         label = 0;
         HEAP32[$14>>2] = $s_time$16;
         $563 = (__ZN7Sap_Emu8cpu_readEj($67,$data$29)|0);
         $data$30 = $563;$pc$13 = $pc$12;$s_time$17 = $s_time$16;
         label = 108;
        }
        else if ((label|0) == 118) {
         label = 0;
         HEAP32[$14>>2] = $s_time$19;
         $623 = (__ZN7Sap_Emu8cpu_readEj($71,$data$34)|0);
         $data$35 = $623;$pc$15 = $pc$14;$s_time$20 = $s_time$19;
         label = 119;
        }
        else if ((label|0) == 127) {
         label = 0;
         HEAP32[$14>>2] = $s_time$22;
         $663 = (__ZN7Sap_Emu8cpu_readEj($73,$data$39)|0);
         $data$40 = $663;$pc$17 = $pc$16;$s_time$23 = $s_time$22;
        }
        else if ((label|0) == 140) {
         label = 0;
         $714 = (($pc$1) + 3)|0;
         $715 = $nz$1 & 255;
         __ZN7Sap_Emu9cpu_writeEji($77,$data$45,$715);
         $716 = HEAP32[$14>>2]|0;
         $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$a$0$phi = $a$0;$c$0 = $c$4;$nz$0 = $nz$1;$pc$1 = $714;$s_time$0 = $716;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$a$0 = $a$0$phi;
         continue;
        }
        else if ((label|0) == 156) {
         label = 0;
         $753 = (($pc$1) + 2)|0;
         $754 = $nz$3&255;
         $755 = (($17) + ($data$53)|0);
         HEAP8[$755] = $754;
         $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$s_time$0$phi = $100;$a$0$phi = $a$0;$c$0 = $c$7;$nz$0 = $nz$3;$pc$1 = $753;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$s_time$0 = $s_time$0$phi;$a$0 = $a$0$phi;
         continue;
        }
        if ((label|0) == 23) {
         label = 0;
         $189 = (($a$0) - ($data$4))|0;
         $190 = (($pc$3) + 1)|0;
         $191 = $189 ^ -1;
         $192 = $189 & 255;
         $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$a$0$phi = $a$0;$c$0 = $191;$nz$0 = $192;$pc$1 = $190;$s_time$0 = $s_time$3;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$a$0 = $a$0$phi;
         continue;
        }
        else if ((label|0) == 90) {
         label = 0;
         $482 = $data$20 & $a$0;
         $483 = (($pc$9) + 1)|0;
         $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0 = $482;$nz$0 = $482;$pc$1 = $483;$s_time$0 = $s_time$11;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;
         continue;
        }
        else if ((label|0) == 99) {
         label = 0;
         $523 = $data$25 ^ $a$0;
         $524 = (($pc$11) + 1)|0;
         $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0 = $523;$nz$0 = $523;$pc$1 = $524;$s_time$0 = $s_time$14;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;
         continue;
        }
        else if ((label|0) == 108) {
         label = 0;
         $564 = $data$30 | $a$0;
         $565 = (($pc$13) + 1)|0;
         $y$0$phi = $y$0;$x$0$phi = $x$0;$status$0$phi = $status$0;$sp$0$phi = $sp$0;$c$0$phi = $c$0;$a$0 = $564;$nz$0 = $564;$pc$1 = $565;$s_time$0 = $s_time$17;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$status$0 = $status$0$phi;$sp$0 = $sp$0$phi;$c$0 = $c$0$phi;
         continue;
        }
        else if ((label|0) == 119) {
         label = 0;
         $624 = $data$35 ^ 255;
         $data$40 = $624;$pc$17 = $pc$15;$s_time$23 = $s_time$20;
        }
        $664 = $c$0 >>> 8;
        $665 = $664 & 1;
        $666 = $a$0 ^ 128;
        $667 = (($666) + ($665))|0;
        $sext = $data$40 << 24;
        $668 = $sext >> 24;
        $669 = (($667) + ($668))|0;
        $670 = $status$0 & -65;
        $671 = $669 >>> 2;
        $672 = $671 & 64;
        $673 = $672 | $670;
        $674 = (($a$0) + ($665))|0;
        $675 = (($674) + ($data$40))|0;
        $676 = (($pc$17) + 1)|0;
        $677 = $675 & 255;
        $y$0$phi = $y$0;$x$0$phi = $x$0;$sp$0$phi = $sp$0;$a$0 = $677;$c$0 = $675;$nz$0 = $675;$pc$1 = $676;$s_time$0 = $s_time$23;$status$0 = $673;$y$0 = $y$0$phi;$x$0 = $x$0$phi;$sp$0 = $sp$0$phi;
       }
       if ((label|0) == 195) {
        HEAP32[$14>>2] = $s_time$27;
        $919 = $pc$1&65535;
        HEAP16[$18>>1] = $919;
        $920 = (($sp$0) + 255)|0;
        $921 = $920&255;
        HEAP8[$30] = $921;
        $922 = $a$0&255;
        HEAP8[$21] = $922;
        $923 = $x$0&255;
        HEAP8[$24] = $923;
        $924 = $y$0&255;
        HEAP8[$27] = $924;
        $925 = $status$0 & 76;
        $926 = $nz$0 >>> 8;
        $927 = $926 | $nz$0;
        $928 = $927 & 128;
        $929 = $925 | $928;
        $930 = $c$0 >>> 8;
        $931 = $930 & 1;
        $932 = $929 | $931;
        $933 = $nz$0 & 255;
        $934 = ($933|0)==(0);
        $935 = $932 | 2;
        $$18 = $934 ? $935 : $932;
        $936 = $$18&255;
        HEAP8[$35] = $936;
        $937 = $s;
        $938 = $937;
        $939 = HEAP32[$938>>2]|0;
        $940 = (($937) + 4)|0;
        $941 = $940;
        $942 = HEAP32[$941>>2]|0;
        $943 = $2;
        $944 = $943;
        HEAP32[$944>>2] = $939;
        $945 = (($943) + 4)|0;
        $946 = $945;
        HEAP32[$946>>2] = $942;
        HEAP32[$13>>2] = $1;
        STACKTOP = sp;return ($illegal_encountered$0$off0|0);
       }
       return 0|0;
      }
      function __ZN7Sap_Cpu12set_end_timeEl($this,$t) {
       $this = $this|0;
       $t = $t|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 24|0);
       HEAP32[$1>>2] = $t;
       $2 = (($this) + 20|0);
       $3 = HEAP32[$2>>2]|0;
       $4 = (__ZN7Sap_Cpu15update_end_timeEll($this,$t,$3)|0);
       $5 = (($this) + 8|0);
       $6 = HEAP32[$5>>2]|0;
       $7 = (($6) + 4|0);
       $8 = HEAP32[$7>>2]|0;
       $9 = (($8) + ($4))|0;
       HEAP32[$7>>2] = $9;
       STACKTOP = sp;return;
      }
      function __ZN7Sap_Cpu15update_end_timeEll($this,$t,$irq) {
       $this = $this|0;
       $t = $t|0;
       $irq = $irq|0;
       var $$0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $irq$t = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($irq|0)<($t|0);
       if ($1) {
        $2 = (($this) + 5|0);
        $3 = HEAP8[$2]|0;
        $4 = $3 & 4;
        $5 = ($4<<24>>24)==(0);
        $irq$t = $5 ? $irq : $t;
        $$0 = $irq$t;
       } else {
        $$0 = $t;
       }
       $6 = (($this) + 8|0);
       $7 = HEAP32[$6>>2]|0;
       $8 = ($7);
       $9 = HEAP32[$8>>2]|0;
       $10 = (($9) - ($$0))|0;
       HEAP32[$8>>2] = $$0;
       STACKTOP = sp;return ($10|0);
      }
      function __ZN7Sap_EmuC2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 336|0);
       $2 = $1;
       __ZN7Sap_CpuC2Ev($2);
       $3 = ($this);
       __ZN11Classic_EmuC2Ev($3);
       $4 = $this;
       HEAP32[$4>>2] = (((48400) + 8|0));
       $5 = (($this) + 964|0);
       __ZN7Sap_ApuC2Ev($5);
       $6 = (($this) + 1068|0);
       __ZN7Sap_ApuC2Ev($6);
       $7 = (($this) + 67224|0);
       __ZN12Sap_Apu_ImplC2Ev($7);
       $8 = $this;
       __ZN8Gme_File8set_typeEPK11gme_type_t_($8,(48632));
       $9 = $this;
       __ZN9Music_Emu15set_voice_namesEPKPKc($9,((48504)));
       __ZN11Classic_Emu15set_voice_typesEPKi($3,((48600)));
       __ZN9Music_Emu21set_silence_lookaheadEi($9,6);
       STACKTOP = sp;return;
      }
      function __ZN7Sap_CpuC2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 12|0);
       $2 = (($this) + 8|0);
       HEAP32[$2>>2] = $1;
       STACKTOP = sp;return;
      }
      function __ZN7Sap_EmuD0Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       __ZN7Sap_EmuD2Ev($this);
       $1 = ($this);
       __ZN8Gme_FiledlEPv($1);
       STACKTOP = sp;return;
      }
      function __ZN7Sap_EmuD2Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       __ZN11Classic_EmuD2Ev($1);
       STACKTOP = sp;return;
      }
      function __ZNK7Sap_Emu11track_info_EP12track_info_ti($this,$out,u$0) {
       $this = $this|0;
       $out = $out|0;
       u$0 = u$0|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 368|0);
       __ZL15copy_sap_fieldsRKN7Sap_Emu6info_tEP12track_info_t($1,$out);
       STACKTOP = sp;return (0|0);
      }
      function __ZL15copy_sap_fieldsRKN7Sap_Emu6info_tEP12track_info_t($in,$out) {
       $in = $in|0;
       $out = $out|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($out) + 272|0);
       $2 = (($in) + 289|0);
       __ZN8Gme_File11copy_field_EPcPKc($1,$2);
       $3 = (($out) + 784|0);
       $4 = (($in) + 33|0);
       __ZN8Gme_File11copy_field_EPcPKc($3,$4);
       $5 = (($out) + 1040|0);
       $6 = (($in) + 545|0);
       __ZN8Gme_File11copy_field_EPcPKc($5,$6);
       STACKTOP = sp;return;
      }
      function __ZN7Sap_Emu9load_mem_EPKhl($this,$in,$size) {
       $this = $this|0;
       $in = $in|0;
       $size = $size|0;
       var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
       var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($in) + ($size)|0);
       $2 = (($this) + 948|0);
       HEAP32[$2>>2] = $1;
       $3 = (($this) + 368|0);
       $4 = (($this) + 372|0);
       HEAP32[$4>>2] = 0;
       $5 = (($this) + 388|0);
       HEAP32[$5>>2] = 66;
       $6 = (($this) + 400|0);
       HEAP8[$6] = 0;
       $7 = (($this) + 376|0);
       HEAP32[$7>>2] = -1;
       $8 = (($this) + 380|0);
       HEAP32[$8>>2] = -1;
       $9 = (($this) + 384|0);
       HEAP32[$9>>2] = -1;
       $10 = (($this) + 396|0);
       HEAP32[$10>>2] = 312;
       $11 = (__ZL10parse_infoPKhlPN7Sap_Emu6info_tE($in,$size,$3)|0);
       $12 = ($11|0)==(0|0);
       if (!($12)) {
        $$0 = $11;
        STACKTOP = sp;return ($$0|0);
       }
       $13 = $this;
       $14 = HEAP32[$4>>2]|0;
       __ZN8Gme_File11set_warningEPKc($13,$14);
       $15 = (($this) + 392|0);
       $16 = HEAP32[$15>>2]|0;
       __ZN8Gme_File15set_track_countEi($13,$16);
       $17 = $this;
       $18 = HEAP8[$6]|0;
       $19 = $18&255;
       $20 = 4 << $19;
       __ZN9Music_Emu15set_voice_countEi($17,$20);
       $21 = (($this) + 67224|0);
       $22 = (+__ZNK9Music_Emu4gainEv($17));
       __ZN12Sap_Apu_Impl6volumeEd($21,$22);
       $23 = ($this);
       $24 = (__ZN11Classic_Emu12setup_bufferEl($23,1773447)|0);
       $$0 = $24;
       STACKTOP = sp;return ($$0|0);
      }
      function __ZL10parse_infoPKhlPN7Sap_Emu6info_tE($in,$size,$out) {
       $in = $in|0;
       $size = $size|0;
       $out = $out|0;
       var $$0 = 0, $$0$ph = 0, $$02$lcssa = 0, $$0215 = 0, $$1$lcssa = 0, $$17 = 0, $$17$phi = 0, $$2$lcssa = 0, $$210 = 0, $$210$phi = 0, $$sum = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
       var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
       var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
       var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
       var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $line_end$0$lcssa = 0, $line_end$06 = 0, $line_end$06$phi = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($out) + 24|0);
       HEAP32[$1>>2] = 1;
       $2 = (($out) + 33|0);
       HEAP8[$2] = 0;
       $3 = (($out) + 289|0);
       HEAP8[$3] = 0;
       $4 = (($out) + 545|0);
       HEAP8[$4] = 0;
       $5 = ($size|0)<(16);
       do {
        if (!($5)) {
         $6 = (_memcmp($in,(48792),5)|0);
         $7 = ($6|0)==(0);
         if (!($7)) {
          break;
         }
         $$sum = (($size) + -5)|0;
         $9 = (($in) + ($$sum)|0);
         $10 = (($in) + 5|0);
         $11 = ($$sum|0)>(5);
         L4: do {
          if ($11) {
           $12 = (($out) + 8|0);
           $13 = (($out) + 12|0);
           $14 = (($out) + 16|0);
           $15 = (($out) + 20|0);
           $16 = (($out) + 32|0);
           $17 = (($out) + 28|0);
           $$0215 = $10;
           L6: while(1) {
            $18 = HEAP8[$$0215]|0;
            $19 = ($18<<24>>24)==(-1);
            if ($19) {
             $20 = (($$0215) + 1|0);
             $21 = HEAP8[$20]|0;
             $22 = ($21<<24>>24)==(-1);
             if ($22) {
              $$02$lcssa = $$0215;
              break L4;
             }
            }
            $23 = ($$0215>>>0)<($9>>>0);
            L11: do {
             if ($23) {
              $line_end$06 = $$0215;
              while(1) {
               $25 = HEAP8[$line_end$06]|0;
               $26 = ($25<<24>>24)==(13);
               $27 = (($line_end$06) + 1|0);
               if ($26) {
                $line_end$0$lcssa = $line_end$06;
                break L11;
               }
               $24 = ($27>>>0)<($9>>>0);
               if ($24) {
                $line_end$06$phi = $27;$line_end$06 = $line_end$06$phi;
               } else {
                $line_end$0$lcssa = $27;
                break;
               }
              }
             } else {
              $line_end$0$lcssa = $$0215;
             }
            } while(0);
            $28 = ($$0215>>>0)<($line_end$0$lcssa>>>0);
            L16: do {
             if ($28) {
              $$17 = $$0215;
              while(1) {
               $30 = HEAP8[$$17]|0;
               $31 = ($30&255)>(32);
               $32 = (($$17) + 1|0);
               if (!($31)) {
                $$1$lcssa = $$17;
                break L16;
               }
               $29 = ($32>>>0)<($line_end$0$lcssa>>>0);
               if ($29) {
                $$17$phi = $32;$$17 = $$17$phi;
               } else {
                $$1$lcssa = $32;
                break;
               }
              }
             } else {
              $$1$lcssa = $$0215;
             }
            } while(0);
            $33 = $$1$lcssa;
            $34 = $$0215;
            $35 = (($33) - ($34))|0;
            $36 = ($$1$lcssa>>>0)<($line_end$0$lcssa>>>0);
            L21: do {
             if ($36) {
              $$210 = $$1$lcssa;
              while(1) {
               $38 = HEAP8[$$210]|0;
               $39 = ($38&255)<(33);
               $40 = (($$210) + 1|0);
               if (!($39)) {
                $$2$lcssa = $$210;
                break L21;
               }
               $37 = ($40>>>0)<($line_end$0$lcssa>>>0);
               if ($37) {
                $$210$phi = $40;$$210 = $$210$phi;
               } else {
                $$2$lcssa = $40;
                break;
               }
              }
             } else {
              $$2$lcssa = $$1$lcssa;
             }
            } while(0);
            $41 = ($35|0)<(1);
            do {
             if (!($41)) {
              $42 = (_strncmp((48800),$$0215,$35)|0);
              $43 = ($42|0)==(0);
              if ($43) {
               $44 = (__ZL8from_hexPKh($$2$lcssa)|0);
               HEAP32[$12>>2] = $44;
               $45 = ($44>>>0)>(65535);
               if ($45) {
                $$0$ph = (48808);
                break L6;
               } else {
                break;
               }
              }
              $46 = (_strncmp((48832),$$0215,$35)|0);
              $47 = ($46|0)==(0);
              if ($47) {
               $48 = (__ZL8from_hexPKh($$2$lcssa)|0);
               HEAP32[$13>>2] = $48;
               $49 = ($48>>>0)>(65535);
               if ($49) {
                $$0$ph = (48840);
                break L6;
               } else {
                break;
               }
              }
              $50 = (_strncmp((48864),$$0215,$35)|0);
              $51 = ($50|0)==(0);
              if ($51) {
               $52 = (__ZL8from_hexPKh($$2$lcssa)|0);
               HEAP32[$14>>2] = $52;
               $53 = ($52>>>0)>(65535);
               if ($53) {
                $$0$ph = (48872);
                break L6;
               } else {
                break;
               }
              }
              $54 = (_strncmp((48896),$$0215,$35)|0);
              $55 = ($54|0)==(0);
              if ($55) {
               $56 = (__ZL8from_decPKhS0_($$2$lcssa,$line_end$0$lcssa)|0);
               HEAP32[$1>>2] = $56;
               $57 = ($56|0)<(1);
               if ($57) {
                $$0$ph = (48904);
                break L6;
               } else {
                break;
               }
              }
              $58 = (_strncmp((48928),$$0215,$35)|0);
              $59 = ($58|0)==(0);
              if ($59) {
               $60 = HEAP8[$$2$lcssa]|0;
               $61 = $60&255;
               HEAP32[$15>>2] = $61;
               if ((($61|0) == 66) | (($61|0) == 67)) {
                break;
               } else if ((($61|0) == 68)) {
                $$0$ph = (48936);
                break L6;
               } else {
                $$0 = (48960);
                label = 43;
                break L6;
               }
              }
              $62 = (_strncmp((48984),$$0215,$35)|0);
              $63 = ($62|0)==(0);
              if ($63) {
               HEAP8[$16] = 1;
               break;
              }
              $64 = (_strncmp((48992),$$0215,$35)|0);
              $65 = ($64|0)==(0);
              if ($65) {
               $66 = (__ZL8from_decPKhS0_($$2$lcssa,$line_end$0$lcssa)|0);
               HEAP32[$17>>2] = $66;
               $67 = ($66|0)<(1);
               if ($67) {
                $$0$ph = (49008);
                break L6;
               } else {
                break;
               }
              }
              $68 = (_strncmp((49032),$$0215,$35)|0);
              $69 = ($68|0)==(0);
              if ($69) {
               __ZL12parse_stringPKhS0_iPc($$2$lcssa,$line_end$0$lcssa,256,$2);
               break;
              }
              $70 = (_strncmp((49040),$$0215,$35)|0);
              $71 = ($70|0)==(0);
              if ($71) {
               __ZL12parse_stringPKhS0_iPc($$2$lcssa,$line_end$0$lcssa,256,$3);
               break;
              }
              $72 = (_strncmp((49048),$$0215,$35)|0);
              $73 = ($72|0)==(0);
              if (!($73)) {
               break;
              }
              __ZL12parse_stringPKhS0_iPc($$2$lcssa,$line_end$0$lcssa,32,$4);
             }
            } while(0);
            $74 = (($line_end$0$lcssa) + 2|0);
            $75 = ($74>>>0)<($9>>>0);
            if ($75) {
             $$0215 = $74;
            } else {
             $$02$lcssa = $74;
             break L4;
            }
           }
           if ((label|0) == 43) {
            STACKTOP = sp;return ($$0|0);
           }
           $$0 = $$0$ph;
           STACKTOP = sp;return ($$0|0);
          } else {
           $$02$lcssa = $10;
          }
         } while(0);
         $76 = HEAP8[$$02$lcssa]|0;
         $77 = ($76<<24>>24)==(-1);
         if (!($77)) {
          $$0 = (49056);
          STACKTOP = sp;return ($$0|0);
         }
         $78 = (($$02$lcssa) + 1|0);
         $79 = HEAP8[$78]|0;
         $80 = ($79<<24>>24)==(-1);
         if (!($80)) {
          $$0 = (49056);
          STACKTOP = sp;return ($$0|0);
         }
         $81 = (($$02$lcssa) + 2|0);
         $82 = ($out);
         HEAP32[$82>>2] = $81;
         $$0 = 0;
         STACKTOP = sp;return ($$0|0);
        }
       } while(0);
       $8 = HEAP32[(40024)>>2]|0;
       $$0 = $8;
       STACKTOP = sp;return ($$0|0);
      }
      function __ZN12Sap_Apu_Impl6volumeEd($this,$d) {
       $this = $this|0;
       $d = +$d;
       var $1 = 0, $2 = 0.0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = $d * 0.00833333333333333321768;
       __ZN10Blip_SynthILi12ELi1EE6volumeEd($1,$2);
       STACKTOP = sp;return;
      }
      function __ZN7Sap_Emu9update_eqERK9blip_eq_t($this,$eq) {
       $this = $this|0;
       $eq = $eq|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 67224|0);
       __ZN10Blip_SynthILi12ELi1EE9treble_eqERK9blip_eq_t($1,$eq);
       STACKTOP = sp;return;
      }
      function __ZN7Sap_Emu9set_voiceEiP11Blip_BufferS1_S1_($this,$i,$center,$left,$right) {
       $this = $this|0;
       $i = $i|0;
       $center = $center|0;
       $left = $left|0;
       $right = $right|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($i) + -4)|0;
       $2 = ($1|0)>(-1);
       if ($2) {
        $3 = (($this) + 1068|0);
        __ZN7Sap_Apu10osc_outputEiP11Blip_Buffer($3,$1,$right);
        STACKTOP = sp;return;
       } else {
        $4 = (($this) + 964|0);
        $5 = (($this) + 400|0);
        $6 = HEAP8[$5]|0;
        $7 = ($6<<24>>24)!=(0);
        $8 = $7 ? $left : $center;
        __ZN7Sap_Apu10osc_outputEiP11Blip_Buffer($4,$i,$8);
        STACKTOP = sp;return;
       }
      }
      function __ZN7Sap_Emu10set_tempo_Ed($this,$t) {
       $this = $this|0;
       $t = +$t;
       var $1 = 0.0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = 114.0 / $t;
       $2 = (~~(($1)));
       $3 = (($this) + 952|0);
       HEAP32[$3>>2] = $2;
       STACKTOP = sp;return;
      }
      function __ZN7Sap_Emu7cpu_jsrEj($this,$addr) {
       $this = $this|0;
       $addr = $addr|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
       var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $addr&65535;
       $2 = (($this) + 336|0);
       $3 = $2;
       HEAP16[$3>>1] = $1;
       $4 = (($this) + 342|0);
       $5 = HEAP8[$4]|0;
       $6 = ($5<<24>>24)==(-2);
       do {
        if ($6) {
         $7 = (($this) + 1939|0);
         $8 = HEAP8[$7]|0;
         $9 = ($8<<24>>24)==(-2);
         if (!($9)) {
          break;
         }
         HEAP8[$4] = -1;
        }
       } while(0);
       $10 = HEAP8[$4]|0;
       $11 = (($10) + -1)<<24>>24;
       HEAP8[$4] = $11;
       $12 = $10&255;
       $13 = $12 | 256;
       $14 = ((($this) + ($13)|0) + 1428|0);
       HEAP8[$14] = -2;
       $15 = HEAP8[$4]|0;
       $16 = (($15) + -1)<<24>>24;
       HEAP8[$4] = $16;
       $17 = $15&255;
       $18 = $17 | 256;
       $19 = ((($this) + ($18)|0) + 1428|0);
       HEAP8[$19] = -2;
       $20 = HEAP8[$4]|0;
       $21 = (($20) + -1)<<24>>24;
       HEAP8[$4] = $21;
       $22 = $20&255;
       $23 = $22 | 256;
       $24 = ((($this) + ($23)|0) + 1428|0);
       HEAP8[$24] = -2;
       STACKTOP = sp;return;
      }
      function __ZN7Sap_Emu11run_routineEj($this,$addr) {
       $this = $this|0;
       $addr = $addr|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       __ZN7Sap_Emu7cpu_jsrEj($this,$addr);
       $1 = (($this) + 336|0);
       $2 = $1;
       (__ZN7Sap_Cpu3runEl($2,2134080)|0);
       STACKTOP = sp;return;
      }
      function __ZN7Sap_Emu12start_track_Ei($this,$track) {
       $this = $this|0;
       $track = $track|0;
       var $$0 = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
       var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
       var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $in$0$be = 0, $in$03 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = (__ZN11Classic_Emu12start_track_Ei($1,$track)|0);
       $3 = ($2|0)==(0|0);
       if (!($3)) {
        $$0 = $2;
        STACKTOP = sp;return ($$0|0);
       }
       $4 = (($this) + 1172|0);
       _memset(($4|0),0,66048)|0;
       $5 = (($this) + 368|0);
       $6 = HEAP32[$5>>2]|0;
       $7 = (($this) + 948|0);
       $8 = HEAP32[$7>>2]|0;
       $9 = $8;
       $10 = $6;
       $11 = (($9) - ($10))|0;
       $12 = ($11|0)>(4);
       L4: do {
        if ($12) {
         $13 = $9;$in$03 = $6;
         while(1) {
          $14 = (__Z8get_le16PKv($in$03)|0);
          $15 = (($in$03) + 2|0);
          $16 = (__Z8get_le16PKv($15)|0);
          $17 = (($in$03) + 4|0);
          $18 = ($16>>>0)<($14>>>0);
          if ($18) {
           label = 4;
           break;
          }
          $20 = (($16) - ($14))|0;
          $21 = (($20) + 1)|0;
          $22 = $17;
          $23 = (($13) - ($22))|0;
          $24 = ($21|0)>($23|0);
          if ($24) {
           label = 6;
           break;
          }
          $26 = ((($this) + ($14)|0) + 1428|0);
          _memcpy(($26|0),($17|0),($21|0))|0;
          $$sum = (($20) + 5)|0;
          $27 = (($in$03) + ($$sum)|0);
          $28 = HEAP32[$7>>2]|0;
          $29 = $28;
          $30 = $27;
          $31 = (($29) - ($30))|0;
          $32 = ($31|0)>(1);
          do {
           if ($32) {
            $33 = HEAP8[$27]|0;
            $34 = ($33<<24>>24)==(-1);
            if (!($34)) {
             $in$0$be = $27;
             break;
            }
            $$sum1 = (($20) + 6)|0;
            $35 = (($in$03) + ($$sum1)|0);
            $36 = HEAP8[$35]|0;
            $37 = ($36<<24>>24)==(-1);
            if (!($37)) {
             $in$0$be = $27;
             break;
            }
            $$sum2 = (($20) + 7)|0;
            $38 = (($in$03) + ($$sum2)|0);
            $in$0$be = $38;
           } else {
            $in$0$be = $27;
           }
          } while(0);
          $39 = HEAP32[$7>>2]|0;
          $40 = $39;
          $41 = $in$0$be;
          $42 = (($40) - ($41))|0;
          $43 = ($42|0)>(4);
          if ($43) {
           $13 = $40;$in$03 = $in$0$be;
          } else {
           break L4;
          }
         }
         if ((label|0) == 4) {
          $19 = $this;
          __ZN8Gme_File11set_warningEPKc($19,(48656));
          break;
         }
         else if ((label|0) == 6) {
          $25 = $this;
          __ZN8Gme_File11set_warningEPKc($25,(48656));
          break;
         }
        }
       } while(0);
       $44 = (($this) + 964|0);
       $45 = (($this) + 67224|0);
       __ZN7Sap_Apu5resetEP12Sap_Apu_Impl($44,$45);
       $46 = (($this) + 1068|0);
       __ZN7Sap_Apu5resetEP12Sap_Apu_Impl($46,$45);
       $47 = (($this) + 336|0);
       $48 = $47;
       $49 = (($this) + 1428|0);
       __ZN7Sap_Cpu5resetEPv($48,$49);
       $50 = (($this) + 960|0);
       HEAP32[$50>>2] = 0;
       __ZN7Sap_Emu9call_initEi($this,$track);
       HEAP32[$50>>2] = -1;
       $51 = (__ZNK7Sap_Emu11play_periodEv($this)|0);
       $52 = (($this) + 956|0);
       HEAP32[$52>>2] = $51;
       $$0 = 0;
       STACKTOP = sp;return ($$0|0);
      }
      function __ZN7Sap_Emu9call_initEi($this,$track) {
       $this = $this|0;
       $track = $track|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
       var $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 388|0);
       $2 = HEAP32[$1>>2]|0;
       if ((($2|0) == 66)) {
        $3 = $track&255;
        $4 = (($this) + 338|0);
        HEAP8[$4] = $3;
        $5 = (($this) + 376|0);
        $6 = HEAP32[$5>>2]|0;
        __ZN7Sap_Emu11run_routineEj($this,$6);
        STACKTOP = sp;return;
       } else if ((($2|0) == 67)) {
        $7 = (($this) + 338|0);
        HEAP8[$7] = 112;
        $8 = (($this) + 384|0);
        $9 = HEAP32[$8>>2]|0;
        $10 = $9&255;
        $11 = (($this) + 339|0);
        HEAP8[$11] = $10;
        $12 = HEAP32[$8>>2]|0;
        $13 = $12 >>> 8;
        $14 = $13&255;
        $15 = (($this) + 340|0);
        HEAP8[$15] = $14;
        $16 = (($this) + 380|0);
        $17 = HEAP32[$16>>2]|0;
        $18 = (($17) + 3)|0;
        __ZN7Sap_Emu11run_routineEj($this,$18);
        HEAP8[$7] = 0;
        $19 = $track&255;
        HEAP8[$11] = $19;
        $20 = HEAP32[$16>>2]|0;
        $21 = (($20) + 3)|0;
        __ZN7Sap_Emu11run_routineEj($this,$21);
        STACKTOP = sp;return;
       } else {
        STACKTOP = sp;return;
       }
      }
      function __ZNK7Sap_Emu11play_periodEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 396|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = (($this) + 952|0);
       $4 = HEAP32[$3>>2]|0;
       $5 = Math_imul($4, $2)|0;
       STACKTOP = sp;return ($5|0);
      }
      function __ZN7Sap_Emu10cpu_write_Eji($this,$addr,$data) {
       $this = $this|0;
       $addr = $addr|0;
       $data = $data|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
       var $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $addr ^ 53760;
       $2 = ($1>>>0)<(10);
       if ($2) {
        $3 = (($this) + 964|0);
        $4 = (($this) + 336|0);
        $5 = $4;
        $6 = (__ZNK7Sap_Cpu4timeEv($5)|0);
        $7 = (($this) + 960|0);
        $8 = HEAP32[$7>>2]|0;
        $9 = $8 & $6;
        __ZN7Sap_Apu10write_dataEiji($3,$9,$addr,$data);
        STACKTOP = sp;return;
       }
       $10 = $addr ^ 53776;
       $11 = ($10>>>0)<(10);
       if (!($11)) {
        STACKTOP = sp;return;
       }
       $12 = (($this) + 400|0);
       $13 = HEAP8[$12]|0;
       $14 = ($13<<24>>24)==(0);
       if ($14) {
        STACKTOP = sp;return;
       }
       $15 = (($this) + 1068|0);
       $16 = (($this) + 336|0);
       $17 = $16;
       $18 = (__ZNK7Sap_Cpu4timeEv($17)|0);
       $19 = (($this) + 960|0);
       $20 = HEAP32[$19>>2]|0;
       $21 = $20 & $18;
       $22 = $addr ^ 16;
       __ZN7Sap_Apu10write_dataEiji($15,$21,$22,$data);
       STACKTOP = sp;return;
      }
      function __ZNK7Sap_Cpu4timeEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 8|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = (($2) + 4|0);
       $4 = HEAP32[$3>>2]|0;
       $5 = ($2);
       $6 = HEAP32[$5>>2]|0;
       $7 = (($6) + ($4))|0;
       STACKTOP = sp;return ($7|0);
      }
      function __ZN7Sap_Emu10run_clocksERii($this,$duration,u$0) {
       $this = $this|0;
       $duration = $duration|0;
       u$0 = u$0|0;
       var $$ = 0, $$0 = 0, $$lcssa = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
       var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 336|0);
       $2 = $1;
       __ZN7Sap_Cpu8set_timeEl($2,0);
       $3 = (__ZNK7Sap_Cpu4timeEv($2)|0);
       $4 = HEAP32[$duration>>2]|0;
       $5 = ($3|0)<($4|0);
       L1: do {
        if ($5) {
         $6 = $1;
         $7 = (($this) + 956|0);
         $8 = $4;
         while(1) {
          $9 = (__ZN7Sap_Cpu3runEl($2,$8)|0);
          if ($9) {
           $$0 = (48680);
           label = 12;
           break;
          }
          $10 = HEAP16[$6>>1]|0;
          $11 = ($10&65535)>(65279);
          if ($11) {
           $$0 = (48680);
           label = 12;
           break;
          }
          $12 = ($10<<16>>16)==(-257);
          do {
           if ($12) {
            $13 = HEAP32[$7>>2]|0;
            $14 = HEAP32[$duration>>2]|0;
            $15 = ($13|0)>($14|0);
            if ($15) {
             __ZN7Sap_Cpu8set_timeEl($2,$14);
             break;
            } else {
             __ZN7Sap_Cpu8set_timeEl($2,$13);
             $16 = (__ZNK7Sap_Emu11play_periodEv($this)|0);
             $17 = HEAP32[$7>>2]|0;
             $18 = (($17) + ($16))|0;
             HEAP32[$7>>2] = $18;
             __ZN7Sap_Emu9call_playEv($this);
             break;
            }
           }
          } while(0);
          $19 = (__ZNK7Sap_Cpu4timeEv($2)|0);
          $20 = HEAP32[$duration>>2]|0;
          $21 = ($19|0)<($20|0);
          if ($21) {
           $8 = $20;
          } else {
           $$lcssa = $19;
           break L1;
          }
         }
         if ((label|0) == 12) {
          STACKTOP = sp;return ($$0|0);
         }
        } else {
         $$lcssa = $3;
        }
       } while(0);
       HEAP32[$duration>>2] = $$lcssa;
       $22 = (($this) + 956|0);
       $23 = HEAP32[$22>>2]|0;
       $24 = (($23) - ($$lcssa))|0;
       $25 = ($24|0)<(0);
       $$ = $25 ? 0 : $24;
       HEAP32[$22>>2] = $$;
       $26 = (($this) + 964|0);
       $27 = HEAP32[$duration>>2]|0;
       __ZN7Sap_Apu9end_frameEi($26,$27);
       $28 = (($this) + 400|0);
       $29 = HEAP8[$28]|0;
       $30 = ($29<<24>>24)==(0);
       if ($30) {
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
       }
       $31 = (($this) + 1068|0);
       $32 = HEAP32[$duration>>2]|0;
       __ZN7Sap_Apu9end_frameEi($31,$32);
       $$0 = 0;
       STACKTOP = sp;return ($$0|0);
      }
      function __ZN7Sap_Cpu8set_timeEl($this,$t) {
       $this = $this|0;
       $t = $t|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 8|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = ($2);
       $4 = HEAP32[$3>>2]|0;
       $5 = (($t) - ($4))|0;
       $6 = (($2) + 4|0);
       HEAP32[$6>>2] = $5;
       STACKTOP = sp;return;
      }
      function __ZN7Sap_Emu9call_playEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 388|0);
       $2 = HEAP32[$1>>2]|0;
       if ((($2|0) == 67)) {
        $5 = (($this) + 380|0);
        $6 = HEAP32[$5>>2]|0;
        $7 = (($6) + 6)|0;
        __ZN7Sap_Emu7cpu_jsrEj($this,$7);
        STACKTOP = sp;return;
       } else if ((($2|0) == 66)) {
        $3 = (($this) + 380|0);
        $4 = HEAP32[$3>>2]|0;
        __ZN7Sap_Emu7cpu_jsrEj($this,$4);
        STACKTOP = sp;return;
       } else {
        STACKTOP = sp;return;
       }
      }
      function __ZL8from_hexPKh($in) {
       $in = $in|0;
       var $$0 = 0, $$012 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result$03 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $$012 = $in;$1 = 3;$result$03 = 0;
       while(1) {
        $2 = HEAP8[$$012]|0;
        $3 = $2&255;
        $4 = (__Z13from_hex_chari($3)|0);
        $5 = ($4|0)>(15);
        if ($5) {
         $$0 = -1;
         label = 4;
         break;
        }
        $6 = (($$012) + 1|0);
        $7 = $result$03 << 4;
        $8 = (($4) + ($7))|0;
        $9 = (($1) + -1)|0;
        $10 = ($1|0)==(0);
        if ($10) {
         $$0 = $8;
         label = 4;
         break;
        } else {
         $$012 = $6;$1 = $9;$result$03 = $8;
        }
       }
       if ((label|0) == 4) {
        STACKTOP = sp;return ($$0|0);
       }
       return 0|0;
      }
      function __ZL8from_decPKhS0_($in,$end) {
       $in = $in|0;
       $end = $end|0;
       var $$0 = 0, $$012 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$03 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($in>>>0)<($end>>>0);
       L1: do {
        if ($1) {
         $2 = ($in>>>0)<($end>>>0);
         if ($2) {
          $$012 = $in;$n$03 = 0;
         } else {
          $$0 = 0;
          break;
         }
         while(1) {
          $3 = HEAP8[$$012]|0;
          $4 = $3&255;
          $5 = (($4) + -48)|0;
          $6 = ($5>>>0)>(9);
          if ($6) {
           $$0 = -1;
           break L1;
          }
          $7 = (($$012) + 1|0);
          $8 = ($n$03*10)|0;
          $9 = (($5) + ($8))|0;
          $10 = ($7>>>0)<($end>>>0);
          if ($10) {
           $$012 = $7;$n$03 = $9;
          } else {
           $$0 = $9;
           break;
          }
         }
        } else {
         $$0 = -1;
        }
       } while(0);
       STACKTOP = sp;return ($$0|0);
      }
      function __ZL12parse_stringPKhS0_iPc($in,$end,$len,$out) {
       $in = $in|0;
       $end = $end|0;
       $len = $len|0;
       $out = $out|0;
       var $$01 = 0, $$01$phi = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $start$0 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($in) + 1|0);
       $2 = HEAP8[$in]|0;
       $3 = ($2<<24>>24)==(34);
       L1: do {
        if ($3) {
         $4 = ($1>>>0)<($end>>>0);
         if ($4) {
          $$01 = $1;
         } else {
          $$1 = $1;$start$0 = $1;
          break;
         }
         while(1) {
          $6 = HEAP8[$$01]|0;
          $7 = ($6<<24>>24)==(34);
          $8 = (($$01) + 1|0);
          if ($7) {
           $$1 = $$01;$start$0 = $1;
           break L1;
          }
          $5 = ($8>>>0)<($end>>>0);
          if ($5) {
           $$01$phi = $8;$$01 = $$01$phi;
          } else {
           $$1 = $8;$start$0 = $1;
           break;
          }
         }
        } else {
         $$1 = $end;$start$0 = $in;
        }
       } while(0);
       $9 = (($len) + -1)|0;
       $10 = $$1;
       $11 = $start$0;
       $12 = (($10) - ($11))|0;
       $13 = (__ZL3minii573($9,$12)|0);
       $14 = (($out) + ($13)|0);
       HEAP8[$14] = 0;
       _memcpy(($out|0),($start$0|0),($13|0))|0;
       STACKTOP = sp;return;
      }
      function __ZL3minii573($x,$y) {
       $x = $x|0;
       $y = $y|0;
       var $1 = 0, $x$y = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($x|0)<($y|0);
       $x$y = $1 ? $x : $y;
       STACKTOP = sp;return ($x$y|0);
      }
      function __ZL11new_sap_emuv() {
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (__ZN8Gme_FilenwEj(84496)|0);
       $2 = ($1|0)==(0|0);
       if ($2) {
        $4 = 0;
       } else {
        $3 = $1;
        __ZN7Sap_EmuC2Ev($3);
        $4 = $3;
       }
       $5 = $4;
       STACKTOP = sp;return ($5|0);
      }
      function __ZL12new_sap_filev() {
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (__ZN8Gme_FilenwEj(896)|0);
       $2 = ($1|0)==(0|0);
       if ($2) {
        $4 = 0;
       } else {
        $3 = $1;
        __ZN8Sap_FileC1Ev($3);
        $4 = $3;
       }
       $5 = $4;
       STACKTOP = sp;return ($5|0);
      }
      function __ZN8Sap_FileC1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN8Sap_FileC2Ev($this);
       STACKTOP = sp;return;
      }
      function __ZN8Sap_FileC2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $this;
       __ZN9Gme_Info_C2Ev($1);
       $2 = $this;
       HEAP32[$2>>2] = (((49104) + 8|0));
       $3 = $this;
       __ZN8Gme_File8set_typeEPK11gme_type_t_($3,(48632));
       STACKTOP = sp;return;
      }
      function __ZN8Sap_FileD1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN8Sap_FileD2Ev($this);
       STACKTOP = sp;return;
      }
      function __ZN8Sap_FileD0Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       __ZN8Sap_FileD1Ev($this);
       $1 = ($this);
       __ZN8Gme_FiledlEPv($1);
       STACKTOP = sp;return;
      }
      function __ZN8Sap_File9load_mem_EPKhl($this,$begin,$size) {
       $this = $this|0;
       $begin = $begin|0;
       $size = $size|0;
       var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 316|0);
       $2 = (__ZL10parse_infoPKhlPN7Sap_Emu6info_tE($begin,$size,$1)|0);
       $3 = ($2|0)==(0|0);
       if (!($3)) {
        $$0 = $2;
        STACKTOP = sp;return ($$0|0);
       }
       $4 = $this;
       $5 = (($this) + 340|0);
       $6 = HEAP32[$5>>2]|0;
       __ZN8Gme_File15set_track_countEi($4,$6);
       $$0 = 0;
       STACKTOP = sp;return ($$0|0);
      }
      function __ZNK8Sap_File11track_info_EP12track_info_ti($this,$out,u$0) {
       $this = $this|0;
       $out = $out|0;
       u$0 = u$0|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 316|0);
       __ZL15copy_sap_fieldsRKN7Sap_Emu6info_tEP12track_info_t($1,$out);
       STACKTOP = sp;return (0|0);
      }
      function __ZN8Sap_FileD2Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $this;
       __ZN9Gme_Info_D2Ev($1);
       STACKTOP = sp;return;
      }
      function __ZN7Sms_OscC2Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $this;
       ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;HEAP32[$1+16>>2]=0|0;
       STACKTOP = sp;return;
      }
      function __ZN7Sms_Osc5resetEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 24|0);
       HEAP32[$1>>2] = 0;
       $2 = (($this) + 28|0);
       HEAP32[$2>>2] = 0;
       $3 = (($this) + 32|0);
       HEAP32[$3>>2] = 0;
       $4 = (($this) + 20|0);
       HEAP32[$4>>2] = 3;
       $5 = (($this) + 12|0);
       $6 = HEAP32[$5>>2]|0;
       $7 = (($this) + 16|0);
       HEAP32[$7>>2] = $6;
       STACKTOP = sp;return;
      }
      function __ZN10Sms_Square3runEii($this,$time,$end_time) {
       $this = $this|0;
       $time = $time|0;
       $end_time = $end_time|0;
       var $$0 = 0, $$0$phi = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
       var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
       var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
       var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $delta1$0 = 0, $delta1$0$phi = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 32|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = ($2|0)==(0);
       do {
        if ($3) {
         label = 3;
        } else {
         $4 = (($this) + 36|0);
         $5 = HEAP32[$4>>2]|0;
         $6 = ($5|0)<(129);
         if ($6) {
          label = 3;
          break;
         }
         $33 = (($this) + 40|0);
         $34 = HEAP32[$33>>2]|0;
         $35 = ($34|0)!=(0);
         $36 = (0 - ($2))|0;
         $37 = $35 ? $2 : $36;
         $38 = (($this) + 28|0);
         $39 = HEAP32[$38>>2]|0;
         $40 = ($37|0)==($39|0);
         if (!($40)) {
          $41 = (($37) - ($39))|0;
          HEAP32[$38>>2] = $37;
          $42 = (($this) + 44|0);
          $43 = HEAP32[$42>>2]|0;
          $44 = (($this) + 16|0);
          $45 = HEAP32[$44>>2]|0;
          __ZNK10Blip_SynthILi12ELi1EE6offsetEiiP11Blip_Buffer($43,$time,$41,$45);
         }
         $46 = (($this) + 24|0);
         $47 = HEAP32[$46>>2]|0;
         $48 = (($47) + ($time))|0;
         $49 = ($48|0)<($end_time|0);
         if (!($49)) {
          $$1 = $48;
          break;
         }
         $50 = (($this) + 16|0);
         $51 = HEAP32[$50>>2]|0;
         $52 = $37 << 1;
         $53 = (($this) + 44|0);
         $$0 = $48;$delta1$0 = $52;
         while(1) {
          $54 = (0 - ($delta1$0))|0;
          $55 = HEAP32[$53>>2]|0;
          __ZNK10Blip_SynthILi12ELi1EE13offset_inlineEiiP11Blip_Buffer($55,$$0,$54,$51);
          $56 = HEAP32[$4>>2]|0;
          $57 = (($56) + ($$0))|0;
          $58 = HEAP32[$33>>2]|0;
          $59 = $58 ^ 1;
          HEAP32[$33>>2] = $59;
          $60 = ($57|0)<($end_time|0);
          if ($60) {
           $delta1$0$phi = $54;$$0$phi = $57;$delta1$0 = $delta1$0$phi;$$0 = $$0$phi;
          } else {
           break;
          }
         }
         $61 = ($58|0)!=(1);
         $62 = HEAP32[$1>>2]|0;
         $63 = (0 - ($62))|0;
         $64 = $61 ? $62 : $63;
         HEAP32[$38>>2] = $64;
         $$1 = $57;
        }
       } while(0);
       do {
        if ((label|0) == 3) {
         $7 = (($this) + 28|0);
         $8 = HEAP32[$7>>2]|0;
         $9 = ($8|0)==(0);
         if (!($9)) {
          $10 = (($this) + 44|0);
          $11 = HEAP32[$10>>2]|0;
          $12 = (0 - ($8))|0;
          $13 = (($this) + 16|0);
          $14 = HEAP32[$13>>2]|0;
          __ZNK10Blip_SynthILi12ELi1EE6offsetEiiP11Blip_Buffer($11,$time,$12,$14);
          HEAP32[$7>>2] = 0;
         }
         $15 = (($this) + 24|0);
         $16 = HEAP32[$15>>2]|0;
         $17 = (($16) + ($time))|0;
         $18 = (($this) + 36|0);
         $19 = HEAP32[$18>>2]|0;
         $20 = ($19|0)==(0);
         if ($20) {
          $$1 = $end_time;
          break;
         }
         $21 = ($17|0)<($end_time|0);
         if (!($21)) {
          $$1 = $17;
          break;
         }
         $22 = (($end_time) + -1)|0;
         $23 = (($22) - ($17))|0;
         $24 = (($23) + ($19))|0;
         $25 = (($24|0) / ($19|0))&-1;
         $26 = (($this) + 40|0);
         $27 = HEAP32[$26>>2]|0;
         $28 = (($27) + ($25))|0;
         $29 = $28 & 1;
         HEAP32[$26>>2] = $29;
         $30 = HEAP32[$18>>2]|0;
         $31 = Math_imul($30, $25)|0;
         $32 = (($31) + ($17))|0;
         $$1 = $32;
        }
       } while(0);
       $65 = (($$1) - ($end_time))|0;
       $66 = (($this) + 24|0);
       HEAP32[$66>>2] = $65;
       STACKTOP = sp;return;
      }
      function __ZN9Sms_Noise3runEii($this,$time,$end_time) {
       $this = $this|0;
       $time = $time|0;
       $end_time = $end_time|0;
       var $$ = 0, $$1 = 0, $$2 = 0, $$3 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
       var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
       var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $delta1$0 = 0, $delta1$1 = 0, $end_time$ = 0, $shifter$0 = 0, $shifter$0$phi = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 32|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = (($this) + 40|0);
       $4 = HEAP32[$3>>2]|0;
       $5 = $4 & 1;
       $6 = ($5|0)==(0);
       $7 = (0 - ($2))|0;
       $$3 = $6 ? $2 : $7;
       $8 = (($this) + 28|0);
       $9 = HEAP32[$8>>2]|0;
       $10 = ($$3|0)==($9|0);
       if (!($10)) {
        $11 = (($$3) - ($9))|0;
        HEAP32[$8>>2] = $$3;
        $12 = (($this) + 48|0);
        $13 = (($this) + 16|0);
        $14 = HEAP32[$13>>2]|0;
        __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($12,$time,$11,$14);
       }
       $15 = (($this) + 24|0);
       $16 = HEAP32[$15>>2]|0;
       $17 = (($16) + ($time))|0;
       $18 = HEAP32[$1>>2]|0;
       $19 = ($18|0)==(0);
       $end_time$ = $19 ? $end_time : $17;
       $20 = ($end_time$|0)<($end_time|0);
       if (!($20)) {
        $$2 = $end_time$;
        $45 = (($$2) - ($end_time))|0;
        HEAP32[$15>>2] = $45;
        STACKTOP = sp;return;
       }
       $21 = (($this) + 16|0);
       $22 = HEAP32[$21>>2]|0;
       $23 = HEAP32[$3>>2]|0;
       $24 = $$3 << 1;
       $25 = (($this) + 36|0);
       $26 = HEAP32[$25>>2]|0;
       $27 = HEAP32[$26>>2]|0;
       $28 = $27 << 1;
       $29 = ($27|0)!=(0);
       $$ = $29 ? $28 : 16;
       $30 = (($this) + 44|0);
       $31 = (($this) + 48|0);
       $$1 = $end_time$;$delta1$0 = $24;$shifter$0 = $23;
       while(1) {
        $32 = (($shifter$0) + 1)|0;
        $33 = HEAP32[$30>>2]|0;
        $34 = $shifter$0 & 1;
        $35 = (0 - ($34))|0;
        $36 = $33 & $35;
        $37 = $shifter$0 >>> 1;
        $38 = $36 ^ $37;
        $39 = $32 & 2;
        $40 = ($39|0)==(0);
        if ($40) {
         $delta1$1 = $delta1$0;
        } else {
         $41 = (0 - ($delta1$0))|0;
         __ZNK10Blip_SynthILi8ELi1EE13offset_inlineEiiP11Blip_Buffer($31,$$1,$41,$22);
         $delta1$1 = $41;
        }
        $42 = (($$1) + ($$))|0;
        $43 = ($42|0)<($end_time|0);
        if ($43) {
         $shifter$0$phi = $38;$$1 = $42;$delta1$0 = $delta1$1;$shifter$0 = $shifter$0$phi;
        } else {
         break;
        }
       }
       HEAP32[$3>>2] = $38;
       $44 = $delta1$1 >> 1;
       HEAP32[$8>>2] = $44;
       $$2 = $42;
       $45 = (($$2) - ($end_time))|0;
       HEAP32[$15>>2] = $45;
       STACKTOP = sp;return;
      }
      function __ZN7Sms_ApuC2Ev($this) {
       $this = $this|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 16|0);
       __ZN10Sms_SquareC1Ev($1);
       $2 = (($this) + 64|0);
       __ZN10Sms_SquareC1Ev($2);
       $3 = (($this) + 112|0);
       __ZN10Sms_SquareC1Ev($3);
       $4 = (($this) + 160|0);
       __ZN10Blip_SynthILi12ELi1EEC1Ev($4);
       $5 = (($this) + 984|0);
       __ZN9Sms_NoiseC1Ev($5);
       $6 = (($this) + 60|0);
       HEAP32[$6>>2] = $4;
       $7 = (($this) + 16|0);
       $8 = ($this);
       HEAP32[$8>>2] = $7;
       $9 = (($this) + 108|0);
       HEAP32[$9>>2] = $4;
       $10 = (($this) + 64|0);
       $11 = (($this) + 4|0);
       HEAP32[$11>>2] = $10;
       $12 = (($this) + 156|0);
       HEAP32[$12>>2] = $4;
       $13 = (($this) + 112|0);
       $14 = (($this) + 8|0);
       HEAP32[$14>>2] = $13;
       $15 = ($5);
       $16 = (($this) + 12|0);
       HEAP32[$16>>2] = $15;
       __ZN7Sms_Apu6volumeEd($this,1.0);
       __ZN7Sms_Apu5resetEji($this,0,0);
       STACKTOP = sp;return;
      }
      function __ZN10Sms_SquareC1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN10Sms_SquareC2Ev($this);
       STACKTOP = sp;return;
      }
      function __ZN9Sms_NoiseC1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN9Sms_NoiseC2Ev($this);
       STACKTOP = sp;return;
      }
      function __ZN7Sms_Apu6volumeEd($this,$vol) {
       $this = $this|0;
       $vol = +$vol;
       var $1 = 0.0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $vol * 0.00166015624999999995663;
       $2 = (($this) + 160|0);
       __ZN10Blip_SynthILi12ELi1EE6volumeEd($2,$1);
       $3 = (($this) + 1032|0);
       __ZN10Blip_SynthILi8ELi1EE6volumeEd($3,$1);
       STACKTOP = sp;return;
      }
      function __ZN7Sms_Apu5resetEji($this,$feedback,$noise_width) {
       $this = $this|0;
       $feedback = $feedback|0;
       $noise_width = $noise_width|0;
       var $$0 = 0, $$01 = 0, $$123 = 0, $$123$phi = 0, $$14 = 0, $$14$phi = 0, $$promoted = 0, $1 = 0, $10 = 0, $10$phi = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
       var $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 976|0);
       HEAP32[$1>>2] = 0;
       $2 = (($this) + 980|0);
       HEAP32[$2>>2] = 0;
       $3 = ($feedback|0)==(0);
       $4 = ($noise_width|0)==(0);
       $or$cond = $3 | $4;
       $$0 = $or$cond ? 16 : $noise_width;
       $5 = (($$0) + -1)|0;
       $6 = 1 << $5;
       $7 = (($this) + 1596|0);
       HEAP32[$7>>2] = $6;
       $8 = (($this) + 1592|0);
       HEAP32[$8>>2] = 0;
       $9 = ($$0|0)==(0);
       if (!($9)) {
        $$01 = $or$cond ? 9 : $feedback;
        $$promoted = HEAP32[$8>>2]|0;
        $$123 = $$01;$$14 = $$0;$10 = $$promoted;
        while(1) {
         $11 = (($$14) + -1)|0;
         $12 = $10 << 1;
         $13 = $$123 & 1;
         $14 = $12 | $13;
         $15 = $$123 >>> 1;
         $16 = ($11|0)==(0);
         if ($16) {
          break;
         } else {
          $10$phi = $14;$$14$phi = $11;$$123$phi = $15;$10 = $10$phi;$$14 = $$14$phi;$$123 = $$123$phi;
         }
        }
        HEAP32[$8>>2] = $14;
       }
       $17 = (($this) + 16|0);
       __ZN10Sms_Square5resetEv($17);
       $18 = (($this) + 64|0);
       __ZN10Sms_Square5resetEv($18);
       $19 = (($this) + 112|0);
       __ZN10Sms_Square5resetEv($19);
       $20 = (($this) + 984|0);
       __ZN9Sms_Noise5resetEv($20);
       STACKTOP = sp;return;
      }
      function __ZN7Sms_ApuD2Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       STACKTOP = sp;return;
      }
      function __ZN7Sms_Apu9treble_eqERK9blip_eq_t($this,$eq) {
       $this = $this|0;
       $eq = $eq|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 160|0);
       __ZN10Blip_SynthILi12ELi1EE9treble_eqERK9blip_eq_t($1,$eq);
       $2 = (($this) + 1032|0);
       __ZN10Blip_SynthILi8ELi1EE9treble_eqERK9blip_eq_t($2,$eq);
       STACKTOP = sp;return;
      }
      function __ZN7Sms_Apu10osc_outputEiP11Blip_BufferS1_S1_($this,$index,$center,$left,$right) {
       $this = $this|0;
       $index = $index|0;
       $center = $center|0;
       $left = $left|0;
       $right = $right|0;
       var $$not = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond1 = 0, $or$cond1$not = 0, $or$cond3 = 0, $or$cond4 = 0, $or$cond5 = 0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($index>>>0)<(4);
       if (!($1)) {
        ___assert_fail(((49216)|0),((49248)|0),194,((49288)|0));
        // unreachable;
       }
       $$not = ($center|0)==(0|0);
       $2 = ($left|0)==(0|0);
       $or$cond = $$not | $2;
       $3 = ($right|0)==(0|0);
       $or$cond1 = $or$cond | $3;
       $or$cond1$not = $or$cond1 ^ 1;
       $or$cond3 = $$not & $2;
       $or$cond4 = $or$cond3 & $3;
       $or$cond5 = $or$cond4 | $or$cond1$not;
       if ($or$cond5) {
        $4 = (($this) + ($index<<2)|0);
        $5 = HEAP32[$4>>2]|0;
        $6 = (($5) + 4|0);
        HEAP32[$6>>2] = $right;
        $7 = (($5) + 8|0);
        HEAP32[$7>>2] = $left;
        $8 = (($5) + 12|0);
        HEAP32[$8>>2] = $center;
        $9 = (($5) + 20|0);
        $10 = HEAP32[$9>>2]|0;
        $11 = (($5) + ($10<<2)|0);
        $12 = HEAP32[$11>>2]|0;
        $13 = (($5) + 16|0);
        HEAP32[$13>>2] = $12;
        STACKTOP = sp;return;
       } else {
        ___assert_fail(((49304)|0),((49248)|0),195,((49288)|0));
        // unreachable;
       }
      }
      function __ZN7Sms_Apu6outputEP11Blip_BufferS1_S1_($this,$center,$left,$right) {
       $this = $this|0;
       $center = $center|0;
       $left = $left|0;
       $right = $right|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN7Sms_Apu10osc_outputEiP11Blip_BufferS1_S1_($this,0,$center,$left,$right);
       __ZN7Sms_Apu10osc_outputEiP11Blip_BufferS1_S1_($this,1,$center,$left,$right);
       __ZN7Sms_Apu10osc_outputEiP11Blip_BufferS1_S1_($this,2,$center,$left,$right);
       __ZN7Sms_Apu10osc_outputEiP11Blip_BufferS1_S1_($this,3,$center,$left,$right);
       STACKTOP = sp;return;
      }
      function __ZN10Sms_Square5resetEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 36|0);
       HEAP32[$1>>2] = 0;
       $2 = (($this) + 40|0);
       HEAP32[$2>>2] = 0;
       $3 = ($this);
       __ZN7Sms_Osc5resetEv($3);
       STACKTOP = sp;return;
      }
      function __ZN9Sms_Noise5resetEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 36|0);
       HEAP32[$1>>2] = ((49520));
       $2 = (($this) + 40|0);
       HEAP32[$2>>2] = 32768;
       $3 = (($this) + 44|0);
       HEAP32[$3>>2] = 36864;
       $4 = ($this);
       __ZN7Sms_Osc5resetEv($4);
       STACKTOP = sp;return;
      }
      function __ZN7Sms_Apu9run_untilEi($this,$end_time) {
       $this = $this|0;
       $end_time = $end_time|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
       var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 976|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = ($2|0)>($end_time|0);
       if ($3) {
        ___assert_fail(((49368)|0),((49248)|0),236,((49392)|0));
        // unreachable;
       }
       $4 = ($2|0)<($end_time|0);
       if (!($4)) {
        STACKTOP = sp;return;
       }
       $5 = (($this) + 984|0);
       $6 = ($this);
       $7 = HEAP32[$6>>2]|0;
       $8 = (($7) + 16|0);
       $9 = HEAP32[$8>>2]|0;
       $10 = ($9|0)==(0|0);
       if (!($10)) {
        __ZN11Blip_Buffer12set_modifiedEv($9);
        $11 = (($this) + 16|0);
        $12 = HEAP32[$1>>2]|0;
        __ZN10Sms_Square3runEii($11,$12,$end_time);
       }
       $13 = (($this) + 4|0);
       $14 = HEAP32[$13>>2]|0;
       $15 = (($14) + 16|0);
       $16 = HEAP32[$15>>2]|0;
       $17 = ($16|0)==(0|0);
       if (!($17)) {
        __ZN11Blip_Buffer12set_modifiedEv($16);
        $18 = (($this) + 64|0);
        $19 = HEAP32[$1>>2]|0;
        __ZN10Sms_Square3runEii($18,$19,$end_time);
       }
       $20 = (($this) + 8|0);
       $21 = HEAP32[$20>>2]|0;
       $22 = (($21) + 16|0);
       $23 = HEAP32[$22>>2]|0;
       $24 = ($23|0)==(0|0);
       if (!($24)) {
        __ZN11Blip_Buffer12set_modifiedEv($23);
        $25 = (($this) + 112|0);
        $26 = HEAP32[$1>>2]|0;
        __ZN10Sms_Square3runEii($25,$26,$end_time);
       }
       $27 = (($this) + 12|0);
       $28 = HEAP32[$27>>2]|0;
       $29 = (($28) + 16|0);
       $30 = HEAP32[$29>>2]|0;
       $31 = ($30|0)==(0|0);
       if (!($31)) {
        __ZN11Blip_Buffer12set_modifiedEv($30);
        $32 = HEAP32[$1>>2]|0;
        __ZN9Sms_Noise3runEii($5,$32,$end_time);
       }
       HEAP32[$1>>2] = $end_time;
       STACKTOP = sp;return;
      }
      function __ZN7Sms_Apu9end_frameEi($this,$end_time) {
       $this = $this|0;
       $end_time = $end_time|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 976|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = ($2|0)<($end_time|0);
       if ($3) {
        __ZN7Sms_Apu9run_untilEi($this,$end_time);
       }
       $4 = HEAP32[$1>>2]|0;
       $5 = ($4|0)<($end_time|0);
       if ($5) {
        ___assert_fail(((49408)|0),((49248)|0),263,((49432)|0));
        // unreachable;
       } else {
        $6 = (($4) - ($end_time))|0;
        HEAP32[$1>>2] = $6;
        STACKTOP = sp;return;
       }
      }
      function __ZN7Sms_Apu14write_ggstereoEii($this,$time,$data) {
       $this = $this|0;
       $time = $time|0;
       $data = $data|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
       var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
       var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
       var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($data>>>0)<(256);
       if (!($1)) {
        ___assert_fail(((49448)|0),((49248)|0),269,((49472)|0));
        // unreachable;
       }
       __ZN7Sms_Apu9run_untilEi($this,$time);
       $2 = (($this) + 160|0);
       $3 = ($this);
       $4 = HEAP32[$3>>2]|0;
       $5 = (($4) + 16|0);
       $6 = HEAP32[$5>>2]|0;
       $7 = $data >>> 3;
       $8 = $7 & 2;
       $9 = $data & 1;
       $10 = $8 | $9;
       $11 = (($4) + 20|0);
       HEAP32[$11>>2] = $10;
       $12 = (($4) + ($10<<2)|0);
       $13 = HEAP32[$12>>2]|0;
       HEAP32[$5>>2] = $13;
       $14 = ($13|0)==($6|0);
       do {
        if (!($14)) {
         $15 = (($4) + 28|0);
         $16 = HEAP32[$15>>2]|0;
         $17 = ($16|0)==(0);
         if ($17) {
          break;
         }
         $18 = ($6|0)==(0|0);
         if (!($18)) {
          __ZN11Blip_Buffer12set_modifiedEv($6);
          $19 = HEAP32[$15>>2]|0;
          $20 = (0 - ($19))|0;
          __ZNK10Blip_SynthILi12ELi1EE6offsetEiiP11Blip_Buffer($2,$time,$20,$6);
         }
         HEAP32[$15>>2] = 0;
        }
       } while(0);
       $21 = (($this) + 4|0);
       $22 = HEAP32[$21>>2]|0;
       $23 = $data >> 1;
       $24 = (($22) + 16|0);
       $25 = HEAP32[$24>>2]|0;
       $26 = $23 >>> 3;
       $27 = $26 & 2;
       $28 = $23 & 1;
       $29 = $27 | $28;
       $30 = (($22) + 20|0);
       HEAP32[$30>>2] = $29;
       $31 = (($22) + ($29<<2)|0);
       $32 = HEAP32[$31>>2]|0;
       HEAP32[$24>>2] = $32;
       $33 = ($32|0)==($25|0);
       do {
        if (!($33)) {
         $34 = (($22) + 28|0);
         $35 = HEAP32[$34>>2]|0;
         $36 = ($35|0)==(0);
         if ($36) {
          break;
         }
         $37 = ($25|0)==(0|0);
         if (!($37)) {
          __ZN11Blip_Buffer12set_modifiedEv($25);
          $38 = HEAP32[$34>>2]|0;
          $39 = (0 - ($38))|0;
          __ZNK10Blip_SynthILi12ELi1EE6offsetEiiP11Blip_Buffer($2,$time,$39,$25);
         }
         HEAP32[$34>>2] = 0;
        }
       } while(0);
       $40 = (($this) + 8|0);
       $41 = HEAP32[$40>>2]|0;
       $42 = $data >> 2;
       $43 = (($41) + 16|0);
       $44 = HEAP32[$43>>2]|0;
       $45 = $42 >>> 3;
       $46 = $45 & 2;
       $47 = $42 & 1;
       $48 = $46 | $47;
       $49 = (($41) + 20|0);
       HEAP32[$49>>2] = $48;
       $50 = (($41) + ($48<<2)|0);
       $51 = HEAP32[$50>>2]|0;
       HEAP32[$43>>2] = $51;
       $52 = ($51|0)==($44|0);
       do {
        if (!($52)) {
         $53 = (($41) + 28|0);
         $54 = HEAP32[$53>>2]|0;
         $55 = ($54|0)==(0);
         if ($55) {
          break;
         }
         $56 = ($44|0)==(0|0);
         if (!($56)) {
          __ZN11Blip_Buffer12set_modifiedEv($44);
          $57 = HEAP32[$53>>2]|0;
          $58 = (0 - ($57))|0;
          __ZNK10Blip_SynthILi12ELi1EE6offsetEiiP11Blip_Buffer($2,$time,$58,$44);
         }
         HEAP32[$53>>2] = 0;
        }
       } while(0);
       $59 = (($this) + 12|0);
       $60 = HEAP32[$59>>2]|0;
       $61 = $data >> 3;
       $62 = (($60) + 16|0);
       $63 = HEAP32[$62>>2]|0;
       $64 = $61 >>> 3;
       $65 = $64 & 2;
       $66 = $61 & 1;
       $67 = $65 | $66;
       $68 = (($60) + 20|0);
       HEAP32[$68>>2] = $67;
       $69 = (($60) + ($67<<2)|0);
       $70 = HEAP32[$69>>2]|0;
       HEAP32[$62>>2] = $70;
       $71 = ($70|0)==($63|0);
       if ($71) {
        STACKTOP = sp;return;
       }
       $72 = (($60) + 28|0);
       $73 = HEAP32[$72>>2]|0;
       $74 = ($73|0)==(0);
       if ($74) {
        STACKTOP = sp;return;
       }
       $75 = ($63|0)==(0|0);
       if (!($75)) {
        __ZN11Blip_Buffer12set_modifiedEv($63);
        $76 = HEAP32[$72>>2]|0;
        $77 = (0 - ($76))|0;
        __ZNK10Blip_SynthILi12ELi1EE6offsetEiiP11Blip_Buffer($2,$time,$77,$63);
       }
       HEAP32[$72>>2] = 0;
       STACKTOP = sp;return;
      }
      function __ZN7Sms_Apu10write_dataEii($this,$time,$data) {
       $this = $this|0;
       $time = $time|0;
       $data = $data|0;
       var $$in = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
       var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
       var $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($data>>>0)<(256);
       if (!($1)) {
        ___assert_fail(((49448)|0),((49248)|0),299,((49488)|0));
        // unreachable;
       }
       __ZN7Sms_Apu9run_untilEi($this,$time);
       $2 = $data & 128;
       $3 = ($2|0)!=(0);
       if ($3) {
        $4 = (($this) + 980|0);
        HEAP32[$4>>2] = $data;
       }
       $5 = (($this) + 980|0);
       $6 = HEAP32[$5>>2]|0;
       $7 = $6 >>> 5;
       $8 = $7 & 3;
       $9 = $6 & 16;
       $10 = ($9|0)==(0);
       if (!($10)) {
        $11 = $data & 15;
        $12 = (49504 + ($11)|0);
        $13 = HEAP8[$12]|0;
        $14 = $13&255;
        $15 = (($this) + ($8<<2)|0);
        $16 = HEAP32[$15>>2]|0;
        $17 = (($16) + 32|0);
        HEAP32[$17>>2] = $14;
        STACKTOP = sp;return;
       }
       $18 = ($8|0)==(3);
       if ($18) {
        $29 = $data & 3;
        $30 = ($29|0)==(3);
        if ($30) {
         $33 = (($this) + 148|0);
         $34 = (($this) + 1020|0);
         HEAP32[$34>>2] = $33;
        } else {
         $31 = ((49520) + ($29<<2)|0);
         $32 = (($this) + 1020|0);
         HEAP32[$32>>2] = $31;
        }
        $35 = $data & 4;
        $36 = ($35|0)==(0);
        $37 = (($this) + 1592|0);
        $38 = (($this) + 1596|0);
        $$in = $36 ? $38 : $37;
        $39 = HEAP32[$$in>>2]|0;
        $40 = (($this) + 1028|0);
        HEAP32[$40>>2] = $39;
        $41 = (($this) + 1024|0);
        HEAP32[$41>>2] = 32768;
        STACKTOP = sp;return;
       } else {
        $19 = ((($this) + (($8*48)|0)|0) + 52|0);
        $20 = HEAP32[$19>>2]|0;
        if ($3) {
         $21 = $20 & 65280;
         $22 = $data << 4;
         $23 = $22 & 240;
         $24 = $21 | $23;
         HEAP32[$19>>2] = $24;
         STACKTOP = sp;return;
        } else {
         $25 = $20 & 255;
         $26 = $data << 8;
         $27 = $26 & 16128;
         $28 = $25 | $27;
         HEAP32[$19>>2] = $28;
         STACKTOP = sp;return;
        }
       }
      }
      function __ZN9Sms_NoiseC2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       __ZN7Sms_OscC2Ev($1);
       $2 = (($this) + 48|0);
       __ZN10Blip_SynthILi8ELi1EEC1Ev($2);
       STACKTOP = sp;return;
      }
      function __ZN10Sms_SquareC2Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       __ZN7Sms_OscC2Ev($1);
       STACKTOP = sp;return;
      }
      function __ZN8Snes_Spc4initEv($this) {
       $this = $this|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0;
       var $i$01 = 0, $i$01$phi = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 1868|0);
       $2 = $1;
       _memset(($2|0),0,66640)|0;
       $3 = ($this);
       $4 = (($this) + 2716|0);
       __ZN7Spc_Dsp4initEPv($3,$4);
       $5 = (($this) + 2008|0);
       HEAP32[$5>>2] = 256;
       $6 = (($this) + 2138|0);
       HEAP8[$6] = -1;
       $7 = (($this) + 2139|0);
       HEAP8[$7] = -64;
       $i$01 = 0;
       while(1) {
        $8 = (49536 + ($i$01)|0);
        $9 = HEAP8[$8]|0;
        $10 = $9&255;
        $11 = ($9&255) >>> 4;
        $12 = $i$01 << 1;
        $13 = ((($this) + ($12)|0) + 2204|0);
        HEAP8[$13] = $11;
        $14 = $10 & 15;
        $15 = $14&255;
        $16 = $12 | 1;
        $17 = ((($this) + ($16)|0) + 2204|0);
        HEAP8[$17] = $15;
        $18 = (($i$01) + 1)|0;
        $exitcond = ($18|0)==(128);
        if ($exitcond) {
         break;
        } else {
         $i$01$phi = $18;$i$01 = $i$01$phi;
        }
       }
       $19 = (($this) + 1612|0);
       _memcpy(($19|0),((50016)|0),256)|0;
       __ZN8Snes_Spc5resetEv($this);
       STACKTOP = sp;return (0|0);
      }
      function __ZN8Snes_Spc5resetEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 2716|0);
       _memset(($1|0),-1,65536)|0;
       __ZN8Snes_Spc10ram_loadedEv($this);
       __ZN8Snes_Spc12reset_commonEi($this,15);
       $2 = ($this);
       __ZN7Spc_Dsp5resetEv($2);
       STACKTOP = sp;return;
      }
      function __ZN8Snes_Spc9set_tempoEi($this,$t) {
       $this = $this|0;
       $t = $t|0;
       var $$ = 0, $$t = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 2008|0);
       HEAP32[$1>>2] = $t;
       $2 = ($t|0)==(0);
       $$t = $2 ? 1 : $t;
       $3 = $$t >> 1;
       $4 = (($3) + 4096)|0;
       $5 = (($4|0) / ($$t|0))&-1;
       $6 = ($5|0)<(4);
       $$ = $6 ? 4 : $5;
       $7 = (($this) + 1920|0);
       HEAP32[$7>>2] = $$;
       $8 = $$ << 3;
       $9 = (($this) + 1896|0);
       HEAP32[$9>>2] = $8;
       $10 = (($this) + 1872|0);
       HEAP32[$10>>2] = $8;
       STACKTOP = sp;return;
      }
      function __ZN8Snes_Spc13timers_loadedEv($this) {
       $this = $this|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
       var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
       var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 1941|0);
       $2 = (($this) + 1950|0);
       $3 = HEAP8[$2]|0;
       $4 = $3&255;
       $5 = (($4) + 255)|0;
       $6 = $5 & 255;
       $7 = (($6) + 1)|0;
       $8 = (($this) + 1876|0);
       HEAP32[$8>>2] = $7;
       $9 = HEAP8[$1]|0;
       $10 = $9&255;
       $11 = $10 & 1;
       $12 = (($this) + 1884|0);
       HEAP32[$12>>2] = $11;
       $13 = (($this) + 1969|0);
       $14 = HEAP8[$13]|0;
       $15 = $14&255;
       $16 = $15 & 15;
       $17 = (($this) + 1888|0);
       HEAP32[$17>>2] = $16;
       $18 = (($this) + 1951|0);
       $19 = HEAP8[$18]|0;
       $20 = $19&255;
       $21 = (($20) + 255)|0;
       $22 = $21 & 255;
       $23 = (($22) + 1)|0;
       $24 = (($this) + 1900|0);
       HEAP32[$24>>2] = $23;
       $25 = HEAP8[$1]|0;
       $26 = $25&255;
       $27 = $26 >>> 1;
       $28 = $27 & 1;
       $29 = (($this) + 1908|0);
       HEAP32[$29>>2] = $28;
       $30 = (($this) + 1970|0);
       $31 = HEAP8[$30]|0;
       $32 = $31&255;
       $33 = $32 & 15;
       $34 = (($this) + 1912|0);
       HEAP32[$34>>2] = $33;
       $35 = (($this) + 1952|0);
       $36 = HEAP8[$35]|0;
       $37 = $36&255;
       $38 = (($37) + 255)|0;
       $39 = $38 & 255;
       $40 = (($39) + 1)|0;
       $41 = (($this) + 1924|0);
       HEAP32[$41>>2] = $40;
       $42 = HEAP8[$1]|0;
       $43 = $42&255;
       $44 = $43 >>> 2;
       $45 = $44 & 1;
       $46 = (($this) + 1932|0);
       HEAP32[$46>>2] = $45;
       $47 = (($this) + 1971|0);
       $48 = HEAP8[$47]|0;
       $49 = $48&255;
       $50 = $49 & 15;
       $51 = (($this) + 1936|0);
       HEAP32[$51>>2] = $50;
       $52 = (($this) + 2008|0);
       $53 = HEAP32[$52>>2]|0;
       __ZN8Snes_Spc9set_tempoEi($this,$53);
       STACKTOP = sp;return;
      }
      function __ZN8Snes_Spc9load_regsEPKh($this,$in) {
       $this = $this|0;
       $in = $in|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
       sp = STACKTOP;
       $1 = (($this) + 1940|0);
       dest=$1+0|0; src=$in+0|0; stop=dest+16|0; do { HEAP8[dest]=HEAP8[src]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));;
       $2 = (($this) + 1956|0);
       _memmove(($2|0),($in|0),16)|0;
       HEAP8[$2] = 0;
       $3 = (($this) + 1957|0);
       HEAP8[$3] = 0;
       $4 = (($this) + 1966|0);
       HEAP8[$4] = 0;
       $5 = (($this) + 1967|0);
       HEAP8[$5] = 0;
       $6 = (($this) + 1968|0);
       HEAP8[$6] = 0;
       STACKTOP = sp;return;
      }
      function __ZN8Snes_Spc10ram_loadedEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 2072|0);
       HEAP32[$1>>2] = 0;
       $2 = (($this) + 2460|0);
       $3 = (($this) + 2956|0);
       __ZN8Snes_Spc9load_regsEPKh($this,$3);
       $4 = $2;
       _memset(($4|0),-1,256)|0;
       $5 = (($this) + 68252|0);
       _memset(($5|0),-1,256)|0;
       STACKTOP = sp;return;
      }
      function __ZN8Snes_Spc11regs_loadedEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 1941|0);
       $2 = HEAP8[$1]|0;
       $3 = $2&255;
       $4 = $3 & 128;
       __ZN8Snes_Spc10enable_romEi($this,$4);
       __ZN8Snes_Spc13timers_loadedEv($this);
       STACKTOP = sp;return;
      }
      function __ZN8Snes_Spc15reset_time_regsEv($this) {
       $this = $this|0;
       var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 2020|0);
       HEAP32[$1>>2] = 0;
       $2 = (($this) + 2004|0);
       HEAP8[$2] = 0;
       $3 = (($this) + 2000|0);
       HEAP32[$3>>2] = 0;
       $4 = (($this) + 1996|0);
       HEAP32[$4>>2] = 33;
       $5 = (($this) + 1868|0);
       HEAP32[$5>>2] = 1;
       $6 = (($this) + 1880|0);
       HEAP32[$6>>2] = 0;
       $7 = (($this) + 1892|0);
       HEAP32[$7>>2] = 1;
       $8 = (($this) + 1904|0);
       HEAP32[$8>>2] = 0;
       $9 = (($this) + 1916|0);
       HEAP32[$9>>2] = 1;
       $10 = (($this) + 1928|0);
       HEAP32[$10>>2] = 0;
       __ZN8Snes_Spc11regs_loadedEv($this);
       $11 = (($this) + 2024|0);
       HEAP32[$11>>2] = 0;
       __ZN8Snes_Spc9reset_bufEv($this);
       STACKTOP = sp;return;
      }
      function __ZN8Snes_Spc9reset_bufEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $out$01 = 0, $out$01$phi = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 2040|0);
       $2 = (($this) + 2056|0);
       $out$01 = $1;
       while(1) {
        $3 = (($out$01) + 2|0);
        HEAP16[$out$01>>1] = 0;
        $4 = ($3>>>0)<($2>>>0);
        if ($4) {
         $out$01$phi = $3;$out$01 = $out$01$phi;
        } else {
         break;
        }
       }
       $5 = (($this) + 2036|0);
       HEAP32[$5>>2] = $3;
       $6 = (($this) + 2028|0);
       HEAP32[$6>>2] = 0;
       $7 = ($this);
       __ZN7Spc_Dsp10set_outputEPsi($7,0,0);
       STACKTOP = sp;return;
      }
      function __ZN8Snes_Spc12reset_commonEi($this,$timer_counter_init) {
       $this = $this|0;
       $timer_counter_init = $timer_counter_init|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $scevgep = 0, $scevgep3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $timer_counter_init&255;
       $scevgep3 = (($this) + 1969|0);
       _memset(($scevgep3|0),($1|0),3)|0;
       $2 = (($this) + 1972|0);
       $3 = $2;
       ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;HEAP32[$3+12>>2]=0|0;HEAP32[$3+16>>2]=0|0;HEAP32[$3+20>>2]=0|0;
       $4 = ($2);
       HEAP32[$4>>2] = 65472;
       $5 = (($this) + 1940|0);
       HEAP8[$5] = 10;
       $6 = (($this) + 1941|0);
       HEAP8[$6] = -80;
       $scevgep = (($this) + 1960|0);
       $7 = $scevgep;
       HEAP8[$7]=0&255;HEAP8[$7+1|0]=(0>>8)&255;HEAP8[$7+2|0]=(0>>16)&255;HEAP8[$7+3|0]=0>>24;
       __ZN8Snes_Spc15reset_time_regsEv($this);
       STACKTOP = sp;return;
      }
      function __ZN8Snes_Spc8load_spcEPKvl($this,$data,$size) {
       $this = $this|0;
       $data = $data|0;
       $size = $size|0;
       var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
       var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($size|0)<(35);
       if ($1) {
        $$0 = (49704);
        STACKTOP = sp;return ($$0|0);
       }
       $2 = (_memcmp($data,(49664),27)|0);
       $3 = ($2|0)==(0);
       if (!($3)) {
        $$0 = (49704);
        STACKTOP = sp;return ($$0|0);
       }
       $4 = ($size|0)<(65920);
       if ($4) {
        $$0 = (49720);
        STACKTOP = sp;return ($$0|0);
       }
       $5 = (($data) + 38|0);
       $6 = HEAP8[$5]|0;
       $7 = $6&255;
       $8 = $7 << 8;
       $9 = (($data) + 37|0);
       $10 = HEAP8[$9]|0;
       $11 = $10&255;
       $12 = $8 | $11;
       $13 = (($this) + 1972|0);
       HEAP32[$13>>2] = $12;
       $14 = (($data) + 39|0);
       $15 = HEAP8[$14]|0;
       $16 = $15&255;
       $17 = (($this) + 1976|0);
       HEAP32[$17>>2] = $16;
       $18 = (($data) + 40|0);
       $19 = HEAP8[$18]|0;
       $20 = $19&255;
       $21 = (($this) + 1980|0);
       HEAP32[$21>>2] = $20;
       $22 = (($data) + 41|0);
       $23 = HEAP8[$22]|0;
       $24 = $23&255;
       $25 = (($this) + 1984|0);
       HEAP32[$25>>2] = $24;
       $26 = (($data) + 42|0);
       $27 = HEAP8[$26]|0;
       $28 = $27&255;
       $29 = (($this) + 1988|0);
       HEAP32[$29>>2] = $28;
       $30 = (($data) + 43|0);
       $31 = HEAP8[$30]|0;
       $32 = $31&255;
       $33 = (($this) + 1992|0);
       HEAP32[$33>>2] = $32;
       $34 = (($this) + 2716|0);
       $35 = (($data) + 256|0);
       _memcpy(($34|0),($35|0),65536)|0;
       __ZN8Snes_Spc10ram_loadedEv($this);
       $36 = ($this);
       $37 = (($data) + 65792|0);
       __ZN7Spc_Dsp4loadEPKh($36,$37);
       __ZN8Snes_Spc15reset_time_regsEv($this);
       $$0 = 0;
       STACKTOP = sp;return ($$0|0);
      }
      function __ZN8Snes_Spc10clear_echoEv($this) {
       $this = $this|0;
       var $$ = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = (__ZNK7Spc_Dsp4readEi($1,108)|0);
       $3 = $2 & 32;
       $4 = ($3|0)==(0);
       if (!($4)) {
        STACKTOP = sp;return;
       }
       $5 = (__ZNK7Spc_Dsp4readEi($1,109)|0);
       $6 = $5 << 8;
       $7 = (__ZNK7Spc_Dsp4readEi($1,125)|0);
       $8 = $7 << 11;
       $9 = $8 & 30720;
       $10 = (($9) + ($6))|0;
       $11 = ($10|0)>(65536);
       $$ = $11 ? 65536 : $10;
       $12 = ((($this) + ($6)|0) + 2716|0);
       $13 = (($$) - ($6))|0;
       _memset(($12|0),-1,($13|0))|0;
       STACKTOP = sp;return;
      }
      function __ZNK7Spc_Dsp4readEi($this,$addr) {
       $this = $this|0;
       $addr = $addr|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($addr>>>0)<(128);
       if ($1) {
        $2 = (($this) + ($addr)|0);
        $3 = HEAP8[$2]|0;
        $4 = $3&255;
        STACKTOP = sp;return ($4|0);
       } else {
        ___assert_fail(((49920)|0),((49960)|0),161,((50008)|0));
        // unreachable;
       }
       return 0|0;
      }
      function __ZN8Snes_Spc10set_outputEPsi($this,$out,$size) {
       $this = $this|0;
       $out = $out|0;
       $size = $size|0;
       var $$0$lcssa = 0, $$05 = 0, $$05$phi = 0, $$11 = 0, $$11$phi = 0, $$2 = 0, $$lcssa3 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
       var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0;
       var $7 = 0, $8 = 0, $9 = 0, $in$0$lcssa = 0, $in$06 = 0, $in$06$phi = 0, $in$12 = 0, $in$12$phi = 0, $or$cond = 0, $or$cond4 = 0, $out_end$0 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $size & 1;
       $2 = ($1|0)==(0);
       if (!($2)) {
        ___assert_fail(((49744)|0),((49760)|0),279,((49800)|0));
        // unreachable;
       }
       $3 = (($this) + 2024|0);
       $4 = HEAP32[$3>>2]|0;
       $5 = $4 & 31;
       HEAP32[$3>>2] = $5;
       $6 = ($out|0)==(0|0);
       if ($6) {
        __ZN8Snes_Spc9reset_bufEv($this);
        STACKTOP = sp;return;
       }
       $7 = (($out) + ($size<<1)|0);
       $8 = (($this) + 2028|0);
       HEAP32[$8>>2] = $out;
       $9 = (($this) + 2032|0);
       HEAP32[$9>>2] = $7;
       $10 = (($this) + 2040|0);
       $11 = (($this) + 2036|0);
       $12 = HEAP32[$11>>2]|0;
       $13 = ($10>>>0)<($12>>>0);
       $14 = ($size|0)>(0);
       $or$cond4 = $13 & $14;
       if ($or$cond4) {
        $15 = HEAP32[$11>>2]|0;
        $$05 = $out;$in$06 = $10;
        while(1) {
         $16 = (($in$06) + 2|0);
         $17 = HEAP16[$in$06>>1]|0;
         $18 = (($$05) + 2|0);
         HEAP16[$$05>>1] = $17;
         $19 = ($16>>>0)<($15>>>0);
         $20 = ($18>>>0)<($7>>>0);
         $or$cond = $19 & $20;
         if ($or$cond) {
          $in$06$phi = $16;$$05$phi = $18;$in$06 = $in$06$phi;$$05 = $$05$phi;
         } else {
          $$0$lcssa = $18;$$lcssa3 = $20;$in$0$lcssa = $16;
          break;
         }
        }
       } else {
        $$0$lcssa = $out;$$lcssa3 = $14;$in$0$lcssa = $10;
       }
       do {
        if ($$lcssa3) {
         $$2 = $$0$lcssa;$out_end$0 = $7;
        } else {
         $21 = ($this);
         $22 = (__ZN7Spc_Dsp5extraEv($21)|0);
         $23 = (($22) + 32|0);
         $24 = HEAP32[$11>>2]|0;
         $25 = ($in$0$lcssa>>>0)<($24>>>0);
         if (!($25)) {
          $$2 = $22;$out_end$0 = $23;
          break;
         }
         $26 = HEAP32[$11>>2]|0;
         $$11 = $22;$in$12 = $in$0$lcssa;
         while(1) {
          $27 = (($in$12) + 2|0);
          $28 = HEAP16[$in$12>>1]|0;
          $29 = (($$11) + 2|0);
          HEAP16[$$11>>1] = $28;
          $30 = ($27>>>0)<($26>>>0);
          if ($30) {
           $in$12$phi = $27;$$11$phi = $29;$in$12 = $in$12$phi;$$11 = $$11$phi;
          } else {
           break;
          }
         }
         $31 = ($29>>>0)>($23>>>0);
         if (!($31)) {
          $$2 = $29;$out_end$0 = $23;
          break;
         }
         ___assert_fail(((49816)|0),((49760)|0),303,((49800)|0));
         // unreachable;
        }
       } while(0);
       $32 = ($this);
       $33 = $out_end$0;
       $34 = $$2;
       $35 = (($33) - ($34))|0;
       $36 = $35 >> 1;
       __ZN7Spc_Dsp10set_outputEPsi($32,$$2,$36);
       STACKTOP = sp;return;
      }
      function __ZN7Spc_Dsp5extraEv($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 1580|0);
       STACKTOP = sp;return ($1|0);
      }
      function __ZN8Snes_Spc10save_extraEv($this) {
       $this = $this|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
       var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dsp_end$0 = 0, $in$04 = 0, $in$04$phi = 0, $in$12 = 0, $in$12$phi = 0, $main_end$0 = 0, $or$cond = 0, $out$0$lcssa = 0, $out$03 = 0, $out$03$phi = 0, $out$1$lcssa = 0, $out$11 = 0, $out$11$phi = 0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 2032|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = ($this);
       $4 = (__ZNK7Spc_Dsp7out_posEv($3)|0);
       $5 = (($this) + 2028|0);
       $6 = HEAP32[$5>>2]|0;
       $7 = ($6>>>0)>($4>>>0);
       $8 = ($4>>>0)>($2>>>0);
       $or$cond = $7 | $8;
       if ($or$cond) {
        $dsp_end$0 = $4;$main_end$0 = $2;
       } else {
        $9 = (__ZN7Spc_Dsp5extraEv($3)|0);
        $dsp_end$0 = $9;$main_end$0 = $4;
       }
       $10 = (($this) + 2040|0);
       $11 = HEAP32[$5>>2]|0;
       $12 = (__ZNK8Snes_Spc12sample_countEv($this)|0);
       $13 = (($11) + ($12<<1)|0);
       $14 = ($13>>>0)<($main_end$0>>>0);
       if ($14) {
        $in$04 = $13;$out$03 = $10;
        while(1) {
         $15 = HEAP16[$in$04>>1]|0;
         $16 = (($out$03) + 2|0);
         HEAP16[$out$03>>1] = $15;
         $17 = (($in$04) + 2|0);
         $18 = ($17>>>0)<($main_end$0>>>0);
         if ($18) {
          $out$03$phi = $16;$in$04$phi = $17;$out$03 = $out$03$phi;$in$04 = $in$04$phi;
         } else {
          $out$0$lcssa = $16;
          break;
         }
        }
       } else {
        $out$0$lcssa = $10;
       }
       $19 = (__ZN7Spc_Dsp5extraEv($3)|0);
       $20 = ($19>>>0)<($dsp_end$0>>>0);
       if ($20) {
        $in$12 = $19;$out$11 = $out$0$lcssa;
        while(1) {
         $21 = HEAP16[$in$12>>1]|0;
         $22 = (($out$11) + 2|0);
         HEAP16[$out$11>>1] = $21;
         $23 = (($in$12) + 2|0);
         $24 = ($23>>>0)<($dsp_end$0>>>0);
         if ($24) {
          $out$11$phi = $22;$in$12$phi = $23;$out$11 = $out$11$phi;$in$12 = $in$12$phi;
         } else {
          $out$1$lcssa = $22;
          break;
         }
        }
       } else {
        $out$1$lcssa = $out$0$lcssa;
       }
       $25 = (($this) + 2036|0);
       HEAP32[$25>>2] = $out$1$lcssa;
       $26 = (($this) + 2072|0);
       $27 = ($out$1$lcssa>>>0)>($26>>>0);
       if ($27) {
        ___assert_fail(((49832)|0),((49760)|0),334,((49872)|0));
        // unreachable;
       } else {
        STACKTOP = sp;return;
       }
      }
      function __ZNK7Spc_Dsp7out_posEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 1568|0);
       $2 = HEAP32[$1>>2]|0;
       STACKTOP = sp;return ($2|0);
      }
      function __ZNK8Snes_Spc12sample_countEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 2024|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = $2 >> 5;
       $4 = $3 << 1;
       STACKTOP = sp;return ($4|0);
      }
      function __ZN8Snes_Spc4playEiPs($this,$count,$out) {
       $this = $this|0;
       $count = $count|0;
       $out = $out|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $count & 1;
       $2 = ($1|0)==(0);
       if (!($2)) {
        ___assert_fail(((49888)|0),((49760)|0),339,((49912)|0));
        // unreachable;
       }
       $3 = ($count|0)==(0);
       if (!($3)) {
        __ZN8Snes_Spc10set_outputEPsi($this,$out,$count);
        $4 = $count << 4;
        __ZN8Snes_Spc9end_frameEi($this,$4);
       }
       $5 = (($this) + 2020|0);
       $6 = HEAP32[$5>>2]|0;
       HEAP32[$5>>2] = 0;
       STACKTOP = sp;return ($6|0);
      }
      function __ZN8Snes_Spc4skipEi($this,$count) {
       $this = $this|0;
       $count = $count|0;
       var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
       var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($count|0)>(128000);
       if (!($1)) {
        $$0 = $count;
        $24 = (__ZN8Snes_Spc4playEiPs($this,$$0,0)|0);
        STACKTOP = sp;return ($24|0);
       }
       __ZN8Snes_Spc10set_outputEPsi($this,0,0);
       $2 = $count & 3;
       $3 = $2 | 64000;
       $4 = (($count) - ($3))|0;
       $5 = $4 << 4;
       $6 = (($this) + 2012|0);
       HEAP32[$6>>2] = 0;
       $7 = (($this) + 2016|0);
       HEAP32[$7>>2] = 0;
       $8 = (($this) + 1996|0);
       $9 = HEAP32[$8>>2]|0;
       $10 = (($this) + 2000|0);
       $11 = HEAP32[$10>>2]|0;
       $12 = (($5) + 127)|0;
       $13 = (($12) - ($11))|0;
       HEAP32[$8>>2] = $13;
       __ZN8Snes_Spc9end_frameEi($this,$5);
       $14 = HEAP32[$8>>2]|0;
       $15 = (($9) + -127)|0;
       $16 = (($15) + ($11))|0;
       $17 = (($16) + ($14))|0;
       HEAP32[$8>>2] = $17;
       $18 = ($this);
       $19 = HEAP32[$7>>2]|0;
       $20 = HEAP32[$6>>2]|0;
       $21 = $20 ^ -1;
       $22 = $19 & $21;
       __ZN7Spc_Dsp5writeEii($18,92,$22);
       $23 = HEAP32[$6>>2]|0;
       __ZN7Spc_Dsp5writeEii($18,76,$23);
       __ZN8Snes_Spc10clear_echoEv($this);
       $$0 = $3;
       $24 = (__ZN8Snes_Spc4playEiPs($this,$$0,0)|0);
       STACKTOP = sp;return ($24|0);
      }
      function __ZN7Spc_Dsp5writeEii($this,$addr,$data) {
       $this = $this|0;
       $addr = $addr|0;
       $data = $data|0;
       var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($addr>>>0)<(128);
       if (!($1)) {
        ___assert_fail(((49920)|0),((49960)|0),185,((50000)|0));
        // unreachable;
       }
       $2 = $data&255;
       $3 = (($this) + ($addr)|0);
       HEAP8[$3] = $2;
       $4 = $addr & 15;
       $5 = ($4>>>0)<(2);
       do {
        if ($5) {
         $6 = $4 ^ $addr;
         __ZN7Spc_Dsp16update_voice_volEi($this,$6);
        } else {
         $7 = ($4|0)==(12);
         if (!($7)) {
          break;
         }
         if ((($addr|0) == 76)) {
          $8 = $data & 255;
          $9 = (($this) + 300|0);
          HEAP32[$9>>2] = $8;
          break;
         } else if ((($addr|0) == 124)) {
          $10 = (($this) + 124|0);
          HEAP8[$10] = 0;
          break;
         } else {
          break;
         }
        }
       } while(0);
       STACKTOP = sp;return;
      }
      function __ZN7Spc_Dsp16update_voice_volEi($this,$addr) {
       $this = $this|0;
       $addr = $addr|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
       var $8 = 0, $9 = 0, $l$0 = 0, $r$0 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + ($addr)|0);
       $2 = HEAP8[$1]|0;
       $3 = $2 << 24 >> 24;
       $4 = (($addr) + 1)|0;
       $5 = (($this) + ($4)|0);
       $6 = HEAP8[$5]|0;
       $7 = $6 << 24 >> 24;
       $8 = Math_imul($7, $3)|0;
       $9 = (($this) + 1564|0);
       $10 = HEAP32[$9>>2]|0;
       $11 = ($8|0)<($10|0);
       if ($11) {
        $12 = $3 >> 7;
        $13 = $12 ^ $3;
        $14 = $7 >> 7;
        $15 = $14 ^ $7;
        $l$0 = $13;$r$0 = $15;
       } else {
        $l$0 = $3;$r$0 = $7;
       }
       $16 = $addr >> 4;
       $17 = ((($this) + (($16*140)|0)|0) + 444|0);
       $18 = HEAP32[$17>>2]|0;
       $19 = $18 & $l$0;
       $20 = ((($this) + (($16*140)|0)|0) + 436|0);
       HEAP32[$20>>2] = $19;
       $21 = $18 & $r$0;
       $22 = ((($this) + (($16*140)|0)|0) + 440|0);
       HEAP32[$22>>2] = $21;
       STACKTOP = sp;return;
      }
      function __ZN8Snes_Spc10run_timer_EPNS_5TimerEi($this,$t,$time) {
       $this = $this|0;
       $t = $t|0;
       $time = $time|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
       var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $divider$0 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($t);
       $2 = HEAP32[$1>>2]|0;
       $3 = (($time) - ($2))|0;
       $4 = (($t) + 4|0);
       $5 = HEAP32[$4>>2]|0;
       $6 = (($3|0) / ($5|0))&-1;
       $7 = (($6) + 1)|0;
       $8 = Math_imul($7, $5)|0;
       $9 = (($8) + ($2))|0;
       HEAP32[$1>>2] = $9;
       $10 = (($t) + 16|0);
       $11 = HEAP32[$10>>2]|0;
       $12 = ($11|0)==(0);
       if ($12) {
        STACKTOP = sp;return ($t|0);
       }
       $13 = (($t) + 8|0);
       $14 = HEAP32[$13>>2]|0;
       $15 = (($t) + 12|0);
       $16 = HEAP32[$15>>2]|0;
       $17 = (($14) + 255)|0;
       $18 = (($17) - ($16))|0;
       $19 = $18 & 255;
       $20 = (($16) + ($7))|0;
       $21 = (($6) - ($19))|0;
       $22 = ($21|0)>(-1);
       if ($22) {
        $23 = (($21|0) / ($14|0))&-1;
        $24 = (($t) + 20|0);
        $25 = HEAP32[$24>>2]|0;
        $26 = (($23) + 1)|0;
        $27 = (($26) + ($25))|0;
        $28 = $27 & 15;
        HEAP32[$24>>2] = $28;
        $29 = HEAP32[$13>>2]|0;
        $30 = Math_imul($29, $23)|0;
        $31 = (($21) - ($30))|0;
        $divider$0 = $31;
       } else {
        $divider$0 = $20;
       }
       $32 = $divider$0 & 255;
       HEAP32[$15>>2] = $32;
       STACKTOP = sp;return ($t|0);
      }
      function __ZN8Snes_Spc10enable_romEi($this,$enable) {
       $this = $this|0;
       $enable = $enable|0;
       var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
       sp = STACKTOP;
       $1 = (($this) + 2072|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = ($2|0)==($enable|0);
       if ($3) {
        STACKTOP = sp;return;
       }
       HEAP32[$1>>2] = $enable;
       $4 = ($enable|0)!=(0);
       if ($4) {
        $5 = (($this) + 2140|0);
        $6 = (($this) + 68188|0);
        dest=$5+0|0; src=$6+0|0; stop=dest+64|0; do { HEAP8[dest]=HEAP8[src]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));;
       }
       $7 = (($this) + 68188|0);
       $8 = (($this) + 2076|0);
       $9 = (($this) + 2140|0);
       $10 = $4 ? $8 : $9;
       $11 = ($10);
       dest=$7+0|0; src=$11+0|0; stop=dest+64|0; do { HEAP8[dest]=HEAP8[src]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));;
       STACKTOP = sp;return;
      }
      function __ZN8Snes_Spc8dsp_readEi($this,$time) {
       $this = $this|0;
       $time = $time|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
       var $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 1942|0);
       $2 = HEAP8[$1]|0;
       $3 = $2&255;
       $4 = $3 & 127;
       $5 = ((($this) + ($4)|0) + 1612|0);
       $6 = HEAP8[$5]|0;
       $7 = $6 << 24 >> 24;
       $8 = (($time) - ($7))|0;
       $9 = (($this) + 1996|0);
       $10 = HEAP32[$9>>2]|0;
       $11 = (($8) - ($10))|0;
       $12 = ($11|0)>(-1);
       if ($12) {
        $13 = (($11) + 32)|0;
        $14 = $13 & -32;
        $15 = (($14) + ($10))|0;
        HEAP32[$9>>2] = $15;
        $16 = ($this);
        __ZN7Spc_Dsp3runEi($16,$14);
       }
       $17 = ($this);
       $18 = HEAP8[$1]|0;
       $19 = $18&255;
       $20 = $19 & 127;
       $21 = (__ZNK7Spc_Dsp4readEi($17,$20)|0);
       STACKTOP = sp;return ($21|0);
      }
      function __ZN8Snes_Spc18cpu_write_smp_reg_Eiii($this,$data,$time,$addr) {
       $this = $this|0;
       $data = $data|0;
       $time = $time|0;
       $addr = $addr|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
       var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
       var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
       var sp = 0;
       sp = STACKTOP;
       switch ($addr|0) {
       case 9: case 8:  {
        $17 = $data&255;
        $18 = ((($this) + ($addr)|0) + 1956|0);
        HEAP8[$18] = $17;
        STACKTOP = sp;return;
        break;
       }
       case 1:  {
        $19 = $data & 16;
        $20 = ($19|0)==(0);
        if (!($20)) {
         $21 = (($this) + 1960|0);
         HEAP8[$21] = 0;
         $22 = (($this) + 1961|0);
         HEAP8[$22] = 0;
        }
        $23 = $data & 32;
        $24 = ($23|0)==(0);
        if (!($24)) {
         $25 = (($this) + 1962|0);
         HEAP8[$25] = 0;
         $26 = (($this) + 1963|0);
         HEAP8[$26] = 0;
        }
        $27 = $data & 1;
        $28 = (($this) + 1884|0);
        $29 = HEAP32[$28>>2]|0;
        $30 = ($29|0)==($27|0);
        do {
         if (!($30)) {
          $31 = (($this) + 1868|0);
          $32 = (__ZN8Snes_Spc9run_timerEPNS_5TimerEi(0,$31,$time)|0);
          $33 = (($32) + 16|0);
          HEAP32[$33>>2] = $27;
          $34 = ($27|0)==(0);
          if ($34) {
           break;
          }
          $35 = (($32) + 12|0);
          HEAP32[$35>>2] = 0;
          $36 = (($32) + 20|0);
          HEAP32[$36>>2] = 0;
         }
        } while(0);
        $37 = $data >>> 1;
        $38 = $37 & 1;
        $39 = (($this) + 1908|0);
        $40 = HEAP32[$39>>2]|0;
        $41 = ($40|0)==($38|0);
        do {
         if (!($41)) {
          $42 = (($this) + 1892|0);
          $43 = (__ZN8Snes_Spc9run_timerEPNS_5TimerEi(0,$42,$time)|0);
          $44 = (($43) + 16|0);
          HEAP32[$44>>2] = $38;
          $45 = ($38|0)==(0);
          if ($45) {
           break;
          }
          $46 = (($43) + 12|0);
          HEAP32[$46>>2] = 0;
          $47 = (($43) + 20|0);
          HEAP32[$47>>2] = 0;
         }
        } while(0);
        $48 = $data >>> 2;
        $49 = $48 & 1;
        $50 = (($this) + 1932|0);
        $51 = HEAP32[$50>>2]|0;
        $52 = ($51|0)==($49|0);
        do {
         if (!($52)) {
          $53 = (($this) + 1916|0);
          $54 = (__ZN8Snes_Spc9run_timerEPNS_5TimerEi(0,$53,$time)|0);
          $55 = (($54) + 16|0);
          HEAP32[$55>>2] = $49;
          $56 = ($49|0)==(0);
          if ($56) {
           break;
          }
          $57 = (($54) + 12|0);
          HEAP32[$57>>2] = 0;
          $58 = (($54) + 20|0);
          HEAP32[$58>>2] = 0;
         }
        } while(0);
        $59 = $data & 128;
        __ZN8Snes_Spc10enable_romEi($this,$59);
        STACKTOP = sp;return;
        break;
       }
       case 15: case 14: case 13:  {
        $11 = ($data|0)<(4096);
        if (!($11)) {
         STACKTOP = sp;return;
        }
        $12 = (($addr) + -13)|0;
        $13 = ((($this) + (($12*24)|0)|0) + 1868|0);
        $14 = (($time) + -1)|0;
        $15 = (__ZN8Snes_Spc9run_timerEPNS_5TimerEi(0,$13,$14)|0);
        $16 = (($15) + 20|0);
        HEAP32[$16>>2] = 0;
        STACKTOP = sp;return;
        break;
       }
       case 12: case 11: case 10:  {
        $1 = (($addr) + -10)|0;
        $2 = (($data) + 255)|0;
        $3 = $2 & 255;
        $4 = (($3) + 1)|0;
        $5 = ((($this) + (($1*24)|0)|0) + 1876|0);
        $6 = HEAP32[$5>>2]|0;
        $7 = ($6|0)==($4|0);
        if ($7) {
         STACKTOP = sp;return;
        }
        $8 = ((($this) + (($1*24)|0)|0) + 1868|0);
        $9 = (__ZN8Snes_Spc9run_timerEPNS_5TimerEi(0,$8,$time)|0);
        $10 = (($9) + 8|0);
        HEAP32[$10>>2] = $4;
        STACKTOP = sp;return;
        break;
       }
       default: {
        STACKTOP = sp;return;
       }
       }
      }
      function __ZN8Snes_Spc9run_timerEPNS_5TimerEi($this,$t,$time) {
       $this = $this|0;
       $t = $t|0;
       $time = $time|0;
       var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($t);
       $2 = HEAP32[$1>>2]|0;
       $3 = ($2|0)>($time|0);
       if ($3) {
        $$0 = $t;
       } else {
        $4 = (__ZN8Snes_Spc10run_timer_EPNS_5TimerEi(0,$t,$time)|0);
        $$0 = $4;
       }
       STACKTOP = sp;return ($$0|0);
      }
      function __ZN8Snes_Spc17cpu_write_smp_regEiii($this,$data,$time,$addr) {
       $this = $this|0;
       $data = $data|0;
       $time = $time|0;
       $addr = $addr|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($addr|0)==(3);
       if ($1) {
        __ZN8Snes_Spc9dsp_writeEii($this,$data,$time);
        STACKTOP = sp;return;
       } else {
        __ZN8Snes_Spc18cpu_write_smp_reg_Eiii($this,$data,$time,$addr);
        STACKTOP = sp;return;
       }
      }
      function __ZN8Snes_Spc9dsp_writeEii($this,$data,$time) {
       $this = $this|0;
       $data = $data|0;
       $time = $time|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
       var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 1942|0);
       $2 = HEAP8[$1]|0;
       $3 = $2&255;
       $4 = ((($this) + ($3)|0) + 1612|0);
       $5 = HEAP8[$4]|0;
       $6 = $5 << 24 >> 24;
       $7 = (($time) - ($6))|0;
       $8 = (($this) + 1996|0);
       $9 = HEAP32[$8>>2]|0;
       $10 = (($7) - ($9))|0;
       $11 = ($10|0)>(-1);
       do {
        if ($11) {
         $12 = (($10) + 32)|0;
         $13 = $12 & -32;
         $14 = (($13) + ($9))|0;
         HEAP32[$8>>2] = $14;
         $15 = ($this);
         __ZN7Spc_Dsp3runEi($15,$13);
        } else {
         $16 = ($9|0)==(127);
         if (!($16)) {
          break;
         }
         if ((($2<<24>>24) == 92)) {
          $24 = (($this) + 2016|0);
          $25 = HEAP32[$24>>2]|0;
          $26 = $25 | $data;
          HEAP32[$24>>2] = $26;
          $27 = $data ^ -1;
          $28 = (($this) + 2012|0);
          $29 = HEAP32[$28>>2]|0;
          $30 = $29 & $27;
          HEAP32[$28>>2] = $30;
          break;
         } else if ((($2<<24>>24) == 76)) {
          $17 = ($this);
          $18 = (__ZNK7Spc_Dsp4readEi($17,92)|0);
          $19 = $18 ^ -1;
          $20 = $19 & $data;
          $21 = (($this) + 2012|0);
          $22 = HEAP32[$21>>2]|0;
          $23 = $22 | $20;
          HEAP32[$21>>2] = $23;
          break;
         } else {
          break;
         }
        }
       } while(0);
       $31 = HEAP8[$1]|0;
       $32 = ($31<<24>>24)>(-1);
       if (!($32)) {
        STACKTOP = sp;return;
       }
       $33 = $31&255;
       $34 = ($this);
       __ZN7Spc_Dsp5writeEii($34,$33,$data);
       STACKTOP = sp;return;
      }
      function __ZN8Snes_Spc14cpu_write_highEiii($this,$data,$i,$time) {
       $this = $this|0;
       $data = $data|0;
       $i = $i|0;
       $time = $time|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($i|0)<(64);
       if ($1) {
        $2 = $data&255;
        $3 = ((($this) + ($i)|0) + 2140|0);
        HEAP8[$3] = $2;
        $4 = (($this) + 2072|0);
        $5 = HEAP32[$4>>2]|0;
        $6 = ($5|0)==(0);
        if ($6) {
         STACKTOP = sp;return;
        }
        $7 = ((($this) + ($i)|0) + 2076|0);
        $8 = HEAP8[$7]|0;
        $9 = (($i) + 65472)|0;
        $10 = ((($this) + ($9)|0) + 2716|0);
        HEAP8[$10] = $8;
        STACKTOP = sp;return;
       } else {
        $11 = (($i) + 65472)|0;
        $12 = ((($this) + ($11)|0) + 2716|0);
        $13 = HEAP8[$12]|0;
        $14 = $data&255;
        $15 = ($13<<24>>24)==($14<<24>>24);
        if (!($15)) {
         ___assert_fail(((50272)|0),((50312)|0),406,((50352)|0));
         // unreachable;
        }
        HEAP8[$12] = -1;
        $16 = (($i) + -64)|0;
        __ZN8Snes_Spc9cpu_writeEiii($this,$data,$16,$time);
        STACKTOP = sp;return;
       }
      }
      function __ZN8Snes_Spc9cpu_writeEiii($this,$data,$addr,$time) {
       $this = $this|0;
       $data = $data|0;
       $addr = $addr|0;
       $time = $time|0;
       var $$off = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $data&255;
       $2 = ((($this) + ($addr)|0) + 2716|0);
       HEAP8[$2] = $1;
       $3 = (($addr) + -240)|0;
       $4 = ($3|0)>(-1);
       if (!($4)) {
        STACKTOP = sp;return;
       }
       $5 = ($3|0)<(16);
       if ($5) {
        $6 = ((($this) + ($3)|0) + 1940|0);
        HEAP8[$6] = $1;
        $7 = ($3|0)!=(2);
        $$off = (($addr) + -244)|0;
        $8 = ($$off>>>0)>(3);
        $or$cond = $7 & $8;
        if (!($or$cond)) {
         STACKTOP = sp;return;
        }
        __ZN8Snes_Spc17cpu_write_smp_regEiii($this,$data,$time,$3);
        STACKTOP = sp;return;
       } else {
        $9 = (($addr) + -65472)|0;
        $10 = ($9|0)>(-1);
        if (!($10)) {
         STACKTOP = sp;return;
        }
        __ZN8Snes_Spc14cpu_write_highEiii($this,$data,$9,$time);
        STACKTOP = sp;return;
       }
      }
      function __ZN8Snes_Spc8cpu_readEii($this,$addr,$time) {
       $this = $this|0;
       $addr = $addr|0;
       $time = $time|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
       var $addr$tr = 0, $or$cond = 0, $result$0 = 0, $t$0 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $addr$tr = $addr;
       while(1) {
        $1 = (($addr$tr) + -240)|0;
        $2 = ($1|0)>(-1);
        $3 = (($addr$tr) + -256)|0;
        $4 = ($3>>>0)>(65279);
        $or$cond = $2 & $4;
        if (!($or$cond)) {
         label = 11;
         break;
        }
        $5 = (($addr$tr) + -253)|0;
        $6 = ($5>>>0)<(3);
        if ($6) {
         label = 4;
         break;
        }
        $14 = ($5|0)<(0);
        if ($14) {
         label = 8;
         break;
        }
        $16 = (($addr$tr) + -65536)|0;
        $17 = ($16|0)<(256);
        if ($17) {
         $addr$tr = $16;
        } else {
         label = 10;
         break;
        }
       }
       if ((label|0) == 4) {
        $7 = ((($this) + (($5*24)|0)|0) + 1868|0);
        $8 = ($7);
        $9 = HEAP32[$8>>2]|0;
        $10 = ($9|0)>($time|0);
        if ($10) {
         $t$0 = $7;
        } else {
         $11 = (__ZN8Snes_Spc10run_timer_EPNS_5TimerEi(0,$7,$time)|0);
         $t$0 = $11;
        }
        $12 = (($t$0) + 20|0);
        $13 = HEAP32[$12>>2]|0;
        HEAP32[$12>>2] = 0;
        $result$0 = $13;
        STACKTOP = sp;return ($result$0|0);
       }
       else if ((label|0) == 8) {
        $15 = (__ZN8Snes_Spc16cpu_read_smp_regEii($this,$1,$time)|0);
        $result$0 = $15;
        STACKTOP = sp;return ($result$0|0);
       }
       else if ((label|0) == 10) {
        ___assert_fail(((50368)|0),((50312)|0),496,((50416)|0));
        // unreachable;
       }
       else if ((label|0) == 11) {
        $18 = ((($this) + ($addr$tr)|0) + 2716|0);
        $19 = HEAP8[$18]|0;
        $20 = $19&255;
        $result$0 = $20;
        STACKTOP = sp;return ($result$0|0);
       }
       return 0|0;
      }
      function __ZN8Snes_Spc16cpu_read_smp_regEii($this,$reg,$time) {
       $this = $this|0;
       $reg = $reg|0;
       $time = $time|0;
       var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result$0 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ((($this) + ($reg)|0) + 1956|0);
       $2 = HEAP8[$1]|0;
       $3 = $2&255;
       $4 = (($reg) + -2)|0;
       $5 = ($4>>>0)<(2);
       do {
        if ($5) {
         $6 = (($this) + 1942|0);
         $7 = HEAP8[$6]|0;
         $8 = $7&255;
         $9 = ($4|0)==(1);
         if (!($9)) {
          $result$0 = $8;
          break;
         }
         $10 = (__ZN8Snes_Spc8dsp_readEi($this,$time)|0);
         $result$0 = $10;
        } else {
         $result$0 = $3;
        }
       } while(0);
       STACKTOP = sp;return ($result$0|0);
      }
      function __ZN8Snes_Spc9end_frameEi($this,$end_time) {
       $this = $this|0;
       $end_time = $end_time|0;
       var $$off = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
       var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 2000|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = ($2|0)<($end_time|0);
       if ($3) {
        (__ZN8Snes_Spc10run_until_Ei($this,$end_time)|0);
       }
       $4 = HEAP32[$1>>2]|0;
       $5 = (($4) - ($end_time))|0;
       HEAP32[$1>>2] = $5;
       $6 = (($this) + 2024|0);
       $7 = HEAP32[$6>>2]|0;
       $8 = (($7) + ($end_time))|0;
       HEAP32[$6>>2] = $8;
       $9 = HEAP32[$1>>2]|0;
       $$off = (($9) + 11)|0;
       $10 = ($$off>>>0)<(12);
       if (!($10)) {
        ___assert_fail(((50432)|0),((50312)|0),545,((50480)|0));
        // unreachable;
       }
       $11 = (($this) + 1868|0);
       (__ZN8Snes_Spc9run_timerEPNS_5TimerEi(0,$11,0)|0);
       $12 = (($this) + 1892|0);
       (__ZN8Snes_Spc9run_timerEPNS_5TimerEi(0,$12,0)|0);
       $13 = (($this) + 1916|0);
       (__ZN8Snes_Spc9run_timerEPNS_5TimerEi(0,$13,0)|0);
       $14 = (($this) + 1996|0);
       $15 = HEAP32[$14>>2]|0;
       $16 = ($15|0)<(0);
       do {
        if ($16) {
         $17 = (-29 - ($15))|0;
         $18 = ($17|0)>(-1);
         if (!($18)) {
          break;
         }
         $19 = (($17) + 32)|0;
         $20 = $19 & -32;
         $21 = (($20) + ($15))|0;
         HEAP32[$14>>2] = $21;
         $22 = ($this);
         __ZN7Spc_Dsp3runEi($22,$20);
        }
       } while(0);
       $23 = (($this) + 2028|0);
       $24 = HEAP32[$23>>2]|0;
       $25 = ($24|0)==(0|0);
       if ($25) {
        STACKTOP = sp;return;
       }
       __ZN8Snes_Spc10save_extraEv($this);
       STACKTOP = sp;return;
      }
      function __ZN8Snes_Spc10run_until_Ei($this,$end_time) {
       $this = $this|0;
       $end_time = $end_time|0;
       var $$ = 0, $$21 = 0, $$22 = 0, $$23 = 0, $$24 = 0, $$25 = 0, $$26 = 0, $$27 = 0, $$28 = 0, $$29 = 0, $$30 = 0, $$data$43 = 0, $$masked = 0, $$sum = 0, $$sum1 = 0, $$sum11 = 0, $$sum13 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0;
       var $$sum19 = 0, $$sum3 = 0, $$sum5 = 0, $$sum7 = 0, $$sum9 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0;
       var $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0;
       var $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0;
       var $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0;
       var $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0;
       var $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
       var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
       var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
       var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
       var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
       var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
       var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
       var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
       var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
       var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
       var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
       var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
       var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
       var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
       var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
       var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
       var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
       var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
       var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0;
       var $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
       var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
       var $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0;
       var $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0;
       var $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0;
       var $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0;
       var $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0;
       var $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0;
       var $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0;
       var $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0;
       var $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0;
       var $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0;
       var $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0;
       var $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0;
       var $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0;
       var $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0;
       var $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0;
       var $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0;
       var $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0;
       var $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0;
       var $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0;
       var $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0;
       var $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0;
       var $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0;
       var $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0;
       var $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0;
       var $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0;
       var $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0;
       var $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0;
       var $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0;
       var $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $a$0 = 0, $a$1$be = 0;
       var $a$157 = 0, $a$188 = 0, $a$2 = 0, $a$3 = 0, $a$4 = 0, $a$5 = 0, $a$6 = 0, $addr28$0 = 0, $addr29$0 = 0, $addr31$0 = 0, $addr33$0 = 0, $addr33$1 = 0, $c$0 = 0, $c$1$be = 0, $c$10 = 0, $c$11 = 0, $c$12 = 0, $c$13 = 0, $c$139 = 0, $c$163 = 0;
       var $c$2 = 0, $c$3 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $c$7 = 0, $c$8 = 0, $c$9 = 0, $data$0 = 0, $data$1 = 0, $data$10 = 0, $data$11 = 0, $data$12 = 0, $data$13 = 0, $data$14 = 0, $data$15 = 0, $data$16 = 0, $data$17 = 0, $data$18 = 0, $data$19 = 0;
       var $data$2 = 0, $data$20 = 0, $data$21 = 0, $data$22 = 0, $data$23 = 0, $data$24 = 0, $data$25 = 0, $data$26 = 0, $data$27 = 0, $data$28 = 0, $data$29 = 0, $data$3 = 0, $data$30 = 0, $data$31 = 0, $data$32 = 0, $data$33 = 0, $data$34 = 0, $data$35 = 0, $data$36 = 0, $data$37 = 0;
       var $data$38 = 0, $data$39 = 0, $data$4 = 0, $data$40 = 0, $data$41 = 0, $data$43 = 0, $data$45 = 0, $data$46 = 0, $data$47 = 0, $data$48 = 0, $data$49 = 0, $data$5 = 0, $data$50 = 0, $data$51 = 0, $data$6 = 0, $data$7 = 0, $data$8 = 0, $data$9 = 0, $dp$0$be = 0, $dp$033 = 0;
       var $dp$060 = 0, $hi$0 = 0, $lo$0 = 0, $nz$0 = 0, $nz$1$be = 0, $nz$136 = 0, $nz$161 = 0, $nz$2 = 0, $pc$0 = 0, $pc$1 = 0, $pc$10 = 0, $pc$11 = 0, $pc$12 = 0, $pc$13 = 0, $pc$14 = 0, $pc$15 = 0, $pc$16 = 0, $pc$17 = 0, $pc$18 = 0, $pc$19 = 0;
       var $pc$2$be = 0, $pc$20 = 0, $pc$21 = 0, $pc$22 = 0, $pc$24 = 0, $pc$248 = 0, $pc$25 = 0, $pc$26 = 0, $pc$268 = 0, $pc$27 = 0, $pc$28 = 0, $pc$29 = 0, $pc$3 = 0, $pc$4 = 0, $pc$5 = 0, $pc$6 = 0, $pc$7 = 0, $pc$8 = 0, $pc$9 = 0, $psw$0 = 0;
       var $psw$1$be = 0, $psw$142 = 0, $psw$165 = 0, $psw$3 = 0, $rel_time$0 = 0, $rel_time$1$be = 0, $rel_time$2 = 0, $sp$0$be = 0, $sp$045 = 0, $sp$067 = 0, $sp$1 = 0, $sp$2 = 0, $t$0 = 0, $t14$0 = 0, $t19$0 = 0, $t25$0 = 0, $t44$0 = 0, $t5$0 = 0, $temp$0 = 0, $temp27$0 = 0;
       var $temp40$0 = 0, $temp53$0 = 0, $x$0 = 0, $x$1$be = 0, $x$154 = 0, $x$175 = 0, $y$0 = 0, $y$1$be = 0, $y$151 = 0, $y$169 = 0, $y$2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 2000|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = (($2) - ($end_time))|0;
       $4 = ($3|0)<(1);
       if (!($4)) {
        ___assert_fail(((50496)|0),((50512)|0),163,((50552)|0));
        // unreachable;
       }
       HEAP32[$1>>2] = $end_time;
       $5 = (($this) + 1996|0);
       $6 = HEAP32[$5>>2]|0;
       $7 = (($6) + ($3))|0;
       HEAP32[$5>>2] = $7;
       $8 = (($this) + 1868|0);
       $9 = HEAP32[$8>>2]|0;
       $10 = (($9) + ($3))|0;
       HEAP32[$8>>2] = $10;
       $11 = (($this) + 1892|0);
       $12 = HEAP32[$11>>2]|0;
       $13 = (($12) + ($3))|0;
       HEAP32[$11>>2] = $13;
       $14 = (($this) + 1916|0);
       $15 = HEAP32[$14>>2]|0;
       $16 = (($15) + ($3))|0;
       HEAP32[$14>>2] = $16;
       $17 = (($this) + 2716|0);
       $18 = (($this) + 1976|0);
       $19 = HEAP32[$18>>2]|0;
       $20 = (($this) + 1980|0);
       $21 = HEAP32[$20>>2]|0;
       $22 = (($this) + 1984|0);
       $23 = HEAP32[$22>>2]|0;
       $24 = (($this) + 1972|0);
       $25 = HEAP32[$24>>2]|0;
       $26 = ((($this) + ($25)|0) + 2716|0);
       $27 = (($this) + 1992|0);
       $28 = HEAP32[$27>>2]|0;
       $$sum = (($28) + 257)|0;
       $29 = ((($this) + ($$sum)|0) + 2716|0);
       $30 = (($this) + 1988|0);
       $31 = HEAP32[$30>>2]|0;
       $32 = $31 << 8;
       $33 = $31 << 3;
       $34 = $33 & 256;
       $35 = $31 << 4;
       $36 = $35 & 2048;
       $37 = $31 & 2;
       $38 = $36 | $37;
       $39 = $38 ^ 2;
       $40 = HEAP8[$26]|0;
       $41 = $40&255;
       $42 = ((($this) + ($41)|0) + 2204|0);
       $43 = HEAP8[$42]|0;
       $44 = $43&255;
       $45 = (($44) + ($3))|0;
       $46 = ($45|0)>(0);
       L4: do {
        if ($46) {
         $a$157 = $19;$c$139 = $32;$dp$033 = $34;$nz$136 = $39;$pc$248 = $26;$psw$142 = $31;$rel_time$2 = $3;$sp$045 = $29;$x$154 = $21;$y$151 = $23;
        } else {
         $47 = $17;
         $48 = $17;
         $49 = $17;
         $50 = $17;
         $51 = (($this) + 68218|0);
         $52 = $17;
         $53 = $17;
         $54 = $17;
         $55 = $17;
         $56 = $17;
         $57 = $17;
         $58 = $17;
         $59 = $17;
         $60 = $17;
         $61 = $17;
         $62 = $17;
         $74 = $45;$75 = $41;$76 = $40;$a$188 = $19;$c$163 = $32;$dp$060 = $34;$nz$161 = $39;$pc$268 = $26;$psw$165 = $31;$sp$067 = $29;$x$175 = $21;$y$169 = $23;
         L6: while(1) {
          $77 = (($pc$268) + 1|0);
          $78 = HEAP8[$77]|0;
          $79 = $78&255;
          L8: do {
           switch ($75|0) {
           case 198:  {
            $267 = (($x$175) + ($dp$060))|0;
            $data$7 = $267;$pc$5 = $pc$268;
            label = 78;
            break;
           }
           case 215:  {
            $268 = $79 | $dp$060;
            $269 = ((($this) + ($268)|0) + 2716|0);
            $270 = (__Z8get_le16PKv($269)|0);
            $271 = (($270) + ($y$169))|0;
            $data$7 = $271;$pc$5 = $77;
            label = 78;
            break;
           }
           case 199:  {
            $272 = (($79) + ($x$175))|0;
            $273 = $272 & 255;
            $274 = $273 | $dp$060;
            $275 = ((($this) + ($274)|0) + 2716|0);
            $276 = (__Z8get_le16PKv($275)|0);
            $data$7 = $276;$pc$5 = $77;
            label = 78;
            break;
           }
           case 214:  {
            $277 = (($79) + ($y$169))|0;
            $data$6 = $277;
            label = 76;
            break;
           }
           case 213:  {
            $278 = (($79) + ($x$175))|0;
            $data$6 = $278;
            label = 76;
            break;
           }
           case 197:  {
            $data$6 = $79;
            label = 76;
            break;
           }
           case 212:  {
            $284 = (($79) + ($x$175))|0;
            $285 = $284 & 255;
            $286 = $285 | $dp$060;
            $data$7 = $286;$pc$5 = $77;
            label = 78;
            break;
           }
           case 201:  {
            $temp27$0 = $x$175;
            label = 80;
            break;
           }
           case 204:  {
            $temp27$0 = $y$169;
            label = 80;
            break;
           }
           case 217:  {
            $289 = (($79) + ($y$169))|0;
            $290 = $289 & 255;
            $data$8 = $290;
            label = 82;
            break;
           }
           case 216:  {
            $data$8 = $79;
            label = 82;
            break;
           }
           case 219:  {
            $292 = (($79) + ($x$175))|0;
            $293 = $292 & 255;
            $data$9 = $293;
            label = 84;
            break;
           }
           case 203:  {
            $data$9 = $79;
            label = 84;
            break;
           }
           case 125:  {
            $a$1$be = $x$175;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $x$175;$pc$2$be = $77;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $y$169;
            break;
           }
           case 221:  {
            $a$1$be = $y$169;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $y$169;$pc$2$be = $77;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $y$169;
            break;
           }
           case 93:  {
            $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $a$188;$pc$2$be = $77;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $a$188;$y$1$be = $y$169;
            break;
           }
           case 253:  {
            $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $a$188;$pc$2$be = $77;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $a$188;
            break;
           }
           case 157:  {
            $295 = (($sp$067) + -257|0);
            $296 = $295;
            $297 = (($296) - ($49))|0;
            $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $297;$pc$2$be = $77;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $297;$y$1$be = $y$169;
            break;
           }
           case 189:  {
            $$sum16 = (($x$175) + 257)|0;
            $298 = ((($this) + ($$sum16)|0) + 2716|0);
            $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $nz$161;$pc$2$be = $77;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $298;$x$1$be = $x$175;$y$1$be = $y$169;
            break;
           }
           case 175:  {
            $299 = (($a$188) + 8192)|0;
            $300 = (($x$175) + ($dp$060))|0;
            __ZN8Snes_Spc9cpu_writeEiii($this,$299,$300,$74);
            $301 = (($x$175) + 1)|0;
            $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $nz$161;$pc$2$be = $77;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $301;$y$1$be = $y$169;
            break;
           }
           case 38:  {
            $302 = (($x$175) + ($dp$060))|0;
            $data$12 = $302;$pc$6 = $pc$268;
            label = 100;
            break;
           }
           case 55:  {
            $303 = $79 | $dp$060;
            $304 = ((($this) + ($303)|0) + 2716|0);
            $305 = (__Z8get_le16PKv($304)|0);
            $306 = (($305) + ($y$169))|0;
            $data$12 = $306;$pc$6 = $77;
            label = 100;
            break;
           }
           case 39:  {
            $307 = (($79) + ($x$175))|0;
            $308 = $307 & 255;
            $309 = $308 | $dp$060;
            $310 = ((($this) + ($309)|0) + 2716|0);
            $311 = (__Z8get_le16PKv($310)|0);
            $data$12 = $311;$pc$6 = $77;
            label = 100;
            break;
           }
           case 54:  {
            $312 = (($79) + ($y$169))|0;
            $data$10 = $312;
            label = 97;
            break;
           }
           case 53:  {
            $313 = (($79) + ($x$175))|0;
            $data$10 = $313;
            label = 97;
            break;
           }
           case 37:  {
            $data$10 = $79;
            label = 97;
            break;
           }
           case 52:  {
            $319 = (($79) + ($x$175))|0;
            $320 = $319 & 255;
            $data$11 = $320;
            label = 99;
            break;
           }
           case 36:  {
            $data$11 = $79;
            label = 99;
            break;
           }
           case 40:  {
            $data$13 = $79;$pc$7 = $77;
            label = 101;
            break;
           }
           case 57:  {
            $324 = (($y$169) + ($dp$060))|0;
            $325 = (($74) + -2)|0;
            $326 = (__ZN8Snes_Spc8cpu_readEii($this,$324,$325)|0);
            $327 = (($x$175) + ($dp$060))|0;
            $addr28$0 = $327;$data$15 = $326;$pc$8 = $77;
            label = 105;
            break;
           }
           case 41:  {
            $328 = $79 | $dp$060;
            $329 = (($74) + -3)|0;
            $330 = (__ZN8Snes_Spc8cpu_readEii($this,$328,$329)|0);
            $data$14 = $330;
            label = 104;
            break;
           }
           case 25:  {
            $361 = (($y$169) + ($dp$060))|0;
            $362 = (($74) + -2)|0;
            $363 = (__ZN8Snes_Spc8cpu_readEii($this,$361,$362)|0);
            $364 = (($x$175) + ($dp$060))|0;
            $addr29$0 = $364;$data$21 = $363;$pc$11 = $77;
            label = 119;
            break;
           }
           case 7:  {
            $344 = (($79) + ($x$175))|0;
            $345 = $344 & 255;
            $346 = $345 | $dp$060;
            $347 = ((($this) + ($346)|0) + 2716|0);
            $348 = (__Z8get_le16PKv($347)|0);
            $data$18 = $348;$pc$9 = $77;
            label = 114;
            break;
           }
           case 71:  {
            $381 = (($79) + ($x$175))|0;
            $382 = $381 & 255;
            $383 = $382 | $dp$060;
            $384 = ((($this) + ($383)|0) + 2716|0);
            $385 = (__Z8get_le16PKv($384)|0);
            $data$24 = $385;$pc$12 = $77;
            label = 128;
            break;
           }
           case 84:  {
            $393 = (($79) + ($x$175))|0;
            $394 = $393 & 255;
            $data$23 = $394;
            label = 127;
            break;
           }
           case 89:  {
            $398 = (($y$169) + ($dp$060))|0;
            $399 = (($74) + -2)|0;
            $400 = (__ZN8Snes_Spc8cpu_readEii($this,$398,$399)|0);
            $401 = (($x$175) + ($dp$060))|0;
            $addr31$0 = $401;$data$27 = $400;$pc$14 = $77;
            label = 133;
            break;
           }
           case 73:  {
            $402 = $79 | $dp$060;
            $403 = (($74) + -3)|0;
            $404 = (__ZN8Snes_Spc8cpu_readEii($this,$402,$403)|0);
            $data$26 = $404;
            label = 132;
            break;
           }
           case 86:  {
            $386 = (($79) + ($y$169))|0;
            $data$22 = $386;
            label = 125;
            break;
           }
           case 4:  {
            $data$17 = $79;
            label = 113;
            break;
           }
           case 20:  {
            $356 = (($79) + ($x$175))|0;
            $357 = $356 & 255;
            $data$17 = $357;
            label = 113;
            break;
           }
           case 87:  {
            $377 = $79 | $dp$060;
            $378 = ((($this) + ($377)|0) + 2716|0);
            $379 = (__Z8get_le16PKv($378)|0);
            $380 = (($379) + ($y$169))|0;
            $data$24 = $380;$pc$12 = $77;
            label = 128;
            break;
           }
           case 105:  {
            $446 = $79 | $dp$060;
            $447 = (($74) + -3)|0;
            $448 = (__ZN8Snes_Spc8cpu_readEii($this,$446,$447)|0);
            $data$32 = $448;
            label = 146;
            break;
           }
           case 120:  {
            $data$32 = $79;
            label = 146;
            break;
           }
           case 62:  {
            $458 = $79 | $dp$060;
            $data$33 = $458;$pc$17 = $77;
            label = 149;
            break;
           }
           case 30:  {
            $459 = (__Z8get_le16PKv($77)|0);
            $460 = (($pc$268) + 2|0);
            $data$33 = $459;$pc$17 = $460;
            label = 149;
            break;
           }
           case 200:  {
            $data$34 = $79;$pc$18 = $77;
            label = 150;
            break;
           }
           case 102:  {
            $413 = (($x$175) + ($dp$060))|0;
            $data$30 = $413;$pc$15 = $pc$268;
            label = 142;
            break;
           }
           case 9:  {
            $365 = $79 | $dp$060;
            $366 = (($74) + -3)|0;
            $367 = (__ZN8Snes_Spc8cpu_readEii($this,$365,$366)|0);
            $data$20 = $367;
            label = 118;
            break;
           }
           case 104:  {
            $data$31 = $79;$pc$16 = $77;
            label = 143;
            break;
           }
           case 8:  {
            $data$19 = $79;$pc$10 = $77;
            label = 115;
            break;
           }
           case 119:  {
            $414 = $79 | $dp$060;
            $415 = ((($this) + ($414)|0) + 2716|0);
            $416 = (__Z8get_le16PKv($415)|0);
            $417 = (($416) + ($y$169))|0;
            $data$30 = $417;$pc$15 = $77;
            label = 142;
            break;
           }
           case 103:  {
            $418 = (($79) + ($x$175))|0;
            $419 = $418 & 255;
            $420 = $419 | $dp$060;
            $421 = ((($this) + ($420)|0) + 2716|0);
            $422 = (__Z8get_le16PKv($421)|0);
            $data$30 = $422;$pc$15 = $77;
            label = 142;
            break;
           }
           case 118:  {
            $423 = (($79) + ($y$169))|0;
            $data$28 = $423;
            label = 139;
            break;
           }
           case 117:  {
            $424 = (($79) + ($x$175))|0;
            $data$28 = $424;
            label = 139;
            break;
           }
           case 21:  {
            $350 = (($79) + ($x$175))|0;
            $data$16 = $350;
            label = 111;
            break;
           }
           case 56:  {
            $data$14 = $79;
            label = 104;
            break;
           }
           case 5:  {
            $data$16 = $79;
            label = 111;
            break;
           }
           case 85:  {
            $387 = (($79) + ($x$175))|0;
            $data$22 = $387;
            label = 125;
            break;
           }
           case 22:  {
            $349 = (($79) + ($y$169))|0;
            $data$16 = $349;
            label = 111;
            break;
           }
           case 88:  {
            $data$26 = $79;
            label = 132;
            break;
           }
           case 101:  {
            $data$28 = $79;
            label = 139;
            break;
           }
           case 116:  {
            $430 = (($79) + ($x$175))|0;
            $431 = $430 & 255;
            $data$29 = $431;
            label = 141;
            break;
           }
           case 100:  {
            $data$29 = $79;
            label = 141;
            break;
           }
           case 70:  {
            $376 = (($x$175) + ($dp$060))|0;
            $data$24 = $376;$pc$12 = $pc$268;
            label = 128;
            break;
           }
           case 69:  {
            $data$22 = $79;
            label = 125;
            break;
           }
           case 23:  {
            $340 = $79 | $dp$060;
            $341 = ((($this) + ($340)|0) + 2716|0);
            $342 = (__Z8get_le16PKv($341)|0);
            $343 = (($342) + ($y$169))|0;
            $data$18 = $343;$pc$9 = $77;
            label = 114;
            break;
           }
           case 6:  {
            $339 = (($x$175) + ($dp$060))|0;
            $data$18 = $339;$pc$9 = $pc$268;
            label = 114;
            break;
           }
           case 24:  {
            $data$20 = $79;
            label = 118;
            break;
           }
           case 68:  {
            $data$23 = $79;
            label = 127;
            break;
           }
           case 121:  {
            $437 = (($y$169) + ($dp$060))|0;
            $438 = (($74) + -2)|0;
            $439 = (__ZN8Snes_Spc8cpu_readEii($this,$437,$438)|0);
            $440 = (($x$175) + ($dp$060))|0;
            $441 = (($74) + -1)|0;
            $442 = (__ZN8Snes_Spc8cpu_readEii($this,$440,$441)|0);
            $443 = (($442) - ($439))|0;
            $444 = $443 ^ -1;
            $445 = $443 & 255;
            $a$1$be = $a$188;$c$1$be = $444;$dp$0$be = $dp$060;$nz$1$be = $445;$pc$2$be = $77;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $y$169;
            break;
           }
           case 72:  {
            $data$25 = $79;$pc$13 = $77;
            label = 129;
            break;
           }
           case 126:  {
            $465 = $79 | $dp$060;
            $data$35 = $465;$pc$19 = $77;
            label = 153;
            break;
           }
           case 94:  {
            $466 = (__Z8get_le16PKv($77)|0);
            $467 = (($pc$268) + 2|0);
            $data$35 = $466;$pc$19 = $467;
            label = 153;
            break;
           }
           case 173:  {
            $data$36 = $79;$pc$20 = $77;
            label = 154;
            break;
           }
           case 153: case 185:  {
            $472 = (($y$169) + ($dp$060))|0;
            $473 = (($74) + -2)|0;
            $474 = (__ZN8Snes_Spc8cpu_readEii($this,$472,$473)|0);
            $475 = (($x$175) + ($dp$060))|0;
            $addr33$0 = $475;$data$38 = $474;$pc$21 = $pc$268;
            label = 158;
            break;
           }
           case 137: case 169:  {
            $476 = $79 | $dp$060;
            $477 = (($74) + -3)|0;
            $478 = (__ZN8Snes_Spc8cpu_readEii($this,$476,$477)|0);
            $data$37 = $478;
            label = 157;
            break;
           }
           case 152: case 184:  {
            $data$37 = $79;
            label = 157;
            break;
           }
           case 166: case 134:  {
            $485 = (($x$175) + ($dp$060))|0;
            $data$41 = $485;$pc$22 = $pc$268;
            label = 167;
            break;
           }
           case 183: case 151:  {
            $486 = $79 | $dp$060;
            $487 = ((($this) + ($486)|0) + 2716|0);
            $488 = (__Z8get_le16PKv($487)|0);
            $489 = (($488) + ($y$169))|0;
            $data$41 = $489;$pc$22 = $77;
            label = 167;
            break;
           }
           case 167: case 135:  {
            $490 = (($79) + ($x$175))|0;
            $491 = $490 & 255;
            $492 = $491 | $dp$060;
            $493 = ((($this) + ($492)|0) + 2716|0);
            $494 = (__Z8get_le16PKv($493)|0);
            $data$41 = $494;$pc$22 = $77;
            label = 167;
            break;
           }
           case 182: case 150:  {
            $495 = (($79) + ($y$169))|0;
            $data$39 = $495;
            label = 164;
            break;
           }
           case 181: case 149:  {
            $496 = (($79) + ($x$175))|0;
            $data$39 = $496;
            label = 164;
            break;
           }
           case 165: case 133:  {
            $data$39 = $79;
            label = 164;
            break;
           }
           case 180: case 148:  {
            $502 = (($79) + ($x$175))|0;
            $503 = $502 & 255;
            $data$40 = $503;
            label = 166;
            break;
           }
           case 164: case 132:  {
            $data$40 = $79;
            label = 166;
            break;
           }
           case 136: case 168:  {
            $addr33$1 = -1;$data$43 = $79;$nz$2 = $a$188;$pc$24 = $77;
            label = 168;
            break;
           }
           case 188:  {
            $524 = (($a$188) + 1)|0;
            $525 = $524 & 255;
            $a$1$be = $525;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $524;$pc$2$be = $77;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $y$169;
            break;
           }
           case 61:  {
            $526 = (($x$175) + 1)|0;
            $527 = $526 & 255;
            $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $526;$pc$2$be = $77;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $527;$y$1$be = $y$169;
            break;
           }
           case 252:  {
            $528 = (($y$169) + 1)|0;
            $529 = $528 & 255;
            $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $528;$pc$2$be = $77;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $529;
            break;
           }
           case 156:  {
            $530 = (($a$188) + -1)|0;
            $531 = $530 & 255;
            $a$1$be = $531;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $530;$pc$2$be = $77;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $y$169;
            break;
           }
           case 29:  {
            $532 = (($x$175) + -1)|0;
            $533 = $532 & 255;
            $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $532;$pc$2$be = $77;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $533;$y$1$be = $y$169;
            break;
           }
           case 220:  {
            $534 = (($y$169) + -1)|0;
            $535 = $534 & 255;
            $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $534;$pc$2$be = $77;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $535;
            break;
           }
           case 187: case 155:  {
            $536 = (($79) + ($x$175))|0;
            $537 = $536 & 255;
            $data$45 = $537;
            label = 178;
            break;
           }
           case 171: case 139:  {
            $data$45 = $79;
            label = 178;
            break;
           }
           case 172: case 140:  {
            $539 = (__Z8get_le16PKv($77)|0);
            $540 = (($pc$268) + 2|0);
            $data$46 = $539;$pc$25 = $540;
            label = 180;
            break;
           }
           case 92:  {
            $c$2 = 0;
            label = 182;
            break;
           }
           case 124:  {
            $c$2 = $c$163;
            label = 182;
            break;
           }
           case 28:  {
            $c$3 = 0;
            label = 184;
            break;
           }
           case 60:  {
            $c$3 = $c$163;
            label = 184;
            break;
           }
           case 11:  {
            $557 = $79 | $dp$060;
            $c$7 = 0;$data$48 = $557;$pc$26 = $77;
            label = 191;
            break;
           }
           case 27:  {
            $c$4 = 0;
            label = 187;
            break;
           }
           case 59:  {
            $c$4 = $c$163;
            label = 187;
            break;
           }
           case 43:  {
            $c$5 = $c$163;$data$47 = $79;
            label = 188;
            break;
           }
           case 12:  {
            $c$6 = 0;
            label = 190;
            break;
           }
           case 44:  {
            $c$6 = $c$163;
            label = 190;
            break;
           }
           case 75:  {
            $569 = $79 | $dp$060;
            $c$11 = 0;$data$50 = $569;$pc$27 = $77;
            label = 198;
            break;
           }
           case 91:  {
            $c$8 = 0;
            label = 194;
            break;
           }
           case 123:  {
            $c$8 = $c$163;
            label = 194;
            break;
           }
           case 107:  {
            $c$9 = $c$163;$data$49 = $79;
            label = 195;
            break;
           }
           case 76:  {
            $c$10 = 0;
            label = 197;
            break;
           }
           case 108:  {
            $c$10 = $c$163;
            label = 197;
            break;
           }
           case 159:  {
            $582 = $a$188 >> 4;
            $583 = $a$188 << 4;
            $584 = $583 & 240;
            $585 = $584 | $582;
            $a$1$be = $585;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $585;$pc$2$be = $77;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $y$169;
            break;
           }
           case 186:  {
            $586 = $79 | $dp$060;
            $587 = (($74) + -2)|0;
            $588 = (__ZN8Snes_Spc8cpu_readEii($this,$586,$587)|0);
            $589 = $588 & 127;
            $590 = $588 >> 1;
            $591 = $589 | $590;
            $592 = (($79) + 1)|0;
            $593 = $592 & 255;
            $594 = $593 | $dp$060;
            $595 = (__ZN8Snes_Spc8cpu_readEii($this,$594,$74)|0);
            $596 = $591 | $595;
            $a$0 = $588;$c$0 = $c$163;$nz$0 = $596;$pc$1 = $77;$psw$0 = $psw$165;$rel_time$0 = $74;$x$0 = $x$175;$y$0 = $595;
            label = 6;
            break;
           }
           case 218:  {
            $597 = $79 | $dp$060;
            $598 = (($74) + -1)|0;
            __ZN8Snes_Spc9cpu_writeEiii($this,$a$188,$597,$598);
            $599 = (($y$169) + 8192)|0;
            $600 = (($79) + 1)|0;
            $601 = $600 & 255;
            $602 = $601 | $dp$060;
            __ZN8Snes_Spc9cpu_writeEiii($this,$599,$602,$74);
            $a$0 = $a$188;$c$0 = $c$163;$nz$0 = $nz$161;$pc$1 = $77;$psw$0 = $psw$165;$rel_time$0 = $74;$x$0 = $x$175;$y$0 = $y$169;
            label = 6;
            break;
           }
           case 26: case 58:  {
            $603 = $79 | $dp$060;
            $604 = (($74) + -3)|0;
            $605 = (__ZN8Snes_Spc8cpu_readEii($this,$603,$604)|0);
            $606 = $75 >>> 4;
            $607 = $606 & 2;
            $608 = (($607) + -1)|0;
            $609 = (($608) + ($605))|0;
            $610 = $609 >>> 1;
            $611 = $610 | $609;
            $612 = $611 & 127;
            $613 = (($74) + -2)|0;
            __ZN8Snes_Spc9cpu_writeEiii($this,$609,$603,$613);
            $614 = (($79) + 1)|0;
            $615 = $614 & 255;
            $616 = $615 | $dp$060;
            $617 = $609 >>> 8;
            $618 = (($74) + -1)|0;
            $619 = (__ZN8Snes_Spc8cpu_readEii($this,$616,$618)|0);
            $620 = (($617) + ($619))|0;
            $621 = $620 & 255;
            $622 = $612 | $621;
            __ZN8Snes_Spc9cpu_writeEiii($this,$621,$616,$74);
            $a$0 = $a$188;$c$0 = $c$163;$nz$0 = $622;$pc$1 = $77;$psw$0 = $psw$165;$rel_time$0 = $74;$x$0 = $x$175;$y$0 = $y$169;
            label = 6;
            break;
           }
           case 154: case 122:  {
            $623 = $79 | $dp$060;
            $624 = (($74) + -2)|0;
            $625 = (__ZN8Snes_Spc8cpu_readEii($this,$623,$624)|0);
            $626 = (($79) + 1)|0;
            $627 = $626 & 255;
            $628 = $627 | $dp$060;
            $629 = (__ZN8Snes_Spc8cpu_readEii($this,$628,$74)|0);
            $630 = ($76<<24>>24)==(-102);
            if ($630) {
             $631 = $625 ^ 255;
             $632 = (($631) + 1)|0;
             $633 = $629 ^ 255;
             $hi$0 = $633;$lo$0 = $632;
            } else {
             $hi$0 = $629;$lo$0 = $625;
            }
            $634 = (($lo$0) + ($a$188))|0;
            $635 = (($hi$0) + ($y$169))|0;
            $636 = $634 >> 8;
            $637 = (($635) + ($636))|0;
            $638 = $hi$0 ^ $y$169;
            $639 = $638 ^ $637;
            $640 = $psw$165 & -73;
            $641 = $639 >>> 1;
            $642 = $641 & 8;
            $643 = $642 | $640;
            $644 = (($639) + 128)|0;
            $645 = $644 >>> 2;
            $646 = $645 & 64;
            $647 = $643 | $646;
            $648 = $634 & 255;
            $649 = $637 & 255;
            $650 = $634 >>> 1;
            $651 = $650 | $634;
            $652 = $651 & 127;
            $653 = $652 | $649;
            $a$0 = $648;$c$0 = $637;$nz$0 = $653;$pc$1 = $77;$psw$0 = $647;$rel_time$0 = $74;$x$0 = $x$175;$y$0 = $649;
            label = 6;
            break;
           }
           case 90:  {
            $654 = $79 | $dp$060;
            $655 = (($74) + -1)|0;
            $656 = (__ZN8Snes_Spc8cpu_readEii($this,$654,$655)|0);
            $657 = (($a$188) - ($656))|0;
            $658 = $657 >>> 1;
            $659 = $658 | $657;
            $660 = $659 & 127;
            $661 = $657 >> 8;
            $662 = (($79) + 1)|0;
            $663 = $662 & 255;
            $664 = $663 | $dp$060;
            $665 = (__ZN8Snes_Spc8cpu_readEii($this,$664,$74)|0);
            $666 = (($y$169) - ($665))|0;
            $667 = (($666) + ($661))|0;
            $668 = $667 ^ -1;
            $$masked = $667 & 255;
            $669 = $660 | $$masked;
            $a$0 = $a$188;$c$0 = $668;$nz$0 = $669;$pc$1 = $77;$psw$0 = $psw$165;$rel_time$0 = $74;$x$0 = $x$175;$y$0 = $y$169;
            label = 6;
            break;
           }
           case 207:  {
            $670 = Math_imul($a$188, $y$169)|0;
            $671 = $670 & 255;
            $672 = $670 >>> 1;
            $673 = $672 | $670;
            $674 = $673 & 127;
            $675 = $670 >>> 8;
            $676 = $674 | $675;
            $a$1$be = $671;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $676;$pc$2$be = $77;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $675;
            break;
           }
           case 158:  {
            $677 = $y$169 << 8;
            $678 = (($a$188) + ($677))|0;
            $679 = $psw$165 & -73;
            $680 = ($y$169|0)<($x$175|0);
            $681 = $679 | 64;
            $$ = $680 ? $679 : $681;
            $682 = $y$169 & 15;
            $683 = $x$175 & 15;
            $684 = ($682>>>0)<($683>>>0);
            $685 = $$ | 8;
            $psw$3 = $684 ? $$ : $685;
            $686 = $x$175 << 1;
            $687 = ($y$169|0)<($686|0);
            if ($687) {
             $688 = (($678>>>0) / ($x$175>>>0))&-1;
             $689 = Math_imul($688, $x$175)|0;
             $690 = (($678) - ($689))|0;
             $a$2 = $688;$y$2 = $690;
            } else {
             $691 = $x$175 << 9;
             $692 = (($678) - ($691))|0;
             $693 = (256 - ($x$175))|0;
             $694 = (($692>>>0) / ($693>>>0))&-1;
             $695 = (255 - ($694))|0;
             $696 = (($692>>>0) % ($693>>>0))&-1;
             $697 = (($696) + ($x$175))|0;
             $a$2 = $695;$y$2 = $697;
            }
            $698 = $a$2 & 255;
            $a$1$be = $698;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $698;$pc$2$be = $77;$psw$1$be = $psw$3;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $y$2;
            break;
           }
           case 223:  {
            $699 = ($a$188|0)>(153);
            if ($699) {
             label = 214;
            } else {
             $700 = $c$163 & 256;
             $701 = ($700|0)==(0);
             if ($701) {
              $a$3 = $a$188;$c$12 = $c$163;
             } else {
              label = 214;
             }
            }
            if ((label|0) == 214) {
             label = 0;
             $702 = (($a$188) + 96)|0;
             $a$3 = $702;$c$12 = 256;
            }
            $703 = $a$3 & 14;
            $704 = ($703>>>0)>(9);
            if ($704) {
             label = 217;
            } else {
             $705 = $psw$165 & 8;
             $706 = ($705|0)==(0);
             if ($706) {
              $a$4 = $a$3;
             } else {
              label = 217;
             }
            }
            if ((label|0) == 217) {
             label = 0;
             $707 = (($a$3) + 6)|0;
             $a$4 = $707;
            }
            $708 = $a$4 & 255;
            $a$1$be = $708;$c$1$be = $c$12;$dp$0$be = $dp$060;$nz$1$be = $a$4;$pc$2$be = $77;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $y$169;
            break;
           }
           case 190:  {
            $709 = ($a$188|0)>(153);
            if ($709) {
             label = 221;
            } else {
             $710 = $c$163 & 256;
             $711 = ($710|0)==(0);
             if ($711) {
              label = 221;
             } else {
              $a$5 = $a$188;$c$13 = $c$163;
             }
            }
            if ((label|0) == 221) {
             label = 0;
             $712 = (($a$188) + -96)|0;
             $a$5 = $712;$c$13 = 0;
            }
            $713 = $a$5 & 14;
            $714 = ($713>>>0)>(9);
            if ($714) {
             label = 224;
            } else {
             $715 = $psw$165 & 8;
             $716 = ($715|0)==(0);
             if ($716) {
              label = 224;
             } else {
              $a$6 = $a$5;
             }
            }
            if ((label|0) == 224) {
             label = 0;
             $717 = (($a$5) + -6)|0;
             $a$6 = $717;
            }
            $718 = $a$6 & 255;
            $a$1$be = $718;$c$1$be = $c$13;$dp$0$be = $dp$060;$nz$1$be = $a$6;$pc$2$be = $77;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $y$169;
            break;
           }
           case 47:  {
            $719 = $78 << 24 >> 24;
            $$sum15 = (($719) + 1)|0;
            $720 = (($pc$268) + ($$sum15)|0);
            $a$0 = $a$188;$c$0 = $c$163;$nz$0 = $nz$161;$pc$1 = $720;$psw$0 = $psw$165;$rel_time$0 = $74;$x$0 = $x$175;$y$0 = $y$169;
            label = 6;
            break;
           }
           case 48:  {
            $721 = $78 << 24 >> 24;
            $$sum13 = (($721) + 2)|0;
            $722 = (($pc$268) + ($$sum13)|0);
            $723 = $nz$161 & 2176;
            $724 = ($723|0)==(0);
            if (!($724)) {
             $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $nz$161;$pc$2$be = $722;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $y$169;
             break L8;
            }
            $725 = (($pc$268) + 2|0);
            $726 = (($74) + -2)|0;
            $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $nz$161;$pc$2$be = $725;$psw$1$be = $psw$165;$rel_time$1$be = $726;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $y$169;
            break;
           }
           case 16:  {
            $727 = $78 << 24 >> 24;
            $$sum11 = (($727) + 2)|0;
            $728 = (($pc$268) + ($$sum11)|0);
            $729 = $nz$161 & 2176;
            $730 = ($729|0)==(0);
            if ($730) {
             $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $nz$161;$pc$2$be = $728;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $y$169;
             break L8;
            }
            $731 = (($pc$268) + 2|0);
            $732 = (($74) + -2)|0;
            $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $nz$161;$pc$2$be = $731;$psw$1$be = $psw$165;$rel_time$1$be = $732;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $y$169;
            break;
           }
           case 176:  {
            $733 = $78 << 24 >> 24;
            $$sum9 = (($733) + 2)|0;
            $734 = (($pc$268) + ($$sum9)|0);
            $735 = $c$163 & 256;
            $736 = ($735|0)==(0);
            if (!($736)) {
             $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $nz$161;$pc$2$be = $734;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $y$169;
             break L8;
            }
            $737 = (($pc$268) + 2|0);
            $738 = (($74) + -2)|0;
            $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $nz$161;$pc$2$be = $737;$psw$1$be = $psw$165;$rel_time$1$be = $738;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $y$169;
            break;
           }
           case 144:  {
            $739 = $78 << 24 >> 24;
            $$sum7 = (($739) + 2)|0;
            $740 = (($pc$268) + ($$sum7)|0);
            $741 = $c$163 & 256;
            $742 = ($741|0)==(0);
            if ($742) {
             $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $nz$161;$pc$2$be = $740;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $y$169;
             break L8;
            }
            $743 = (($pc$268) + 2|0);
            $744 = (($74) + -2)|0;
            $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $nz$161;$pc$2$be = $743;$psw$1$be = $psw$165;$rel_time$1$be = $744;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $y$169;
            break;
           }
           case 112:  {
            $745 = $78 << 24 >> 24;
            $$sum5 = (($745) + 2)|0;
            $746 = (($pc$268) + ($$sum5)|0);
            $747 = $psw$165 & 64;
            $748 = ($747|0)==(0);
            if (!($748)) {
             $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $nz$161;$pc$2$be = $746;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $y$169;
             break L8;
            }
            $749 = (($pc$268) + 2|0);
            $750 = (($74) + -2)|0;
            $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $nz$161;$pc$2$be = $749;$psw$1$be = $psw$165;$rel_time$1$be = $750;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $y$169;
            break;
           }
           case 80:  {
            $751 = $78 << 24 >> 24;
            $$sum3 = (($751) + 2)|0;
            $752 = (($pc$268) + ($$sum3)|0);
            $753 = $psw$165 & 64;
            $754 = ($753|0)==(0);
            if ($754) {
             $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $nz$161;$pc$2$be = $752;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $y$169;
             break L8;
            }
            $755 = (($pc$268) + 2|0);
            $756 = (($74) + -2)|0;
            $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $nz$161;$pc$2$be = $755;$psw$1$be = $psw$165;$rel_time$1$be = $756;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $y$169;
            break;
           }
           case 227: case 195: case 163: case 131: case 99: case 67: case 35: case 3:  {
            $757 = (($pc$268) + 2|0);
            $758 = $79 | $dp$060;
            $759 = (($74) + -4)|0;
            $760 = (__ZN8Snes_Spc8cpu_readEii($this,$758,$759)|0);
            $761 = $75 >>> 5;
            $762 = 1 << $761;
            $763 = $760 & $762;
            $764 = ($763|0)==(0);
            if (!($764)) {
             $pc$0 = $757;
             label = 5;
             break L8;
            }
            $765 = (($74) + -2)|0;
            $a$0 = $a$188;$c$0 = $c$163;$nz$0 = $nz$161;$pc$1 = $757;$psw$0 = $psw$165;$rel_time$0 = $765;$x$0 = $x$175;$y$0 = $y$169;
            label = 6;
            break;
           }
           case 243: case 211: case 179: case 147: case 115: case 83: case 51: case 19:  {
            $766 = (($pc$268) + 2|0);
            $767 = $79 | $dp$060;
            $768 = (($74) + -4)|0;
            $769 = (__ZN8Snes_Spc8cpu_readEii($this,$767,$768)|0);
            $770 = $75 >>> 5;
            $771 = 1 << $770;
            $772 = $769 & $771;
            $773 = ($772|0)==(0);
            if ($773) {
             $pc$0 = $766;
             label = 5;
             break L8;
            }
            $774 = (($74) + -2)|0;
            $a$0 = $a$188;$c$0 = $c$163;$nz$0 = $nz$161;$pc$1 = $766;$psw$0 = $psw$165;$rel_time$0 = $774;$x$0 = $x$175;$y$0 = $y$169;
            label = 6;
            break;
           }
           case 222:  {
            $775 = (($79) + ($x$175))|0;
            $776 = $775 & 255;
            $data$51 = $776;
            label = 244;
            break;
           }
           case 46:  {
            $data$51 = $79;
            label = 244;
            break;
           }
           case 110:  {
            $797 = $79 | $dp$060;
            $798 = (($74) + -4)|0;
            $799 = (__ZN8Snes_Spc8cpu_readEii($this,$797,$798)|0);
            $800 = (($799) + 8191)|0;
            $801 = (($74) + -3)|0;
            __ZN8Snes_Spc9cpu_writeEiii($this,$800,$797,$801);
            $802 = (($pc$268) + 2|0);
            $803 = ($799|0)==(1);
            if (!($803)) {
             $pc$0 = $802;
             label = 5;
             break L8;
            }
            $804 = (($74) + -2)|0;
            $a$0 = $a$188;$c$0 = $c$163;$nz$0 = $nz$161;$pc$1 = $802;$psw$0 = $psw$165;$rel_time$0 = $804;$x$0 = $x$175;$y$0 = $y$169;
            label = 6;
            break;
           }
           case 254:  {
            $805 = (($y$169) + 255)|0;
            $806 = $805 & 255;
            $807 = $78 << 24 >> 24;
            $$sum1 = (($807) + 2)|0;
            $808 = (($pc$268) + ($$sum1)|0);
            $809 = ($806|0)==(0);
            if (!($809)) {
             $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $nz$161;$pc$2$be = $808;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $806;
             break L8;
            }
            $810 = (($pc$268) + 2|0);
            $811 = (($74) + -2)|0;
            $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $nz$161;$pc$2$be = $810;$psw$1$be = $psw$165;$rel_time$1$be = $811;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = 0;
            break;
           }
           case 31:  {
            $812 = (__Z8get_le16PKv($77)|0);
            $813 = (($812) + ($x$175))|0;
            $814 = ((($this) + ($813)|0) + 2716|0);
            $pc$28 = $814;
            label = 257;
            break;
           }
           case 95:  {
            $pc$28 = $77;
            label = 257;
            break;
           }
           case 15:  {
            $817 = $77;
            $818 = (($817) - ($50))|0;
            $819 = (__Z8get_le16PKv($51)|0);
            $820 = ((($this) + ($819)|0) + 2716|0);
            $821 = (($sp$067) + -2|0);
            $822 = $821;
            $823 = (($822) - ($50))|0;
            $824 = ($823|0)>(256);
            if ($824) {
             __Z8set_le16Pvj($821,$818);
             $sp$1 = $821;
            } else {
             $825 = $818&255;
             $826 = $823 & 255;
             $827 = $826 | 256;
             $828 = ((($this) + ($827)|0) + 2716|0);
             HEAP8[$828] = $825;
             $829 = $818 >>> 8;
             $830 = $829&255;
             $831 = (($sp$067) + -1|0);
             HEAP8[$831] = $830;
             $832 = (($sp$067) + 254|0);
             $sp$1 = $832;
            }
            $833 = $psw$165 & -164;
            $834 = $c$163 >>> 8;
            $835 = $834 & 1;
            $836 = $dp$060 >>> 3;
            $837 = $nz$161 >>> 4;
            $838 = $837 | $nz$161;
            $839 = $838 & 128;
            $840 = $835 | $836;
            $841 = $840 | $833;
            $842 = $841 | $839;
            $843 = $nz$161&255;
            $844 = ($843<<24>>24)==(0);
            $845 = $842 | 2;
            $$21 = $844 ? $845 : $842;
            $846 = $psw$165 & -21;
            $847 = $846 | 16;
            $848 = $$21&255;
            $849 = (($sp$1) + -1|0);
            HEAP8[$849] = $848;
            $850 = $849;
            $851 = (($850) - ($50))|0;
            $852 = ($851|0)==(256);
            $853 = (($sp$1) + 255|0);
            $$29 = $852 ? $853 : $849;
            $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $nz$161;$pc$2$be = $820;$psw$1$be = $847;$rel_time$1$be = $74;$sp$0$be = $$29;$x$1$be = $x$175;$y$1$be = $y$169;
            break;
           }
           case 79:  {
            $854 = $77;
            $855 = (($854) - ($52))|0;
            $856 = (($855) + 1)|0;
            $857 = $79 | 65280;
            $858 = ((($this) + ($857)|0) + 2716|0);
            $859 = (($sp$067) + -2|0);
            $860 = $859;
            $861 = (($860) - ($52))|0;
            $862 = ($861|0)>(256);
            if ($862) {
             __Z8set_le16Pvj($859,$856);
             $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $nz$161;$pc$2$be = $858;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $859;$x$1$be = $x$175;$y$1$be = $y$169;
             break L8;
            } else {
             $863 = $856&255;
             $864 = $861 & 255;
             $865 = $864 | 256;
             $866 = ((($this) + ($865)|0) + 2716|0);
             HEAP8[$866] = $863;
             $867 = $856 >>> 8;
             $868 = $867&255;
             $869 = (($sp$067) + -1|0);
             HEAP8[$869] = $868;
             $870 = (($sp$067) + 254|0);
             $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $nz$161;$pc$2$be = $858;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $870;$x$1$be = $x$175;$y$1$be = $y$169;
             break L8;
            }
            break;
           }
           case 241: case 225: case 209: case 193: case 177: case 161: case 145: case 129: case 113: case 97: case 81: case 65: case 49: case 33: case 17: case 1:  {
            $871 = $77;
            $872 = (($871) - ($53))|0;
            $873 = $75 >>> 3;
            $874 = (65502 - ($873))|0;
            $875 = ((($this) + ($874)|0) + 2716|0);
            $876 = (__Z8get_le16PKv($875)|0);
            $877 = ((($this) + ($876)|0) + 2716|0);
            $878 = (($sp$067) + -2|0);
            $879 = $878;
            $880 = (($879) - ($53))|0;
            $881 = ($880|0)>(256);
            if ($881) {
             __Z8set_le16Pvj($878,$872);
             $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $nz$161;$pc$2$be = $877;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $878;$x$1$be = $x$175;$y$1$be = $y$169;
             break L8;
            } else {
             $882 = $872&255;
             $883 = $880 & 255;
             $884 = $883 | 256;
             $885 = ((($this) + ($884)|0) + 2716|0);
             HEAP8[$885] = $882;
             $886 = $872 >>> 8;
             $887 = $886&255;
             $888 = (($sp$067) + -1|0);
             HEAP8[$888] = $887;
             $889 = (($sp$067) + 254|0);
             $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $nz$161;$pc$2$be = $877;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $889;$x$1$be = $x$175;$y$1$be = $y$169;
             break L8;
            }
            break;
           }
           case 127:  {
            $890 = HEAP8[$sp$067]|0;
            $891 = $890&255;
            $892 = (($sp$067) + 1|0);
            $893 = (__Z8get_le16PKv($892)|0);
            $894 = ((($this) + ($893)|0) + 2716|0);
            $895 = (($sp$067) + 3|0);
            $pc$29 = $894;$sp$2 = $895;$temp53$0 = $891;
            label = 271;
            break;
           }
           case 142:  {
            $896 = (($sp$067) + 1|0);
            $897 = HEAP8[$sp$067]|0;
            $898 = $897&255;
            $899 = $896;
            $900 = (($899) - ($54))|0;
            $901 = ($900|0)==(513);
            if (!($901)) {
             $pc$29 = $77;$sp$2 = $896;$temp53$0 = $898;
             label = 271;
             break L8;
            }
            $902 = (($sp$067) + -256|0);
            $903 = HEAP8[$902]|0;
            $904 = $903&255;
            $905 = (($sp$067) + -255|0);
            $pc$29 = $77;$sp$2 = $905;$temp53$0 = $904;
            label = 271;
            break;
           }
           case 13:  {
            $914 = $psw$165 & -164;
            $915 = $c$163 >>> 8;
            $916 = $915 & 1;
            $917 = $dp$060 >>> 3;
            $918 = $nz$161 >>> 4;
            $919 = $918 | $nz$161;
            $920 = $919 & 128;
            $921 = $916 | $917;
            $922 = $921 | $914;
            $923 = $922 | $920;
            $924 = $nz$161&255;
            $925 = ($924<<24>>24)==(0);
            $926 = $923 | 2;
            $$22 = $925 ? $926 : $923;
            $927 = $$22&255;
            $928 = (($sp$067) + -1|0);
            HEAP8[$928] = $927;
            $929 = $928;
            $930 = (($929) - ($55))|0;
            $931 = ($930|0)==(256);
            $932 = (($sp$067) + 255|0);
            $$30 = $931 ? $932 : $928;
            $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $nz$161;$pc$2$be = $77;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $$30;$x$1$be = $x$175;$y$1$be = $y$169;
            break;
           }
           case 45:  {
            $933 = $a$188&255;
            $934 = (($sp$067) + -1|0);
            HEAP8[$934] = $933;
            $935 = $934;
            $936 = (($935) - ($56))|0;
            $937 = ($936|0)==(256);
            $938 = (($sp$067) + 255|0);
            $$23 = $937 ? $938 : $934;
            $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $nz$161;$pc$2$be = $77;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $$23;$x$1$be = $x$175;$y$1$be = $y$169;
            break;
           }
           case 77:  {
            $939 = $x$175&255;
            $940 = (($sp$067) + -1|0);
            HEAP8[$940] = $939;
            $941 = $940;
            $942 = (($941) - ($57))|0;
            $943 = ($942|0)==(256);
            $944 = (($sp$067) + 255|0);
            $$24 = $943 ? $944 : $940;
            $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $nz$161;$pc$2$be = $77;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $$24;$x$1$be = $x$175;$y$1$be = $y$169;
            break;
           }
           case 109:  {
            $945 = $y$169&255;
            $946 = (($sp$067) + -1|0);
            HEAP8[$946] = $945;
            $947 = $946;
            $948 = (($947) - ($58))|0;
            $949 = ($948|0)==(256);
            $950 = (($sp$067) + 255|0);
            $$25 = $949 ? $950 : $946;
            $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $nz$161;$pc$2$be = $77;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $$25;$x$1$be = $x$175;$y$1$be = $y$169;
            break;
           }
           case 174:  {
            $951 = (($sp$067) + 1|0);
            $952 = HEAP8[$sp$067]|0;
            $953 = $952&255;
            $954 = $951;
            $955 = (($954) - ($59))|0;
            $956 = ($955|0)==(513);
            if (!($956)) {
             $a$1$be = $953;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $nz$161;$pc$2$be = $77;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $951;$x$1$be = $x$175;$y$1$be = $y$169;
             break L8;
            }
            $957 = (($sp$067) + -256|0);
            $958 = HEAP8[$957]|0;
            $959 = $958&255;
            $960 = (($sp$067) + -255|0);
            $a$1$be = $959;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $nz$161;$pc$2$be = $77;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $960;$x$1$be = $x$175;$y$1$be = $y$169;
            break;
           }
           case 206:  {
            $961 = (($sp$067) + 1|0);
            $962 = HEAP8[$sp$067]|0;
            $963 = $962&255;
            $964 = $961;
            $965 = (($964) - ($60))|0;
            $966 = ($965|0)==(513);
            if (!($966)) {
             $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $nz$161;$pc$2$be = $77;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $961;$x$1$be = $963;$y$1$be = $y$169;
             break L8;
            }
            $967 = (($sp$067) + -256|0);
            $968 = HEAP8[$967]|0;
            $969 = $968&255;
            $970 = (($sp$067) + -255|0);
            $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $nz$161;$pc$2$be = $77;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $970;$x$1$be = $969;$y$1$be = $y$169;
            break;
           }
           case 238:  {
            $971 = (($sp$067) + 1|0);
            $972 = HEAP8[$sp$067]|0;
            $973 = $972&255;
            $974 = $971;
            $975 = (($974) - ($61))|0;
            $976 = ($975|0)==(513);
            if (!($976)) {
             $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $nz$161;$pc$2$be = $77;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $971;$x$1$be = $x$175;$y$1$be = $973;
             break L8;
            }
            $977 = (($sp$067) + -256|0);
            $978 = HEAP8[$977]|0;
            $979 = $978&255;
            $980 = (($sp$067) + -255|0);
            $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $nz$161;$pc$2$be = $77;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $980;$x$1$be = $x$175;$y$1$be = $979;
            break;
           }
           case 242: case 210: case 178: case 146: case 114: case 82: case 50: case 18: case 226: case 194: case 162: case 130: case 98: case 66: case 34: case 2:  {
            $981 = $75 >>> 5;
            $982 = 1 << $981;
            $983 = $982 ^ -1;
            $984 = $75 & 16;
            $985 = ($984|0)==(0);
            $$26 = $985 ? $982 : 0;
            $986 = $79 | $dp$060;
            $987 = (($74) + -1)|0;
            $988 = (__ZN8Snes_Spc8cpu_readEii($this,$986,$987)|0);
            $989 = $988 & $983;
            $990 = $989 | $$26;
            __ZN8Snes_Spc9cpu_writeEiii($this,$990,$986,$74);
            $a$0 = $a$188;$c$0 = $c$163;$nz$0 = $nz$161;$pc$1 = $77;$psw$0 = $psw$165;$rel_time$0 = $74;$x$0 = $x$175;$y$0 = $y$169;
            label = 6;
            break;
           }
           case 78: case 14:  {
            $991 = (__Z8get_le16PKv($77)|0);
            $992 = (($pc$268) + 3|0);
            $993 = (($74) + -2)|0;
            $994 = (__ZN8Snes_Spc8cpu_readEii($this,$991,$993)|0);
            $995 = (($a$188) - ($994))|0;
            $996 = $995 & 255;
            $997 = $a$188 ^ -1;
            $998 = $994 & $997;
            $999 = ($76<<24>>24)==(14);
            $1000 = $999 ? $a$188 : 0;
            $$27 = $998 | $1000;
            __ZN8Snes_Spc9cpu_writeEiii($this,$$27,$991,$74);
            $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $996;$pc$2$be = $992;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $y$169;
            break;
           }
           case 74:  {
            $1001 = (__ZN8Snes_Spc11CPU_mem_bitEPKhi($this,$77,$74)|0);
            $1002 = $1001 & $c$163;
            $1003 = (($pc$268) + 3|0);
            $a$1$be = $a$188;$c$1$be = $1002;$dp$0$be = $dp$060;$nz$1$be = $nz$161;$pc$2$be = $1003;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $y$169;
            break;
           }
           case 106:  {
            $1004 = (__ZN8Snes_Spc11CPU_mem_bitEPKhi($this,$77,$74)|0);
            $1005 = $1004 ^ -1;
            $1006 = $c$163 & $1005;
            $1007 = (($pc$268) + 3|0);
            $a$1$be = $a$188;$c$1$be = $1006;$dp$0$be = $dp$060;$nz$1$be = $nz$161;$pc$2$be = $1007;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $y$169;
            break;
           }
           case 10:  {
            $1008 = (($74) + -1)|0;
            $1009 = (__ZN8Snes_Spc11CPU_mem_bitEPKhi($this,$77,$1008)|0);
            $1010 = $1009 | $c$163;
            $1011 = (($pc$268) + 3|0);
            $a$1$be = $a$188;$c$1$be = $1010;$dp$0$be = $dp$060;$nz$1$be = $nz$161;$pc$2$be = $1011;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $y$169;
            break;
           }
           case 42:  {
            $1012 = (($74) + -1)|0;
            $1013 = (__ZN8Snes_Spc11CPU_mem_bitEPKhi($this,$77,$1012)|0);
            $1014 = $1013 ^ -1;
            $1015 = $c$163 | $1014;
            $1016 = (($pc$268) + 3|0);
            $a$1$be = $a$188;$c$1$be = $1015;$dp$0$be = $dp$060;$nz$1$be = $nz$161;$pc$2$be = $1016;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $y$169;
            break;
           }
           case 138:  {
            $1017 = (($74) + -1)|0;
            $1018 = (__ZN8Snes_Spc11CPU_mem_bitEPKhi($this,$77,$1017)|0);
            $1019 = $1018 ^ $c$163;
            $1020 = (($pc$268) + 3|0);
            $a$1$be = $a$188;$c$1$be = $1019;$dp$0$be = $dp$060;$nz$1$be = $nz$161;$pc$2$be = $1020;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $y$169;
            break;
           }
           case 234:  {
            $1021 = (__Z8get_le16PKv($77)|0);
            $1022 = (($pc$268) + 3|0);
            $1023 = $1021 & 8191;
            $1024 = (($74) + -1)|0;
            $1025 = (__ZN8Snes_Spc8cpu_readEii($this,$1023,$1024)|0);
            $1026 = $1021 >>> 13;
            $1027 = 1 << $1026;
            $1028 = $1027 ^ $1025;
            __ZN8Snes_Spc9cpu_writeEiii($this,$1028,$1023,$74);
            $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $nz$161;$pc$2$be = $1022;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $y$169;
            break;
           }
           case 202:  {
            $1029 = (__Z8get_le16PKv($77)|0);
            $1030 = (($pc$268) + 3|0);
            $1031 = $1029 & 8191;
            $1032 = (($74) + -2)|0;
            $1033 = (__ZN8Snes_Spc8cpu_readEii($this,$1031,$1032)|0);
            $1034 = $1029 >>> 13;
            $1035 = 1 << $1034;
            $1036 = $1035 ^ -1;
            $1037 = $1033 & $1036;
            $1038 = $c$163 >>> 8;
            $1039 = $1038 & 1;
            $1040 = $1039 << $1034;
            $1041 = $1037 | $1040;
            $1042 = (($1041) + 8192)|0;
            __ZN8Snes_Spc9cpu_writeEiii($this,$1042,$1031,$74);
            $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $nz$161;$pc$2$be = $1030;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $y$169;
            break;
           }
           case 170:  {
            $1043 = (__ZN8Snes_Spc11CPU_mem_bitEPKhi($this,$77,$74)|0);
            $1044 = (($pc$268) + 3|0);
            $a$1$be = $a$188;$c$1$be = $1043;$dp$0$be = $dp$060;$nz$1$be = $nz$161;$pc$2$be = $1044;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $y$169;
            break;
           }
           case 96:  {
            $a$1$be = $a$188;$c$1$be = 0;$dp$0$be = $dp$060;$nz$1$be = $nz$161;$pc$2$be = $77;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $y$169;
            break;
           }
           case 128:  {
            $a$1$be = $a$188;$c$1$be = -1;$dp$0$be = $dp$060;$nz$1$be = $nz$161;$pc$2$be = $77;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $y$169;
            break;
           }
           case 237:  {
            $1045 = $c$163 ^ 256;
            $a$1$be = $a$188;$c$1$be = $1045;$dp$0$be = $dp$060;$nz$1$be = $nz$161;$pc$2$be = $77;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $y$169;
            break;
           }
           case 224:  {
            $1046 = $psw$165 & -73;
            $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $nz$161;$pc$2$be = $77;$psw$1$be = $1046;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $y$169;
            break;
           }
           case 32:  {
            $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = 0;$nz$1$be = $nz$161;$pc$2$be = $77;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $y$169;
            break;
           }
           case 64:  {
            $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = 256;$nz$1$be = $nz$161;$pc$2$be = $77;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $y$169;
            break;
           }
           case 160:  {
            $1047 = $psw$165 | 4;
            $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $nz$161;$pc$2$be = $77;$psw$1$be = $1047;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $y$169;
            break;
           }
           case 192:  {
            $1048 = $psw$165 & -5;
            $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $nz$161;$pc$2$be = $77;$psw$1$be = $1048;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $y$169;
            break;
           }
           case 255:  {
            $1049 = $77;
            $1050 = (($1049) - ($62))|0;
            $1051 = (($1050) + -1)|0;
            $1052 = ($1051>>>0)>(65535);
            if (!($1052)) {
             label = 302;
             break L6;
            }
            $1053 = $1051 & 65535;
            $1054 = ((($this) + ($1053)|0) + 2716|0);
            $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $nz$161;$pc$2$be = $1054;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $y$169;
            break;
           }
           case 239:  {
            label = 302;
            break L6;
            break;
           }
           case 232:  {
            $a$0 = $79;$c$0 = $c$163;$nz$0 = $79;$pc$1 = $77;$psw$0 = $psw$165;$rel_time$0 = $74;$x$0 = $x$175;$y$0 = $y$169;
            label = 6;
            break;
           }
           case 0:  {
            $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $nz$161;$pc$2$be = $77;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $y$169;
            break;
           }
           case 240:  {
            $80 = $78 << 24 >> 24;
            $$sum19 = (($80) + 2)|0;
            $81 = (($pc$268) + ($$sum19)|0);
            $82 = $nz$161&255;
            $83 = ($82<<24>>24)==(0);
            if ($83) {
             $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $nz$161;$pc$2$be = $81;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $y$169;
             break L8;
            }
            $84 = (($pc$268) + 2|0);
            $85 = (($74) + -2)|0;
            $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $nz$161;$pc$2$be = $84;$psw$1$be = $psw$165;$rel_time$1$be = $85;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $y$169;
            break;
           }
           case 208:  {
            $86 = $78 << 24 >> 24;
            $$sum17 = (($86) + 2)|0;
            $87 = (($pc$268) + ($$sum17)|0);
            $88 = $nz$161&255;
            $89 = ($88<<24>>24)==(0);
            if (!($89)) {
             $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $nz$161;$pc$2$be = $87;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $y$169;
             break L8;
            }
            $90 = (($pc$268) + 2|0);
            $91 = (($74) + -2)|0;
            $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $nz$161;$pc$2$be = $90;$psw$1$be = $psw$165;$rel_time$1$be = $91;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $y$169;
            break;
           }
           case 63:  {
            $92 = $77;
            $93 = (($92) - ($47))|0;
            $94 = (($93) + 2)|0;
            $95 = (__Z8get_le16PKv($77)|0);
            $96 = ((($this) + ($95)|0) + 2716|0);
            $97 = (($sp$067) + -2|0);
            $98 = $97;
            $99 = (($98) - ($47))|0;
            $100 = ($99|0)>(256);
            if ($100) {
             __Z8set_le16Pvj($97,$94);
             $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $nz$161;$pc$2$be = $96;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $97;$x$1$be = $x$175;$y$1$be = $y$169;
             break L8;
            } else {
             $101 = $94&255;
             $102 = $99 & 255;
             $103 = $102 | 256;
             $104 = ((($this) + ($103)|0) + 2716|0);
             HEAP8[$104] = $101;
             $105 = $94 >>> 8;
             $106 = $105&255;
             $107 = (($sp$067) + -1|0);
             HEAP8[$107] = $106;
             $108 = (($sp$067) + 254|0);
             $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $nz$161;$pc$2$be = $96;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $108;$x$1$be = $x$175;$y$1$be = $y$169;
             break L8;
            }
            break;
           }
           case 111:  {
            $109 = $sp$067;
            $110 = (($109) - ($48))|0;
            $111 = (__Z8get_le16PKv($sp$067)|0);
            $112 = ((($this) + ($111)|0) + 2716|0);
            $113 = (($sp$067) + 2|0);
            $114 = ($110|0)<(511);
            if ($114) {
             $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $nz$161;$pc$2$be = $112;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $113;$x$1$be = $x$175;$y$1$be = $y$169;
             break L8;
            }
            $115 = (($sp$067) + -255|0);
            $116 = HEAP8[$115]|0;
            $117 = $116&255;
            $118 = $117 << 8;
            $119 = $110 & 255;
            $120 = $119 | 256;
            $121 = ((($this) + ($120)|0) + 2716|0);
            $122 = HEAP8[$121]|0;
            $123 = $122&255;
            $124 = $118 | $123;
            $125 = ((($this) + ($124)|0) + 2716|0);
            $126 = (($sp$067) + -254|0);
            $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $nz$161;$pc$2$be = $125;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $126;$x$1$be = $x$175;$y$1$be = $y$169;
            break;
           }
           case 228:  {
            $127 = (($pc$268) + 2|0);
            $128 = $79 | $dp$060;
            $129 = (($128) + -253)|0;
            $130 = ($129>>>0)<(3);
            if (!($130)) {
             $138 = ((($this) + ($128)|0) + 2716|0);
             $139 = HEAP8[$138]|0;
             $140 = $139&255;
             $141 = (($128) + -240)|0;
             $142 = ($141>>>0)<(16);
             if (!($142)) {
              $a$1$be = $140;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $140;$pc$2$be = $127;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $y$169;
              break L8;
             }
             $143 = (__ZN8Snes_Spc16cpu_read_smp_regEii($this,$141,$74)|0);
             $a$1$be = $143;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $143;$pc$2$be = $127;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $y$169;
             break L8;
            }
            $131 = ((($this) + (($129*24)|0)|0) + 1868|0);
            $132 = ($131);
            $133 = HEAP32[$132>>2]|0;
            $134 = ($74|0)<($133|0);
            if ($134) {
             $t$0 = $131;
            } else {
             $135 = (__ZN8Snes_Spc10run_timer_EPNS_5TimerEi(0,$131,$74)|0);
             $t$0 = $135;
            }
            $136 = (($t$0) + 20|0);
            $137 = HEAP32[$136>>2]|0;
            HEAP32[$136>>2] = 0;
            $a$1$be = $137;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $137;$pc$2$be = $127;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $y$169;
            break;
           }
           case 250:  {
            $144 = (($74) + -2)|0;
            $145 = $79 | $dp$060;
            $146 = (($145) + -253)|0;
            $147 = ($146>>>0)<(3);
            do {
             if ($147) {
              $148 = ((($this) + (($146*24)|0)|0) + 1868|0);
              $149 = ($148);
              $150 = HEAP32[$149>>2]|0;
              $151 = ($144|0)<($150|0);
              if ($151) {
               $t5$0 = $148;
              } else {
               $152 = (__ZN8Snes_Spc10run_timer_EPNS_5TimerEi(0,$148,$144)|0);
               $t5$0 = $152;
              }
              $153 = (($t5$0) + 20|0);
              $154 = HEAP32[$153>>2]|0;
              HEAP32[$153>>2] = 0;
              $temp$0 = $154;
             } else {
              $155 = ((($this) + ($145)|0) + 2716|0);
              $156 = HEAP8[$155]|0;
              $157 = $156&255;
              $158 = (($145) + -240)|0;
              $159 = ($158>>>0)<(16);
              if (!($159)) {
               $temp$0 = $157;
               break;
              }
              $160 = (__ZN8Snes_Spc16cpu_read_smp_regEii($this,$158,$144)|0);
              $temp$0 = $160;
             }
            } while(0);
            $161 = (($temp$0) + 8192)|0;
            $data$0 = $161;
            label = 31;
            break;
           }
           case 143:  {
            $data$0 = $79;
            label = 31;
            break;
           }
           case 196:  {
            $174 = (($pc$268) + 2|0);
            $175 = $79 | $dp$060;
            $176 = $a$188&255;
            $177 = ((($this) + ($175)|0) + 2716|0);
            HEAP8[$177] = $176;
            $178 = (($175) + -240)|0;
            $179 = ($178>>>0)<(16);
            if (!($179)) {
             $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $nz$161;$pc$2$be = $174;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $y$169;
             break L8;
            }
            $180 = (($175) + -242)|0;
            $181 = ((($this) + ($178)|0) + 1940|0);
            HEAP8[$181] = $176;
            $182 = ($180|0)==(1);
            if ($182) {
             __ZN8Snes_Spc9dsp_writeEii($this,$a$188,$74);
             $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $nz$161;$pc$2$be = $174;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $y$169;
             break L8;
            }
            $183 = ($180>>>0)>(1);
            if (!($183)) {
             $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $nz$161;$pc$2$be = $174;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $y$169;
             break L8;
            }
            __ZN8Snes_Spc18cpu_write_smp_reg_Eiii($this,$a$188,$74,$178);
            $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $nz$161;$pc$2$be = $174;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $y$169;
            break;
           }
           case 230:  {
            $184 = (($x$175) + ($dp$060))|0;
            $data$2 = $184;$pc$3 = $pc$268;
            label = 46;
            break;
           }
           case 247:  {
            $185 = $79 | $dp$060;
            $186 = ((($this) + ($185)|0) + 2716|0);
            $187 = (__Z8get_le16PKv($186)|0);
            $188 = (($187) + ($y$169))|0;
            $data$2 = $188;$pc$3 = $77;
            label = 46;
            break;
           }
           case 231:  {
            $189 = (($79) + ($x$175))|0;
            $190 = $189 & 255;
            $191 = $190 | $dp$060;
            $192 = ((($this) + ($191)|0) + 2716|0);
            $193 = (__Z8get_le16PKv($192)|0);
            $data$2 = $193;$pc$3 = $77;
            label = 46;
            break;
           }
           case 246:  {
            $194 = (($79) + ($y$169))|0;
            $data$1 = $194;
            label = 44;
            break;
           }
           case 245:  {
            $195 = (($79) + ($x$175))|0;
            $data$1 = $195;
            label = 44;
            break;
           }
           case 229:  {
            $data$1 = $79;
            label = 44;
            break;
           }
           case 244:  {
            $201 = (($79) + ($x$175))|0;
            $202 = $201 & 255;
            $203 = $202 | $dp$060;
            $data$2 = $203;$pc$3 = $77;
            label = 46;
            break;
           }
           case 191:  {
            $205 = (($x$175) + ($dp$060))|0;
            $206 = (($x$175) + 1)|0;
            $207 = $206 & 255;
            $208 = (($74) + -1)|0;
            $209 = (__ZN8Snes_Spc8cpu_readEii($this,$205,$208)|0);
            $a$1$be = $209;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $209;$pc$2$be = $77;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $207;$y$1$be = $y$169;
            break;
           }
           case 249:  {
            $210 = (($79) + ($y$169))|0;
            $211 = $210 & 255;
            $data$3 = $211;
            label = 49;
            break;
           }
           case 248:  {
            $data$3 = $79;
            label = 49;
            break;
           }
           case 233:  {
            $228 = (__Z8get_le16PKv($77)|0);
            $229 = (($pc$268) + 2|0);
            $230 = (__ZN8Snes_Spc8cpu_readEii($this,$228,$74)|0);
            $data$4 = $230;$pc$4 = $229;
            label = 56;
            break;
           }
           case 205:  {
            $data$4 = $79;$pc$4 = $77;
            label = 56;
            break;
           }
           case 251:  {
            $231 = (($79) + ($x$175))|0;
            $232 = $231 & 255;
            $data$5 = $232;
            label = 58;
            break;
           }
           case 235:  {
            $data$5 = $79;
            label = 58;
            break;
           }
           case 236:  {
            $250 = (__Z8get_le16PKv($77)|0);
            $251 = (($pc$268) + 3|0);
            $252 = (($250) + -253)|0;
            $253 = ($252>>>0)<(3);
            if (!($253)) {
             $261 = ((($this) + ($250)|0) + 2716|0);
             $262 = HEAP8[$261]|0;
             $263 = $262&255;
             $264 = (($250) + -240)|0;
             $265 = ($264>>>0)<(16);
             if (!($265)) {
              $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $263;$pc$2$be = $251;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $263;
              break L8;
             }
             $266 = (__ZN8Snes_Spc16cpu_read_smp_regEii($this,$264,$74)|0);
             $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $266;$pc$2$be = $251;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $266;
             break L8;
            }
            $254 = ((($this) + (($252*24)|0)|0) + 1868|0);
            $255 = ($254);
            $256 = HEAP32[$255>>2]|0;
            $257 = ($74|0)<($256|0);
            if ($257) {
             $t25$0 = $254;
            } else {
             $258 = (__ZN8Snes_Spc10run_timer_EPNS_5TimerEi(0,$254,$74)|0);
             $t25$0 = $258;
            }
            $259 = (($t25$0) + 20|0);
            $260 = HEAP32[$259>>2]|0;
            HEAP32[$259>>2] = 0;
            $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $260;$pc$2$be = $251;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $260;
            break;
           }
           case 141:  {
            $a$0 = $a$188;$c$0 = $c$163;$nz$0 = $79;$pc$1 = $77;$psw$0 = $psw$165;$rel_time$0 = $74;$x$0 = $x$175;$y$0 = $79;
            label = 6;
            break;
           }
           default: {
            label = 303;
            break L6;
           }
           }
          } while(0);
          do {
           if ((label|0) == 31) {
            label = 0;
            $162 = (($pc$268) + 2|0);
            $163 = HEAP8[$162]|0;
            $164 = $163&255;
            $165 = (($pc$268) + 3|0);
            $166 = $164 | $dp$060;
            $167 = $data$0&255;
            $168 = ((($this) + ($166)|0) + 2716|0);
            HEAP8[$168] = $167;
            $169 = (($166) + -240)|0;
            $170 = ($169>>>0)<(16);
            if (!($170)) {
             $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $nz$161;$pc$2$be = $165;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $y$169;
             break;
            }
            $171 = ((($this) + ($169)|0) + 1940|0);
            HEAP8[$171] = $167;
            $172 = -788594688 << $169;
            $173 = ($172|0)<(0);
            if (!($173)) {
             $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $nz$161;$pc$2$be = $165;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $y$169;
             break;
            }
            __ZN8Snes_Spc17cpu_write_smp_regEiii($this,$data$0,$74,$169);
            $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $nz$161;$pc$2$be = $165;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $y$169;
           }
           else if ((label|0) == 44) {
            label = 0;
            $196 = (($pc$268) + 2|0);
            $197 = HEAP8[$196]|0;
            $198 = $197&255;
            $199 = $198 << 8;
            $200 = (($199) + ($data$1))|0;
            $data$2 = $200;$pc$3 = $196;
            label = 46;
           }
           else if ((label|0) == 49) {
            label = 0;
            $212 = $data$3 | $dp$060;
            $213 = (($212) + -253)|0;
            $214 = ($213>>>0)<(3);
            if (!($214)) {
             $222 = ((($this) + ($212)|0) + 2716|0);
             $223 = HEAP8[$222]|0;
             $224 = $223&255;
             $225 = (($212) + -240)|0;
             $226 = ($225>>>0)<(16);
             if (!($226)) {
              $a$0 = $a$188;$c$0 = $c$163;$nz$0 = $224;$pc$1 = $77;$psw$0 = $psw$165;$rel_time$0 = $74;$x$0 = $224;$y$0 = $y$169;
              label = 6;
              break;
             }
             $227 = (__ZN8Snes_Spc16cpu_read_smp_regEii($this,$225,$74)|0);
             $a$0 = $a$188;$c$0 = $c$163;$nz$0 = $227;$pc$1 = $77;$psw$0 = $psw$165;$rel_time$0 = $74;$x$0 = $227;$y$0 = $y$169;
             label = 6;
             break;
            }
            $215 = ((($this) + (($213*24)|0)|0) + 1868|0);
            $216 = ($215);
            $217 = HEAP32[$216>>2]|0;
            $218 = ($74|0)<($217|0);
            if ($218) {
             $t14$0 = $215;
            } else {
             $219 = (__ZN8Snes_Spc10run_timer_EPNS_5TimerEi(0,$215,$74)|0);
             $t14$0 = $219;
            }
            $220 = (($t14$0) + 20|0);
            $221 = HEAP32[$220>>2]|0;
            HEAP32[$220>>2] = 0;
            $a$0 = $a$188;$c$0 = $c$163;$nz$0 = $221;$pc$1 = $77;$psw$0 = $psw$165;$rel_time$0 = $74;$x$0 = $221;$y$0 = $y$169;
            label = 6;
           }
           else if ((label|0) == 56) {
            label = 0;
            $a$0 = $a$188;$c$0 = $c$163;$nz$0 = $data$4;$pc$1 = $pc$4;$psw$0 = $psw$165;$rel_time$0 = $74;$x$0 = $data$4;$y$0 = $y$169;
            label = 6;
           }
           else if ((label|0) == 58) {
            label = 0;
            $233 = (($pc$268) + 2|0);
            $234 = $data$5 | $dp$060;
            $235 = (($234) + -253)|0;
            $236 = ($235>>>0)<(3);
            if (!($236)) {
             $244 = ((($this) + ($234)|0) + 2716|0);
             $245 = HEAP8[$244]|0;
             $246 = $245&255;
             $247 = (($234) + -240)|0;
             $248 = ($247>>>0)<(16);
             if (!($248)) {
              $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $246;$pc$2$be = $233;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $246;
              break;
             }
             $249 = (__ZN8Snes_Spc16cpu_read_smp_regEii($this,$247,$74)|0);
             $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $249;$pc$2$be = $233;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $249;
             break;
            }
            $237 = ((($this) + (($235*24)|0)|0) + 1868|0);
            $238 = ($237);
            $239 = HEAP32[$238>>2]|0;
            $240 = ($74|0)<($239|0);
            if ($240) {
             $t19$0 = $237;
            } else {
             $241 = (__ZN8Snes_Spc10run_timer_EPNS_5TimerEi(0,$237,$74)|0);
             $t19$0 = $241;
            }
            $242 = (($t19$0) + 20|0);
            $243 = HEAP32[$242>>2]|0;
            HEAP32[$242>>2] = 0;
            $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $243;$pc$2$be = $233;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $243;
           }
           else if ((label|0) == 76) {
            label = 0;
            $279 = (($pc$268) + 2|0);
            $280 = HEAP8[$279]|0;
            $281 = $280&255;
            $282 = $281 << 8;
            $283 = (($282) + ($data$6))|0;
            $data$7 = $283;$pc$5 = $279;
            label = 78;
           }
           else if ((label|0) == 80) {
            label = 0;
            $287 = (__Z8get_le16PKv($77)|0);
            __ZN8Snes_Spc9cpu_writeEiii($this,$temp27$0,$287,$74);
            $288 = (($pc$268) + 3|0);
            $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $nz$161;$pc$2$be = $288;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $y$169;
           }
           else if ((label|0) == 82) {
            label = 0;
            $291 = $data$8 | $dp$060;
            __ZN8Snes_Spc9cpu_writeEiii($this,$x$175,$291,$74);
            $a$0 = $a$188;$c$0 = $c$163;$nz$0 = $nz$161;$pc$1 = $77;$psw$0 = $psw$165;$rel_time$0 = $74;$x$0 = $x$175;$y$0 = $y$169;
            label = 6;
           }
           else if ((label|0) == 84) {
            label = 0;
            $294 = $data$9 | $dp$060;
            __ZN8Snes_Spc9cpu_writeEiii($this,$y$169,$294,$74);
            $a$0 = $a$188;$c$0 = $c$163;$nz$0 = $nz$161;$pc$1 = $77;$psw$0 = $psw$165;$rel_time$0 = $74;$x$0 = $x$175;$y$0 = $y$169;
            label = 6;
           }
           else if ((label|0) == 97) {
            label = 0;
            $314 = (($pc$268) + 2|0);
            $315 = HEAP8[$314]|0;
            $316 = $315&255;
            $317 = $316 << 8;
            $318 = (($317) + ($data$10))|0;
            $data$12 = $318;$pc$6 = $314;
            label = 100;
           }
           else if ((label|0) == 99) {
            label = 0;
            $321 = $data$11 | $dp$060;
            $data$12 = $321;$pc$6 = $77;
            label = 100;
           }
           else if ((label|0) == 104) {
            label = 0;
            $331 = (($pc$268) + 2|0);
            $332 = (($pc$268) + 3|0);
            $333 = HEAP8[$331]|0;
            $334 = $333&255;
            $335 = $334 | $dp$060;
            $addr28$0 = $335;$data$15 = $data$14;$pc$8 = $332;
            label = 105;
           }
           else if ((label|0) == 111) {
            label = 0;
            $351 = (($pc$268) + 2|0);
            $352 = HEAP8[$351]|0;
            $353 = $352&255;
            $354 = $353 << 8;
            $355 = (($354) + ($data$16))|0;
            $data$18 = $355;$pc$9 = $351;
            label = 114;
           }
           else if ((label|0) == 113) {
            label = 0;
            $358 = $data$17 | $dp$060;
            $data$18 = $358;$pc$9 = $77;
            label = 114;
           }
           else if ((label|0) == 118) {
            label = 0;
            $368 = (($pc$268) + 2|0);
            $369 = (($pc$268) + 3|0);
            $370 = HEAP8[$368]|0;
            $371 = $370&255;
            $372 = $371 | $dp$060;
            $addr29$0 = $372;$data$21 = $data$20;$pc$11 = $369;
            label = 119;
           }
           else if ((label|0) == 125) {
            label = 0;
            $388 = (($pc$268) + 2|0);
            $389 = HEAP8[$388]|0;
            $390 = $389&255;
            $391 = $390 << 8;
            $392 = (($391) + ($data$22))|0;
            $data$24 = $392;$pc$12 = $388;
            label = 128;
           }
           else if ((label|0) == 127) {
            label = 0;
            $395 = $data$23 | $dp$060;
            $data$24 = $395;$pc$12 = $77;
            label = 128;
           }
           else if ((label|0) == 132) {
            label = 0;
            $405 = (($pc$268) + 2|0);
            $406 = (($pc$268) + 3|0);
            $407 = HEAP8[$405]|0;
            $408 = $407&255;
            $409 = $408 | $dp$060;
            $addr31$0 = $409;$data$27 = $data$26;$pc$14 = $406;
            label = 133;
           }
           else if ((label|0) == 139) {
            label = 0;
            $425 = (($pc$268) + 2|0);
            $426 = HEAP8[$425]|0;
            $427 = $426&255;
            $428 = $427 << 8;
            $429 = (($428) + ($data$28))|0;
            $data$30 = $429;$pc$15 = $425;
            label = 142;
           }
           else if ((label|0) == 141) {
            label = 0;
            $432 = $data$29 | $dp$060;
            $data$30 = $432;$pc$15 = $77;
            label = 142;
           }
           else if ((label|0) == 146) {
            label = 0;
            $449 = (($pc$268) + 2|0);
            $450 = HEAP8[$449]|0;
            $451 = $450&255;
            $452 = $451 | $dp$060;
            $453 = (($74) + -1)|0;
            $454 = (__ZN8Snes_Spc8cpu_readEii($this,$452,$453)|0);
            $455 = (($454) - ($data$32))|0;
            $456 = $455 ^ -1;
            $457 = $455 & 255;
            $a$0 = $a$188;$c$0 = $456;$nz$0 = $457;$pc$1 = $449;$psw$0 = $psw$165;$rel_time$0 = $74;$x$0 = $x$175;$y$0 = $y$169;
            label = 6;
           }
           else if ((label|0) == 149) {
            label = 0;
            $461 = (__ZN8Snes_Spc8cpu_readEii($this,$data$33,$74)|0);
            $data$34 = $461;$pc$18 = $pc$17;
            label = 150;
           }
           else if ((label|0) == 153) {
            label = 0;
            $468 = (__ZN8Snes_Spc8cpu_readEii($this,$data$35,$74)|0);
            $data$36 = $468;$pc$20 = $pc$19;
            label = 154;
           }
           else if ((label|0) == 157) {
            label = 0;
            $479 = (($pc$268) + 2|0);
            $480 = HEAP8[$479]|0;
            $481 = $480&255;
            $482 = $481 | $dp$060;
            $addr33$0 = $482;$data$38 = $data$37;$pc$21 = $479;
            label = 158;
           }
           else if ((label|0) == 164) {
            label = 0;
            $497 = (($pc$268) + 2|0);
            $498 = HEAP8[$497]|0;
            $499 = $498&255;
            $500 = $499 << 8;
            $501 = (($500) + ($data$39))|0;
            $data$41 = $501;$pc$22 = $497;
            label = 167;
           }
           else if ((label|0) == 166) {
            label = 0;
            $504 = $data$40 | $dp$060;
            $data$41 = $504;$pc$22 = $77;
            label = 167;
           }
           else if ((label|0) == 178) {
            label = 0;
            $538 = $data$45 | $dp$060;
            $data$46 = $538;$pc$25 = $77;
            label = 180;
           }
           else if ((label|0) == 182) {
            label = 0;
            $547 = $c$2 >>> 1;
            $548 = $547 & 128;
            $549 = $a$188 >> 1;
            $550 = $548 | $549;
            $551 = $a$188 << 8;
            $a$1$be = $550;$c$1$be = $551;$dp$0$be = $dp$060;$nz$1$be = $550;$pc$2$be = $77;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $y$169;
           }
           else if ((label|0) == 184) {
            label = 0;
            $552 = $c$3 >>> 8;
            $553 = $552 & 1;
            $554 = $a$188 << 1;
            $555 = $553 | $554;
            $556 = $555 & 255;
            $a$1$be = $556;$c$1$be = $554;$dp$0$be = $dp$060;$nz$1$be = $555;$pc$2$be = $77;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $y$169;
           }
           else if ((label|0) == 187) {
            label = 0;
            $558 = (($79) + ($x$175))|0;
            $559 = $558 & 255;
            $c$5 = $c$4;$data$47 = $559;
            label = 188;
           }
           else if ((label|0) == 190) {
            label = 0;
            $561 = (__Z8get_le16PKv($77)|0);
            $562 = (($pc$268) + 2|0);
            $c$7 = $c$6;$data$48 = $561;$pc$26 = $562;
            label = 191;
           }
           else if ((label|0) == 194) {
            label = 0;
            $570 = (($79) + ($x$175))|0;
            $571 = $570 & 255;
            $c$9 = $c$8;$data$49 = $571;
            label = 195;
           }
           else if ((label|0) == 197) {
            label = 0;
            $573 = (__Z8get_le16PKv($77)|0);
            $574 = (($pc$268) + 2|0);
            $c$11 = $c$10;$data$50 = $573;$pc$27 = $574;
            label = 198;
           }
           else if ((label|0) == 244) {
            label = 0;
            $777 = (($74) + -4)|0;
            $778 = $data$51 | $dp$060;
            $779 = (($778) + -253)|0;
            $780 = ($779>>>0)<(3);
            do {
             if ($780) {
              $781 = ((($this) + (($779*24)|0)|0) + 1868|0);
              $782 = ($781);
              $783 = HEAP32[$782>>2]|0;
              $784 = ($777|0)<($783|0);
              if ($784) {
               $t44$0 = $781;
              } else {
               $785 = (__ZN8Snes_Spc10run_timer_EPNS_5TimerEi(0,$781,$777)|0);
               $t44$0 = $785;
              }
              $786 = (($t44$0) + 20|0);
              $787 = HEAP32[$786>>2]|0;
              HEAP32[$786>>2] = 0;
              $temp40$0 = $787;
             } else {
              $788 = ((($this) + ($778)|0) + 2716|0);
              $789 = HEAP8[$788]|0;
              $790 = $789&255;
              $791 = (($778) + -240)|0;
              $792 = ($791>>>0)<(16);
              if (!($792)) {
               $temp40$0 = $790;
               break;
              }
              $793 = (__ZN8Snes_Spc16cpu_read_smp_regEii($this,$791,$777)|0);
              $temp40$0 = $793;
             }
            } while(0);
            $794 = (($pc$268) + 2|0);
            $795 = ($temp40$0|0)==($a$188|0);
            if (!($795)) {
             $pc$0 = $794;
             label = 5;
             break;
            }
            $796 = (($74) + -2)|0;
            $a$0 = $a$188;$c$0 = $c$163;$nz$0 = $nz$161;$pc$1 = $794;$psw$0 = $psw$165;$rel_time$0 = $796;$x$0 = $x$175;$y$0 = $y$169;
            label = 6;
           }
           else if ((label|0) == 257) {
            label = 0;
            $815 = (__Z8get_le16PKv($pc$28)|0);
            $816 = ((($this) + ($815)|0) + 2716|0);
            $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $nz$161;$pc$2$be = $816;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $y$169;
           }
           else if ((label|0) == 271) {
            label = 0;
            $906 = $temp53$0 << 8;
            $907 = $temp53$0 << 3;
            $908 = $907 & 256;
            $909 = $temp53$0 << 4;
            $910 = $909 & 2048;
            $911 = $temp53$0 & 2;
            $912 = $910 | $911;
            $913 = $912 ^ 2;
            $a$1$be = $a$188;$c$1$be = $906;$dp$0$be = $908;$nz$1$be = $913;$pc$2$be = $pc$29;$psw$1$be = $temp53$0;$rel_time$1$be = $74;$sp$0$be = $sp$2;$x$1$be = $x$175;$y$1$be = $y$169;
           }
          } while(0);
          if ((label|0) == 5) {
           label = 0;
           $63 = HEAP8[$pc$0]|0;
           $64 = $63 << 24 >> 24;
           $65 = (($pc$0) + ($64)|0);
           $a$0 = $a$188;$c$0 = $c$163;$nz$0 = $nz$161;$pc$1 = $65;$psw$0 = $psw$165;$rel_time$0 = $74;$x$0 = $x$175;$y$0 = $y$169;
           label = 6;
          }
          else if ((label|0) == 46) {
           label = 0;
           $204 = (__ZN8Snes_Spc8cpu_readEii($this,$data$2,$74)|0);
           $a$0 = $204;$c$0 = $c$163;$nz$0 = $204;$pc$1 = $pc$3;$psw$0 = $psw$165;$rel_time$0 = $74;$x$0 = $x$175;$y$0 = $y$169;
           label = 6;
          }
          else if ((label|0) == 78) {
           label = 0;
           __ZN8Snes_Spc9cpu_writeEiii($this,$a$188,$data$7,$74);
           $a$0 = $a$188;$c$0 = $c$163;$nz$0 = $nz$161;$pc$1 = $pc$5;$psw$0 = $psw$165;$rel_time$0 = $74;$x$0 = $x$175;$y$0 = $y$169;
           label = 6;
          }
          else if ((label|0) == 100) {
           label = 0;
           $322 = (__ZN8Snes_Spc8cpu_readEii($this,$data$12,$74)|0);
           $data$13 = $322;$pc$7 = $pc$6;
           label = 101;
          }
          else if ((label|0) == 105) {
           label = 0;
           $336 = (($74) + -1)|0;
           $337 = (__ZN8Snes_Spc8cpu_readEii($this,$addr28$0,$336)|0);
           $338 = $337 & $data$15;
           __ZN8Snes_Spc9cpu_writeEiii($this,$338,$addr28$0,$74);
           $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $338;$pc$2$be = $pc$8;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $y$169;
          }
          else if ((label|0) == 114) {
           label = 0;
           $359 = (__ZN8Snes_Spc8cpu_readEii($this,$data$18,$74)|0);
           $data$19 = $359;$pc$10 = $pc$9;
           label = 115;
          }
          else if ((label|0) == 119) {
           label = 0;
           $373 = (($74) + -1)|0;
           $374 = (__ZN8Snes_Spc8cpu_readEii($this,$addr29$0,$373)|0);
           $375 = $374 | $data$21;
           __ZN8Snes_Spc9cpu_writeEiii($this,$375,$addr29$0,$74);
           $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $375;$pc$2$be = $pc$11;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $y$169;
          }
          else if ((label|0) == 128) {
           label = 0;
           $396 = (__ZN8Snes_Spc8cpu_readEii($this,$data$24,$74)|0);
           $data$25 = $396;$pc$13 = $pc$12;
           label = 129;
          }
          else if ((label|0) == 133) {
           label = 0;
           $410 = (($74) + -1)|0;
           $411 = (__ZN8Snes_Spc8cpu_readEii($this,$addr31$0,$410)|0);
           $412 = $411 ^ $data$27;
           __ZN8Snes_Spc9cpu_writeEiii($this,$412,$addr31$0,$74);
           $a$1$be = $a$188;$c$1$be = $c$163;$dp$0$be = $dp$060;$nz$1$be = $412;$pc$2$be = $pc$14;$psw$1$be = $psw$165;$rel_time$1$be = $74;$sp$0$be = $sp$067;$x$1$be = $x$175;$y$1$be = $y$169;
          }
          else if ((label|0) == 142) {
           label = 0;
           $433 = (__ZN8Snes_Spc8cpu_readEii($this,$data$30,$74)|0);
           $data$31 = $433;$pc$16 = $pc$15;
           label = 143;
          }
          else if ((label|0) == 150) {
           label = 0;
           $462 = (($x$175) - ($data$34))|0;
           $463 = $462 ^ -1;
           $464 = $462 & 255;
           $a$0 = $a$188;$c$0 = $463;$nz$0 = $464;$pc$1 = $pc$18;$psw$0 = $psw$165;$rel_time$0 = $74;$x$0 = $x$175;$y$0 = $y$169;
           label = 6;
          }
          else if ((label|0) == 154) {
           label = 0;
           $469 = (($y$169) - ($data$36))|0;
           $470 = $469 ^ -1;
           $471 = $469 & 255;
           $a$0 = $a$188;$c$0 = $470;$nz$0 = $471;$pc$1 = $pc$20;$psw$0 = $psw$165;$rel_time$0 = $74;$x$0 = $x$175;$y$0 = $y$169;
           label = 6;
          }
          else if ((label|0) == 158) {
           label = 0;
           $483 = (($74) + -1)|0;
           $484 = (__ZN8Snes_Spc8cpu_readEii($this,$addr33$0,$483)|0);
           $addr33$1 = $addr33$0;$data$43 = $data$38;$nz$2 = $484;$pc$24 = $pc$21;
           label = 168;
          }
          else if ((label|0) == 167) {
           label = 0;
           $505 = (__ZN8Snes_Spc8cpu_readEii($this,$data$41,$74)|0);
           $addr33$1 = -1;$data$43 = $505;$nz$2 = $a$188;$pc$24 = $pc$22;
           label = 168;
          }
          else if ((label|0) == 180) {
           label = 0;
           $541 = $75 >>> 4;
           $542 = $541 & 2;
           $543 = (($542) + -1)|0;
           $544 = (($74) + -1)|0;
           $545 = (__ZN8Snes_Spc8cpu_readEii($this,$data$46,$544)|0);
           $546 = (($543) + ($545))|0;
           __ZN8Snes_Spc9cpu_writeEiii($this,$546,$data$46,$74);
           $a$0 = $a$188;$c$0 = $c$163;$nz$0 = $546;$pc$1 = $pc$25;$psw$0 = $psw$165;$rel_time$0 = $74;$x$0 = $x$175;$y$0 = $y$169;
           label = 6;
          }
          else if ((label|0) == 188) {
           label = 0;
           $560 = $data$47 | $dp$060;
           $c$7 = $c$5;$data$48 = $560;$pc$26 = $77;
           label = 191;
          }
          else if ((label|0) == 195) {
           label = 0;
           $572 = $data$49 | $dp$060;
           $c$11 = $c$9;$data$50 = $572;$pc$27 = $77;
           label = 198;
          }
          do {
           if ((label|0) == 101) {
            label = 0;
            $323 = $data$13 & $a$188;
            $a$0 = $323;$c$0 = $c$163;$nz$0 = $323;$pc$1 = $pc$7;$psw$0 = $psw$165;$rel_time$0 = $74;$x$0 = $x$175;$y$0 = $y$169;
            label = 6;
           }
           else if ((label|0) == 115) {
            label = 0;
            $360 = $data$19 | $a$188;
            $a$0 = $360;$c$0 = $c$163;$nz$0 = $360;$pc$1 = $pc$10;$psw$0 = $psw$165;$rel_time$0 = $74;$x$0 = $x$175;$y$0 = $y$169;
            label = 6;
           }
           else if ((label|0) == 129) {
            label = 0;
            $397 = $data$25 ^ $a$188;
            $a$0 = $397;$c$0 = $c$163;$nz$0 = $397;$pc$1 = $pc$13;$psw$0 = $psw$165;$rel_time$0 = $74;$x$0 = $x$175;$y$0 = $y$169;
            label = 6;
           }
           else if ((label|0) == 143) {
            label = 0;
            $434 = (($a$188) - ($data$31))|0;
            $435 = $434 ^ -1;
            $436 = $434 & 255;
            $a$0 = $a$188;$c$0 = $435;$nz$0 = $436;$pc$1 = $pc$16;$psw$0 = $psw$165;$rel_time$0 = $74;$x$0 = $x$175;$y$0 = $y$169;
            label = 6;
           }
           else if ((label|0) == 168) {
            label = 0;
            $506 = ($76&255)>(159);
            $507 = $data$43 ^ 255;
            $$data$43 = $506 ? $507 : $data$43;
            $508 = $$data$43 ^ $nz$2;
            $509 = $c$163 >>> 8;
            $510 = $509 & 1;
            $511 = (($nz$2) + ($510))|0;
            $512 = (($511) + ($$data$43))|0;
            $513 = $508 ^ $512;
            $514 = $psw$165 & -73;
            $515 = $513 >>> 1;
            $516 = $515 & 8;
            $517 = $516 | $514;
            $518 = (($513) + 128)|0;
            $519 = $518 >>> 2;
            $520 = $519 & 64;
            $521 = $517 | $520;
            $522 = ($addr33$1|0)<(0);
            if ($522) {
             $523 = $512 & 255;
             $a$0 = $523;$c$0 = $512;$nz$0 = $512;$pc$1 = $pc$24;$psw$0 = $521;$rel_time$0 = $74;$x$0 = $x$175;$y$0 = $y$169;
             label = 6;
             break;
            } else {
             __ZN8Snes_Spc9cpu_writeEiii($this,$512,$addr33$1,$74);
             $a$0 = $a$188;$c$0 = $512;$nz$0 = $512;$pc$1 = $pc$24;$psw$0 = $521;$rel_time$0 = $74;$x$0 = $x$175;$y$0 = $y$169;
             label = 6;
             break;
            }
           }
           else if ((label|0) == 191) {
            label = 0;
            $563 = $c$7 >>> 8;
            $564 = $563 & 1;
            $565 = (($74) + -1)|0;
            $566 = (__ZN8Snes_Spc8cpu_readEii($this,$data$48,$565)|0);
            $567 = $566 << 1;
            $568 = $567 | $564;
            __ZN8Snes_Spc9cpu_writeEiii($this,$568,$data$48,$74);
            $a$0 = $a$188;$c$0 = $567;$nz$0 = $568;$pc$1 = $pc$26;$psw$0 = $psw$165;$rel_time$0 = $74;$x$0 = $x$175;$y$0 = $y$169;
            label = 6;
           }
           else if ((label|0) == 198) {
            label = 0;
            $575 = (($74) + -1)|0;
            $576 = (__ZN8Snes_Spc8cpu_readEii($this,$data$50,$575)|0);
            $577 = $c$11 >>> 1;
            $578 = $577 & 128;
            $579 = $576 >> 1;
            $580 = $579 | $578;
            $581 = $576 << 8;
            __ZN8Snes_Spc9cpu_writeEiii($this,$580,$data$50,$74);
            $a$0 = $a$188;$c$0 = $581;$nz$0 = $580;$pc$1 = $pc$27;$psw$0 = $psw$165;$rel_time$0 = $74;$x$0 = $x$175;$y$0 = $y$169;
            label = 6;
           }
          } while(0);
          if ((label|0) == 6) {
           label = 0;
           $66 = (($pc$1) + 1|0);
           $a$1$be = $a$0;$c$1$be = $c$0;$dp$0$be = $dp$060;$nz$1$be = $nz$0;$pc$2$be = $66;$psw$1$be = $psw$0;$rel_time$1$be = $rel_time$0;$sp$0$be = $sp$067;$x$1$be = $x$0;$y$1$be = $y$0;
          }
          $67 = HEAP8[$pc$2$be]|0;
          $68 = $67&255;
          $69 = ((($this) + ($68)|0) + 2204|0);
          $70 = HEAP8[$69]|0;
          $71 = $70&255;
          $72 = (($71) + ($rel_time$1$be))|0;
          $73 = ($72|0)>(0);
          if ($73) {
           $a$157 = $a$1$be;$c$139 = $c$1$be;$dp$033 = $dp$0$be;$nz$136 = $nz$1$be;$pc$248 = $pc$2$be;$psw$142 = $psw$1$be;$rel_time$2 = $rel_time$1$be;$sp$045 = $sp$0$be;$x$154 = $x$1$be;$y$151 = $y$1$be;
           break L4;
          } else {
           $74 = $72;$75 = $68;$76 = $67;$a$188 = $a$1$be;$c$163 = $c$1$be;$dp$060 = $dp$0$be;$nz$161 = $nz$1$be;$pc$268 = $pc$2$be;$psw$165 = $psw$1$be;$sp$067 = $sp$0$be;$x$175 = $x$1$be;$y$169 = $y$1$be;
          }
         }
         if ((label|0) == 302) {
          $1055 = (($this) + 2020|0);
          HEAP32[$1055>>2] = (50568);
          $a$157 = $a$188;$c$139 = $c$163;$dp$033 = $dp$060;$nz$136 = $nz$161;$pc$248 = $pc$268;$psw$142 = $psw$165;$rel_time$2 = 0;$sp$045 = $sp$067;$x$154 = $x$175;$y$151 = $y$169;
          break;
         }
         else if ((label|0) == 303) {
          ___assert_fail(((50592)|0),((50512)|0),1200,((50552)|0));
          // unreachable;
         }
        }
       } while(0);
       $1056 = $pc$248;
       $1057 = $17;
       $1058 = (($1056) - ($1057))|0;
       $1059 = $1058 & 65535;
       HEAP32[$24>>2] = $1059;
       $1060 = (($sp$045) + -257|0);
       $1061 = $1060;
       $1062 = (($1061) - ($1057))|0;
       $1063 = $1062 & 255;
       HEAP32[$27>>2] = $1063;
       $1064 = $a$157 & 255;
       HEAP32[$18>>2] = $1064;
       $1065 = $x$154 & 255;
       HEAP32[$20>>2] = $1065;
       $1066 = $y$151 & 255;
       HEAP32[$22>>2] = $1066;
       $1067 = $psw$142 & -164;
       $1068 = $c$139 >>> 8;
       $1069 = $1068 & 1;
       $1070 = $dp$033 >>> 3;
       $1071 = $nz$136 >>> 4;
       $1072 = $1071 | $nz$136;
       $1073 = $1072 & 128;
       $1074 = $1069 | $1070;
       $1075 = $1074 | $1067;
       $1076 = $1075 | $1073;
       $1077 = $nz$136&255;
       $1078 = ($1077<<24>>24)==(0);
       $1079 = $1076 | 2;
       $$28 = $1078 ? $1079 : $1076;
       $1080 = $$28 & 255;
       HEAP32[$30>>2] = $1080;
       $1081 = HEAP32[$1>>2]|0;
       $1082 = (($1081) + ($rel_time$2))|0;
       HEAP32[$1>>2] = $1082;
       $1083 = HEAP32[$5>>2]|0;
       $1084 = (($1083) - ($rel_time$2))|0;
       HEAP32[$5>>2] = $1084;
       $1085 = HEAP32[$8>>2]|0;
       $1086 = (($1085) - ($rel_time$2))|0;
       HEAP32[$8>>2] = $1086;
       $1087 = HEAP32[$11>>2]|0;
       $1088 = (($1087) - ($rel_time$2))|0;
       HEAP32[$11>>2] = $1088;
       $1089 = HEAP32[$14>>2]|0;
       $1090 = (($1089) - ($rel_time$2))|0;
       HEAP32[$14>>2] = $1090;
       $1091 = HEAP32[$1>>2]|0;
       $1092 = ($1091|0)>($end_time|0);
       if ($1092) {
        ___assert_fail(((50600)|0),((50512)|0),1220,((50552)|0));
        // unreachable;
       } else {
        $1093 = (($this) + 1944|0);
        STACKTOP = sp;return ($1093|0);
       }
       return 0|0;
      }
      function __ZN8Snes_Spc11CPU_mem_bitEPKhi($this,$pc,$rel_time) {
       $this = $this|0;
       $pc = $pc|0;
       $rel_time = $rel_time|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (__Z8get_le16PKv($pc)|0);
       $2 = $1 & 8191;
       $3 = (__ZN8Snes_Spc8cpu_readEii($this,$2,$rel_time)|0);
       $4 = $1 >>> 13;
       $5 = $3 >>> $4;
       $6 = $5 << 8;
       $7 = $6 & 256;
       STACKTOP = sp;return ($7|0);
      }
      function __ZN7Spc_Dsp10set_outputEPsi($this,$out,$size) {
       $this = $this|0;
       $out = $out|0;
       $size = $size|0;
       var $$out = 0, $$size = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $size & 1;
       $2 = ($1|0)==(0);
       if ($2) {
        $3 = ($out|0)==(0|0);
        $4 = (($this) + 1580|0);
        $$out = $3 ? $4 : $out;
        $$size = $3 ? 16 : $size;
        $5 = (($this) + 1576|0);
        HEAP32[$5>>2] = $$out;
        $6 = (($this) + 1568|0);
        HEAP32[$6>>2] = $$out;
        $7 = (($$out) + ($$size<<1)|0);
        $8 = (($this) + 1572|0);
        HEAP32[$8>>2] = $7;
        STACKTOP = sp;return;
       } else {
        ___assert_fail(((50624)|0),((50640)|0),78,((50680)|0));
        // unreachable;
       }
      }
      function __ZN7Spc_Dsp3runEi($this,$clock_count) {
       $this = $this|0;
       $clock_count = $clock_count|0;
       var $$ = 0, $$1 = 0, $$30 = 0, $$31 = 0, $$32 = 0, $$sum = 0, $$sum10 = 0, $$sum11 = 0, $$sum1213 = 0, $$sum14 = 0, $$sum1516 = 0, $$sum17 = 0, $$sum18 = 0, $$sum2021 = 0, $$sum22 = 0, $$sum2324 = 0, $$sum25 = 0, $$sum27 = 0, $$sum29 = 0, $1 = 0;
       var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
       var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
       var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
       var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
       var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
       var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
       var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
       var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
       var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
       var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
       var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
       var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
       var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
       var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
       var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
       var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
       var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
       var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
       var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0;
       var $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
       var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
       var $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0;
       var $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0;
       var $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0;
       var $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0;
       var $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0;
       var $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0;
       var $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
       var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
       var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brr_addr$0 = 0, $brr_header$0 = 0, $brr_header$1 = 0, $brr_offset$0 = 0, $count$0 = 0, $echo_out_l$0 = 0, $echo_out_l$1 = 0, $echo_out_r$0 = 0, $echo_out_r$1 = 0, $env$0 = 0, $env$1 = 0;
       var $env$2 = 0, $env_data$0 = 0, $l1$0 = 0, $l3$0 = 0, $main_out_l$0 = 0, $main_out_l$1 = 0, $main_out_r$0 = 0, $main_out_r$1 = 0, $nybbles$033 = 0, $out$0 = 0, $output$0 = 0, $output$1 = 0, $output$2 = 0, $output$3 = 0, $pitch$0 = 0, $pitch$1 = 0, $pmon_input$0 = 0, $pos$0$ = 0, $pos$034 = 0, $r2$0 = 0;
       var $r4$0 = 0, $rate$0 = 0, $s$0 = 0, $s$1 = 0, $sext = 0, $sext2 = 0, $sext26 = 0, $sext28 = 0, $sext3 = 0, $sext4 = 0, $sext5 = 0, $sext6 = 0, $sext7 = 0, $sext8 = 0, $v$0 = 0, $v_regs$0 = 0, $vbit$0 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 280|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = (($2) + ($clock_count))|0;
       $4 = $3 >> 5;
       $5 = $3 & 31;
       HEAP32[$1>>2] = $5;
       $6 = ($4|0)==(0);
       if ($6) {
        STACKTOP = sp;return;
       }
       $7 = (($this) + 1556|0);
       $8 = HEAP32[$7>>2]|0;
       $9 = (($this) + 93|0);
       $10 = HEAP8[$9]|0;
       $11 = $10&255;
       $12 = $11 << 8;
       $13 = (($this) + 45|0);
       $14 = HEAP8[$13]|0;
       $15 = $14&255;
       $16 = $15 >>> 1;
       $17 = (($this) + 61|0);
       $18 = HEAP8[$17]|0;
       $19 = $18&255;
       $20 = $16 | $19;
       $21 = (($this) + 108|0);
       $22 = HEAP8[$21]|0;
       $23 = $22&255;
       $24 = $23 & 31;
       $25 = (($this) + 12|0);
       $26 = HEAP8[$25]|0;
       $27 = $26 << 24 >> 24;
       $28 = (($this) + 28|0);
       $29 = HEAP8[$28]|0;
       $30 = $29 << 24 >> 24;
       $31 = Math_imul($30, $27)|0;
       $32 = (($this) + 1564|0);
       $33 = HEAP32[$32>>2]|0;
       $34 = ($31|0)<($33|0);
       $35 = (0 - ($27))|0;
       $$30 = $34 ? $35 : $27;
       $36 = (($this) + 260|0);
       $37 = ((($this) + ($24<<2)|0) + 1428|0);
       $38 = ((50696) + ($24<<2)|0);
       $39 = HEAP32[$38>>2]|0;
       $40 = (($this) + 268|0);
       $41 = (($this) + 308|0);
       $42 = ($this);
       $43 = (($this) + 124|0);
       $44 = (($this) + 304|0);
       $45 = (($this) + 264|0);
       $46 = (($this) + 124|0);
       $47 = (($this) + 77|0);
       $48 = (($this) + 268|0);
       $49 = (($this) + 272|0);
       $50 = (($this) + 109|0);
       $51 = (($this) + 125|0);
       $52 = (($this) + 276|0);
       $53 = (($this) + 276|0);
       $54 = (($this) + 256|0);
       $55 = (($this) + 192|0);
       $56 = (($this) + 128|0);
       $57 = (($this) + 127|0);
       $58 = (($this) + 15|0);
       $59 = (($this) + 31|0);
       $60 = (($this) + 47|0);
       $61 = (($this) + 63|0);
       $62 = (($this) + 79|0);
       $63 = (($this) + 95|0);
       $64 = (($this) + 111|0);
       $65 = (($this) + 13|0);
       $66 = (($this) + 44|0);
       $67 = (($this) + 60|0);
       $68 = (($this) + 1568|0);
       $69 = (($this) + 1572|0);
       $70 = (($this) + 1580|0);
       $71 = (($this) + 1612|0);
       $72 = (($this) + 264|0);
       $73 = (($this) + 300|0);
       $74 = (($this) + 92|0);
       $75 = (($this) + 304|0);
       $count$0 = $4;
       L4: while(1) {
        $76 = HEAP32[$36>>2]|0;
        $77 = $76 ^ 1;
        HEAP32[$36>>2] = $77;
        $78 = ($76|0)==(1);
        if (!($78)) {
         $79 = HEAP32[$72>>2]|0;
         $80 = $79 ^ -1;
         $81 = HEAP32[$73>>2]|0;
         $82 = $81 & $80;
         HEAP32[$73>>2] = $82;
         HEAP32[$72>>2] = $82;
         $83 = HEAP8[$74]|0;
         $84 = $83&255;
         HEAP32[$75>>2] = $84;
        }
        __ZN7Spc_Dsp11run_counterEi($this,1);
        __ZN7Spc_Dsp11run_counterEi($this,2);
        __ZN7Spc_Dsp11run_counterEi($this,3);
        $85 = HEAP32[$37>>2]|0;
        $86 = HEAP32[$85>>2]|0;
        $87 = $39 & $86;
        $88 = ($87|0)==(0);
        if ($88) {
         $89 = HEAP32[$40>>2]|0;
         $90 = $89 << 13;
         $91 = $89 << 14;
         $92 = $90 ^ $91;
         $93 = $92 & 16384;
         $94 = $89 >> 1;
         $95 = $93 ^ $94;
         HEAP32[$40>>2] = $95;
         $echo_out_l$0 = 0;$echo_out_r$0 = 0;$main_out_l$0 = 0;$main_out_r$0 = 0;$pmon_input$0 = 0;$v$0 = $41;$v_regs$0 = $42;$vbit$0 = 1;
        } else {
         $echo_out_l$0 = 0;$echo_out_r$0 = 0;$main_out_l$0 = 0;$main_out_r$0 = 0;$pmon_input$0 = 0;$v$0 = $41;$v_regs$0 = $42;$vbit$0 = 1;
        }
        while(1) {
         $96 = (($v$0) + 104|0);
         $97 = HEAP32[$96>>2]|0;
         $98 = (($8) + ($97)|0);
         $99 = HEAP8[$98]|0;
         $100 = $99&255;
         $101 = (($v$0) + 112|0);
         $102 = HEAP32[$101>>2]|0;
         $103 = (($v_regs$0) + 2|0);
         $104 = (__Z8get_le16PKv($103)|0);
         $105 = $104 & 16383;
         $106 = HEAP8[$13]|0;
         $107 = $106&255;
         $108 = $107 & $vbit$0;
         $109 = ($108|0)==(0);
         if ($109) {
          $pitch$0 = $105;
         } else {
          $110 = $pmon_input$0 >> 5;
          $111 = Math_imul($105, $110)|0;
          $112 = $111 >> 10;
          $113 = (($112) + ($105))|0;
          $pitch$0 = $113;
         }
         $114 = (($102) + -1)|0;
         $115 = ($102|0)>(0);
         if ($115) {
          HEAP32[$101>>2] = $114;
          $116 = ($114|0)==(4);
          if ($116) {
           $117 = (($v_regs$0) + 4|0);
           $118 = HEAP8[$117]|0;
           $119 = $118&255;
           $120 = $119 << 2;
           $$sum29 = (($120) + ($12))|0;
           $121 = (($8) + ($$sum29)|0);
           $122 = (__Z8get_le16PKv($121)|0);
           HEAP32[$96>>2] = $122;
           $123 = (($v$0) + 108|0);
           HEAP32[$123>>2] = 1;
           $124 = ($v$0);
           $125 = (($v$0) + 96|0);
           HEAP32[$125>>2] = $124;
           $brr_header$0 = 0;
          } else {
           $brr_header$0 = $100;
          }
          $126 = (($v$0) + 120|0);
          HEAP32[$126>>2] = 0;
          $127 = (($v$0) + 124|0);
          HEAP32[$127>>2] = 0;
          $128 = $114 & 3;
          $129 = ($128|0)!=(0);
          $130 = $129 ? 16384 : 0;
          $131 = (($v$0) + 100|0);
          HEAP32[$131>>2] = $130;
          $brr_header$1 = $brr_header$0;$pitch$1 = 0;
         } else {
          $brr_header$1 = $100;$pitch$1 = $pitch$0;
         }
         $132 = (($v$0) + 120|0);
         $133 = HEAP32[$132>>2]|0;
         $134 = $133 >>> 4;
         $135 = $134&255;
         $136 = (($v_regs$0) + 8|0);
         HEAP8[$136] = $135;
         $137 = ($133|0)==(0);
         do {
          if ($137) {
           $echo_out_l$1 = $echo_out_l$0;$echo_out_r$1 = $echo_out_r$0;$main_out_l$1 = $main_out_l$0;$main_out_r$1 = $main_out_r$0;$output$3 = 0;
          } else {
           $138 = (($v$0) + 100|0);
           $139 = HEAP32[$138>>2]|0;
           $140 = $139 >>> 3;
           $141 = $140 & 510;
           $142 = ((50824) + ($141<<1)|0);
           $$sum11 = (510 - ($141))|0;
           $143 = ((50824) + ($$sum11<<1)|0);
           $144 = $139 >>> 12;
           $145 = (($v$0) + 96|0);
           $146 = HEAP32[$145>>2]|0;
           $147 = (($146) + ($144<<2)|0);
           $148 = $vbit$0 & $20;
           $149 = ($148|0)==(0);
           if ($149) {
            $150 = HEAP16[$142>>1]|0;
            $151 = $150 << 16 >> 16;
            $152 = HEAP32[$147>>2]|0;
            $153 = Math_imul($151, $152)|0;
            $$sum1213 = $141 | 1;
            $154 = ((50824) + ($$sum1213<<1)|0);
            $155 = HEAP16[$154>>1]|0;
            $156 = $155 << 16 >> 16;
            $$sum14 = (($144) + 1)|0;
            $157 = (($146) + ($$sum14<<2)|0);
            $158 = HEAP32[$157>>2]|0;
            $159 = Math_imul($156, $158)|0;
            $160 = (($159) + ($153))|0;
            $$sum1516 = $$sum11 | 1;
            $161 = ((50824) + ($$sum1516<<1)|0);
            $162 = HEAP16[$161>>1]|0;
            $163 = $162 << 16 >> 16;
            $$sum17 = (($144) + 2)|0;
            $164 = (($146) + ($$sum17<<2)|0);
            $165 = HEAP32[$164>>2]|0;
            $166 = Math_imul($163, $165)|0;
            $167 = (($160) + ($166))|0;
            $168 = HEAP16[$143>>1]|0;
            $169 = $168 << 16 >> 16;
            $$sum18 = (($144) + 3)|0;
            $170 = (($146) + ($$sum18<<2)|0);
            $171 = HEAP32[$170>>2]|0;
            $172 = Math_imul($169, $171)|0;
            $173 = (($167) + ($172))|0;
            $174 = $173 >> 11;
            $175 = Math_imul($174, $133)|0;
            $176 = $175 >> 11;
            $output$2 = $176;
           } else {
            $177 = HEAP32[$48>>2]|0;
            $178 = $177 << 17;
            $179 = $178 >> 16;
            $180 = HEAP8[$17]|0;
            $181 = $180&255;
            $182 = $181 & $vbit$0;
            $183 = ($182|0)==(0);
            if ($183) {
             $184 = HEAP16[$142>>1]|0;
             $185 = $184 << 16 >> 16;
             $186 = HEAP32[$147>>2]|0;
             $187 = Math_imul($185, $186)|0;
             $188 = $187 >>> 11;
             $$sum2021 = $141 | 1;
             $189 = ((50824) + ($$sum2021<<1)|0);
             $190 = HEAP16[$189>>1]|0;
             $191 = $190 << 16 >> 16;
             $$sum22 = (($144) + 1)|0;
             $192 = (($146) + ($$sum22<<2)|0);
             $193 = HEAP32[$192>>2]|0;
             $194 = Math_imul($191, $193)|0;
             $195 = $194 >>> 11;
             $196 = (($195) + ($188))|0;
             $$sum2324 = $$sum11 | 1;
             $197 = ((50824) + ($$sum2324<<1)|0);
             $198 = HEAP16[$197>>1]|0;
             $199 = $198 << 16 >> 16;
             $$sum25 = (($144) + 2)|0;
             $200 = (($146) + ($$sum25<<2)|0);
             $201 = HEAP32[$200>>2]|0;
             $202 = Math_imul($199, $201)|0;
             $203 = $202 >>> 11;
             $204 = (($196) + ($203))|0;
             $sext26 = $204 << 16;
             $205 = $sext26 >> 16;
             $206 = HEAP16[$143>>1]|0;
             $207 = $206 << 16 >> 16;
             $$sum27 = (($144) + 3)|0;
             $208 = (($146) + ($$sum27<<2)|0);
             $209 = HEAP32[$208>>2]|0;
             $210 = Math_imul($207, $209)|0;
             $211 = $210 >> 11;
             $212 = (($205) + ($211))|0;
             $sext28 = $212 << 16;
             $213 = $sext28 >> 16;
             $214 = ($213|0)==($212|0);
             if ($214) {
              $output$0 = $212;
             } else {
              $215 = $212 >> 31;
              $216 = $215 ^ 32767;
              $output$0 = $216;
             }
             $217 = $output$0 & -2;
             $output$1 = $217;
            } else {
             $output$1 = $179;
            }
            $218 = Math_imul($output$1, $133)|0;
            $219 = $218 >> 11;
            $220 = $219 & -2;
            $output$2 = $220;
           }
           $221 = (($v$0) + 128|0);
           $222 = HEAP32[$221>>2]|0;
           $223 = Math_imul($222, $output$2)|0;
           $224 = (($v$0) + 132|0);
           $225 = HEAP32[$224>>2]|0;
           $226 = Math_imul($225, $output$2)|0;
           $227 = (($223) + ($main_out_l$0))|0;
           $228 = (($226) + ($main_out_r$0))|0;
           $229 = HEAP8[$47]|0;
           $230 = $229&255;
           $231 = $230 & $vbit$0;
           $232 = ($231|0)==(0);
           if ($232) {
            $echo_out_l$1 = $echo_out_l$0;$echo_out_r$1 = $echo_out_r$0;$main_out_l$1 = $227;$main_out_r$1 = $228;$output$3 = $output$2;
            break;
           }
           $233 = (($223) + ($echo_out_l$0))|0;
           $234 = (($226) + ($echo_out_r$0))|0;
           $echo_out_l$1 = $233;$echo_out_r$1 = $234;$main_out_l$1 = $227;$main_out_r$1 = $228;$output$3 = $output$2;
          }
         } while(0);
         $235 = $output$3 >>> 8;
         $236 = $235&255;
         $237 = (($v_regs$0) + 9|0);
         HEAP8[$237] = $236;
         $238 = HEAP8[$21]|0;
         $239 = ($238<<24>>24)<(0);
         if ($239) {
          label = 25;
         } else {
          $240 = $brr_header$1 & 3;
          $241 = ($240|0)==(1);
          if ($241) {
           label = 25;
          } else {
           $env$0 = $133;
          }
         }
         if ((label|0) == 25) {
          label = 0;
          $242 = (($v$0) + 116|0);
          HEAP32[$242>>2] = 0;
          $env$0 = 0;
         }
         $243 = HEAP32[$36>>2]|0;
         $244 = ($243|0)==(0);
         do {
          if (!($244)) {
           $245 = HEAP32[$44>>2]|0;
           $246 = $245 & $vbit$0;
           $247 = ($246|0)==(0);
           if (!($247)) {
            $248 = (($v$0) + 116|0);
            HEAP32[$248>>2] = 0;
           }
           $249 = HEAP32[$45>>2]|0;
           $250 = $249 & $vbit$0;
           $251 = ($250|0)==(0);
           if ($251) {
            break;
           }
           HEAP32[$101>>2] = 5;
           $252 = (($v$0) + 116|0);
           HEAP32[$252>>2] = 1;
           $253 = $vbit$0 ^ 255;
           $254 = HEAP8[$46]|0;
           $255 = $254&255;
           $256 = $255 & $253;
           $257 = $256&255;
           HEAP8[$46] = $257;
          }
         } while(0);
         $258 = HEAP32[$101>>2]|0;
         $259 = ($258|0)==(0);
         L48: do {
          if ($259) {
           $260 = (($v$0) + 116|0);
           $261 = HEAP32[$260>>2]|0;
           $262 = ($261|0)==(0);
           if ($262) {
            $263 = (($env$0) + -8)|0;
            HEAP32[$132>>2] = $263;
            $264 = ($263|0)<(1);
            if (!($264)) {
             label = 58;
             break;
            }
            HEAP32[$132>>2] = 0;
            break;
           }
           $265 = (($v_regs$0) + 5|0);
           $266 = HEAP8[$265]|0;
           $267 = $266&255;
           $268 = (($v_regs$0) + 6|0);
           $269 = HEAP8[$268]|0;
           $270 = $269&255;
           $271 = ($266<<24>>24)<(0);
           do {
            if ($271) {
             $272 = ($261|0)>(2);
             if ($272) {
              $273 = (($env$0) + -1)|0;
              $274 = $273 >> 8;
              $275 = (($273) - ($274))|0;
              $276 = $270 & 31;
              $277 = (($v$0) + 124|0);
              HEAP32[$277>>2] = $275;
              $278 = ((($this) + ($276<<2)|0) + 1428|0);
              $279 = HEAP32[$278>>2]|0;
              $280 = HEAP32[$279>>2]|0;
              $281 = ((50696) + ($276<<2)|0);
              $282 = HEAP32[$281>>2]|0;
              $283 = $282 & $280;
              $284 = ($283|0)==(0);
              if (!($284)) {
               label = 58;
               break L48;
              }
              HEAP32[$132>>2] = $275;
              label = 58;
              break L48;
             }
             $285 = ($261|0)==(2);
             if ($285) {
              $286 = (($env$0) + -1)|0;
              $287 = $286 >> 8;
              $288 = (($286) - ($287))|0;
              $289 = $267 >>> 3;
              $290 = $289 & 14;
              $291 = $290 | 16;
              $env$1 = $288;$env_data$0 = $270;$rate$0 = $291;
              break;
             } else {
              $292 = $267 << 1;
              $293 = $292 & 30;
              $294 = $293 | 1;
              $295 = ($294|0)!=(31);
              $296 = $295 ? 32 : 1024;
              $297 = (($296) + ($env$0))|0;
              $env$1 = $297;$env_data$0 = $270;$rate$0 = $294;
              break;
             }
            } else {
             $298 = (($v_regs$0) + 7|0);
             $299 = HEAP8[$298]|0;
             $300 = $299&255;
             $301 = $300 >>> 5;
             $302 = ($299<<24>>24)>(-1);
             if ($302) {
              $303 = $300 << 4;
              $env$1 = $303;$env_data$0 = $300;$rate$0 = 31;
              break;
             }
             $304 = $300 & 31;
             $305 = ($301|0)==(4);
             if ($305) {
              $306 = (($env$0) + -32)|0;
              $env$1 = $306;$env_data$0 = $300;$rate$0 = $304;
              break;
             }
             $307 = ($299&255)<(192);
             if ($307) {
              $308 = (($env$0) + -1)|0;
              $309 = $308 >> 8;
              $310 = (($308) - ($309))|0;
              $env$1 = $310;$env_data$0 = $300;$rate$0 = $304;
              break;
             }
             $311 = (($env$0) + 32)|0;
             $312 = ($301|0)==(7);
             if (!($312)) {
              $env$1 = $311;$env_data$0 = $300;$rate$0 = $304;
              break;
             }
             $313 = (($v$0) + 124|0);
             $314 = HEAP32[$313>>2]|0;
             $315 = ($314>>>0)>(1535);
             $316 = (($env$0) + 8)|0;
             $$31 = $315 ? $316 : $311;
             $env$1 = $$31;$env_data$0 = $300;$rate$0 = $304;
            }
           } while(0);
           $317 = $env$1 >> 8;
           $318 = $env_data$0 >>> 5;
           $319 = ($317|0)==($318|0);
           do {
            if ($319) {
             $320 = HEAP32[$260>>2]|0;
             $321 = ($320|0)==(2);
             if (!($321)) {
              break;
             }
             HEAP32[$260>>2] = 3;
            }
           } while(0);
           $322 = (($v$0) + 124|0);
           HEAP32[$322>>2] = $env$1;
           $323 = ($env$1>>>0)>(2047);
           do {
            if ($323) {
             $324 = $env$1 >> 31;
             $325 = $324 & -2047;
             $326 = (($325) + 2047)|0;
             $327 = HEAP32[$260>>2]|0;
             $328 = ($327|0)==(1);
             if (!($328)) {
              $env$2 = $326;
              break;
             }
             HEAP32[$260>>2] = 2;
             $env$2 = $326;
            } else {
             $env$2 = $env$1;
            }
           } while(0);
           $329 = ((($this) + ($rate$0<<2)|0) + 1428|0);
           $330 = HEAP32[$329>>2]|0;
           $331 = HEAP32[$330>>2]|0;
           $332 = ((50696) + ($rate$0<<2)|0);
           $333 = HEAP32[$332>>2]|0;
           $334 = $333 & $331;
           $335 = ($334|0)==(0);
           if (!($335)) {
            label = 58;
            break;
           }
           HEAP32[$132>>2] = $env$2;
           label = 58;
          } else {
           label = 58;
          }
         } while(0);
         do {
          if ((label|0) == 58) {
           label = 0;
           $336 = (($v$0) + 100|0);
           $337 = HEAP32[$336>>2]|0;
           $338 = $337 & 16383;
           $339 = (($338) + ($pitch$1))|0;
           $340 = ($339|0)>(32767);
           $$ = $340 ? 32767 : $339;
           HEAP32[$336>>2] = $$;
           $341 = ($337|0)>(16383);
           if (!($341)) {
            break;
           }
           $342 = HEAP32[$96>>2]|0;
           $343 = (($v$0) + 108|0);
           $344 = HEAP32[$343>>2]|0;
           $345 = (($344) + ($342))|0;
           $346 = $345 & 65535;
           $347 = (($8) + ($346)|0);
           $348 = HEAP8[$347]|0;
           $349 = $348&255;
           $350 = $349 << 8;
           $351 = (($345) + 1)|0;
           $352 = $351 & 65535;
           $353 = (($8) + ($352)|0);
           $354 = HEAP8[$353]|0;
           $355 = $354&255;
           $356 = $350 | $355;
           $357 = (($344) + 2)|0;
           $358 = ($357|0)>(8);
           if ($358) {
            $359 = ($357|0)==(9);
            if (!($359)) {
             label = 61;
             break L4;
            }
            $360 = (($342) + 9)|0;
            $361 = $360 & 65535;
            $362 = $brr_header$1 & 1;
            $363 = ($362|0)==(0);
            do {
             if ($363) {
              $brr_addr$0 = $361;
             } else {
              $364 = (($v_regs$0) + 4|0);
              $365 = HEAP8[$364]|0;
              $366 = $365&255;
              $367 = $366 << 2;
              $368 = $367 | 2;
              $$sum10 = (($368) + ($12))|0;
              $369 = (($8) + ($$sum10)|0);
              $370 = (__Z8get_le16PKv($369)|0);
              $371 = HEAP32[$101>>2]|0;
              $372 = ($371|0)==(0);
              if (!($372)) {
               $brr_addr$0 = $370;
               break;
              }
              $373 = HEAP8[$43]|0;
              $374 = $373&255;
              $375 = $374 | $vbit$0;
              $376 = $375&255;
              HEAP8[$43] = $376;
              $brr_addr$0 = $370;
             }
            } while(0);
            HEAP32[$96>>2] = $brr_addr$0;
            $brr_offset$0 = 1;
           } else {
            $brr_offset$0 = $357;
           }
           HEAP32[$343>>2] = $brr_offset$0;
           $377 = $brr_header$1 >> 4;
           $378 = (51888 + ($377)|0);
           $379 = HEAP8[$378]|0;
           $380 = $379&255;
           $381 = (($377) + 16)|0;
           $382 = (51888 + ($381)|0);
           $383 = HEAP8[$382]|0;
           $384 = $383&255;
           $385 = (($v$0) + 96|0);
           $386 = HEAP32[$385>>2]|0;
           $387 = (($386) + 16|0);
           $388 = $brr_header$1 & 12;
           $389 = ($388>>>0)>(7);
           $390 = ($388|0)==(8);
           $391 = ($388|0)==(0);
           $nybbles$033 = $356;$pos$034 = $386;
           while(1) {
            $sext7 = $nybbles$033 << 16;
            $392 = $sext7 >> 16;
            $393 = $392 >> $380;
            $394 = $393 << $384;
            $395 = (($pos$034) + 44|0);
            $396 = HEAP32[$395>>2]|0;
            $397 = (($pos$034) + 40|0);
            $398 = HEAP32[$397>>2]|0;
            $399 = $398 >> 1;
            do {
             if ($389) {
              $400 = (($396) + ($394))|0;
              $401 = (($400) - ($399))|0;
              if ($390) {
               $402 = $398 >> 5;
               $403 = Math_imul($396, -3)|0;
               $404 = $403 >> 6;
               $405 = (($404) + ($402))|0;
               $406 = (($405) + ($401))|0;
               $s$0 = $406;
               break;
              } else {
               $407 = Math_imul($396, -13)|0;
               $408 = $407 >> 7;
               $409 = (($401) + ($408))|0;
               $410 = ($399*3)|0;
               $411 = $410 >> 4;
               $412 = (($409) + ($411))|0;
               $s$0 = $412;
               break;
              }
             } else {
              if ($391) {
               $s$0 = $394;
               break;
              }
              $413 = $396 >> 1;
              $414 = (($413) + ($394))|0;
              $415 = (0 - ($396))|0;
              $416 = $415 >> 5;
              $417 = (($414) + ($416))|0;
              $s$0 = $417;
             }
            } while(0);
            $sext8 = $s$0 << 16;
            $418 = $sext8 >> 16;
            $419 = ($418|0)==($s$0|0);
            if ($419) {
             $s$1 = $s$0;
            } else {
             $420 = $s$0 >> 31;
             $421 = $420 ^ 32767;
             $s$1 = $421;
            }
            $422 = $s$1 << 17;
            $423 = $422 >> 16;
            HEAP32[$pos$034>>2] = $423;
            $424 = (($pos$034) + 48|0);
            HEAP32[$424>>2] = $423;
            $425 = (($pos$034) + 4|0);
            $426 = $nybbles$033 << 4;
            $427 = ($425>>>0)<($387>>>0);
            if ($427) {
             $nybbles$033 = $426;$pos$034 = $425;
            } else {
             break;
            }
           }
           $428 = (($v$0) + 48|0);
           $429 = ($425>>>0)<($428>>>0);
           $430 = ($v$0);
           $pos$0$ = $429 ? $425 : $430;
           HEAP32[$385>>2] = $pos$0$;
          }
         } while(0);
         $431 = $vbit$0 << 1;
         $432 = (($v_regs$0) + 16|0);
         $433 = (($v$0) + 140|0);
         $434 = ($431|0)<(256);
         if ($434) {
          $echo_out_l$0 = $echo_out_l$1;$echo_out_r$0 = $echo_out_r$1;$main_out_l$0 = $main_out_l$1;$main_out_r$0 = $main_out_r$1;$pmon_input$0 = $output$3;$v$0 = $433;$v_regs$0 = $432;$vbit$0 = $431;
         } else {
          break;
         }
        }
        $435 = HEAP32[$49>>2]|0;
        $436 = HEAP8[$50]|0;
        $437 = $436&255;
        $438 = $437 << 8;
        $439 = (($438) + ($435))|0;
        $440 = $439 & 65535;
        $441 = (($8) + ($440)|0);
        $442 = ($435|0)==(0);
        if ($442) {
         $443 = HEAP8[$51]|0;
         $444 = $443&255;
         $445 = $444 << 11;
         $446 = $445 & 30720;
         HEAP32[$52>>2] = $446;
        }
        $447 = (($435) + 4)|0;
        $448 = HEAP32[$53>>2]|0;
        $449 = ($447|0)>=($448|0);
        $$1 = $449 ? 0 : $447;
        HEAP32[$49>>2] = $$1;
        $450 = (__Z8get_le16PKv($441)|0);
        $sext = $450 << 16;
        $451 = $sext >> 16;
        $$sum = (($440) + 2)|0;
        $452 = (($8) + ($$sum)|0);
        $453 = (__Z8get_le16PKv($452)|0);
        $sext2 = $453 << 16;
        $454 = $sext2 >> 16;
        $455 = HEAP32[$54>>2]|0;
        $456 = (($455) + 8|0);
        $457 = ($456>>>0)<($55>>>0);
        $$32 = $457 ? $456 : $56;
        HEAP32[$54>>2] = $$32;
        $458 = (($$32) + 64|0);
        HEAP32[$458>>2] = $451;
        $459 = ($$32);
        HEAP32[$459>>2] = $451;
        $460 = (($$32) + 68|0);
        HEAP32[$460>>2] = $454;
        $461 = (($$32) + 4|0);
        HEAP32[$461>>2] = $454;
        $462 = HEAP8[$57]|0;
        $463 = $462 << 24 >> 24;
        $464 = Math_imul($463, $451)|0;
        $465 = Math_imul($463, $454)|0;
        $466 = (($$32) + 8|0);
        $467 = HEAP32[$466>>2]|0;
        $468 = HEAP8[$58]|0;
        $469 = $468 << 24 >> 24;
        $470 = Math_imul($469, $467)|0;
        $471 = (($470) + ($464))|0;
        $472 = (($$32) + 12|0);
        $473 = HEAP32[$472>>2]|0;
        $474 = Math_imul($473, $469)|0;
        $475 = (($474) + ($465))|0;
        $476 = (($$32) + 16|0);
        $477 = HEAP32[$476>>2]|0;
        $478 = HEAP8[$59]|0;
        $479 = $478 << 24 >> 24;
        $480 = Math_imul($479, $477)|0;
        $481 = (($471) + ($480))|0;
        $482 = (($$32) + 20|0);
        $483 = HEAP32[$482>>2]|0;
        $484 = Math_imul($483, $479)|0;
        $485 = (($475) + ($484))|0;
        $486 = (($$32) + 24|0);
        $487 = HEAP32[$486>>2]|0;
        $488 = HEAP8[$60]|0;
        $489 = $488 << 24 >> 24;
        $490 = Math_imul($489, $487)|0;
        $491 = (($481) + ($490))|0;
        $492 = (($$32) + 28|0);
        $493 = HEAP32[$492>>2]|0;
        $494 = Math_imul($493, $489)|0;
        $495 = (($485) + ($494))|0;
        $496 = (($$32) + 32|0);
        $497 = HEAP32[$496>>2]|0;
        $498 = HEAP8[$61]|0;
        $499 = $498 << 24 >> 24;
        $500 = Math_imul($499, $497)|0;
        $501 = (($491) + ($500))|0;
        $502 = (($$32) + 36|0);
        $503 = HEAP32[$502>>2]|0;
        $504 = Math_imul($503, $499)|0;
        $505 = (($495) + ($504))|0;
        $506 = (($$32) + 40|0);
        $507 = HEAP32[$506>>2]|0;
        $508 = HEAP8[$62]|0;
        $509 = $508 << 24 >> 24;
        $510 = Math_imul($509, $507)|0;
        $511 = (($501) + ($510))|0;
        $512 = (($$32) + 44|0);
        $513 = HEAP32[$512>>2]|0;
        $514 = Math_imul($513, $509)|0;
        $515 = (($505) + ($514))|0;
        $516 = (($$32) + 48|0);
        $517 = HEAP32[$516>>2]|0;
        $518 = HEAP8[$63]|0;
        $519 = $518 << 24 >> 24;
        $520 = Math_imul($519, $517)|0;
        $521 = (($511) + ($520))|0;
        $522 = (($$32) + 52|0);
        $523 = HEAP32[$522>>2]|0;
        $524 = Math_imul($523, $519)|0;
        $525 = (($515) + ($524))|0;
        $526 = (($$32) + 56|0);
        $527 = HEAP32[$526>>2]|0;
        $528 = HEAP8[$64]|0;
        $529 = $528 << 24 >> 24;
        $530 = Math_imul($529, $527)|0;
        $531 = (($521) + ($530))|0;
        $532 = (($$32) + 60|0);
        $533 = HEAP32[$532>>2]|0;
        $534 = Math_imul($533, $529)|0;
        $535 = (($525) + ($534))|0;
        $536 = HEAP8[$21]|0;
        $537 = $536 & 32;
        $538 = ($537<<24>>24)==(0);
        if ($538) {
         $539 = $echo_out_l$1 >> 7;
         $540 = HEAP8[$65]|0;
         $541 = $540 << 24 >> 24;
         $542 = Math_imul($541, $531)|0;
         $543 = $542 >> 14;
         $544 = (($543) + ($539))|0;
         $545 = $echo_out_r$1 >> 7;
         $546 = Math_imul($541, $535)|0;
         $547 = $546 >> 14;
         $548 = (($547) + ($545))|0;
         $sext3 = $544 << 16;
         $549 = $sext3 >> 16;
         $550 = ($549|0)==($544|0);
         if ($550) {
          $l1$0 = $544;
         } else {
          $551 = $544 >> 31;
          $552 = $551 ^ 32767;
          $l1$0 = $552;
         }
         $sext4 = $548 << 16;
         $553 = $sext4 >> 16;
         $554 = ($553|0)==($548|0);
         if ($554) {
          $r2$0 = $548;
         } else {
          $555 = $548 >> 31;
          $556 = $555 ^ 32767;
          $r2$0 = $556;
         }
         __Z8set_le16Pvj($441,$l1$0);
         __Z8set_le16Pvj($452,$r2$0);
        }
        $557 = Math_imul($main_out_l$1, $$30)|0;
        $558 = HEAP8[$66]|0;
        $559 = $558 << 24 >> 24;
        $560 = Math_imul($559, $531)|0;
        $561 = (($560) + ($557))|0;
        $562 = $561 >> 14;
        $563 = Math_imul($main_out_r$1, $30)|0;
        $564 = HEAP8[$67]|0;
        $565 = $564 << 24 >> 24;
        $566 = Math_imul($565, $535)|0;
        $567 = (($566) + ($563))|0;
        $568 = $567 >> 14;
        $sext5 = $562 << 16;
        $569 = $sext5 >> 16;
        $570 = ($569|0)==($562|0);
        if ($570) {
         $l3$0 = $562;
        } else {
         $571 = $561 >> 31;
         $572 = $571 ^ 32767;
         $l3$0 = $572;
        }
        $sext6 = $568 << 16;
        $573 = $sext6 >> 16;
        $574 = ($573|0)==($568|0);
        if ($574) {
         $r4$0 = $568;
        } else {
         $575 = $567 >> 31;
         $576 = $575 ^ 32767;
         $r4$0 = $576;
        }
        $577 = HEAP8[$21]|0;
        $578 = $577 & 64;
        $579 = ($578<<24>>24)==(0);
        $580 = HEAP32[$68>>2]|0;
        $581 = $l3$0&65535;
        $582 = $579 ? $581 : 0;
        HEAP16[$580>>1] = $582;
        $583 = $r4$0&65535;
        $584 = $579 ? $583 : 0;
        $585 = (($580) + 2|0);
        HEAP16[$585>>1] = $584;
        $586 = (($580) + 4|0);
        $587 = HEAP32[$69>>2]|0;
        $588 = ($586>>>0)<($587>>>0);
        if ($588) {
         $out$0 = $586;
        } else {
         HEAP32[$69>>2] = $71;
         $out$0 = $70;
        }
        HEAP32[$68>>2] = $out$0;
        $589 = (($count$0) + -1)|0;
        $590 = ($589|0)==(0);
        if ($590) {
         label = 93;
         break;
        } else {
         $count$0 = $589;
        }
       }
       if ((label|0) == 61) {
        ___assert_fail(((51848)|0),((50640)|0),471,((51880)|0));
        // unreachable;
       }
       else if ((label|0) == 93) {
        STACKTOP = sp;return;
       }
      }
      function __ZN7Spc_Dsp11run_counterEi($this,$i) {
       $this = $this|0;
       $i = $i|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $n$0 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ((($this) + ($i<<2)|0) + 284|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = (($2) + -1)|0;
       $4 = $2 & 7;
       $5 = ($4|0)==(0);
       if ($5) {
        $6 = (($i) + -6)|0;
        $7 = (($6) + ($3))|0;
        $n$0 = $7;
       } else {
        $n$0 = $3;
       }
       HEAP32[$1>>2] = $n$0;
       STACKTOP = sp;return;
      }
      function __ZN7Spc_Dsp11mute_voicesEi($this,$mask) {
       $this = $this|0;
       $mask = $mask|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
       var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 1560|0);
       HEAP32[$1>>2] = $mask;
       $2 = $mask & 1;
       $3 = (($2) + -1)|0;
       $4 = (($this) + 444|0);
       HEAP32[$4>>2] = $3;
       __ZN7Spc_Dsp16update_voice_volEi($this,0);
       $5 = $mask >>> 1;
       $6 = $5 & 1;
       $7 = (($6) + -1)|0;
       $8 = (($this) + 584|0);
       HEAP32[$8>>2] = $7;
       __ZN7Spc_Dsp16update_voice_volEi($this,16);
       $9 = $mask >>> 2;
       $10 = $9 & 1;
       $11 = (($10) + -1)|0;
       $12 = (($this) + 724|0);
       HEAP32[$12>>2] = $11;
       __ZN7Spc_Dsp16update_voice_volEi($this,32);
       $13 = $mask >>> 3;
       $14 = $13 & 1;
       $15 = (($14) + -1)|0;
       $16 = (($this) + 864|0);
       HEAP32[$16>>2] = $15;
       __ZN7Spc_Dsp16update_voice_volEi($this,48);
       $17 = $mask >>> 4;
       $18 = $17 & 1;
       $19 = (($18) + -1)|0;
       $20 = (($this) + 1004|0);
       HEAP32[$20>>2] = $19;
       __ZN7Spc_Dsp16update_voice_volEi($this,64);
       $21 = $mask >>> 5;
       $22 = $21 & 1;
       $23 = (($22) + -1)|0;
       $24 = (($this) + 1144|0);
       HEAP32[$24>>2] = $23;
       __ZN7Spc_Dsp16update_voice_volEi($this,80);
       $25 = $mask >>> 6;
       $26 = $25 & 1;
       $27 = (($26) + -1)|0;
       $28 = (($this) + 1284|0);
       HEAP32[$28>>2] = $27;
       __ZN7Spc_Dsp16update_voice_volEi($this,96);
       $29 = $mask >>> 7;
       $30 = $29 & 1;
       $31 = (($30) + -1)|0;
       $32 = (($this) + 1424|0);
       HEAP32[$32>>2] = $31;
       __ZN7Spc_Dsp16update_voice_volEi($this,112);
       STACKTOP = sp;return;
      }
      function __ZN7Spc_Dsp4initEPv($this,$ram_64k) {
       $this = $this|0;
       $ram_64k = $ram_64k|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 1556|0);
       HEAP32[$1>>2] = $ram_64k;
       __ZN7Spc_Dsp11mute_voicesEi($this,0);
       __ZN7Spc_Dsp16disable_surroundEb($this,0);
       __ZN7Spc_Dsp10set_outputEPsi($this,0,0);
       __ZN7Spc_Dsp5resetEv($this);
       __Z24blargg_verify_byte_orderv();
       STACKTOP = sp;return;
      }
      function __ZN7Spc_Dsp16disable_surroundEb($this,$disable) {
       $this = $this|0;
       $disable = $disable|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $disable ? 0 : -16384;
       $2 = (($this) + 1564|0);
       HEAP32[$2>>2] = $1;
       STACKTOP = sp;return;
      }
      function __ZN7Spc_Dsp5resetEv($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN7Spc_Dsp4loadEPKh($this,(51952));
       STACKTOP = sp;return;
      }
      function __ZN7Spc_Dsp17soft_reset_commonEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 1556|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = ($2|0)==(0|0);
       if ($3) {
        ___assert_fail(((51920)|0),((50640)|0),667,((51928)|0));
        // unreachable;
       } else {
        $4 = (($this) + 268|0);
        HEAP32[$4>>2] = 16384;
        $5 = (($this) + 128|0);
        $6 = (($this) + 256|0);
        HEAP32[$6>>2] = $5;
        $7 = (($this) + 260|0);
        HEAP32[$7>>2] = 1;
        $8 = (($this) + 272|0);
        HEAP32[$8>>2] = 0;
        $9 = (($this) + 280|0);
        HEAP32[$9>>2] = 0;
        __ZN7Spc_Dsp12init_counterEv($this);
        STACKTOP = sp;return;
       }
      }
      function __ZN7Spc_Dsp12init_counterEv($this) {
       $this = $this|0;
       var $$ = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$02 = 0, $i$02$phi = 0, $n$01 = 0, $n$01$phi = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 284|0);
       HEAP32[$1>>2] = 1;
       $2 = (($this) + 288|0);
       HEAP32[$2>>2] = 0;
       $3 = (($this) + 292|0);
       HEAP32[$3>>2] = -32;
       $4 = (($this) + 296|0);
       HEAP32[$4>>2] = 11;
       $i$02 = 1;$n$01 = 2;
       while(1) {
        $5 = ((($this) + ($n$01<<2)|0) + 284|0);
        $6 = ((($this) + ($i$02<<2)|0) + 1428|0);
        HEAP32[$6>>2] = $5;
        $7 = (($n$01) + -1)|0;
        $8 = ($7|0)!=(0);
        $$ = $8 ? $7 : 3;
        $9 = (($i$02) + 1)|0;
        $exitcond = ($9|0)==(32);
        if ($exitcond) {
         break;
        } else {
         $n$01$phi = $$;$i$02$phi = $9;$n$01 = $n$01$phi;$i$02 = $i$02$phi;
        }
       }
       $10 = (($this) + 1428|0);
       HEAP32[$10>>2] = $1;
       $11 = (($this) + 1548|0);
       HEAP32[$11>>2] = $3;
       STACKTOP = sp;return;
      }
      function __ZN7Spc_Dsp4loadEPKh($this,$regs) {
       $this = $this|0;
       $regs = $regs|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
       var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
       sp = STACKTOP;
       $1 = ($this);
       dest=$1+0|0; src=$regs+0|0; stop=dest+128|0; do { HEAP8[dest]=HEAP8[src]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));;
       $2 = (($this) + 128|0);
       _memset(($2|0),0,1428)|0;
       $3 = (($this) + 1396|0);
       HEAP32[$3>>2] = 1;
       $4 = (($this) + 1288|0);
       $5 = (($this) + 1384|0);
       HEAP32[$5>>2] = $4;
       $6 = (($this) + 1256|0);
       HEAP32[$6>>2] = 1;
       $7 = (($this) + 1148|0);
       $8 = (($this) + 1244|0);
       HEAP32[$8>>2] = $7;
       $9 = (($this) + 1116|0);
       HEAP32[$9>>2] = 1;
       $10 = (($this) + 1008|0);
       $11 = (($this) + 1104|0);
       HEAP32[$11>>2] = $10;
       $12 = (($this) + 976|0);
       HEAP32[$12>>2] = 1;
       $13 = (($this) + 868|0);
       $14 = (($this) + 964|0);
       HEAP32[$14>>2] = $13;
       $15 = (($this) + 836|0);
       HEAP32[$15>>2] = 1;
       $16 = (($this) + 728|0);
       $17 = (($this) + 824|0);
       HEAP32[$17>>2] = $16;
       $18 = (($this) + 696|0);
       HEAP32[$18>>2] = 1;
       $19 = (($this) + 588|0);
       $20 = (($this) + 684|0);
       HEAP32[$20>>2] = $19;
       $21 = (($this) + 556|0);
       HEAP32[$21>>2] = 1;
       $22 = (($this) + 448|0);
       $23 = (($this) + 544|0);
       HEAP32[$23>>2] = $22;
       $24 = (($this) + 416|0);
       HEAP32[$24>>2] = 1;
       $25 = (($this) + 308|0);
       $26 = (($this) + 404|0);
       HEAP32[$26>>2] = $25;
       $27 = (($this) + 76|0);
       $28 = HEAP8[$27]|0;
       $29 = $28&255;
       $30 = (($this) + 300|0);
       HEAP32[$30>>2] = $29;
       $31 = (($this) + 1560|0);
       $32 = HEAP32[$31>>2]|0;
       __ZN7Spc_Dsp11mute_voicesEi($this,$32);
       __ZN7Spc_Dsp17soft_reset_commonEv($this);
       STACKTOP = sp;return;
      }
      function __ZN7Spc_EmuC2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $this;
       __ZN9Music_EmuC2Ev($1);
       $2 = $this;
       HEAP32[$2>>2] = (((52080) + 8|0));
       $3 = (($this) + 328|0);
       __ZN13Fir_ResamplerILi24EEC1Ev($3);
       $4 = (($this) + 1920|0);
       __ZN10SPC_FilterC2Ev($4);
       $5 = $this;
       __ZN8Gme_File8set_typeEPK11gme_type_t_($5,(52264));
       __ZN9Music_Emu15set_voice_namesEPKPKc($1,((52168)));
       __ZN9Music_Emu8set_gainEd($1,1.39999999999999991118);
       STACKTOP = sp;return;
      }
      function __ZN13Fir_ResamplerILi24EEC1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN13Fir_ResamplerILi24EEC2Ev($this);
       STACKTOP = sp;return;
      }
      function __ZN13Fir_ResamplerILi24EED1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN13Fir_ResamplerILi24EED2Ev($this);
       STACKTOP = sp;return;
      }
      function __ZN7Spc_EmuD0Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       __ZN7Spc_EmuD2Ev($this);
       $1 = ($this);
       __ZN8Gme_FiledlEPv($1);
       STACKTOP = sp;return;
      }
      function __ZN7Spc_EmuD2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $this;
       HEAP32[$1>>2] = (((52080) + 8|0));
       $2 = (($this) + 328|0);
       __ZN13Fir_ResamplerILi24EED1Ev($2);
       $3 = $this;
       __ZN9Music_EmuD2Ev($3);
       STACKTOP = sp;return;
      }
      function __ZNK7Spc_Emu7trailerEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 320|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = (__ZL3minll674($2)|0);
       $4 = (($this) + 316|0);
       $5 = HEAP32[$4>>2]|0;
       $6 = (($5) + ($3)|0);
       STACKTOP = sp;return ($6|0);
      }
      function __ZL3minll674($x) {
       $x = $x|0;
       var $1 = 0, $x$ = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($x|0)<(66048);
       $x$ = $1 ? $x : 66048;
       STACKTOP = sp;return ($x$|0);
      }
      function __ZNK7Spc_Emu12trailer_sizeEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 320|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = (($2) + -66048)|0;
       $4 = (__ZL3maxll($3)|0);
       STACKTOP = sp;return ($4|0);
      }
      function __ZL3maxll($y) {
       $y = $y|0;
       var $$y = 0, $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($y|0)<(0);
       $$y = $1 ? 0 : $y;
       STACKTOP = sp;return ($$y|0);
      }
      function __ZNK7Spc_Emu11track_info_EP12track_info_ti($this,$out,u$0) {
       $this = $this|0;
       $out = $out|0;
       u$0 = u$0|0;
       var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (__ZNK7Spc_Emu6headerEv($this)|0);
       $2 = (__ZNK7Spc_Emu7trailerEv($this)|0);
       $3 = (__ZNK7Spc_Emu12trailer_sizeEv($this)|0);
       __ZL12get_spc_infoRKN7Spc_Emu8header_tEPKhlP12track_info_t($1,$2,$3,$out);
       STACKTOP = sp;return (0|0);
      }
      function __ZL12get_spc_infoRKN7Spc_Emu8header_tEPKhlP12track_info_t($h,$xid6,$xid6_size,$out) {
       $h = $h|0;
       $xid6 = $xid6|0;
       $xid6_size = $xid6_size|0;
       $out = $out|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
       var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0;
       var $7 = 0, $8 = 0, $9 = 0, $i$06 = 0, $len_secs$05 = 0, $len_secs$07 = 0, $len_secs$2 = 0, $or$cond = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $i$06 = 0;$len_secs$07 = 0;
       while(1) {
        $1 = ((($h) + ($i$06)|0) + 169|0);
        $2 = HEAP8[$1]|0;
        $3 = $2&255;
        $4 = (($3) + -48)|0;
        $5 = ($4>>>0)>(9);
        if ($5) {
         label = 3;
         break;
        }
        $13 = ($len_secs$07*10)|0;
        $14 = (($4) + ($13))|0;
        $15 = (($i$06) + 1)|0;
        $16 = ($15|0)<(3);
        if ($16) {
         $i$06 = $15;$len_secs$07 = $14;
        } else {
         $len_secs$05 = $14;
         label = 7;
         break;
        }
       }
       do {
        if ((label|0) == 3) {
         $6 = ($i$06|0)==(1);
         if (!($6)) {
          $len_secs$05 = $len_secs$07;
          label = 7;
          break;
         }
         $7 = (($h) + 176|0);
         $8 = HEAP8[$7]|0;
         $9 = ($8<<24>>24)==(0);
         if (!($9)) {
          label = 8;
          break;
         }
         $10 = (($h) + 177|0);
         $11 = HEAP8[$10]|0;
         $12 = ($11<<24>>24)==(0);
         if ($12) {
          label = 8;
         } else {
          $len_secs$05 = $len_secs$07;
          label = 7;
         }
        }
       } while(0);
       if ((label|0) == 7) {
        $17 = ($len_secs$05|0)==(0);
        $18 = ($len_secs$05|0)>(8191);
        $or$cond = $17 | $18;
        if ($or$cond) {
         label = 8;
        } else {
         $len_secs$2 = $len_secs$05;
        }
       }
       if ((label|0) == 8) {
        $19 = (($h) + 169|0);
        $20 = (__Z8get_le16PKv($19)|0);
        $len_secs$2 = $20;
       }
       $21 = ($len_secs$2|0)<(8191);
       if ($21) {
        $22 = ($len_secs$2*1000)|0;
        $23 = (($out) + 4|0);
        HEAP32[$23>>2] = $22;
       }
       $24 = (($h) + 176|0);
       $25 = HEAP8[$24]|0;
       $26 = ($25<<24>>24)<(32);
       if ($26) {
        $30 = 1;
       } else {
        $27 = $25 << 24 >> 24;
        $28 = (($27) + -48)|0;
        $29 = ($28>>>0)<(10);
        $30 = $29;
       }
       $31 = $30&1;
       $32 = (($out) + 784|0);
       $33 = ((($h) + ($31)|0) + 176|0);
       $34 = (32 - ($31))|0;
       __ZN8Gme_File11copy_field_EPcPKci($32,$33,$34);
       $35 = (($out) + 528|0);
       $36 = (($h) + 46|0);
       __ZN8Gme_File11copy_field_EPcPKci($35,$36,32);
       $37 = (($out) + 272|0);
       $38 = (($h) + 78|0);
       __ZN8Gme_File11copy_field_EPcPKci($37,$38,32);
       $39 = (($out) + 1552|0);
       $40 = (($h) + 110|0);
       __ZN8Gme_File11copy_field_EPcPKci($39,$40,16);
       $41 = (($out) + 1296|0);
       $42 = (($h) + 126|0);
       __ZN8Gme_File11copy_field_EPcPKci($41,$42,32);
       $43 = ($xid6_size|0)==(0);
       if ($43) {
        STACKTOP = sp;return;
       }
       __ZL12get_spc_xid6PKhlP12track_info_t($xid6,$xid6_size,$out);
       STACKTOP = sp;return;
      }
      function __ZNK7Spc_Emu6headerEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 316|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = $2;
       STACKTOP = sp;return ($3|0);
      }
      function __ZN7Spc_Emu16set_sample_rate_El($this,$sample_rate) {
       $this = $this|0;
       $sample_rate = $sample_rate|0;
       var $$0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 1956|0);
       $2 = (__ZN8Snes_Spc4initEv($1)|0);
       $3 = ($2|0)==(0|0);
       do {
        if ($3) {
         $4 = $this;
         __ZN9Music_Emu15enable_accuracyEb($4,0);
         $5 = ($sample_rate|0)==(32000);
         if ($5) {
          $$0 = 0;
          break;
         }
         $6 = (($this) + 328|0);
         $7 = $6;
         $8 = (__ZN14Fir_Resampler_11buffer_sizeEi($7,3200)|0);
         $9 = ($8|0)==(0|0);
         if (!($9)) {
          $$0 = $8;
          break;
         }
         $10 = (+($sample_rate|0));
         $11 = 32000.0 / $10;
         (+__ZN14Fir_Resampler_10time_ratioEddd($7,$11,0.996500000000000052402,1.0));
         $$0 = 0;
        } else {
         $$0 = $2;
        }
       } while(0);
       STACKTOP = sp;return ($$0|0);
      }
      function __ZN9Music_Emu15enable_accuracyEb($this,$b) {
       $this = $this|0;
       $b = $b|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $this;
       $2 = HEAP32[$1>>2]|0;
       $3 = (($2) + 48|0);
       $4 = HEAP32[$3>>2]|0;
       FUNCTION_TABLE_vii[$4 & 31]($this,$b);
       STACKTOP = sp;return;
      }
      function __ZN7Spc_Emu16enable_accuracy_Eb($this,$b) {
       $this = $this|0;
       $b = $b|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 1920|0);
       __ZN10SPC_Filter6enableEb($1,$b);
       STACKTOP = sp;return;
      }
      function __ZN10SPC_Filter6enableEb($this,$b) {
       $this = $this|0;
       $b = $b|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 8|0);
       $2 = $b&1;
       HEAP8[$1] = $2;
       STACKTOP = sp;return;
      }
      function __ZN7Spc_Emu12mute_voices_Ei($this,$m) {
       $this = $this|0;
       $m = $m|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 1956|0);
       __ZN8Snes_Spc11mute_voicesEi($1,$m);
       STACKTOP = sp;return;
      }
      function __ZN8Snes_Spc11mute_voicesEi($this,$mask) {
       $this = $this|0;
       $mask = $mask|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       __ZN7Spc_Dsp11mute_voicesEi($1,$mask);
       STACKTOP = sp;return;
      }
      function __ZN7Spc_Emu9load_mem_EPKhl($this,$in,$size) {
       $this = $this|0;
       $in = $in|0;
       $size = $size|0;
       var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 316|0);
       HEAP32[$1>>2] = $in;
       $2 = (($this) + 320|0);
       HEAP32[$2>>2] = $size;
       $3 = $this;
       __ZN9Music_Emu15set_voice_countEi($3,8);
       $4 = ($size|0)<(65920);
       if ($4) {
        $5 = HEAP32[(40024)>>2]|0;
        $$0 = $5;
        STACKTOP = sp;return ($$0|0);
       } else {
        $6 = (__ZL16check_spc_headerPKv($in)|0);
        $$0 = $6;
        STACKTOP = sp;return ($$0|0);
       }
       return 0|0;
      }
      function __ZL16check_spc_headerPKv($header) {
       $header = $header|0;
       var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (_memcmp($header,(52320),27)|0);
       $2 = ($1|0)==(0);
       $3 = HEAP32[(40024)>>2]|0;
       $$0 = $2 ? 0 : $3;
       STACKTOP = sp;return ($$0|0);
      }
      function __ZN7Spc_Emu10set_tempo_Ed($this,$t) {
       $this = $this|0;
       $t = +$t;
       var $1 = 0, $2 = 0.0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 1956|0);
       $2 = $t * 256.0;
       $3 = (~~(($2)));
       __ZN8Snes_Spc9set_tempoEi($1,$3);
       STACKTOP = sp;return;
      }
      function __ZN7Spc_Emu12start_track_Ei($this,$track) {
       $this = $this|0;
       $track = $track|0;
       var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 328|0);
       $2 = $1;
       __ZN14Fir_Resampler_5clearEv($2);
       $3 = (($this) + 1920|0);
       __ZN10SPC_Filter5clearEv($3);
       $4 = (($this) + 1956|0);
       $5 = (($this) + 316|0);
       $6 = HEAP32[$5>>2]|0;
       $7 = (($this) + 320|0);
       $8 = HEAP32[$7>>2]|0;
       $9 = (__ZN8Snes_Spc8load_spcEPKvl($4,$6,$8)|0);
       $10 = ($9|0)==(0|0);
       if (!($10)) {
        $$0 = $9;
        STACKTOP = sp;return ($$0|0);
       }
       $11 = $this;
       $12 = (+__ZNK9Music_Emu4gainEv($11));
       $13 = $12 * 256.0;
       $14 = (~~(($13)));
       __ZN10SPC_Filter8set_gainEi($3,$14);
       __ZN8Snes_Spc10clear_echoEv($4);
       $$0 = 0;
       STACKTOP = sp;return ($$0|0);
      }
      function __ZN10SPC_Filter8set_gainEi($this,$g) {
       $this = $this|0;
       $g = $g|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       HEAP32[$1>>2] = $g;
       STACKTOP = sp;return;
      }
      function __ZN7Spc_Emu15play_and_filterElPs($this,$count,$out) {
       $this = $this|0;
       $count = $count|0;
       $out = $out|0;
       var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 1956|0);
       $2 = (__ZN8Snes_Spc4playEiPs($1,$count,$out)|0);
       $3 = ($2|0)==(0|0);
       if (!($3)) {
        $$0 = $2;
        STACKTOP = sp;return ($$0|0);
       }
       $4 = (($this) + 1920|0);
       __ZN10SPC_Filter3runEPsi($4,$out,$count);
       $$0 = 0;
       STACKTOP = sp;return ($$0|0);
      }
      function __ZN7Spc_Emu5skip_El($this,$count) {
       $this = $this|0;
       $count = $count|0;
       var $$0 = 0, $$01 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
       var $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, $buf = 0, label = 0, sp = 0;
       sp = STACKTOP;
       STACKTOP = STACKTOP + 128|0;
       $buf = sp;
       $1 = $this;
       $2 = (__ZNK9Music_Emu11sample_rateEv($1)|0);
       $3 = ($2|0)==(32000);
       if ($3) {
        $$01 = $count;
       } else {
        $4 = (+($count|0));
        $5 = (($this) + 328|0);
        $6 = $5;
        $7 = (+__ZNK14Fir_Resampler_5ratioEv($6));
        $8 = $4 * $7;
        $9 = (~~(($8)));
        $10 = $9 & -2;
        $11 = (__ZN14Fir_Resampler_10skip_inputEl($6,$10)|0);
        $12 = (($10) - ($11))|0;
        $$01 = $12;
       }
       $13 = ($$01|0)>(0);
       do {
        if ($13) {
         $14 = (($this) + 1956|0);
         $15 = (__ZN8Snes_Spc4skipEi($14,$$01)|0);
         $16 = ($15|0)==(0|0);
         if ($16) {
          $17 = (($this) + 1920|0);
          __ZN10SPC_Filter5clearEv($17);
          break;
         } else {
          $$0 = $15;
          STACKTOP = sp;return ($$0|0);
         }
        }
       } while(0);
       $18 = $buf;
       $19 = $this;
       $20 = HEAP32[$19>>2]|0;
       $21 = (($20) + 64|0);
       $22 = HEAP32[$21>>2]|0;
       $23 = ($buf);
       $24 = (FUNCTION_TABLE_iiii[$22 & 63]($this,64,$23)|0);
       $$0 = $24;
       STACKTOP = sp;return ($$0|0);
      }
      function __ZN7Spc_Emu5play_ElPs($this,$count,$out) {
       $this = $this|0;
       $count = $count|0;
       $out = $out|0;
       var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $remain$01 = 0, $remain$01$phi = 0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $this;
       $2 = (__ZNK9Music_Emu11sample_rateEv($1)|0);
       $3 = ($2|0)==(32000);
       if ($3) {
        $7 = (__ZN7Spc_Emu15play_and_filterElPs($this,$count,$out)|0);
        $$0 = $7;
        STACKTOP = sp;return ($$0|0);
       }
       $4 = (($this) + 328|0);
       $5 = $4;
       $6 = ($count|0)>(0);
       if ($6) {
        $remain$01 = $count;
       } else {
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
       }
       while(1) {
        $8 = (($count) - ($remain$01))|0;
        $9 = (($out) + ($8<<1)|0);
        $10 = (__ZN13Fir_ResamplerILi24EE4readEPsl($4,$9,$remain$01)|0);
        $11 = (($remain$01) - ($10))|0;
        $12 = ($11|0)>(0);
        if (!($12)) {
         $$0 = 0;
         label = 7;
         break;
        }
        $13 = (__ZNK14Fir_Resampler_9max_writeEv($5)|0);
        $14 = (__ZN14Fir_Resampler_6bufferEv($5)|0);
        $15 = (__ZN7Spc_Emu15play_and_filterElPs($this,$13,$14)|0);
        $16 = ($15|0)==(0|0);
        if (!($16)) {
         $$0 = $15;
         label = 7;
         break;
        }
        __ZN14Fir_Resampler_5writeEl($5,$13);
        $17 = ($11|0)>(0);
        if ($17) {
         $remain$01$phi = $11;$remain$01 = $remain$01$phi;
        } else {
         $$0 = 0;
         label = 7;
         break;
        }
       }
       if ((label|0) == 7) {
        STACKTOP = sp;return ($$0|0);
       }
       return 0|0;
      }
      function __ZN13Fir_ResamplerILi24EE4readEPsl($this,$out_begin,$count) {
       $this = $this|0;
       $out_begin = $out_begin|0;
       $count = $count|0;
       var $$0 = 0, $$0$phi = 0, $$sum = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
       var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
       var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
       var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
       var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $i$04 = 0, $i$04$phi = 0, $imp$0 = 0, $imp$11 = 0, $imp$11$phi = 0, $imp$2 = 0, $in$0 = 0, $in$1 = 0, $l$02 = 0, $l$02$phi = 0;
       var $n$05 = 0, $n$05$phi = 0, $out$0 = 0, $out$1 = 0, $r$03 = 0, $r$03$phi = 0, $remain$0 = 0, $remain$1 = 0, $remain$2 = 0, $scevgep = 0, $skip$0 = 0, $skip$1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $this;
       $2 = (__ZNK13blargg_vectorIsE5beginEv($1)|0);
       $3 = (($this) + 8|0);
       $4 = $3;
       $5 = HEAP32[$4>>2]|0;
       $6 = (($this) + 28|0);
       $7 = $6;
       $8 = (($this) + 16|0);
       $9 = $8;
       $10 = HEAP32[$9>>2]|0;
       $11 = (($this) + 12|0);
       $12 = $11;
       $13 = HEAP32[$12>>2]|0;
       $14 = (($13) - ($10))|0;
       $15 = (($this) + 32|0);
       $16 = $15;
       $17 = HEAP32[$16>>2]|0;
       $18 = $5;
       $19 = $2;
       $20 = (($18) - ($19))|0;
       $21 = ($20|0)>(94);
       L1: do {
        if ($21) {
         $22 = HEAP32[$7>>2]|0;
         $23 = $count >> 1;
         $24 = ((($this) + (($10*48)|0)|0) + 52|0);
         $25 = $22 >>> $10;
         $26 = (($5) + -96|0);
         $27 = (($this) + 52|0);
         $$0 = $23;$imp$0 = $24;$in$0 = $2;$out$0 = $out_begin;$remain$0 = $14;$skip$0 = $25;
         while(1) {
          $28 = (($$0) + -1)|0;
          $29 = ($$0|0)<(1);
          if ($29) {
           $in$1 = $in$0;$out$1 = $out$0;$remain$2 = $remain$0;
           break L1;
          } else {
           $i$04 = $in$0;$imp$11 = $imp$0;$l$02 = 0;$n$05 = 12;$r$03 = 0;
          }
          while(1) {
           $30 = HEAP16[$imp$11>>1]|0;
           $31 = $30 << 16 >> 16;
           $32 = HEAP16[$i$04>>1]|0;
           $33 = $32 << 16 >> 16;
           $34 = Math_imul($33, $31)|0;
           $35 = (($34) + ($l$02))|0;
           $36 = (($i$04) + 2|0);
           $37 = HEAP16[$36>>1]|0;
           $38 = $37 << 16 >> 16;
           $39 = Math_imul($38, $31)|0;
           $40 = (($39) + ($r$03))|0;
           $41 = (($imp$11) + 2|0);
           $42 = HEAP16[$41>>1]|0;
           $43 = $42 << 16 >> 16;
           $44 = (($imp$11) + 4|0);
           $45 = (($i$04) + 4|0);
           $46 = HEAP16[$45>>1]|0;
           $47 = $46 << 16 >> 16;
           $48 = Math_imul($47, $43)|0;
           $49 = (($35) + ($48))|0;
           $50 = (($i$04) + 6|0);
           $51 = HEAP16[$50>>1]|0;
           $52 = $51 << 16 >> 16;
           $53 = Math_imul($52, $43)|0;
           $54 = (($40) + ($53))|0;
           $55 = (($i$04) + 8|0);
           $56 = (($n$05) + -1)|0;
           $57 = ($56|0)==(0);
           if ($57) {
            break;
           } else {
            $r$03$phi = $54;$n$05$phi = $56;$l$02$phi = $49;$imp$11$phi = $44;$i$04$phi = $55;$r$03 = $r$03$phi;$n$05 = $n$05$phi;$l$02 = $l$02$phi;$imp$11 = $imp$11$phi;$i$04 = $i$04$phi;
           }
          }
          $scevgep = (($imp$0) + 48|0);
          $58 = (($remain$0) + -1)|0;
          $59 = $49 >>> 15;
          $60 = $54 >>> 15;
          $61 = $skip$0 << 1;
          $62 = $61 & 2;
          $63 = $skip$0 >>> 1;
          $$sum = (($62) + ($17))|0;
          $64 = (($in$0) + ($$sum<<1)|0);
          $65 = ($58|0)==(0);
          if ($65) {
           $66 = HEAP32[$7>>2]|0;
           $67 = HEAP32[$12>>2]|0;
           $imp$2 = $27;$remain$1 = $67;$skip$1 = $66;
          } else {
           $imp$2 = $scevgep;$remain$1 = $58;$skip$1 = $63;
          }
          $68 = $59&65535;
          HEAP16[$out$0>>1] = $68;
          $69 = $60&65535;
          $70 = (($out$0) + 2|0);
          HEAP16[$70>>1] = $69;
          $71 = (($out$0) + 4|0);
          $72 = ($64>>>0)>($26>>>0);
          if ($72) {
           $in$1 = $64;$out$1 = $71;$remain$2 = $remain$1;
           break;
          } else {
           $$0$phi = $28;$imp$0 = $imp$2;$in$0 = $64;$out$0 = $71;$remain$0 = $remain$1;$skip$0 = $skip$1;$$0 = $$0$phi;
          }
         }
        } else {
         $in$1 = $2;$out$1 = $out_begin;$remain$2 = $14;
        }
       } while(0);
       $73 = HEAP32[$12>>2]|0;
       $74 = (($73) - ($remain$2))|0;
       HEAP32[$9>>2] = $74;
       $75 = HEAP32[$4>>2]|0;
       $76 = $75;
       $77 = $in$1;
       $78 = (($76) - ($77))|0;
       $79 = $78 >> 1;
       $80 = (__ZNK13blargg_vectorIsEixEj($1,$79)|0);
       HEAP32[$4>>2] = $80;
       $81 = (__ZNK13blargg_vectorIsE5beginEv($1)|0);
       $82 = $81;
       $83 = $in$1;
       _memmove(($82|0),($83|0),($78|0))|0;
       $84 = $out$1;
       $85 = $out_begin;
       $86 = (($84) - ($85))|0;
       $87 = $86 >> 1;
       STACKTOP = sp;return ($87|0);
      }
      function __ZNK14Fir_Resampler_9max_writeEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = (__ZNK13blargg_vectorIsE3endEv($1)|0);
       $3 = (($this) + 8|0);
       $4 = HEAP32[$3>>2]|0;
       $5 = $2;
       $6 = $4;
       $7 = (($5) - ($6))|0;
       $8 = $7 >> 1;
       STACKTOP = sp;return ($8|0);
      }
      function __ZN13Fir_ResamplerILi24EEC2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $this;
       $2 = (($this) + 52|0);
       __ZN14Fir_Resampler_C2EiPs($1,24,$2);
       STACKTOP = sp;return;
      }
      function __ZL11new_spc_emuv() {
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (__ZN8Gme_FilenwEj(70464)|0);
       $2 = ($1|0)==(0|0);
       if ($2) {
        $4 = 0;
       } else {
        $3 = $1;
        __ZN7Spc_EmuC2Ev($3);
        $4 = $3;
       }
       $5 = $4;
       STACKTOP = sp;return ($5|0);
      }
      function __ZL12new_spc_filev() {
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (__ZN8Gme_FilenwEj(584)|0);
       $2 = ($1|0)==(0|0);
       if ($2) {
        $4 = 0;
       } else {
        $3 = $1;
        __ZN8Spc_FileC1Ev($3);
        $4 = $3;
       }
       $5 = $4;
       STACKTOP = sp;return ($5|0);
      }
      function __ZN8Spc_FileC1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN8Spc_FileC2Ev($this);
       STACKTOP = sp;return;
      }
      function __ZN8Spc_FileC2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $this;
       __ZN9Gme_Info_C2Ev($1);
       $2 = $this;
       HEAP32[$2>>2] = (((52376) + 8|0));
       $3 = (($this) + 572|0);
       __ZN13blargg_vectorIhEC1Ev($3);
       $4 = $this;
       __ZN8Gme_File8set_typeEPK11gme_type_t_($4,(52264));
       STACKTOP = sp;return;
      }
      function __ZN8Spc_FileD1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN8Spc_FileD2Ev($this);
       STACKTOP = sp;return;
      }
      function __ZN8Spc_FileD0Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       __ZN8Spc_FileD1Ev($this);
       $1 = ($this);
       __ZN8Gme_FiledlEPv($1);
       STACKTOP = sp;return;
      }
      function __ZN8Spc_File5load_ER11Data_Reader($this,$in) {
       $this = $this|0;
       $in = $in|0;
       var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
       var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $in;
       $2 = HEAP32[$1>>2]|0;
       $3 = (($2) + 16|0);
       $4 = HEAP32[$3>>2]|0;
       $5 = (FUNCTION_TABLE_ii[$4 & 15]($in)|0);
       $6 = ($5|0)<(65920);
       if ($6) {
        $7 = HEAP32[(40024)>>2]|0;
        $$0 = $7;
        STACKTOP = sp;return ($$0|0);
       }
       $8 = $in;
       $9 = HEAP32[$8>>2]|0;
       $10 = (($9) + 12|0);
       $11 = HEAP32[$10>>2]|0;
       $12 = (($this) + 316|0);
       $13 = (FUNCTION_TABLE_iiii[$11 & 63]($in,$12,256)|0);
       $14 = ($13|0)==(0|0);
       if (!($14)) {
        $$0 = $13;
        STACKTOP = sp;return ($$0|0);
       }
       $15 = (__ZL16check_spc_headerPKv($12)|0);
       $16 = ($15|0)==(0|0);
       if (!($16)) {
        $$0 = $15;
        STACKTOP = sp;return ($$0|0);
       }
       $17 = (($5) + -66048)|0;
       $18 = ($17|0)>(0);
       do {
        if ($18) {
         $19 = (($this) + 572|0);
         $20 = (__ZN13blargg_vectorIhE6resizeEj($19,$17)|0);
         $21 = ($20|0)==(0|0);
         if (!($21)) {
          $$0 = $20;
          STACKTOP = sp;return ($$0|0);
         }
         $22 = $in;
         $23 = HEAP32[$22>>2]|0;
         $24 = (($23) + 20|0);
         $25 = HEAP32[$24>>2]|0;
         $26 = (FUNCTION_TABLE_iii[$25 & 63]($in,65792)|0);
         $27 = ($26|0)==(0|0);
         if (!($27)) {
          $$0 = $26;
          STACKTOP = sp;return ($$0|0);
         }
         $28 = HEAP32[$8>>2]|0;
         $29 = (($28) + 12|0);
         $30 = HEAP32[$29>>2]|0;
         $31 = (__ZNK13blargg_vectorIhE5beginEv($19)|0);
         $32 = (__ZNK13blargg_vectorIhE4sizeEv($19)|0);
         $33 = (FUNCTION_TABLE_iiii[$30 & 63]($in,$31,$32)|0);
         $34 = ($33|0)==(0|0);
         if ($34) {
          break;
         } else {
          $$0 = $33;
         }
         STACKTOP = sp;return ($$0|0);
        }
       } while(0);
       $$0 = 0;
       STACKTOP = sp;return ($$0|0);
      }
      function __ZNK8Spc_File11track_info_EP12track_info_ti($this,$out,u$0) {
       $this = $this|0;
       $out = $out|0;
       u$0 = u$0|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 316|0);
       $2 = (($this) + 572|0);
       $3 = (__ZNK13blargg_vectorIhE5beginEv($2)|0);
       $4 = (__ZNK13blargg_vectorIhE4sizeEv($2)|0);
       __ZL12get_spc_infoRKN7Spc_Emu8header_tEPKhlP12track_info_t($1,$3,$4,$out);
       STACKTOP = sp;return (0|0);
      }
      function __ZN8Spc_FileD2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $this;
       HEAP32[$1>>2] = (((52376) + 8|0));
       $2 = (($this) + 572|0);
       __ZN13blargg_vectorIhED1Ev($2);
       $3 = $this;
       __ZN9Gme_Info_D2Ev($3);
       STACKTOP = sp;return;
      }
      function __ZL12get_spc_xid6PKhlP12track_info_t($begin,$size,$out) {
       $begin = $begin|0;
       $size = $size|0;
       $out = $out|0;
       var $$sum = 0, $$sum6 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
       var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
       var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
       var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
       var $80 = 0, $9 = 0, $copyright = 0, $copyright22 = 0, $copyright_len$0$lcssa = 0, $copyright_len$017 = 0, $copyright_len$18 = 0, $copyright_len$2 = 0, $end$0 = 0, $field$0$ph = 0, $in$0$ph = 0, $in$019 = 0, $in$1 = 0, $or$cond = 0, $p$1 = 0, $year$0$lcssa = 0, $year$018 = 0, $year$110 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       STACKTOP = STACKTOP + 264|0;
       $copyright = sp;
       $copyright22 = ($copyright);
       $1 = (($begin) + ($size)|0);
       $2 = ($size|0)<(8);
       if ($2) {
        STACKTOP = sp;return;
       }
       $3 = (_memcmp($begin,(52488),4)|0);
       $4 = ($3|0)==(0);
       if (!($4)) {
        STACKTOP = sp;return;
       }
       $5 = (($begin) + 4|0);
       $6 = (__Z8get_le32PKv($5)|0);
       $7 = (($begin) + 8|0);
       $8 = $1;
       $9 = $7;
       $10 = (($8) - ($9))|0;
       $11 = ($10|0)>($6|0);
       if ($11) {
        $$sum6 = (($6) + 8)|0;
        $12 = (($begin) + ($$sum6)|0);
        $end$0 = $12;
       } else {
        $end$0 = $1;
       }
       $13 = ($copyright);
       $14 = $end$0;
       $15 = $7;
       $16 = (($14) - ($15))|0;
       $17 = ($16|0)>(3);
       if (!($17)) {
        STACKTOP = sp;return;
       }
       $18 = $begin;
       $19 = (($out) + 528|0);
       $20 = (($out) + 272|0);
       $21 = (($out) + 784|0);
       $22 = (($out) + 1552|0);
       $23 = (($out) + 1296|0);
       $24 = (($copyright) + 5|0);
       $copyright_len$017 = 0;$in$019 = $7;$year$018 = 0;
       while(1) {
        $28 = (($in$019) + 3|0);
        $29 = HEAP8[$28]|0;
        $30 = $29&255;
        $31 = $30 << 8;
        $32 = (($in$019) + 2|0);
        $33 = HEAP8[$32]|0;
        $34 = $33&255;
        $35 = $31 | $34;
        $36 = (($in$019) + 1|0);
        $37 = HEAP8[$36]|0;
        $38 = ($37<<24>>24)!=(0);
        $39 = $38 ? $35 : 0;
        $40 = (($in$019) + 4|0);
        $41 = $40;
        $42 = (($14) - ($41))|0;
        $43 = ($39|0)>($42|0);
        if ($43) {
         $copyright_len$0$lcssa = $copyright_len$017;$year$0$lcssa = $year$018;
         break;
        }
        $44 = HEAP8[$in$019]|0;
        $45 = $44&255;
        switch ($45|0) {
        case 2:  {
         $field$0$ph = $20;
         label = 16;
         break;
        }
        case 3:  {
         $field$0$ph = $21;
         label = 16;
         break;
        }
        case 4:  {
         $field$0$ph = $22;
         label = 16;
         break;
        }
        case 7:  {
         $field$0$ph = $23;
         label = 16;
         break;
        }
        case 20:  {
         $copyright_len$18 = $copyright_len$017;$year$110 = $35;
         break;
        }
        case 19:  {
         $46 = (__ZL3minii675($39)|0);
         _memcpy(($24|0),($40|0),($46|0))|0;
         $copyright_len$18 = $46;$year$110 = $year$018;
         break;
        }
        case 1:  {
         $field$0$ph = $19;
         label = 16;
         break;
        }
        default: {
         $copyright_len$18 = $copyright_len$017;$year$110 = $year$018;
        }
        }
        if ((label|0) == 16) {
         label = 0;
         __ZN8Gme_File11copy_field_EPcPKci($field$0$ph,$40,$39);
         $copyright_len$18 = $copyright_len$017;$year$110 = $year$018;
        }
        $$sum = (($39) + 4)|0;
        $47 = (($in$019) + ($$sum)|0);
        $in$1 = $47;
        while(1) {
         $48 = $in$1;
         $49 = (($48) - ($18))|0;
         $50 = $49 & 3;
         $51 = ($50|0)!=(0);
         $52 = ($in$1>>>0)<($end$0>>>0);
         $or$cond = $51 & $52;
         if (!($or$cond)) {
          $in$0$ph = $in$1;
          break;
         }
         $53 = (($in$1) + 1|0);
         $54 = HEAP8[$in$1]|0;
         $55 = ($54<<24>>24)==(0);
         if ($55) {
          $in$1 = $53;
         } else {
          $in$0$ph = $47;
          break;
         }
        }
        $25 = $in$0$ph;
        $26 = (($14) - ($25))|0;
        $27 = ($26|0)>(3);
        if ($27) {
         $copyright_len$017 = $copyright_len$18;$in$019 = $in$0$ph;$year$018 = $year$110;
        } else {
         $copyright_len$0$lcssa = $copyright_len$18;$year$0$lcssa = $year$110;
         break;
        }
       }
       $56 = (($copyright) + 5|0);
       $57 = ($year$0$lcssa|0)==(0);
       if ($57) {
        $copyright_len$2 = $copyright_len$0$lcssa;$p$1 = $56;
       } else {
        $58 = (($copyright) + 4|0);
        HEAP8[$58] = 32;
        $59 = (($year$0$lcssa|0) % 10)&-1;
        $60 = (($59) + 48)|0;
        $61 = $60&255;
        $62 = (($copyright) + 3|0);
        HEAP8[$62] = $61;
        $63 = (($year$0$lcssa|0) / 10)&-1;
        $64 = (($63|0) % 10)&-1;
        $65 = (($64) + 48)|0;
        $66 = $65&255;
        $67 = (($copyright) + 2|0);
        HEAP8[$67] = $66;
        $68 = (($year$0$lcssa|0) / 100)&-1;
        $69 = (($68|0) % 10)&-1;
        $70 = (($69) + 48)|0;
        $71 = $70&255;
        $72 = (($copyright) + 1|0);
        HEAP8[$72] = $71;
        $73 = (($year$0$lcssa|0) / 1000)&-1;
        $74 = (($73|0) % 10)&-1;
        $75 = (($74) + 48)|0;
        $76 = $75&255;
        $77 = ($copyright);
        HEAP8[$77] = $76;
        $78 = (($copyright_len$0$lcssa) + 5)|0;
        $copyright_len$2 = $78;$p$1 = $copyright22;
       }
       $79 = ($copyright_len$2|0)==(0);
       if ($79) {
        STACKTOP = sp;return;
       }
       $80 = (($out) + 1040|0);
       __ZN8Gme_File11copy_field_EPcPKci($80,$p$1,$copyright_len$2);
       STACKTOP = sp;return;
      }
      function __ZL3minii675($x) {
       $x = $x|0;
       var $1 = 0, $x$ = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($x|0)<(256);
       $x$ = $1 ? $x : 256;
       STACKTOP = sp;return ($x$|0);
      }
      function __ZN13Fir_ResamplerILi24EED2Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $this;
       __ZN14Fir_Resampler_D2Ev($1);
       STACKTOP = sp;return;
      }
      function __ZN10SPC_Filter5clearEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 12|0);
       $2 = $1;
       ;HEAP32[$2+0>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;HEAP32[$2+20>>2]=0|0;
       STACKTOP = sp;return;
      }
      function __ZN10SPC_FilterC2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 8|0);
       HEAP8[$1] = 1;
       $2 = ($this);
       HEAP32[$2>>2] = 256;
       $3 = (($this) + 4|0);
       HEAP32[$3>>2] = 8;
       __ZN10SPC_Filter5clearEv($this);
       STACKTOP = sp;return;
      }
      function __ZN10SPC_Filter3runEPsi($this,$io,$count) {
       $this = $this|0;
       $io = $io|0;
       $count = $count|0;
       var $$12 = 0, $$sum13 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
       var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
       var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
       var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $i$05 = 0, $i$05$1 = 0, $p1$0$lcssa = 0, $p1$0$lcssa$1 = 0, $p1$04 = 0, $p1$04$1 = 0;
       var $p1$04$1$phi = 0, $p1$04$phi = 0, $pp1$0$lcssa = 0, $pp1$0$lcssa$1 = 0, $pp1$03 = 0, $pp1$03$1 = 0, $pp1$03$1$phi = 0, $pp1$03$phi = 0, $s$0 = 0, $s$0$1 = 0, $s1$0 = 0, $sext = 0, $sext1 = 0, $sext1$1 = 0, $sum$0$lcssa = 0, $sum$0$lcssa$1 = 0, $sum$06 = 0, $sum$06$1 = 0, $sum$06$1$phi = 0, $sum$06$phi = 0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $count & 1;
       $2 = ($1|0)==(0);
       if (!($2)) {
        ___assert_fail(((52496)|0),((52520)|0),32,((52560)|0));
        // unreachable;
       }
       $3 = ($this);
       $4 = HEAP32[$3>>2]|0;
       $5 = (($this) + 8|0);
       $6 = HEAP8[$5]|0;
       $7 = ($6<<24>>24)==(0);
       if ($7) {
        $41 = ($4|0)==(256);
        if ($41) {
         STACKTOP = sp;return;
        }
        $42 = (($io) + ($count<<1)|0);
        $43 = ($count|0)>(0);
        if ($43) {
         $$12 = $io;
        } else {
         STACKTOP = sp;return;
        }
        while(1) {
         $44 = HEAP16[$$12>>1]|0;
         $45 = $44 << 16 >> 16;
         $46 = Math_imul($45, $4)|0;
         $47 = $46 >> 8;
         $sext = $47 << 16;
         $48 = $sext >> 16;
         $49 = ($48|0)==($47|0);
         if ($49) {
          $s1$0 = $47;
         } else {
          $50 = $46 >> 31;
          $51 = $50 ^ 32767;
          $s1$0 = $51;
         }
         $52 = $s1$0&65535;
         $53 = (($$12) + 2|0);
         HEAP16[$$12>>1] = $52;
         $54 = ($53>>>0)<($42>>>0);
         if ($54) {
          $$12 = $53;
         } else {
          break;
         }
        }
        STACKTOP = sp;return;
       }
       $8 = (($this) + 4|0);
       $9 = HEAP32[$8>>2]|0;
       $10 = ($count|0)>(0);
       $11 = (($this) + 32|0);
       $12 = HEAP32[$11>>2]|0;
       $13 = (($this) + 28|0);
       $14 = HEAP32[$13>>2]|0;
       $15 = (($this) + 24|0);
       $16 = HEAP32[$15>>2]|0;
       if ($10) {
        $i$05 = 0;$p1$04 = $16;$pp1$03 = $14;$sum$06 = $12;
        while(1) {
         $17 = (($io) + ($i$05<<1)|0);
         $18 = HEAP16[$17>>1]|0;
         $19 = $18 << 16 >> 16;
         $20 = (($19) + ($p1$04))|0;
         $21 = ($19*3)|0;
         $22 = (($20) - ($pp1$03))|0;
         $23 = $sum$06 >> 10;
         $24 = Math_imul($22, $4)|0;
         $25 = $sum$06 >> $9;
         $26 = (($sum$06) - ($25))|0;
         $27 = (($26) + ($24))|0;
         $sext1 = $23 << 16;
         $28 = $sext1 >> 16;
         $29 = ($28|0)==($23|0);
         if ($29) {
          $s$0 = $23;
         } else {
          $30 = $sum$06 >> 31;
          $31 = $30 ^ 32767;
          $s$0 = $31;
         }
         $32 = $s$0&65535;
         HEAP16[$17>>1] = $32;
         $33 = (($i$05) + 2)|0;
         $34 = ($33|0)<($count|0);
         if ($34) {
          $sum$06$phi = $27;$pp1$03$phi = $20;$p1$04$phi = $21;$i$05 = $33;$sum$06 = $sum$06$phi;$pp1$03 = $pp1$03$phi;$p1$04 = $p1$04$phi;
         } else {
          $p1$0$lcssa = $21;$pp1$0$lcssa = $20;$sum$0$lcssa = $27;
          break;
         }
        }
       } else {
        $p1$0$lcssa = $16;$pp1$0$lcssa = $14;$sum$0$lcssa = $12;
       }
       HEAP32[$15>>2] = $p1$0$lcssa;
       HEAP32[$13>>2] = $pp1$0$lcssa;
       HEAP32[$11>>2] = $sum$0$lcssa;
       $35 = (($this) + 20|0);
       $36 = HEAP32[$35>>2]|0;
       $37 = (($this) + 16|0);
       $38 = HEAP32[$37>>2]|0;
       $39 = (($this) + 12|0);
       $40 = HEAP32[$39>>2]|0;
       if ($10) {
        $i$05$1 = 0;$p1$04$1 = $40;$pp1$03$1 = $38;$sum$06$1 = $36;
        while(1) {
         $$sum13 = $i$05$1 | 1;
         $55 = (($io) + ($$sum13<<1)|0);
         $56 = HEAP16[$55>>1]|0;
         $57 = $56 << 16 >> 16;
         $58 = (($57) + ($p1$04$1))|0;
         $59 = ($57*3)|0;
         $60 = (($58) - ($pp1$03$1))|0;
         $61 = $sum$06$1 >> 10;
         $62 = Math_imul($60, $4)|0;
         $63 = $sum$06$1 >> $9;
         $64 = (($sum$06$1) - ($63))|0;
         $65 = (($64) + ($62))|0;
         $sext1$1 = $61 << 16;
         $66 = $sext1$1 >> 16;
         $67 = ($66|0)==($61|0);
         if ($67) {
          $s$0$1 = $61;
         } else {
          $68 = $sum$06$1 >> 31;
          $69 = $68 ^ 32767;
          $s$0$1 = $69;
         }
         $70 = $s$0$1&65535;
         HEAP16[$55>>1] = $70;
         $71 = (($i$05$1) + 2)|0;
         $72 = ($71|0)<($count|0);
         if ($72) {
          $sum$06$1$phi = $65;$pp1$03$1$phi = $58;$p1$04$1$phi = $59;$i$05$1 = $71;$sum$06$1 = $sum$06$1$phi;$pp1$03$1 = $pp1$03$1$phi;$p1$04$1 = $p1$04$1$phi;
         } else {
          $p1$0$lcssa$1 = $59;$pp1$0$lcssa$1 = $58;$sum$0$lcssa$1 = $65;
          break;
         }
        }
       } else {
        $p1$0$lcssa$1 = $40;$pp1$0$lcssa$1 = $38;$sum$0$lcssa$1 = $36;
       }
       HEAP32[$39>>2] = $p1$0$lcssa$1;
       HEAP32[$37>>2] = $pp1$0$lcssa$1;
       HEAP32[$35>>2] = $sum$0$lcssa$1;
       STACKTOP = sp;return;
      }
      function __ZN7Vgm_EmuC2Ev($this) {
       $this = $this|0;
       var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       STACKTOP = STACKTOP + 80|0;
       $1 = sp;
       $2 = ($this);
       __ZN12Vgm_Emu_ImplC2Ev($2);
       $3 = $this;
       HEAP32[$3>>2] = (((52568) + 8|0));
       $4 = (($this) + 336|0);
       $5 = $4;
       HEAP32[$5>>2] = (((52568) + 104|0));
       $6 = (($this) + 3488|0);
       HEAP8[$6] = 0;
       $7 = (($this) + 3480|0);
       HEAP32[$7>>2] = 0;
       $8 = $this;
       __ZN8Gme_File8set_typeEPK11gme_type_t_($8,(52728));
       $9 = ($this);
       __ZN11Classic_Emu15set_voice_typesEPKi($9,((52696)));
       $10 = $this;
       __ZN9Music_Emu21set_silence_lookaheadEi($10,1);
       __ZN9Music_Emu14make_equalizerEdd($1,-14.0,80.0);
       __ZN9Music_Emu13set_equalizerERK15gme_equalizer_t($10,$1);
       STACKTOP = sp;return;
      }
      function __ZN12Vgm_Emu_ImplC2Ev($this) {
       $this = $this|0;
       var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       __ZN11Classic_EmuC2Ev($1);
       $2 = (($this) + 336|0);
       $3 = $2;
       __ZN14Dual_ResamplerC2Ev($3);
       $4 = $this;
       HEAP32[$4>>2] = (((53344) + 8|0));
       $5 = $2;
       HEAP32[$5>>2] = (((53344) + 104|0));
       $6 = (($this) + 1240|0);
       __ZN6Ym_EmuI10Ym2612_EmuEC1Ev($6);
       $7 = (($this) + 1252|0);
       __ZN6Ym_EmuI10Ym2413_EmuEC1Ev($7);
       $8 = (($this) + 1264|0);
       __ZN11Blip_BufferC2Ev($8);
       $9 = (($this) + 1312|0);
       __ZN7Sms_ApuC2Ev($9);
       $10 = (($this) + 2912|0);
       __ZN10Blip_SynthILi8ELi1EEC1Ev($10);
       STACKTOP = sp;return;
      }
      function __ZN12Vgm_Emu_ImplD2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $this;
       HEAP32[$1>>2] = (((53344) + 8|0));
       $2 = (($this) + 336|0);
       $3 = $2;
       HEAP32[$3>>2] = (((53344) + 104|0));
       $4 = (($this) + 1264|0);
       __ZN11Blip_BufferD2Ev($4);
       $5 = (($this) + 1252|0);
       __ZN6Ym_EmuI10Ym2413_EmuED1Ev($5);
       $6 = (($this) + 1240|0);
       __ZN6Ym_EmuI10Ym2612_EmuED1Ev($6);
       $7 = $2;
       __ZN14Dual_ResamplerD2Ev($7);
       $8 = ($this);
       __ZN11Classic_EmuD2Ev($8);
       STACKTOP = sp;return;
      }
      function __ZN7Vgm_EmuD0Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       __ZN7Vgm_EmuD2Ev($this);
       $1 = ($this);
       __ZN8Gme_FiledlEPv($1);
       STACKTOP = sp;return;
      }
      function __ZThn336_N7Vgm_EmuD0Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + -336|0);
       $2 = $1;
       __ZN7Vgm_EmuD0Ev($2);
       STACKTOP = sp;return;
      }
      function __ZN7Vgm_EmuD2Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       __ZN12Vgm_Emu_ImplD2Ev($1);
       STACKTOP = sp;return;
      }
      function __ZThn336_N7Vgm_EmuD1Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + -336|0);
       $2 = $1;
       __ZN7Vgm_EmuD2Ev($2);
       STACKTOP = sp;return;
      }
      function __ZNK7Vgm_Emu8gd3_dataEPi($this,$size) {
       $this = $this|0;
       $size = $size|0;
       var $$0 = 0, $$mux = 0, $$not = 0, $$sum = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
       var $9 = 0, $brmerge = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($size|0)!=(0|0);
       if ($1) {
        HEAP32[$size>>2] = 0;
       }
       $2 = (__ZNK7Vgm_Emu6headerEv($this)|0);
       $3 = (($2) + 20|0);
       $4 = (__Z8get_le32PKv($3)|0);
       $5 = (($4) + -44)|0;
       $6 = ($5|0)<(0);
       if ($6) {
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
       }
       $7 = (($this) + 1204|0);
       $8 = HEAP32[$7>>2]|0;
       $$sum = (($4) + 20)|0;
       $9 = (($8) + ($$sum)|0);
       $10 = (($this) + 1212|0);
       $11 = HEAP32[$10>>2]|0;
       $12 = $11;
       $13 = $9;
       $14 = (($12) - ($13))|0;
       $15 = (__ZL16check_gd3_headerPKhl($9,$14)|0);
       $16 = ($15|0)==(0);
       $$not = $1 ^ 1;
       $brmerge = $16 | $$not;
       $$mux = $16 ? 0 : $9;
       if ($brmerge) {
        $$0 = $$mux;
        STACKTOP = sp;return ($$0|0);
       }
       $17 = (($15) + 12)|0;
       HEAP32[$size>>2] = $17;
       $$0 = $9;
       STACKTOP = sp;return ($$0|0);
      }
      function __ZNK7Vgm_Emu6headerEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 1204|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = $2;
       STACKTOP = sp;return ($3|0);
      }
      function __ZL16check_gd3_headerPKhl($h,$remain) {
       $h = $h|0;
       $remain = $remain|0;
       var $$ = 0, $$0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($remain|0)<(12);
       do {
        if ($1) {
         $$0 = 0;
        } else {
         $2 = (_memcmp($h,(53192),4)|0);
         $3 = ($2|0)==(0);
         if (!($3)) {
          $$0 = 0;
          break;
         }
         $4 = (($h) + 4|0);
         $5 = (__Z8get_le32PKv($4)|0);
         $6 = ($5>>>0)>(511);
         if ($6) {
          $$0 = 0;
          break;
         }
         $7 = (($h) + 8|0);
         $8 = (__Z8get_le32PKv($7)|0);
         $9 = (($remain) + -12)|0;
         $10 = ($8|0)>($9|0);
         $$ = $10 ? 0 : $8;
         $$0 = $$;
        }
       } while(0);
       STACKTOP = sp;return ($$0|0);
      }
      function __ZNK7Vgm_Emu11track_info_EP12track_info_ti($this,$out,u$0) {
       $this = $this|0;
       $out = $out|0;
       u$0 = u$0|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $size = 0, label = 0, sp = 0;
       sp = STACKTOP;
       STACKTOP = STACKTOP + 8|0;
       $size = sp;
       $1 = (__ZNK7Vgm_Emu6headerEv($this)|0);
       __ZL14get_vgm_lengthRKN7Vgm_Emu8header_tEP12track_info_t($1,$out);
       $2 = (__ZNK7Vgm_Emu8gd3_dataEPi($this,$size)|0);
       $3 = ($2|0)==(0|0);
       if ($3) {
        STACKTOP = sp;return (0|0);
       }
       $4 = (($2) + 12|0);
       $5 = HEAP32[$size>>2]|0;
       $6 = (($2) + ($5)|0);
       __ZL9parse_gd3PKhS0_P12track_info_t($4,$6,$out);
       STACKTOP = sp;return (0|0);
      }
      function __ZL14get_vgm_lengthRKN7Vgm_Emu8header_tEP12track_info_t($h,$out) {
       $h = $h|0;
       $out = $out|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
       var sp = 0;
       sp = STACKTOP;
       $1 = (($h) + 24|0);
       $2 = (__Z8get_le32PKv($1)|0);
       $3 = ($2*10)|0;
       $4 = (($3>>>0) / 441)&-1;
       $5 = ($3>>>0)>(440);
       if (!($5)) {
        STACKTOP = sp;return;
       }
       $6 = (($h) + 32|0);
       $7 = (__Z8get_le32PKv($6)|0);
       $8 = ($7|0)>(0);
       do {
        if ($8) {
         $9 = (($h) + 28|0);
         $10 = (__Z8get_le32PKv($9)|0);
         $11 = ($10|0)==(0);
         if ($11) {
          break;
         }
         $12 = ($7*10)|0;
         $13 = (($12|0) / 441)&-1;
         $14 = (($out) + 12|0);
         HEAP32[$14>>2] = $13;
         $15 = (($4) - ($13))|0;
         $16 = (($out) + 8|0);
         HEAP32[$16>>2] = $15;
         STACKTOP = sp;return;
        }
       } while(0);
       $17 = (($out) + 4|0);
       HEAP32[$17>>2] = $4;
       $18 = (($out) + 8|0);
       HEAP32[$18>>2] = $4;
       $19 = (($out) + 12|0);
       HEAP32[$19>>2] = 0;
       STACKTOP = sp;return;
      }
      function __ZL9parse_gd3PKhS0_P12track_info_t($in,$end,$out) {
       $in = $in|0;
       $end = $end|0;
       $out = $out|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($out) + 528|0);
       $2 = (__ZL12get_gd3_pairPKhS0_Pc($in,$end,$1)|0);
       $3 = (($out) + 272|0);
       $4 = (__ZL12get_gd3_pairPKhS0_Pc($2,$end,$3)|0);
       $5 = (($out) + 16|0);
       $6 = (__ZL12get_gd3_pairPKhS0_Pc($4,$end,$5)|0);
       $7 = (($out) + 784|0);
       $8 = (__ZL12get_gd3_pairPKhS0_Pc($6,$end,$7)|0);
       $9 = (($out) + 1040|0);
       $10 = (__ZL11get_gd3_strPKhS0_Pc($8,$end,$9)|0);
       $11 = (($out) + 1552|0);
       $12 = (__ZL12get_gd3_pairPKhS0_Pc($10,$end,$11)|0);
       $13 = (($out) + 1296|0);
       (__ZL11get_gd3_strPKhS0_Pc($12,$end,$13)|0);
       STACKTOP = sp;return;
      }
      function __ZN7Vgm_Emu10set_tempo_Ed($this,$t) {
       $this = $this|0;
       $t = +$t;
       var $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0;
       var $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 3480|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = ($2|0)==(0);
       if ($3) {
        STACKTOP = sp;return;
       }
       $4 = $t * 44100.0;
       $5 = $4 + 0.5;
       $6 = (~~(($5)));
       $7 = (($this) + 3484|0);
       HEAP32[$7>>2] = $6;
       $8 = (+($6|0));
       $9 = 4096.0 / $8;
       $10 = HEAP32[$1>>2]|0;
       $11 = (+($10|0));
       $12 = $9 * $11;
       $13 = $12 + 0.5;
       $14 = (+Math_floor((+$13)));
       $15 = (~~(($14)));
       $16 = (($this) + 1200|0);
       HEAP32[$16>>2] = $15;
       $17 = (($this) + 3472|0);
       $18 = +HEAPF64[$17>>3];
       $19 = $18 * 4096.0;
       $20 = HEAP32[$7>>2]|0;
       $21 = (+($20|0));
       $22 = $19 / $21;
       $23 = $22 + 0.5;
       $24 = (+Math_floor((+$23)));
       $25 = (~~(($24)));
       $26 = (($25) + 2)|0;
       $27 = (($this) + 1196|0);
       HEAP32[$27>>2] = $26;
       STACKTOP = sp;return;
      }
      function __ZN7Vgm_Emu16set_sample_rate_El($this,$sample_rate) {
       $this = $this|0;
       $sample_rate = $sample_rate|0;
       var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 1264|0);
       $2 = (__ZN11Blip_Buffer15set_sample_rateEli($1,$sample_rate,33)|0);
       $3 = ($2|0)==(0|0);
       if (!($3)) {
        $$0 = $2;
        STACKTOP = sp;return ($$0|0);
       }
       $4 = ($this);
       $5 = (__ZN11Classic_Emu16set_sample_rate_El($4,$sample_rate)|0);
       $$0 = $5;
       STACKTOP = sp;return ($$0|0);
      }
      function __ZN7Vgm_Emu9update_eqERK9blip_eq_t($this,$eq) {
       $this = $this|0;
       $eq = $eq|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 1312|0);
       __ZN7Sms_Apu9treble_eqERK9blip_eq_t($1,$eq);
       $2 = (($this) + 2912|0);
       __ZN10Blip_SynthILi8ELi1EE9treble_eqERK9blip_eq_t($2,$eq);
       STACKTOP = sp;return;
      }
      function __ZN7Vgm_Emu9set_voiceEiP11Blip_BufferS1_S1_($this,$i,$c,$l,$r) {
       $this = $this|0;
       $i = $i|0;
       $c = $c|0;
       $l = $l|0;
       $r = $r|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($i|0)<(4);
       if (!($1)) {
        STACKTOP = sp;return;
       }
       $2 = (($this) + 1312|0);
       __ZN7Sms_Apu10osc_outputEiP11Blip_BufferS1_S1_($2,$i,$c,$l,$r);
       STACKTOP = sp;return;
      }
      function __ZN7Vgm_Emu12mute_voices_Ei($this,$mask) {
       $this = $this|0;
       $mask = $mask|0;
       var $$ = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
       var $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       __ZN11Classic_Emu12mute_voices_Ei($1,$mask);
       $2 = (($this) + 2912|0);
       $3 = (($this) + 1264|0);
       __ZN10Blip_SynthILi8ELi1EE6outputEP11Blip_Buffer($2,$3);
       $4 = (($this) + 3489|0);
       $5 = HEAP8[$4]|0;
       $6 = ($5<<24>>24)==(0);
       if ($6) {
        STACKTOP = sp;return;
       }
       $7 = (($this) + 1312|0);
       $8 = $mask & 128;
       $9 = ($8|0)==(0);
       $$ = $9 ? $3 : 0;
       __ZN7Sms_Apu6outputEP11Blip_Buffer($7,$$);
       $10 = (($this) + 1240|0);
       $11 = (__ZNK6Ym_EmuI10Ym2612_EmuE7enabledEv($10)|0);
       if ($11) {
        $12 = $mask & 64;
        $13 = ($12|0)==(0);
        if ($13) {
         $14 = $this;
         $15 = (+__ZNK9Music_Emu4gainEv($14));
         $16 = $15 * 0.00130664062500000007633;
         $17 = $16;
        } else {
         $17 = 0.0;
        }
        __ZN10Blip_SynthILi8ELi1EE6volumeEd($2,$17);
        $18 = ($10);
        __ZN10Ym2612_Emu11mute_voicesEi($18,$mask);
       }
       $19 = (($this) + 1252|0);
       $20 = (__ZNK6Ym_EmuI10Ym2413_EmuE7enabledEv($19)|0);
       if (!($20)) {
        STACKTOP = sp;return;
       }
       STACKTOP = sp;return;
      }
      function __ZN10Blip_SynthILi8ELi1EE6outputEP11Blip_Buffer($this,$b) {
       $this = $this|0;
       $b = $b|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       HEAP32[$1>>2] = $b;
       $2 = (($this) + 4|0);
       HEAP32[$2>>2] = 0;
       STACKTOP = sp;return;
      }
      function __ZNK6Ym_EmuI10Ym2612_EmuE7enabledEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 4|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = ($2|0)!=(-1);
       STACKTOP = sp;return ($3|0);
      }
      function __ZNK6Ym_EmuI10Ym2413_EmuE7enabledEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 4|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = ($2|0)!=(-1);
       STACKTOP = sp;return ($3|0);
      }
      function __ZN7Vgm_Emu9load_mem_EPKhl($this,$new_data,$new_size) {
       $this = $this|0;
       $new_data = $new_data|0;
       $new_size = $new_size|0;
       var $$ = 0, $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
       var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($new_size|0)<(65);
       if ($1) {
        $2 = HEAP32[(40024)>>2]|0;
        $$0 = $2;
        STACKTOP = sp;return ($$0|0);
       }
       $3 = $new_data;
       $4 = (__ZL16check_vgm_headerRKN7Vgm_Emu8header_tE($3)|0);
       $5 = ($4|0)==(0|0);
       if (!($5)) {
        $$0 = $4;
        STACKTOP = sp;return ($$0|0);
       }
       $6 = (($new_data) + 12|0);
       $7 = (__Z8get_le32PKv($6)|0);
       $8 = (($this) + 3480|0);
       $9 = ($7|0)==(0);
       $$ = $9 ? 3579545 : $7;
       HEAP32[$8>>2] = $$;
       $10 = (($this) + 1264|0);
       __ZN11Blip_Buffer10clock_rateEl($10,$$);
       $11 = (($this) + 1204|0);
       HEAP32[$11>>2] = $new_data;
       $12 = (($new_data) + ($new_size)|0);
       $13 = (($this) + 1212|0);
       HEAP32[$13>>2] = $12;
       $14 = (($this) + 1208|0);
       HEAP32[$14>>2] = $12;
       $15 = (($new_data) + 28|0);
       $16 = (__Z8get_le32PKv($15)|0);
       $17 = ($16|0)==(0);
       if (!($17)) {
        $18 = (($16) + 28)|0;
        $19 = HEAP32[$11>>2]|0;
        $20 = (($19) + ($18)|0);
        HEAP32[$14>>2] = $20;
       }
       $21 = $this;
       __ZN9Music_Emu15set_voice_countEi($21,4);
       $22 = (__ZN7Vgm_Emu8setup_fmEv($this)|0);
       $23 = ($22|0)==(0|0);
       if (!($23)) {
        $$0 = $22;
        STACKTOP = sp;return ($$0|0);
       }
       $24 = (($this) + 3489|0);
       $25 = HEAP8[$24]|0;
       $26 = ($25<<24>>24)!=(0);
       $27 = $26 ? ((52784)) : ((52880));
       __ZN9Music_Emu15set_voice_namesEPKPKc($21,$27);
       $28 = ($this);
       $29 = HEAP32[$8>>2]|0;
       $30 = (__ZN11Classic_Emu12setup_bufferEl($28,$29)|0);
       $$0 = $30;
       STACKTOP = sp;return ($$0|0);
      }
      function __ZL16check_vgm_headerRKN7Vgm_Emu8header_tE($h) {
       $h = $h|0;
       var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($h);
       $2 = (_memcmp($1,(53032),4)|0);
       $3 = ($2|0)==(0);
       $4 = HEAP32[(40024)>>2]|0;
       $$0 = $3 ? 0 : $4;
       STACKTOP = sp;return ($$0|0);
      }
      function __ZN7Vgm_Emu8setup_fmEv($this) {
       $this = $this|0;
       var $$0 = 0, $$pr = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0;
       var $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0;
       var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0;
       var $62 = 0, $63 = 0, $64 = 0.0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0;
       var $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $9 = 0, $ym2413_rate = 0, $ym2612_rate = 0, label = 0, sp = 0;
       sp = STACKTOP;
       STACKTOP = STACKTOP + 16|0;
       $ym2612_rate = sp;
       $ym2413_rate = sp + 8|0;
       $1 = (__ZNK7Vgm_Emu6headerEv($this)|0);
       $2 = (($1) + 44|0);
       $3 = (__Z8get_le32PKv($2)|0);
       HEAP32[$ym2612_rate>>2] = $3;
       $4 = (__ZNK7Vgm_Emu6headerEv($this)|0);
       $5 = (($4) + 16|0);
       $6 = (__Z8get_le32PKv($5)|0);
       HEAP32[$ym2413_rate>>2] = $6;
       $7 = ($6|0)==(0);
       do {
        if (!($7)) {
         $8 = (__ZNK7Vgm_Emu6headerEv($this)|0);
         $9 = (($8) + 8|0);
         $10 = (__Z8get_le32PKv($9)|0);
         $11 = ($10>>>0)<(272);
         if (!($11)) {
          break;
         }
         $12 = ($this);
         __ZNK12Vgm_Emu_Impl15update_fm_ratesEPlS0_($12,$ym2413_rate,$ym2612_rate);
        }
       } while(0);
       $13 = (($this) + 3489|0);
       HEAP8[$13] = 0;
       $14 = (($this) + 1264|0);
       $15 = (__ZNK11Blip_Buffer11sample_rateEv($14)|0);
       $16 = (+($15|0));
       $17 = $16 * 1.5;
       $18 = (($this) + 3472|0);
       HEAPF64[$18>>3] = $17;
       $19 = HEAP32[$ym2612_rate>>2]|0;
       $20 = ($19|0)==(0);
       do {
        if (!($20)) {
         HEAP8[$13] = 1;
         $21 = (($this) + 3488|0);
         $22 = HEAP8[$21]|0;
         $23 = ($22<<24>>24)==(0);
         if (!($23)) {
          $24 = HEAP32[$ym2612_rate>>2]|0;
          $25 = (+($24|0));
          $26 = $25 / 144.0;
          HEAPF64[$18>>3] = $26;
         }
         $27 = (($this) + 336|0);
         $28 = $27;
         $29 = +HEAPF64[$18>>3];
         $30 = (__ZNK11Blip_Buffer11sample_rateEv($14)|0);
         $31 = (+($30|0));
         $32 = $29 / $31;
         $33 = $this;
         $34 = (+__ZNK9Music_Emu4gainEv($33));
         $35 = $34 * 3.0;
         (+__ZN14Dual_Resampler5setupEddd($28,$32,0.989999999999999991118,$35));
         $36 = (($this) + 1240|0);
         $37 = ($36);
         $38 = +HEAPF64[$18>>3];
         $39 = HEAP32[$ym2612_rate>>2]|0;
         $40 = (+($39|0));
         $41 = (__ZN10Ym2612_Emu8set_rateEdd($37,$38,$40)|0);
         $42 = ($41|0)==(0|0);
         if ($42) {
          __ZN6Ym_EmuI10Ym2612_EmuE6enableEb($36,1);
          __ZN9Music_Emu15set_voice_countEi($33,8);
          break;
         } else {
          $$0 = $41;
          STACKTOP = sp;return ($$0|0);
         }
        }
       } while(0);
       $43 = HEAP8[$13]|0;
       $44 = ($43<<24>>24)==(0);
       do {
        if ($44) {
         $45 = HEAP32[$ym2413_rate>>2]|0;
         $46 = ($45|0)==(0);
         do {
          if (!($46)) {
           HEAP8[$13] = 1;
           $47 = (($this) + 3488|0);
           $48 = HEAP8[$47]|0;
           $49 = ($48<<24>>24)==(0);
           if (!($49)) {
            $50 = HEAP32[$ym2413_rate>>2]|0;
            $51 = (+($50|0));
            $52 = $51 / 72.0;
            HEAPF64[$18>>3] = $52;
           }
           $53 = (($this) + 336|0);
           $54 = $53;
           $55 = +HEAPF64[$18>>3];
           $56 = (__ZNK11Blip_Buffer11sample_rateEv($14)|0);
           $57 = (+($56|0));
           $58 = $55 / $57;
           $59 = $this;
           $60 = (+__ZNK9Music_Emu4gainEv($59));
           $61 = $60 * 3.0;
           (+__ZN14Dual_Resampler5setupEddd($54,$58,0.989999999999999991118,$61));
           $62 = (($this) + 1252|0);
           $63 = ($62);
           $64 = +HEAPF64[$18>>3];
           $65 = HEAP32[$ym2413_rate>>2]|0;
           $66 = (+($65|0));
           $67 = (__ZN10Ym2413_Emu8set_rateEdd($63,$64,$66)|0);
           if ((($67|0) == 0)) {
            __ZN6Ym_EmuI10Ym2413_EmuE6enableEb($62,1);
            __ZN9Music_Emu15set_voice_countEi($59,8);
            break;
           } else if ((($67|0) == 2)) {
            $$0 = (52952);
            STACKTOP = sp;return ($$0|0);
           } else {
            $$0 = (52984);
            STACKTOP = sp;return ($$0|0);
           }
          }
         } while(0);
         $$pr = HEAP8[$13]|0;
         $68 = ($$pr<<24>>24)==(0);
         if (!($68)) {
          break;
         }
         $81 = (($this) + 1240|0);
         __ZN6Ym_EmuI10Ym2612_EmuE6enableEb($81,0);
         $82 = (($this) + 1252|0);
         __ZN6Ym_EmuI10Ym2413_EmuE6enableEb($82,0);
         $83 = (($this) + 1312|0);
         $84 = $this;
         $85 = (+__ZNK9Music_Emu4gainEv($84));
         __ZN7Sms_Apu6volumeEd($83,$85);
         $$0 = 0;
         STACKTOP = sp;return ($$0|0);
        }
       } while(0);
       $69 = (($this) + 336|0);
       $70 = $69;
       $71 = (__ZNK11Blip_Buffer6lengthEv($14)|0);
       $72 = (__ZNK11Blip_Buffer11sample_rateEv($14)|0);
       $73 = Math_imul($72, $71)|0;
       $74 = (($73|0) / 1000)&-1;
       $75 = (__ZN14Dual_Resampler5resetEi($70,$74)|0);
       $76 = ($75|0)==(0|0);
       if (!($76)) {
        $$0 = $75;
        STACKTOP = sp;return ($$0|0);
       }
       $77 = (($this) + 1312|0);
       $78 = $this;
       $79 = (+__ZNK9Music_Emu4gainEv($78));
       $80 = $79 * 0.405000000000000026645;
       __ZN7Sms_Apu6volumeEd($77,$80);
       $$0 = 0;
       STACKTOP = sp;return ($$0|0);
      }
      function __ZN6Ym_EmuI10Ym2612_EmuE6enableEb($this,$b) {
       $this = $this|0;
       $b = $b|0;
       var $1 = 0, $2 = 0, $not$b = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $not$b = $b ^ 1;
       $1 = $not$b << 31 >> 31;
       $2 = (($this) + 4|0);
       HEAP32[$2>>2] = $1;
       STACKTOP = sp;return;
      }
      function __ZN6Ym_EmuI10Ym2413_EmuE6enableEb($this,$b) {
       $this = $this|0;
       $b = $b|0;
       var $1 = 0, $2 = 0, $not$b = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $not$b = $b ^ 1;
       $1 = $not$b << 31 >> 31;
       $2 = (($this) + 4|0);
       HEAP32[$2>>2] = $1;
       STACKTOP = sp;return;
      }
      function __ZN7Vgm_Emu12start_track_Ei($this,$track) {
       $this = $this|0;
       $track = $track|0;
       var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
       var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
       var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = (__ZN11Classic_Emu12start_track_Ei($1,$track)|0);
       $3 = ($2|0)==(0|0);
       if (!($3)) {
        $$0 = $2;
        STACKTOP = sp;return ($$0|0);
       }
       $4 = (($this) + 1312|0);
       $5 = (__ZNK7Vgm_Emu6headerEv($this)|0);
       $6 = (($5) + 40|0);
       $7 = (__Z8get_le16PKv($6)|0);
       $8 = (($5) + 42|0);
       $9 = HEAP8[$8]|0;
       $10 = $9&255;
       __ZN7Sms_Apu5resetEji($4,$7,$10);
       $11 = (($this) + 1236|0);
       HEAP32[$11>>2] = -1;
       $12 = (($this) + 1204|0);
       $13 = HEAP32[$12>>2]|0;
       $14 = (($13) + 64|0);
       $15 = (($this) + 1220|0);
       HEAP32[$15>>2] = $14;
       $16 = (($this) + 1224|0);
       HEAP32[$16>>2] = $14;
       $17 = HEAP32[$15>>2]|0;
       $18 = (($this) + 1228|0);
       HEAP32[$18>>2] = $17;
       $19 = (($this) + 1232|0);
       HEAP32[$19>>2] = -1;
       $20 = (($this) + 1216|0);
       HEAP32[$20>>2] = 0;
       $21 = (__ZNK7Vgm_Emu6headerEv($this)|0);
       $22 = (($21) + 8|0);
       $23 = (__Z8get_le32PKv($22)|0);
       $24 = ($23>>>0)>(335);
       do {
        if ($24) {
         $25 = (($21) + 52|0);
         $26 = (__Z8get_le32PKv($25)|0);
         $27 = ($26|0)==(0);
         if ($27) {
          break;
         }
         $28 = (($26) + -12)|0;
         $29 = HEAP32[$15>>2]|0;
         $30 = (($29) + ($28)|0);
         HEAP32[$15>>2] = $30;
        }
       } while(0);
       $31 = (($this) + 3489|0);
       $32 = HEAP8[$31]|0;
       $33 = ($32<<24>>24)==(0);
       if ($33) {
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
       }
       $34 = (($this) + 1252|0);
       $35 = (__ZNK6Ym_EmuI10Ym2413_EmuE7enabledEv($34)|0);
       if ($35) {
       }
       $36 = (($this) + 1240|0);
       $37 = (__ZNK6Ym_EmuI10Ym2612_EmuE7enabledEv($36)|0);
       if ($37) {
        $38 = ($36);
        __ZN10Ym2612_Emu5resetEv($38);
       }
       $39 = (($this) + 1192|0);
       HEAP32[$39>>2] = 0;
       $40 = (($this) + 1264|0);
       __ZN11Blip_Buffer5clearEi($40,1);
       $41 = (($this) + 336|0);
       $42 = $41;
       __ZN14Dual_Resampler5clearEv($42);
       $$0 = 0;
       STACKTOP = sp;return ($$0|0);
      }
      function __ZN7Vgm_Emu10run_clocksERii($this,$time_io,$msec) {
       $this = $this|0;
       $time_io = $time_io|0;
       $msec = $msec|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = (($this) + 3484|0);
       $3 = HEAP32[$2>>2]|0;
       $4 = Math_imul($3, $msec)|0;
       $5 = (($4|0) / 1000)&-1;
       $6 = (__ZN12Vgm_Emu_Impl12run_commandsEi($1,$5)|0);
       HEAP32[$time_io>>2] = $6;
       $7 = (($this) + 1312|0);
       __ZN7Sms_Apu9end_frameEi($7,$6);
       STACKTOP = sp;return (0|0);
      }
      function __ZN7Vgm_Emu5play_ElPs($this,$count,$out) {
       $this = $this|0;
       $count = $count|0;
       $out = $out|0;
       var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 3489|0);
       $2 = HEAP8[$1]|0;
       $3 = ($2<<24>>24)==(0);
       if ($3) {
        $4 = ($this);
        $5 = (__ZN11Classic_Emu5play_ElPs($4,$count,$out)|0);
        $$0 = $5;
        STACKTOP = sp;return ($$0|0);
       } else {
        $6 = (($this) + 336|0);
        $7 = $6;
        $8 = (($this) + 1264|0);
        __ZN14Dual_Resampler9dual_playElPsR11Blip_Buffer($7,$count,$out,$8);
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
       }
       return 0|0;
      }
      function __ZL11new_vgm_emuv() {
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (__ZN8Gme_FilenwEj(3496)|0);
       $2 = ($1|0)==(0|0);
       if ($2) {
        $4 = 0;
       } else {
        $3 = $1;
        __ZN7Vgm_EmuC2Ev($3);
        $4 = $3;
       }
       $5 = $4;
       STACKTOP = sp;return ($5|0);
      }
      function __ZL12new_vgm_filev() {
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (__ZN8Gme_FilenwEj(392)|0);
       $2 = ($1|0)==(0|0);
       if ($2) {
        $4 = 0;
       } else {
        $3 = $1;
        __ZN8Vgm_FileC1Ev($3);
        $4 = $3;
       }
       $5 = $4;
       STACKTOP = sp;return ($5|0);
      }
      function __ZN8Vgm_FileC1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN8Vgm_FileC2Ev($this);
       STACKTOP = sp;return;
      }
      function __ZN8Vgm_FileC2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $this;
       __ZN9Gme_Info_C2Ev($1);
       $2 = $this;
       HEAP32[$2>>2] = (((53072) + 8|0));
       $3 = (($this) + 380|0);
       __ZN13blargg_vectorIhEC1Ev($3);
       $4 = $this;
       __ZN8Gme_File8set_typeEPK11gme_type_t_($4,(52728));
       STACKTOP = sp;return;
      }
      function __ZN8Vgm_FileD1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN8Vgm_FileD2Ev($this);
       STACKTOP = sp;return;
      }
      function __ZN8Vgm_FileD0Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       __ZN8Vgm_FileD1Ev($this);
       $1 = ($this);
       __ZN8Gme_FiledlEPv($1);
       STACKTOP = sp;return;
      }
      function __ZN8Vgm_File5load_ER11Data_Reader($this,$in) {
       $this = $this|0;
       $in = $in|0;
       var $$0 = 0, $$neg = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
       var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
       var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gd3_h = 0, $or$cond = 0, label = 0, sp = 0;
       sp = STACKTOP;
       STACKTOP = STACKTOP + 16|0;
       $gd3_h = sp;
       $1 = $in;
       $2 = HEAP32[$1>>2]|0;
       $3 = (($2) + 16|0);
       $4 = HEAP32[$3>>2]|0;
       $5 = (FUNCTION_TABLE_ii[$4 & 15]($in)|0);
       $6 = ($5|0)<(65);
       if ($6) {
        $7 = HEAP32[(40024)>>2]|0;
        $$0 = $7;
        STACKTOP = sp;return ($$0|0);
       }
       $8 = $in;
       $9 = HEAP32[$8>>2]|0;
       $10 = (($9) + 12|0);
       $11 = HEAP32[$10>>2]|0;
       $12 = (($this) + 316|0);
       $13 = ($12);
       $14 = (FUNCTION_TABLE_iiii[$11 & 63]($in,$13,64)|0);
       $15 = ($14|0)==(0|0);
       if (!($15)) {
        $$0 = $14;
        STACKTOP = sp;return ($$0|0);
       }
       $16 = (__ZL16check_vgm_headerRKN7Vgm_Emu8header_tE($12)|0);
       $17 = ($16|0)==(0|0);
       if (!($17)) {
        $$0 = $16;
        STACKTOP = sp;return ($$0|0);
       }
       $18 = (($this) + 336|0);
       $19 = (__Z8get_le32PKv($18)|0);
       $20 = (($19) + -44)|0;
       $21 = (($5) + -64)|0;
       $$neg = (44 - ($19))|0;
       $22 = (($21) + ($$neg))|0;
       $23 = ($20|0)>(0);
       $24 = ($22|0)>(11);
       $or$cond = $23 & $24;
       do {
        if ($or$cond) {
         $25 = $in;
         $26 = HEAP32[$25>>2]|0;
         $27 = (($26) + 20|0);
         $28 = HEAP32[$27>>2]|0;
         $29 = (FUNCTION_TABLE_iii[$28 & 63]($in,$20)|0);
         $30 = ($29|0)==(0|0);
         if (!($30)) {
          $$0 = $29;
          STACKTOP = sp;return ($$0|0);
         }
         $31 = HEAP32[$8>>2]|0;
         $32 = (($31) + 12|0);
         $33 = HEAP32[$32>>2]|0;
         $34 = ($gd3_h);
         $35 = (FUNCTION_TABLE_iiii[$33 & 63]($in,$34,12)|0);
         $36 = ($35|0)==(0|0);
         if (!($36)) {
          $$0 = $35;
          STACKTOP = sp;return ($$0|0);
         }
         $37 = (__ZL16check_gd3_headerPKhl($34,$22)|0);
         $38 = ($37|0)==(0);
         if ($38) {
          break;
         }
         $39 = (($this) + 380|0);
         $40 = (__ZN13blargg_vectorIhE6resizeEj($39,$37)|0);
         $41 = ($40|0)==(0|0);
         if (!($41)) {
          $$0 = $40;
          STACKTOP = sp;return ($$0|0);
         }
         $42 = HEAP32[$8>>2]|0;
         $43 = (($42) + 12|0);
         $44 = HEAP32[$43>>2]|0;
         $45 = (__ZNK13blargg_vectorIhE5beginEv($39)|0);
         $46 = (__ZNK13blargg_vectorIhE4sizeEv($39)|0);
         $47 = (FUNCTION_TABLE_iiii[$44 & 63]($in,$45,$46)|0);
         $48 = ($47|0)==(0|0);
         if ($48) {
          break;
         } else {
          $$0 = $47;
         }
         STACKTOP = sp;return ($$0|0);
        }
       } while(0);
       $$0 = 0;
       STACKTOP = sp;return ($$0|0);
      }
      function __ZNK8Vgm_File11track_info_EP12track_info_ti($this,$out,u$0) {
       $this = $this|0;
       $out = $out|0;
       u$0 = u$0|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 316|0);
       __ZL14get_vgm_lengthRKN7Vgm_Emu8header_tEP12track_info_t($1,$out);
       $2 = (($this) + 380|0);
       $3 = (__ZNK13blargg_vectorIhE4sizeEv($2)|0);
       $4 = ($3|0)==(0);
       if ($4) {
        STACKTOP = sp;return (0|0);
       }
       $5 = (__ZNK13blargg_vectorIhE5beginEv($2)|0);
       $6 = (__ZNK13blargg_vectorIhE3endEv($2)|0);
       __ZL9parse_gd3PKhS0_P12track_info_t($5,$6,$out);
       STACKTOP = sp;return (0|0);
      }
      function __ZN8Vgm_FileD2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $this;
       HEAP32[$1>>2] = (((53072) + 8|0));
       $2 = (($this) + 380|0);
       __ZN13blargg_vectorIhED1Ev($2);
       $3 = $this;
       __ZN9Gme_Info_D2Ev($3);
       STACKTOP = sp;return;
      }
      function __ZL12get_gd3_pairPKhS0_Pc($in,$end,$field) {
       $in = $in|0;
       $end = $end|0;
       $field = $field|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (__ZL11get_gd3_strPKhS0_Pc($in,$end,$field)|0);
       $2 = (__ZL12skip_gd3_strPKhS0_($1,$end)|0);
       STACKTOP = sp;return ($2|0);
      }
      function __ZL11get_gd3_strPKhS0_Pc($in,$end,$field) {
       $in = $in|0;
       $end = $end|0;
       $field = $field|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
       var $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (__ZL12skip_gd3_strPKhS0_($in,$end)|0);
       $2 = $1;
       $3 = $in;
       $4 = (($2) - ($3))|0;
       $5 = (($4|0) / 2)&-1;
       $6 = (($5) + -1)|0;
       $7 = ($6|0)>(0);
       if (!($7)) {
        STACKTOP = sp;return ($1|0);
       }
       $8 = (__ZL3minii706($6)|0);
       $9 = (($field) + ($8)|0);
       HEAP8[$9] = 0;
       $10 = ($8|0)>(0);
       if ($10) {
        $i$01 = 0;
       } else {
        STACKTOP = sp;return ($1|0);
       }
       while(1) {
        $11 = $i$01 << 1;
        $12 = $11 | 1;
        $13 = (($in) + ($12)|0);
        $14 = HEAP8[$13]|0;
        $15 = ($14<<24>>24)==(0);
        if ($15) {
         $16 = (($in) + ($11)|0);
         $17 = HEAP8[$16]|0;
         $18 = $17;
        } else {
         $18 = 63;
        }
        $19 = (($field) + ($i$01)|0);
        HEAP8[$19] = $18;
        $20 = (($i$01) + 1)|0;
        $exitcond = ($20|0)==($8|0);
        if ($exitcond) {
         break;
        } else {
         $i$01 = $20;
        }
       }
       STACKTOP = sp;return ($1|0);
      }
      function __ZL12skip_gd3_strPKhS0_($in,$end) {
       $in = $in|0;
       $end = $end|0;
       var $$0 = 0, $$1 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $end;
       $$0 = $in;
       while(1) {
        $2 = $$0;
        $3 = (($1) - ($2))|0;
        $4 = ($3|0)>(1);
        if (!($4)) {
         $$1 = $$0;
         label = 4;
         break;
        }
        $5 = (($$0) + 2|0);
        $6 = HEAP8[$$0]|0;
        $7 = (($$0) + 1|0);
        $8 = HEAP8[$7]|0;
        $9 = $8 | $6;
        $10 = ($9<<24>>24)==(0);
        if ($10) {
         $$1 = $5;
         label = 4;
         break;
        } else {
         $$0 = $5;
        }
       }
       if ((label|0) == 4) {
        STACKTOP = sp;return ($$1|0);
       }
       return 0|0;
      }
      function __ZL3minii706($x) {
       $x = $x|0;
       var $1 = 0, $x$ = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($x|0)<(255);
       $x$ = $1 ? $x : 255;
       STACKTOP = sp;return ($x$|0);
      }
      function __ZN6Ym_EmuI10Ym2413_EmuED1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN6Ym_EmuI10Ym2413_EmuED2Ev($this);
       STACKTOP = sp;return;
      }
      function __ZN6Ym_EmuI10Ym2612_EmuED1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN6Ym_EmuI10Ym2612_EmuED2Ev($this);
       STACKTOP = sp;return;
      }
      function __ZN12Vgm_Emu_ImplD1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN12Vgm_Emu_ImplD2Ev($this);
       STACKTOP = sp;return;
      }
      function __ZN12Vgm_Emu_ImplD0Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       __ZN12Vgm_Emu_ImplD1Ev($this);
       $1 = ($this);
       __ZN8Gme_FiledlEPv($1);
       STACKTOP = sp;return;
      }
      function __ZThn336_N12Vgm_Emu_ImplD1Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + -336|0);
       $2 = $1;
       __ZN12Vgm_Emu_ImplD1Ev($2);
       STACKTOP = sp;return;
      }
      function __ZThn336_N12Vgm_Emu_ImplD0Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + -336|0);
       $2 = $1;
       __ZN12Vgm_Emu_ImplD0Ev($2);
       STACKTOP = sp;return;
      }
      function __ZN6Ym_EmuI10Ym2612_EmuED2Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       __ZN10Ym2612_EmuD2Ev($1);
       STACKTOP = sp;return;
      }
      function __ZN6Ym_EmuI10Ym2413_EmuED2Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       STACKTOP = sp;return;
      }
      function __ZN6Ym_EmuI10Ym2612_EmuEC1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN6Ym_EmuI10Ym2612_EmuEC2Ev($this);
       STACKTOP = sp;return;
      }
      function __ZN6Ym_EmuI10Ym2413_EmuEC1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       __ZN6Ym_EmuI10Ym2413_EmuEC2Ev($this);
       STACKTOP = sp;return;
      }
      function __ZN6Ym_EmuI10Ym2413_EmuEC2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 4|0);
       HEAP32[$1>>2] = -1;
       $2 = (($this) + 8|0);
       HEAP32[$2>>2] = 0;
       STACKTOP = sp;return;
      }
      function __ZN6Ym_EmuI10Ym2612_EmuEC2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       __ZN10Ym2612_EmuC2Ev($1);
       $2 = (($this) + 4|0);
       HEAP32[$2>>2] = -1;
       $3 = (($this) + 8|0);
       HEAP32[$3>>2] = 0;
       STACKTOP = sp;return;
      }
      function __ZN12Vgm_Emu_Impl9write_pcmEii($this,$vgm_time,$amp) {
       $this = $this|0;
       $vgm_time = $vgm_time|0;
       $amp = $amp|0;
       var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (__ZNK12Vgm_Emu_Impl12to_blip_timeEi($this,$vgm_time)|0);
       $2 = (($this) + 1232|0);
       $3 = HEAP32[$2>>2]|0;
       HEAP32[$2>>2] = $amp;
       $4 = ($3|0)>(-1);
       if ($4) {
        $5 = (($amp) - ($3))|0;
        $6 = (($this) + 2912|0);
        $7 = (($this) + 1264|0);
        __ZNK10Blip_SynthILi8ELi1EE13offset_inlineEiiP11Blip_Buffer($6,$1,$5,$7);
        STACKTOP = sp;return;
       } else {
        $8 = (($this) + 1236|0);
        $9 = HEAP32[$8>>2]|0;
        $10 = $9 | $amp;
        HEAP32[$2>>2] = $10;
        STACKTOP = sp;return;
       }
      }
      function __ZNK12Vgm_Emu_Impl12to_blip_timeEi($this,$t) {
       $this = $this|0;
       $t = $t|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 1200|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = Math_imul($2, $t)|0;
       $4 = $3 >> 12;
       STACKTOP = sp;return ($4|0);
      }
      function __ZN12Vgm_Emu_Impl12run_commandsEi($this,$end_time) {
       $this = $this|0;
       $end_time = $end_time|0;
       var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
       var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
       var $131 = 0, $132 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
       var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
       var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
       var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
       var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $pos$0$be = 0, $pos$0$lcssa = 0, $pos$05 = 0, $vgm_time$0$be = 0;
       var $vgm_time$0$lcssa = 0, $vgm_time$07 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 1216|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = (($this) + 1220|0);
       $4 = HEAP32[$3>>2]|0;
       $5 = (($this) + 1212|0);
       $6 = HEAP32[$5>>2]|0;
       $7 = ($4>>>0)<($6>>>0);
       do {
        if (!($7)) {
         $8 = $this;
         __ZN9Music_Emu15set_track_endedEv($8);
         $9 = HEAP32[$5>>2]|0;
         $10 = ($4>>>0)>($9>>>0);
         if (!($10)) {
          break;
         }
         $11 = $this;
         __ZN8Gme_File11set_warningEPKc($11,(53200));
        }
       } while(0);
       $12 = ($2|0)<($end_time|0);
       if (!($12)) {
        $pos$0$lcssa = $4;$vgm_time$0$lcssa = $2;
        $131 = (($vgm_time$0$lcssa) - ($end_time))|0;
        HEAP32[$3>>2] = $pos$0$lcssa;
        HEAP32[$1>>2] = $131;
        $132 = (__ZNK12Vgm_Emu_Impl12to_blip_timeEi($this,$end_time)|0);
        STACKTOP = sp;return ($132|0);
       }
       $13 = $this;
       $14 = (($this) + 1228|0);
       $15 = (($this) + 1208|0);
       $16 = (($this) + 1312|0);
       $17 = (($this) + 1312|0);
       $18 = (($this) + 1252|0);
       $19 = (($this) + 1240|0);
       $20 = (($this) + 1236|0);
       $21 = (($this) + 1232|0);
       $22 = ($19);
       $23 = (($this) + 1240|0);
       $24 = ($23);
       $25 = (($this) + 1224|0);
       $26 = (($this) + 1224|0);
       $27 = (($this) + 1228|0);
       $pos$05 = $4;$vgm_time$07 = $2;
       while(1) {
        $28 = HEAP32[$5>>2]|0;
        $29 = ($pos$05>>>0)<($28>>>0);
        if (!($29)) {
         $pos$0$lcssa = $pos$05;$vgm_time$0$lcssa = $vgm_time$07;
         label = 38;
         break;
        }
        $30 = (($pos$05) + 1|0);
        $31 = HEAP8[$pos$05]|0;
        $32 = $31&255;
        L11: do {
         switch ($32|0) {
         case 81:  {
          $57 = (__ZNK12Vgm_Emu_Impl10to_fm_timeEi($this,$vgm_time$07)|0);
          $58 = (__ZN6Ym_EmuI10Ym2413_EmuE9run_untilEi($18,$57)|0);
          $59 = ($58|0)==(0);
          if (!($59)) {
          }
          $60 = (($pos$05) + 3|0);
          $pos$0$be = $60;$vgm_time$0$be = $vgm_time$07;
          break;
         }
         case 82:  {
          $61 = HEAP8[$30]|0;
          $62 = ($61<<24>>24)==(42);
          do {
           if ($62) {
            $63 = (($pos$05) + 2|0);
            $64 = HEAP8[$63]|0;
            $65 = $64&255;
            __ZN12Vgm_Emu_Impl9write_pcmEii($this,$vgm_time$07,$65);
           } else {
            $66 = (__ZNK12Vgm_Emu_Impl10to_fm_timeEi($this,$vgm_time$07)|0);
            $67 = (__ZN6Ym_EmuI10Ym2612_EmuE9run_untilEi($19,$66)|0);
            $68 = ($67|0)==(0);
            if ($68) {
             break;
            }
            $69 = HEAP8[$30]|0;
            $70 = ($69<<24>>24)==(43);
            if ($70) {
             $71 = (($pos$05) + 2|0);
             $72 = HEAP8[$71]|0;
             $73 = $72&255;
             $74 = $73 >>> 7;
             $75 = (($74) + -1)|0;
             HEAP32[$20>>2] = $75;
             $76 = HEAP32[$21>>2]|0;
             $77 = $75 | $76;
             HEAP32[$21>>2] = $77;
            }
            $78 = HEAP8[$30]|0;
            $79 = $78&255;
            $80 = (($pos$05) + 2|0);
            $81 = HEAP8[$80]|0;
            $82 = $81&255;
            __ZN10Ym2612_Emu6write0Eii($22,$79,$82);
           }
          } while(0);
          $83 = (($pos$05) + 3|0);
          $pos$0$be = $83;$vgm_time$0$be = $vgm_time$07;
          break;
         }
         case 97:  {
          $44 = (($pos$05) + 2|0);
          $45 = HEAP8[$44]|0;
          $46 = $45&255;
          $47 = $46 << 8;
          $48 = HEAP8[$30]|0;
          $49 = $48&255;
          $50 = $47 | $49;
          $51 = (($50) + ($vgm_time$07))|0;
          $52 = (($pos$05) + 3|0);
          $pos$0$be = $52;$vgm_time$0$be = $51;
          break;
         }
         case 100:  {
          $53 = (($pos$05) + 2|0);
          $54 = HEAP8[$30]|0;
          $55 = $54&255;
          $56 = (($55) + ($vgm_time$07))|0;
          $pos$0$be = $53;$vgm_time$0$be = $56;
          break;
         }
         case 99:  {
          $35 = (($vgm_time$07) + 882)|0;
          $pos$0$be = $30;$vgm_time$0$be = $35;
          break;
         }
         case 79:  {
          $36 = (__ZNK12Vgm_Emu_Impl12to_blip_timeEi($this,$vgm_time$07)|0);
          $37 = (($pos$05) + 2|0);
          $38 = HEAP8[$30]|0;
          $39 = $38&255;
          __ZN7Sms_Apu14write_ggstereoEii($16,$36,$39);
          $pos$0$be = $37;$vgm_time$0$be = $vgm_time$07;
          break;
         }
         case 80:  {
          $40 = (__ZNK12Vgm_Emu_Impl12to_blip_timeEi($this,$vgm_time$07)|0);
          $41 = (($pos$05) + 2|0);
          $42 = HEAP8[$30]|0;
          $43 = $42&255;
          __ZN7Sms_Apu10write_dataEii($17,$40,$43);
          $pos$0$be = $41;$vgm_time$0$be = $vgm_time$07;
          break;
         }
         case 102:  {
          $33 = HEAP32[$15>>2]|0;
          $pos$0$be = $33;$vgm_time$0$be = $vgm_time$07;
          break;
         }
         case 98:  {
          $34 = (($vgm_time$07) + 735)|0;
          $pos$0$be = $30;$vgm_time$0$be = $34;
          break;
         }
         case 83:  {
          $84 = (__ZNK12Vgm_Emu_Impl10to_fm_timeEi($this,$vgm_time$07)|0);
          $85 = (__ZN6Ym_EmuI10Ym2612_EmuE9run_untilEi($23,$84)|0);
          $86 = ($85|0)==(0);
          if (!($86)) {
           $87 = HEAP8[$30]|0;
           $88 = $87&255;
           $89 = (($pos$05) + 2|0);
           $90 = HEAP8[$89]|0;
           $91 = $90&255;
           __ZN10Ym2612_Emu6write1Eii($24,$88,$91);
          }
          $92 = (($pos$05) + 3|0);
          $pos$0$be = $92;$vgm_time$0$be = $vgm_time$07;
          break;
         }
         case 103:  {
          $93 = (($pos$05) + 2|0);
          $94 = HEAP8[$93]|0;
          $95 = (($pos$05) + 3|0);
          $96 = (__Z8get_le32PKv($95)|0);
          $97 = ($94<<24>>24)==(0);
          if ($97) {
           $98 = (($pos$05) + 7|0);
           HEAP32[$25>>2] = $98;
          }
          $$sum3 = (($96) + 7)|0;
          $99 = (($pos$05) + ($$sum3)|0);
          $pos$0$be = $99;$vgm_time$0$be = $vgm_time$07;
          break;
         }
         case 224:  {
          $100 = HEAP32[$26>>2]|0;
          $101 = (($pos$05) + 4|0);
          $102 = HEAP8[$101]|0;
          $103 = $102&255;
          $104 = $103 << 24;
          $105 = (($pos$05) + 3|0);
          $106 = HEAP8[$105]|0;
          $107 = $106&255;
          $108 = $107 << 16;
          $$sum = $108 | $104;
          $109 = (($pos$05) + 2|0);
          $110 = HEAP8[$109]|0;
          $111 = $110&255;
          $112 = $111 << 8;
          $$sum1 = $$sum | $112;
          $113 = HEAP8[$30]|0;
          $114 = $113&255;
          $$sum2 = $$sum1 | $114;
          $115 = (($100) + ($$sum2)|0);
          HEAP32[$27>>2] = $115;
          $116 = (($pos$05) + 5|0);
          $pos$0$be = $116;$vgm_time$0$be = $vgm_time$07;
          break;
         }
         default: {
          $117 = $32 & 240;
          if ((($117|0) == 128)) {
           $118 = HEAP32[$14>>2]|0;
           $119 = (($118) + 1|0);
           HEAP32[$14>>2] = $119;
           $120 = HEAP8[$118]|0;
           $121 = $120&255;
           __ZN12Vgm_Emu_Impl9write_pcmEii($this,$vgm_time$07,$121);
           $122 = $32 & 15;
           $123 = (($122) + ($vgm_time$07))|0;
           $pos$0$be = $30;$vgm_time$0$be = $123;
           break L11;
          } else if ((($117|0) == 112)) {
           $125 = $32 & 15;
           $126 = (($vgm_time$07) + 1)|0;
           $127 = (($126) + ($125))|0;
           $pos$0$be = $30;$vgm_time$0$be = $127;
           break L11;
          } else if ((($117|0) == 80)) {
           $128 = (($pos$05) + 3|0);
           $pos$0$be = $128;$vgm_time$0$be = $vgm_time$07;
           break L11;
          } else {
           $129 = (__Z11command_leni($32)|0);
           $130 = (($pos$05) + ($129)|0);
           __ZN8Gme_File11set_warningEPKc($13,(53224));
           $pos$0$be = $130;$vgm_time$0$be = $vgm_time$07;
           break L11;
          }
         }
         }
        } while(0);
        $124 = ($vgm_time$0$be|0)<($end_time|0);
        if ($124) {
         $pos$05 = $pos$0$be;$vgm_time$07 = $vgm_time$0$be;
        } else {
         $pos$0$lcssa = $pos$0$be;$vgm_time$0$lcssa = $vgm_time$0$be;
         label = 38;
         break;
        }
       }
       if ((label|0) == 38) {
        $131 = (($vgm_time$0$lcssa) - ($end_time))|0;
        HEAP32[$3>>2] = $pos$0$lcssa;
        HEAP32[$1>>2] = $131;
        $132 = (__ZNK12Vgm_Emu_Impl12to_blip_timeEi($this,$end_time)|0);
        STACKTOP = sp;return ($132|0);
       }
       return 0|0;
      }
      function __ZN6Ym_EmuI10Ym2413_EmuE9run_untilEi($this,$time) {
       $this = $this|0;
       $time = $time|0;
       var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 4|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = (($time) - ($2))|0;
       $4 = ($3|0)>(0);
       do {
        if ($4) {
         $5 = ($2|0)<(0);
         if ($5) {
          $$0 = 0;
          break;
         }
         HEAP32[$1>>2] = $time;
         $6 = (($this) + 8|0);
         $7 = HEAP32[$6>>2]|0;
         $8 = $3 << 1;
         $9 = (($7) + ($8<<1)|0);
         HEAP32[$6>>2] = $9;
         $$0 = 1;
        } else {
         $$0 = 1;
        }
       } while(0);
       STACKTOP = sp;return ($$0|0);
      }
      function __ZNK12Vgm_Emu_Impl10to_fm_timeEi($this,$t) {
       $this = $this|0;
       $t = $t|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 1196|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = Math_imul($2, $t)|0;
       $4 = (($this) + 1192|0);
       $5 = HEAP32[$4>>2]|0;
       $6 = (($3) + ($5))|0;
       $7 = $6 >> 12;
       STACKTOP = sp;return ($7|0);
      }
      function __ZN6Ym_EmuI10Ym2612_EmuE9run_untilEi($this,$time) {
       $this = $this|0;
       $time = $time|0;
       var $$0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 4|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = (($time) - ($2))|0;
       $4 = ($3|0)>(0);
       if (!($4)) {
        $$0 = 1;
        STACKTOP = sp;return ($$0|0);
       }
       $5 = ($2|0)<(0);
       if ($5) {
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
       }
       HEAP32[$1>>2] = $time;
       $6 = (($this) + 8|0);
       $7 = HEAP32[$6>>2]|0;
       $8 = $3 << 1;
       $9 = (($7) + ($8<<1)|0);
       HEAP32[$6>>2] = $9;
       $10 = ($this);
       __ZN10Ym2612_Emu3runEiPs($10,$3,$7);
       $$0 = 1;
       STACKTOP = sp;return ($$0|0);
      }
      function __Z11command_leni($command) {
       $command = $command|0;
       var $$0 = 0, $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $command >> 4;
       switch ($1|0) {
       case 13: case 12:  {
        $$0 = 4;
        break;
       }
       case 11: case 10: case 5:  {
        $$0 = 3;
        break;
       }
       case 4: case 3:  {
        $$0 = 2;
        break;
       }
       case 15: case 14:  {
        $$0 = 5;
        break;
       }
       default: {
        $$0 = 1;
       }
       }
       STACKTOP = sp;return ($$0|0);
      }
      function __ZN12Vgm_Emu_Impl10play_frameEiiPs($this,$blip_time,$sample_count,$buf) {
       $this = $this|0;
       $blip_time = $blip_time|0;
       $sample_count = $sample_count|0;
       $buf = $buf|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
       var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vgm_time$0 = 0, $vgm_time$0$phi = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $sample_count >> 1;
       $2 = $1 << 12;
       $3 = (($this) + 1196|0);
       $4 = HEAP32[$3>>2]|0;
       $5 = (($2|0) / ($4|0))&-1;
       $6 = (($5) + -1)|0;
       $7 = (__ZNK12Vgm_Emu_Impl10to_fm_timeEi($this,$6)|0);
       $8 = ($7|0)>($1|0);
       if ($8) {
        ___assert_fail(((53248)|0),((53288)|0),243,((53328)|0));
        // unreachable;
       } else {
        $vgm_time$0 = $6;
       }
       while(1) {
        $9 = (__ZNK12Vgm_Emu_Impl10to_fm_timeEi($this,$vgm_time$0)|0);
        $10 = ($9|0)<($1|0);
        $11 = (($vgm_time$0) + 1)|0;
        if ($10) {
         $vgm_time$0$phi = $11;$vgm_time$0 = $vgm_time$0$phi;
        } else {
         break;
        }
       }
       $12 = (($this) + 1240|0);
       $13 = (__ZNK6Ym_EmuI10Ym2612_EmuE7enabledEv($12)|0);
       do {
        if ($13) {
         __ZN6Ym_EmuI10Ym2612_EmuE11begin_frameEPs($12,$buf);
         $14 = $buf;
         $15 = $9 << 2;
         _memset(($14|0),0,($15|0))|0;
        } else {
         $16 = (($this) + 1252|0);
         $17 = (__ZNK6Ym_EmuI10Ym2413_EmuE7enabledEv($16)|0);
         if (!($17)) {
          break;
         }
         __ZN6Ym_EmuI10Ym2413_EmuE11begin_frameEPs($16,$buf);
        }
       } while(0);
       (__ZN12Vgm_Emu_Impl12run_commandsEi($this,$vgm_time$0)|0);
       (__ZN6Ym_EmuI10Ym2612_EmuE9run_untilEi($12,$9)|0);
       $18 = (($this) + 1252|0);
       (__ZN6Ym_EmuI10Ym2413_EmuE9run_untilEi($18,$9)|0);
       $19 = HEAP32[$3>>2]|0;
       $20 = Math_imul($19, $vgm_time$0)|0;
       $21 = (($this) + 1192|0);
       $22 = HEAP32[$21>>2]|0;
       $23 = $9 << 12;
       $24 = (($22) - ($23))|0;
       $25 = (($24) + ($20))|0;
       HEAP32[$21>>2] = $25;
       $26 = (($this) + 1312|0);
       __ZN7Sms_Apu9end_frameEi($26,$blip_time);
       $27 = $9 << 1;
       STACKTOP = sp;return ($27|0);
      }
      function __ZN6Ym_EmuI10Ym2612_EmuE11begin_frameEPs($this,$p) {
       $this = $this|0;
       $p = $p|0;
       var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (__ZNK6Ym_EmuI10Ym2612_EmuE7enabledEv($this)|0);
       if ($1) {
        $2 = (($this) + 8|0);
        HEAP32[$2>>2] = $p;
        $3 = (($this) + 4|0);
        HEAP32[$3>>2] = 0;
        STACKTOP = sp;return;
       } else {
        ___assert_fail(((53512)|0),((53288)|0),72,((53528)|0));
        // unreachable;
       }
      }
      function __ZN6Ym_EmuI10Ym2413_EmuE11begin_frameEPs($this,$p) {
       $this = $this|0;
       $p = $p|0;
       var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (__ZNK6Ym_EmuI10Ym2413_EmuE7enabledEv($this)|0);
       if ($1) {
        $2 = (($this) + 8|0);
        HEAP32[$2>>2] = $p;
        $3 = (($this) + 4|0);
        HEAP32[$3>>2] = 0;
        STACKTOP = sp;return;
       } else {
        ___assert_fail(((53512)|0),((53288)|0),72,((53528)|0));
        // unreachable;
       }
      }
      function __ZThn336_N12Vgm_Emu_Impl10play_frameEiiPs($this,$blip_time,$sample_count,$buf) {
       $this = $this|0;
       $blip_time = $blip_time|0;
       $sample_count = $sample_count|0;
       $buf = $buf|0;
       var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + -336|0);
       $2 = $1;
       $3 = (__ZN12Vgm_Emu_Impl10play_frameEiiPs($2,$blip_time,$sample_count,$buf)|0);
       STACKTOP = sp;return ($3|0);
      }
      function __ZNK12Vgm_Emu_Impl15update_fm_ratesEPlS0_($this,$ym2413_rate,$ym2612_rate) {
       $this = $this|0;
       $ym2413_rate = $ym2413_rate|0;
       $ym2612_rate = $ym2612_rate|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0$be = 0;
       var $p$01 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 1204|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = (($2) + 64|0);
       $4 = (($this) + 1212|0);
       $5 = HEAP32[$4>>2]|0;
       $6 = ($3>>>0)<($5>>>0);
       if ($6) {
        $p$01 = $3;
       } else {
        STACKTOP = sp;return;
       }
       L3: while(1) {
        $7 = HEAP8[$p$01]|0;
        $8 = $7&255;
        switch ($8|0) {
        case 81:  {
         label = 6;
         break L3;
         break;
        }
        case 103:  {
         $11 = (($p$01) + 3|0);
         $12 = (__Z8get_le32PKv($11)|0);
         $13 = (($12) + 7)|0;
         $14 = (($p$01) + ($13)|0);
         $p$0$be = $14;
         break;
        }
        case 97:  {
         $10 = (($p$01) + 3|0);
         $p$0$be = $10;
         break;
        }
        case 102:  {
         label = 11;
         break L3;
         break;
        }
        case 84:  {
         label = 8;
         break L3;
         break;
        }
        case 83: case 82:  {
         label = 7;
         break L3;
         break;
        }
        case 100: case 80:  {
         $9 = (($p$01) + 2|0);
         $p$0$be = $9;
         break;
        }
        default: {
         $16 = (__Z11command_leni($8)|0);
         $17 = (($p$01) + ($16)|0);
         $p$0$be = $17;
        }
        }
        $18 = HEAP32[$4>>2]|0;
        $19 = ($p$0$be>>>0)<($18>>>0);
        if ($19) {
         $p$01 = $p$0$be;
        } else {
         label = 11;
         break;
        }
       }
       if ((label|0) == 6) {
        HEAP32[$ym2612_rate>>2] = 0;
        STACKTOP = sp;return;
       }
       else if ((label|0) == 7) {
        $15 = HEAP32[$ym2413_rate>>2]|0;
        HEAP32[$ym2612_rate>>2] = $15;
        HEAP32[$ym2413_rate>>2] = 0;
        STACKTOP = sp;return;
       }
       else if ((label|0) == 8) {
        HEAP32[$ym2413_rate>>2] = 0;
        HEAP32[$ym2612_rate>>2] = 0;
        STACKTOP = sp;return;
       }
       else if ((label|0) == 11) {
        STACKTOP = sp;return;
       }
      }
      function __ZN10Ym2413_EmuC2Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       STACKTOP = sp;return;
      }
      function __ZN10Ym2413_EmuD2Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       STACKTOP = sp;return;
      }
      function __ZN10Ym2413_Emu8set_rateEdd($this,u$0,u$1) {
       $this = $this|0;
       u$0 = +u$0;
       u$1 = +u$1;
       var label = 0, sp = 0;
       sp = STACKTOP;
       STACKTOP = sp;return 2;
      }
      function __ZN10Ym2413_Emu5resetEv($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       STACKTOP = sp;return;
      }
      function __ZN10Ym2413_Emu5writeEii($this,u$0,u$1) {
       $this = $this|0;
       u$0 = u$0|0;
       u$1 = u$1|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       STACKTOP = sp;return;
      }
      function __ZN10Ym2413_Emu11mute_voicesEi($this,u$0) {
       $this = $this|0;
       u$0 = u$0|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       STACKTOP = sp;return;
      }
      function __ZN10Ym2413_Emu3runEiPs($this,u$0,u$1) {
       $this = $this|0;
       u$0 = u$0|0;
       u$1 = u$1|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       STACKTOP = sp;return;
      }
      function __ZN11Ym2612_Impl6KEY_ONER9channel_ti($this,$ch,$nsl) {
       $this = $this|0;
       $ch = $ch|0;
       $nsl = $nsl|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
       var sp = 0;
       sp = STACKTOP;
       $1 = ((($ch) + (($nsl*116)|0)|0) + 152|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = ($2|0)==(3);
       if (!($3)) {
        STACKTOP = sp;return;
       }
       $4 = ((($ch) + (($nsl*116)|0)|0) + 144|0);
       HEAP32[$4>>2] = 0;
       $5 = ((($ch) + (($nsl*116)|0)|0) + 156|0);
       $6 = HEAP32[$5>>2]|0;
       $7 = $6 >> 16;
       $8 = ((($this) + ($7<<1)|0) + 15772|0);
       $9 = HEAP16[$8>>1]|0;
       $10 = $9 << 16 >> 16;
       $11 = ((($this) + ($10<<2)|0) + 134572|0);
       $12 = HEAP32[$11>>2]|0;
       $13 = ((($ch) + (($nsl*116)|0)|0) + 192|0);
       $14 = HEAP32[$13>>2]|0;
       $15 = $14 & $12;
       HEAP32[$5>>2] = $15;
       HEAP32[$13>>2] = -1;
       $16 = ((($ch) + (($nsl*116)|0)|0) + 168|0);
       $17 = HEAP32[$16>>2]|0;
       $18 = ((($ch) + (($nsl*116)|0)|0) + 160|0);
       HEAP32[$18>>2] = $17;
       $19 = ((($ch) + (($nsl*116)|0)|0) + 164|0);
       HEAP32[$19>>2] = 268435456;
       HEAP32[$1>>2] = 0;
       STACKTOP = sp;return;
      }
      function __ZN11Ym2612_Impl7KEY_OFFER9channel_ti($this,$ch,$nsl) {
       $this = $this|0;
       $ch = $ch|0;
       $nsl = $nsl|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ((($ch) + (($nsl*116)|0)|0) + 152|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = ($2|0)==(3);
       if ($3) {
        STACKTOP = sp;return;
       }
       $4 = ((($ch) + (($nsl*116)|0)|0) + 156|0);
       $5 = HEAP32[$4>>2]|0;
       $6 = ($5|0)<(268435456);
       if ($6) {
        $7 = $5 >> 16;
        $8 = ((($this) + ($7<<1)|0) + 15772|0);
        $9 = HEAP16[$8>>1]|0;
        $10 = $9&65535;
        $11 = $10 << 16;
        $12 = (($11) + 268435456)|0;
        HEAP32[$4>>2] = $12;
       }
       $13 = ((($ch) + (($nsl*116)|0)|0) + 180|0);
       $14 = HEAP32[$13>>2]|0;
       $15 = ((($ch) + (($nsl*116)|0)|0) + 160|0);
       HEAP32[$15>>2] = $14;
       $16 = ((($ch) + (($nsl*116)|0)|0) + 164|0);
       HEAP32[$16>>2] = 536870912;
       HEAP32[$1>>2] = 3;
       STACKTOP = sp;return;
      }
      function __ZN11Ym2612_Impl8SLOT_SETEii($this,$Adr,$data) {
       $this = $this|0;
       $Adr = $Adr|0;
       $data = $data|0;
       var $$ = 0, $$0 = 0, $$sum = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
       var $114 = 0, $115 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
       var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
       var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
       var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
       var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $storemerge = 0, label = 0;
       var sp = 0;
       sp = STACKTOP;
       $1 = $Adr & 3;
       $2 = ($1|0)==(3);
       if ($2) {
        $$0 = 1;
        STACKTOP = sp;return ($$0|0);
       }
       $3 = $Adr & 256;
       $4 = ($3|0)!=(0);
       $5 = $4 ? 3 : 0;
       $6 = (($5) + ($1))|0;
       $7 = $Adr >>> 2;
       $8 = $7 & 3;
       $9 = (((($this) + (($6*556)|0)|0) + (($8*116)|0)|0) + 128|0);
       $10 = $Adr & 240;
       switch ($10|0) {
       case 80:  {
        $24 = $data >> 6;
        $25 = (3 - ($24))|0;
        $26 = (((($this) + (($6*556)|0)|0) + (($8*116)|0)|0) + 148|0);
        HEAP32[$26>>2] = $25;
        $27 = ((($this) + (($6*556)|0)|0) + 188|0);
        HEAP32[$27>>2] = -1;
        $28 = $data & 31;
        $29 = ($28|0)==(0);
        if ($29) {
         $33 = (($this) + 15612|0);
         $34 = (((($this) + (($6*556)|0)|0) + (($8*116)|0)|0) + 168|0);
         HEAP32[$34>>2] = $33;
        } else {
         $30 = $28 << 1;
         $31 = ((($this) + ($30<<2)|0) + 13628|0);
         $32 = (((($this) + (($6*556)|0)|0) + (($8*116)|0)|0) + 168|0);
         HEAP32[$32>>2] = $31;
        }
        $35 = (((($this) + (($6*556)|0)|0) + (($8*116)|0)|0) + 152|0);
        $36 = HEAP32[$35>>2]|0;
        $37 = (((($this) + (($6*556)|0)|0) + (($8*116)|0)|0) + 168|0);
        $38 = HEAP32[$37>>2]|0;
        $39 = (($38) + ($36<<2)|0);
        $40 = HEAP32[$39>>2]|0;
        $41 = (((($this) + (($6*556)|0)|0) + (($8*116)|0)|0) + 208|0);
        HEAP32[$41>>2] = $40;
        $42 = (((($this) + (($6*556)|0)|0) + (($8*116)|0)|0) + 192|0);
        $43 = HEAP32[$42>>2]|0;
        $44 = ($43|0)==(0);
        if (!($44)) {
         $$0 = 0;
         STACKTOP = sp;return ($$0|0);
        }
        $45 = (((($this) + (($6*556)|0)|0) + (($8*116)|0)|0) + 200|0);
        HEAP32[$45>>2] = $40;
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
        break;
       }
       case 128:  {
        $92 = $data >> 4;
        $93 = ((($this) + ($92<<2)|0) + 15548|0);
        $94 = HEAP32[$93>>2]|0;
        $95 = (((($this) + (($6*556)|0)|0) + (($8*116)|0)|0) + 144|0);
        HEAP32[$95>>2] = $94;
        $96 = $data << 2;
        $97 = $96 & 60;
        $98 = $97 | 2;
        $99 = ((($this) + ($98<<2)|0) + 14140|0);
        $100 = (((($this) + (($6*556)|0)|0) + (($8*116)|0)|0) + 180|0);
        HEAP32[$100>>2] = $99;
        $101 = (((($this) + (($6*556)|0)|0) + (($8*116)|0)|0) + 152|0);
        $102 = HEAP32[$101>>2]|0;
        $$sum = (($102) + ($98))|0;
        $103 = ((($this) + ($$sum<<2)|0) + 14140|0);
        $104 = HEAP32[$103>>2]|0;
        $105 = (((($this) + (($6*556)|0)|0) + (($8*116)|0)|0) + 220|0);
        HEAP32[$105>>2] = $104;
        $106 = (((($this) + (($6*556)|0)|0) + (($8*116)|0)|0) + 192|0);
        $107 = HEAP32[$106>>2]|0;
        $108 = ($107|0)==(3);
        if (!($108)) {
         $$0 = 0;
         STACKTOP = sp;return ($$0|0);
        }
        $109 = (((($this) + (($6*556)|0)|0) + (($8*116)|0)|0) + 196|0);
        $110 = HEAP32[$109>>2]|0;
        $111 = ($110|0)<(536870912);
        if (!($111)) {
         $$0 = 0;
         STACKTOP = sp;return ($$0|0);
        }
        $112 = (((($this) + (($6*556)|0)|0) + (($8*116)|0)|0) + 200|0);
        HEAP32[$112>>2] = $104;
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
        break;
       }
       case 96:  {
        $46 = $data & 128;
        $47 = (((($this) + (($6*556)|0)|0) + (($8*116)|0)|0) + 240|0);
        HEAP32[$47>>2] = $46;
        $48 = ($46|0)==(0);
        if ($48) {
         $52 = (((($this) + (($6*556)|0)|0) + (($8*116)|0)|0) + 236|0);
         HEAP32[$52>>2] = 31;
        } else {
         $49 = ((($this) + (($6*556)|0)|0) + 76|0);
         $50 = HEAP32[$49>>2]|0;
         $51 = (((($this) + (($6*556)|0)|0) + (($8*116)|0)|0) + 236|0);
         HEAP32[$51>>2] = $50;
        }
        $53 = $data & 31;
        $54 = ($53|0)==(0);
        if ($54) {
         $58 = (($this) + 15612|0);
         $59 = (((($this) + (($6*556)|0)|0) + (($8*116)|0)|0) + 172|0);
         HEAP32[$59>>2] = $58;
        } else {
         $55 = $53 << 1;
         $56 = ((($this) + ($55<<2)|0) + 14140|0);
         $57 = (((($this) + (($6*556)|0)|0) + (($8*116)|0)|0) + 172|0);
         HEAP32[$57>>2] = $56;
        }
        $60 = (((($this) + (($6*556)|0)|0) + (($8*116)|0)|0) + 152|0);
        $61 = HEAP32[$60>>2]|0;
        $62 = (((($this) + (($6*556)|0)|0) + (($8*116)|0)|0) + 172|0);
        $63 = HEAP32[$62>>2]|0;
        $64 = (($63) + ($61<<2)|0);
        $65 = HEAP32[$64>>2]|0;
        $66 = (((($this) + (($6*556)|0)|0) + (($8*116)|0)|0) + 212|0);
        HEAP32[$66>>2] = $65;
        $67 = (((($this) + (($6*556)|0)|0) + (($8*116)|0)|0) + 192|0);
        $68 = HEAP32[$67>>2]|0;
        $69 = ($68|0)==(1);
        if (!($69)) {
         $$0 = 0;
         STACKTOP = sp;return ($$0|0);
        }
        $70 = (((($this) + (($6*556)|0)|0) + (($8*116)|0)|0) + 200|0);
        HEAP32[$70>>2] = $65;
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
        break;
       }
       case 144:  {
        $113 = $data & 8;
        $114 = ($113|0)==(0);
        $115 = $data & 15;
        $$ = $114 ? 0 : $115;
        __Z7set_segR6slot_ti($9,$$);
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
        break;
       }
       case 112:  {
        $71 = $data & 31;
        $72 = ($71|0)==(0);
        if ($72) {
         $76 = (($this) + 15612|0);
         $77 = (((($this) + (($6*556)|0)|0) + (($8*116)|0)|0) + 176|0);
         HEAP32[$77>>2] = $76;
        } else {
         $73 = $71 << 1;
         $74 = ((($this) + ($73<<2)|0) + 14140|0);
         $75 = (((($this) + (($6*556)|0)|0) + (($8*116)|0)|0) + 176|0);
         HEAP32[$75>>2] = $74;
        }
        $78 = (((($this) + (($6*556)|0)|0) + (($8*116)|0)|0) + 152|0);
        $79 = HEAP32[$78>>2]|0;
        $80 = (((($this) + (($6*556)|0)|0) + (($8*116)|0)|0) + 176|0);
        $81 = HEAP32[$80>>2]|0;
        $82 = (($81) + ($79<<2)|0);
        $83 = HEAP32[$82>>2]|0;
        $84 = (((($this) + (($6*556)|0)|0) + (($8*116)|0)|0) + 216|0);
        HEAP32[$84>>2] = $83;
        $85 = (((($this) + (($6*556)|0)|0) + (($8*116)|0)|0) + 192|0);
        $86 = HEAP32[$85>>2]|0;
        $87 = ($86|0)==(2);
        if (!($87)) {
         $$0 = 0;
         STACKTOP = sp;return ($$0|0);
        }
        $88 = (((($this) + (($6*556)|0)|0) + (($8*116)|0)|0) + 196|0);
        $89 = HEAP32[$88>>2]|0;
        $90 = ($89|0)<(536870912);
        if (!($90)) {
         $$0 = 0;
         STACKTOP = sp;return ($$0|0);
        }
        $91 = (((($this) + (($6*556)|0)|0) + (($8*116)|0)|0) + 200|0);
        HEAP32[$91>>2] = $83;
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
        break;
       }
       case 48:  {
        $11 = $data & 15;
        $12 = (((($this) + (($6*556)|0)|0) + (($8*116)|0)|0) + 132|0);
        $13 = ($11|0)==(0);
        $14 = $11 << 1;
        $storemerge = $13 ? 1 : $14;
        HEAP32[$12>>2] = $storemerge;
        $15 = $data >>> 4;
        $16 = $15 & 7;
        $17 = ((($this) + ($16<<7)|0) + 14524|0);
        $18 = ($9);
        HEAP32[$18>>2] = $17;
        $19 = ((($this) + (($6*556)|0)|0) + 188|0);
        HEAP32[$19>>2] = -1;
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
        break;
       }
       case 64:  {
        $20 = $data & 127;
        $21 = (((($this) + (($6*556)|0)|0) + (($8*116)|0)|0) + 136|0);
        HEAP32[$21>>2] = $20;
        $22 = $20 << 5;
        $23 = (((($this) + (($6*556)|0)|0) + (($8*116)|0)|0) + 140|0);
        HEAP32[$23>>2] = $22;
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
        break;
       }
       default: {
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
       }
       }
       return 0|0;
      }
      function __Z7set_segR6slot_ti($s,$seg) {
       $s = $s|0;
       $seg = $seg|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($s) + 32|0);
       HEAP32[$1>>2] = 0;
       $2 = (($s) + 36|0);
       HEAP32[$2>>2] = 2147483647;
       $3 = (($s) + 28|0);
       HEAP32[$3>>2] = $seg;
       $4 = $seg & 4;
       $5 = ($4|0)==(0);
       if ($5) {
        STACKTOP = sp;return;
       }
       HEAP32[$1>>2] = 4095;
       HEAP32[$2>>2] = 4095;
       STACKTOP = sp;return;
      }
      function __ZN11Ym2612_Impl11CHANNEL_SETEii($this,$Adr,$data) {
       $this = $this|0;
       $Adr = $Adr|0;
       $data = $data|0;
       var $$0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
       var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0;
       var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
       var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
       var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
       var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
       var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $Adr & 3;
       $2 = ($1|0)==(3);
       if ($2) {
        $$0 = 1;
        STACKTOP = sp;return ($$0|0);
       }
       $3 = $Adr & 256;
       $4 = ($3|0)!=(0);
       $5 = $4 ? 3 : 0;
       $6 = (($5) + ($1))|0;
       $7 = $Adr & 252;
       switch ($7|0) {
       case 172:  {
        $56 = ($Adr|0)<(256);
        if (!($56)) {
         $$0 = 0;
         STACKTOP = sp;return ($$0|0);
        }
        $57 = (($1) + 1)|0;
        $58 = ((($this) + ($57<<2)|0) + 1192|0);
        $59 = HEAP32[$58>>2]|0;
        $60 = $59 & 255;
        $61 = $data << 8;
        $62 = $61 & 1792;
        $63 = $60 | $62;
        HEAP32[$58>>2] = $63;
        $64 = $data >>> 3;
        $65 = $64 & 7;
        $66 = ((($this) + ($57<<2)|0) + 1208|0);
        HEAP32[$66>>2] = $65;
        $67 = $65 << 2;
        $68 = HEAP32[$58>>2]|0;
        $69 = $68 >> 7;
        $70 = (53544 + ($69)|0);
        $71 = HEAP8[$70]|0;
        $72 = $71&255;
        $73 = $72 | $67;
        $74 = ((($this) + ($57<<2)|0) + 1224|0);
        HEAP32[$74>>2] = $73;
        $75 = (($this) + 1300|0);
        HEAP32[$75>>2] = -1;
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
        break;
       }
       case 176:  {
        $76 = ((($this) + (($6*556)|0)|0) + 64|0);
        $77 = HEAP32[$76>>2]|0;
        $78 = $data & 7;
        $79 = ($77|0)==($78|0);
        if (!($79)) {
         HEAP32[$76>>2] = $78;
         $80 = ((($this) + (($6*556)|0)|0) + 232|0);
         HEAP32[$80>>2] = 0;
         $81 = ((($this) + (($6*556)|0)|0) + 348|0);
         HEAP32[$81>>2] = 0;
         $82 = ((($this) + (($6*556)|0)|0) + 464|0);
         HEAP32[$82>>2] = 0;
         $83 = ((($this) + (($6*556)|0)|0) + 580|0);
         HEAP32[$83>>2] = 0;
        }
        $84 = $data >>> 3;
        $85 = $84 & 7;
        $86 = (9 - ($85))|0;
        $87 = ((($this) + (($6*556)|0)|0) + 68|0);
        HEAP32[$87>>2] = $86;
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
        break;
       }
       case 168:  {
        $40 = ($Adr|0)<(256);
        if (!($40)) {
         $$0 = 0;
         STACKTOP = sp;return ($$0|0);
        }
        $41 = (($1) + 1)|0;
        $42 = ((($this) + ($41<<2)|0) + 1192|0);
        $43 = HEAP32[$42>>2]|0;
        $44 = $43 & 1792;
        $45 = (($44) + ($data))|0;
        HEAP32[$42>>2] = $45;
        $46 = ((($this) + ($41<<2)|0) + 1208|0);
        $47 = HEAP32[$46>>2]|0;
        $48 = $47 << 2;
        $49 = $45 >> 7;
        $50 = (53544 + ($49)|0);
        $51 = HEAP8[$50]|0;
        $52 = $51&255;
        $53 = $52 | $48;
        $54 = ((($this) + ($41<<2)|0) + 1224|0);
        HEAP32[$54>>2] = $53;
        $55 = (($this) + 1300|0);
        HEAP32[$55>>2] = -1;
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
        break;
       }
       case 180:  {
        $88 = $data >>> 7;
        $89 = $88 & 1;
        $90 = (0 - ($89))|0;
        $91 = ((($this) + (($6*556)|0)|0) + 56|0);
        HEAP32[$91>>2] = $90;
        $92 = $data >>> 6;
        $93 = $92 & 1;
        $94 = (0 - ($93))|0;
        $95 = ((($this) + (($6*556)|0)|0) + 60|0);
        HEAP32[$95>>2] = $94;
        $96 = $data >>> 4;
        $97 = $96 & 3;
        $98 = (53560 + ($97)|0);
        $99 = HEAP8[$98]|0;
        $100 = $99&255;
        $101 = ((($this) + (($6*556)|0)|0) + 76|0);
        HEAP32[$101>>2] = $100;
        $102 = $data & 7;
        $103 = (53568 + ($102)|0);
        $104 = HEAP8[$103]|0;
        $105 = $104&255;
        $106 = ((($this) + (($6*556)|0)|0) + 72|0);
        HEAP32[$106>>2] = $105;
        $107 = ((($this) + (($6*556)|0)|0) + 240|0);
        $108 = HEAP32[$107>>2]|0;
        $109 = ($108|0)==(0);
        if ($109) {
         $111 = 31;
        } else {
         $110 = HEAP32[$101>>2]|0;
         $111 = $110;
        }
        $112 = ((($this) + (($6*556)|0)|0) + 236|0);
        HEAP32[$112>>2] = $111;
        $113 = ((($this) + (($6*556)|0)|0) + 356|0);
        $114 = HEAP32[$113>>2]|0;
        $115 = ($114|0)==(0);
        if ($115) {
         $117 = 31;
        } else {
         $116 = HEAP32[$101>>2]|0;
         $117 = $116;
        }
        $118 = ((($this) + (($6*556)|0)|0) + 352|0);
        HEAP32[$118>>2] = $117;
        $119 = ((($this) + (($6*556)|0)|0) + 472|0);
        $120 = HEAP32[$119>>2]|0;
        $121 = ($120|0)==(0);
        if ($121) {
         $123 = 31;
        } else {
         $122 = HEAP32[$101>>2]|0;
         $123 = $122;
        }
        $124 = ((($this) + (($6*556)|0)|0) + 468|0);
        HEAP32[$124>>2] = $123;
        $125 = ((($this) + (($6*556)|0)|0) + 588|0);
        $126 = HEAP32[$125>>2]|0;
        $127 = ($126|0)==(0);
        if ($127) {
         $129 = 31;
        } else {
         $128 = HEAP32[$101>>2]|0;
         $129 = $128;
        }
        $130 = ((($this) + (($6*556)|0)|0) + 584|0);
        HEAP32[$130>>2] = $129;
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
        break;
       }
       case 160:  {
        $8 = ((($this) + (($6*556)|0)|0) + 80|0);
        $9 = HEAP32[$8>>2]|0;
        $10 = $9 & 1792;
        $11 = (($10) + ($data))|0;
        HEAP32[$8>>2] = $11;
        $12 = ((($this) + (($6*556)|0)|0) + 96|0);
        $13 = HEAP32[$12>>2]|0;
        $14 = $13 << 2;
        $15 = $11 >> 7;
        $16 = (53544 + ($15)|0);
        $17 = HEAP8[$16]|0;
        $18 = $17&255;
        $19 = $18 | $14;
        $20 = ((($this) + (($6*556)|0)|0) + 112|0);
        HEAP32[$20>>2] = $19;
        $21 = ((($this) + (($6*556)|0)|0) + 188|0);
        HEAP32[$21>>2] = -1;
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
        break;
       }
       case 164:  {
        $22 = ((($this) + (($6*556)|0)|0) + 80|0);
        $23 = HEAP32[$22>>2]|0;
        $24 = $23 & 255;
        $25 = $data << 8;
        $26 = $25 & 1792;
        $27 = $24 | $26;
        HEAP32[$22>>2] = $27;
        $28 = $data >>> 3;
        $29 = $28 & 7;
        $30 = ((($this) + (($6*556)|0)|0) + 96|0);
        HEAP32[$30>>2] = $29;
        $31 = $29 << 2;
        $32 = HEAP32[$22>>2]|0;
        $33 = $32 >> 7;
        $34 = (53544 + ($33)|0);
        $35 = HEAP8[$34]|0;
        $36 = $35&255;
        $37 = $36 | $31;
        $38 = ((($this) + (($6*556)|0)|0) + 112|0);
        HEAP32[$38>>2] = $37;
        $39 = ((($this) + (($6*556)|0)|0) + 188|0);
        HEAP32[$39>>2] = -1;
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
        break;
       }
       default: {
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
       }
       }
       return 0|0;
      }
      function __ZN11Ym2612_Impl6YM_SETEii($this,$Adr,$data) {
       $this = $this|0;
       $Adr = $Adr|0;
       $data = $data|0;
       var $$ = 0, $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
       var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
       var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
       var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       switch ($Adr|0) {
       case 38:  {
        $31 = (($this) + 20|0);
        HEAP32[$31>>2] = $data;
        $32 = (($this) + 24|0);
        $33 = HEAP32[$32>>2]|0;
        $34 = (256 - ($data))|0;
        $35 = $34 << 16;
        $36 = ($33|0)==($35|0);
        if ($36) {
         $$0 = 0;
         STACKTOP = sp;return ($$0|0);
        }
        HEAP32[$32>>2] = $35;
        $37 = (($this) + 28|0);
        HEAP32[$37>>2] = $35;
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
        break;
       }
       case 34:  {
        $1 = $data & 8;
        $2 = ($1|0)==(0);
        if ($2) {
         $7 = (($this) + 13620|0);
         HEAP32[$7>>2] = 0;
         $8 = (($this) + 13624|0);
         HEAP32[$8>>2] = 0;
         $$0 = 0;
         STACKTOP = sp;return ($$0|0);
        } else {
         $3 = $data & 7;
         $4 = ((($this) + ($3<<2)|0) + 15740|0);
         $5 = HEAP32[$4>>2]|0;
         $6 = (($this) + 13624|0);
         HEAP32[$6>>2] = $5;
         $$0 = 0;
         STACKTOP = sp;return ($$0|0);
        }
        break;
       }
       case 37:  {
        $20 = (($this) + 8|0);
        $21 = HEAP32[$20>>2]|0;
        $22 = $21 & 1020;
        $23 = $data & 3;
        $24 = $22 | $23;
        HEAP32[$20>>2] = $24;
        $25 = (($this) + 12|0);
        $26 = HEAP32[$25>>2]|0;
        $27 = (1024 - ($24))|0;
        $28 = $27 << 12;
        $29 = ($26|0)==($28|0);
        if ($29) {
         $$0 = 0;
         STACKTOP = sp;return ($$0|0);
        }
        HEAP32[$25>>2] = $28;
        $30 = (($this) + 16|0);
        HEAP32[$30>>2] = $28;
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
        break;
       }
       case 39:  {
        $38 = (($this) + 32|0);
        $39 = HEAP32[$38>>2]|0;
        $40 = $39 ^ $data;
        $41 = $40 & 64;
        $42 = ($41|0)==(0);
        if (!($42)) {
         $43 = (($this) + 1300|0);
         HEAP32[$43>>2] = -1;
        }
        $44 = $data ^ -16;
        $45 = $44 >> 4;
        $46 = $data >> 2;
        $47 = $45 & $46;
        $48 = (($this) + 4|0);
        $49 = HEAP32[$48>>2]|0;
        $50 = $47 & $49;
        HEAP32[$48>>2] = $50;
        HEAP32[$38>>2] = $data;
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
        break;
       }
       case 36:  {
        $9 = (($this) + 8|0);
        $10 = HEAP32[$9>>2]|0;
        $11 = $10 & 3;
        $12 = $data << 2;
        $13 = $11 | $12;
        HEAP32[$9>>2] = $13;
        $14 = (($this) + 12|0);
        $15 = HEAP32[$14>>2]|0;
        $16 = (1024 - ($13))|0;
        $17 = $16 << 12;
        $18 = ($15|0)==($17|0);
        if ($18) {
         $$0 = 0;
         STACKTOP = sp;return ($$0|0);
        }
        HEAP32[$14>>2] = $17;
        $19 = (($this) + 16|0);
        HEAP32[$19>>2] = $17;
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
        break;
       }
       case 43:  {
        $65 = (($this) + 36|0);
        $66 = $data & 128;
        HEAP32[$65>>2] = $66;
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
        break;
       }
       case 40:  {
        $51 = $data & 3;
        $52 = ($51|0)==(3);
        if ($52) {
         $$0 = 1;
         STACKTOP = sp;return ($$0|0);
        }
        $53 = $data & 4;
        $54 = ($53|0)==(0);
        $55 = (($51) + 3)|0;
        $$ = $54 ? $51 : $55;
        $56 = ((($this) + (($$*556)|0)|0) + 40|0);
        $57 = $data & 16;
        $58 = ($57|0)==(0);
        if ($58) {
         __ZN11Ym2612_Impl7KEY_OFFER9channel_ti($this,$56,0);
        } else {
         __ZN11Ym2612_Impl6KEY_ONER9channel_ti($this,$56,0);
        }
        $59 = $data & 32;
        $60 = ($59|0)==(0);
        if ($60) {
         __ZN11Ym2612_Impl7KEY_OFFER9channel_ti($this,$56,2);
        } else {
         __ZN11Ym2612_Impl6KEY_ONER9channel_ti($this,$56,2);
        }
        $61 = $data & 64;
        $62 = ($61|0)==(0);
        if ($62) {
         __ZN11Ym2612_Impl7KEY_OFFER9channel_ti($this,$56,1);
        } else {
         __ZN11Ym2612_Impl6KEY_ONER9channel_ti($this,$56,1);
        }
        $63 = $data & 128;
        $64 = ($63|0)==(0);
        if ($64) {
         __ZN11Ym2612_Impl7KEY_OFFER9channel_ti($this,$56,3);
         $$0 = 0;
         STACKTOP = sp;return ($$0|0);
        } else {
         __ZN11Ym2612_Impl6KEY_ONER9channel_ti($this,$56,3);
         $$0 = 0;
         STACKTOP = sp;return ($$0|0);
        }
        break;
       }
       default: {
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
       }
       }
       return 0|0;
      }
      function __ZN11Ym2612_Impl8set_rateEdd($this,$sample_rate,$clock_rate) {
       $this = $this|0;
       $sample_rate = +$sample_rate;
       $clock_rate = +$clock_rate;
       var $$ = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0.0;
       var $116 = 0.0, $117 = 0.0, $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
       var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0;
       var $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0.0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0.0, $17 = 0.0;
       var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0, $18 = 0.0, $180 = 0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0.0;
       var $189 = 0, $19 = 0.0, $190 = 0, $191 = 0.0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0.0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0, $202 = 0, $203 = 0.0, $204 = 0, $205 = 0;
       var $206 = 0.0, $207 = 0, $208 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0;
       var $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0;
       var $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0;
       var $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
       var $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $Frequence$0 = 0.0, $exitcond = 0, $exitcond$1 = 0, $exitcond$2 = 0, $exitcond$3 = 0, $exitcond30 = 0, $exitcond33 = 0, $exitcond39 = 0, $exitcond40 = 0, $exitcond43 = 0, $exitcond47 = 0;
       var $exitcond48 = 0, $exitcond49 = 0, $exitcond50 = 0, $i$026 = 0, $i$107 = 0, $i$107$phi = 0, $i$125 = 0, $i$125$phi = 0, $i$224 = 0, $i$224$phi = 0, $i$322 = 0, $i$322$phi = 0, $i$518 = 0, $i$614 = 0, $i$614$phi = 0, $i$712 = 0, $i$712$phi = 0, $i$99 = 0, $i$99$phi = 0, $j4$017 = 0;
       var $j4$1$lcssa = 0, $j4$116 = 0, $j4$116$phi = 0, $j8$01 = 0, $j8$01$1 = 0, $j8$01$1$phi = 0, $j8$01$2 = 0, $j8$01$2$phi = 0, $j8$01$3 = 0, $j8$01$3$phi = 0, $j8$01$phi = 0, $scevgep = 0, $scevgep29 = 0, $scevgep45 = 0, $scevgep4546 = 0, dest = 0, label = 0, sp = 0, stop = 0;
       sp = STACKTOP;
       $1 = $sample_rate != 0.0;
       if (!($1)) {
        ___assert_fail(((53576)|0),((53592)|0),633,((53632)|0));
        // unreachable;
       }
       $2 = $clock_rate > $sample_rate;
       if (!($2)) {
        ___assert_fail(((53648)|0),((53592)|0),634,((53632)|0));
        // unreachable;
       }
       $3 = $clock_rate / $sample_rate;
       $4 = $3 / 144.0;
       $5 = $4 + -1.0;
       $6 = (+Math_abs((+$5)));
       $7 = $6 < 9.99999999999999954748E-8;
       $Frequence$0 = $7 ? 1.0 : $4;
       $8 = $Frequence$0 * 4096.0;
       $9 = (~~(($8)));
       $10 = ($this);
       HEAP32[$10>>2] = $9;
       $i$026 = 0;
       while(1) {
        $11 = ($i$026|0)>(3327);
        if ($11) {
         $12 = ((($this) + ($i$026<<2)|0) + 36268|0);
         HEAP32[$12>>2] = 0;
         $13 = (($i$026) + 12288)|0;
         $14 = ((($this) + ($13<<2)|0) + 36268|0);
         HEAP32[$14>>2] = 0;
        } else {
         $15 = (+($i$026|0));
         $16 = $15 * 0.0234375;
         $17 = $16 / 20.0;
         $18 = (+Math_pow(10.0,(+$17)));
         $19 = 268435455.0 / $18;
         $20 = (~~(($19)));
         $21 = ((($this) + ($i$026<<2)|0) + 36268|0);
         HEAP32[$21>>2] = $20;
         $22 = (0 - ($20))|0;
         $23 = (($i$026) + 12288)|0;
         $24 = ((($this) + ($23<<2)|0) + 36268|0);
         HEAP32[$24>>2] = $22;
        }
        $25 = (($i$026) + 1)|0;
        $exitcond50 = ($25|0)==(12288);
        if ($exitcond50) {
         break;
        } else {
         $i$026 = $25;
        }
       }
       $26 = (($this) + 9524|0);
       HEAP16[$26>>1] = 3328;
       $27 = (($this) + 5428|0);
       HEAP16[$27>>1] = 3328;
       $i$125 = 1;
       while(1) {
        $28 = (+($i$125|0));
        $29 = $28 * 6.283185307179586232;
        $30 = $29 * 2.44140625E-4;
        $31 = (+Math_sin((+$30)));
        $32 = 1.0 / $31;
        $33 = (+_log10((+$32)));
        $34 = $33 * 20.0;
        $35 = $34 / 0.0234375;
        $36 = (~~(($35)));
        $37 = ($36|0)>(3328);
        $$ = $37 ? 3328 : $36;
        $38 = $$&65535;
        $39 = (2048 - ($i$125))|0;
        $40 = ((($this) + ($39<<1)|0) + 5428|0);
        HEAP16[$40>>1] = $38;
        $41 = ((($this) + ($i$125<<1)|0) + 5428|0);
        HEAP16[$41>>1] = $38;
        $42 = (($$) + 12288)|0;
        $43 = $42&65535;
        $44 = (4096 - ($i$125))|0;
        $45 = ((($this) + ($44<<1)|0) + 5428|0);
        HEAP16[$45>>1] = $43;
        $46 = (($i$125) + 2048)|0;
        $47 = ((($this) + ($46<<1)|0) + 5428|0);
        HEAP16[$47>>1] = $43;
        $48 = (($i$125) + 1)|0;
        $exitcond49 = ($48|0)==(1025);
        if ($exitcond49) {
         $i$224 = 0;
         break;
        } else {
         $i$125$phi = $48;$i$125 = $i$125$phi;
        }
       }
       while(1) {
        $49 = (+($i$224|0));
        $50 = $49 * 6.283185307179586232;
        $51 = $50 * 9.765625E-4;
        $52 = (+Math_sin((+$51)));
        $53 = $52 + 1.0;
        $54 = $53 * 0.5;
        $55 = $54 * 503.466666666666696983;
        $56 = (~~(($55)));
        $57 = $56&65535;
        $58 = ((($this) + ($i$224<<1)|0) + 32172|0);
        HEAP16[$58>>1] = $57;
        $59 = $52 * 511.0;
        $60 = (~~(($59)));
        $61 = $60&65535;
        $62 = ((($this) + ($i$224<<1)|0) + 34220|0);
        HEAP16[$62>>1] = $61;
        $63 = (($i$224) + 1)|0;
        $exitcond48 = ($63|0)==(1024);
        if ($exitcond48) {
         $i$322 = 0;
         break;
        } else {
         $i$224$phi = $63;$i$224 = $i$224$phi;
        }
       }
       while(1) {
        $64 = (4095 - ($i$322))|0;
        $65 = (+($64|0));
        $66 = $65 * 2.44140625E-4;
        $67 = (+Math_pow((+$66),8.0));
        $68 = $67 * 4096.0;
        $69 = (~~(($68)));
        $70 = $69&65535;
        $71 = ((($this) + ($i$322<<1)|0) + 15772|0);
        HEAP16[$71>>1] = $70;
        $72 = (+($i$322|0));
        $73 = $72 * 2.44140625E-4;
        $74 = $73 * 4096.0;
        $75 = (~~(($74)));
        $76 = $75&65535;
        $77 = (($i$322) + 4096)|0;
        $78 = ((($this) + ($77<<1)|0) + 15772|0);
        HEAP16[$78>>1] = $76;
        $79 = (($i$322) + 1)|0;
        $exitcond47 = ($79|0)==(4096);
        if ($exitcond47) {
         break;
        } else {
         $i$322$phi = $79;$i$322 = $i$322$phi;
        }
       }
       $scevgep45 = (($this) + 32156|0);
       $scevgep4546 = $scevgep45;
       ;HEAP16[$scevgep4546+0>>1]=0|0;HEAP16[$scevgep4546+2>>1]=0|0;HEAP16[$scevgep4546+4>>1]=0|0;HEAP16[$scevgep4546+6>>1]=0|0;HEAP16[$scevgep4546+8>>1]=0|0;HEAP16[$scevgep4546+10>>1]=0|0;HEAP16[$scevgep4546+12>>1]=0|0;HEAP16[$scevgep4546+14>>1]=0|0;
       $80 = (($this) + 32156|0);
       HEAP16[$80>>1] = 4095;
       $i$518 = 0;$j4$017 = 4095;
       while(1) {
        $81 = ($j4$017|0)==(0);
        L23: do {
         if ($81) {
          $j4$1$lcssa = 0;
         } else {
          $j4$116 = $j4$017;
          while(1) {
           $83 = ((($this) + ($j4$116<<1)|0) + 15772|0);
           $84 = HEAP16[$83>>1]|0;
           $85 = $84 << 16 >> 16;
           $86 = ($85|0)<($i$518|0);
           $87 = (($j4$116) + -1)|0;
           if (!($86)) {
            $j4$1$lcssa = $j4$116;
            break L23;
           }
           $82 = ($87|0)==(0);
           if ($82) {
            $j4$1$lcssa = 0;
            break;
           } else {
            $j4$116$phi = $87;$j4$116 = $j4$116$phi;
           }
          }
         }
        } while(0);
        $88 = $j4$1$lcssa << 16;
        $89 = ((($this) + ($i$518<<2)|0) + 134572|0);
        HEAP32[$89>>2] = $88;
        $90 = (($i$518) + 1)|0;
        $exitcond43 = ($90|0)==(4096);
        if ($exitcond43) {
         $i$614 = 0;
         break;
        } else {
         $i$518 = $90;$j4$017 = $j4$1$lcssa;
        }
       }
       while(1) {
        $91 = ($i$614*3)|0;
        $92 = (+($91|0));
        $93 = $92 / 0.0234375;
        $94 = (~~(($93)));
        $95 = $94 << 16;
        $96 = (($95) + 268435456)|0;
        $97 = ((($this) + ($i$614<<2)|0) + 15548|0);
        HEAP32[$97>>2] = $96;
        $98 = (($i$614) + 1)|0;
        $exitcond40 = ($98|0)==(15);
        if ($exitcond40) {
         break;
        } else {
         $i$614$phi = $98;$i$614 = $i$614$phi;
        }
       }
       $99 = (($this) + 15608|0);
       HEAP32[$99>>2] = 536805376;
       $i$712 = 0;
       while(1) {
        $100 = (+($i$712|0));
        $101 = $Frequence$0 * $100;
        $102 = $101 * 4096.0;
        $103 = $102 * 0.5;
        $104 = (~~(($103))>>>0);
        $105 = ((($this) + ($i$712<<2)|0) + 150956|0);
        HEAP32[$105>>2] = $104;
        $106 = (($i$712) + 1)|0;
        $exitcond39 = ($106|0)==(2048);
        if ($exitcond39) {
         break;
        } else {
         $i$712$phi = $106;$i$712 = $i$712$phi;
        }
       }
       $107 = (($this) + 13628|0);
       $108 = (($this) + 14140|0);
       $109 = $107;
       ;HEAP32[$109+0>>2]=0|0;HEAP32[$109+4>>2]=0|0;HEAP32[$109+8>>2]=0|0;HEAP32[$109+12>>2]=0|0;
       $110 = $108;
       ;HEAP32[$110+0>>2]=0|0;HEAP32[$110+4>>2]=0|0;HEAP32[$110+8>>2]=0|0;HEAP32[$110+12>>2]=0|0;
       $i$99 = 0;
       while(1) {
        $113 = $i$99 & 3;
        $114 = (+($113|0));
        $115 = $114 * 0.25;
        $116 = $115 + 1.0;
        $117 = $Frequence$0 * $116;
        $118 = $i$99 >> 2;
        $119 = 1 << $118;
        $120 = (+($119|0));
        $121 = $120 * $117;
        $122 = $121 * 268435456.0;
        $123 = $122 / 399128.0;
        $124 = (~~(($123))>>>0);
        $125 = (($i$99) + 4)|0;
        $126 = ((($this) + ($125<<2)|0) + 13628|0);
        HEAP32[$126>>2] = $124;
        $127 = $122 / 5514396.0;
        $128 = (~~(($127))>>>0);
        $129 = ((($this) + ($125<<2)|0) + 14140|0);
        HEAP32[$129>>2] = $128;
        $130 = (($i$99) + 1)|0;
        $exitcond33 = ($130|0)==(60);
        if ($exitcond33) {
         break;
        } else {
         $i$99$phi = $130;$i$99 = $i$99$phi;
        }
       }
       $111 = (($this) + 13880|0);
       $112 = (($this) + 14392|0);
       $i$107 = 64;
       while(1) {
        $131 = HEAP32[$111>>2]|0;
        $132 = ((($this) + ($i$107<<2)|0) + 13628|0);
        HEAP32[$132>>2] = $131;
        $133 = HEAP32[$112>>2]|0;
        $134 = ((($this) + ($i$107<<2)|0) + 14140|0);
        HEAP32[$134>>2] = $133;
        $135 = (($i$107) + -64)|0;
        $136 = ((($this) + ($135<<2)|0) + 15612|0);
        HEAP32[$136>>2] = 0;
        $137 = (($i$107) + 1)|0;
        $exitcond30 = ($137|0)==(96);
        if ($exitcond30) {
         break;
        } else {
         $i$107$phi = $137;$i$107 = $i$107$phi;
        }
       }
       $scevgep = (($this) + 14012|0);
       $scevgep29 = $scevgep;
       dest=$scevgep29+0|0; stop=dest+128|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));;
       $j8$01 = 0;
       while(1) {
        $138 = (53680 + ($j8$01)|0);
        $139 = HEAP8[$138]|0;
        $140 = (+($139&255));
        $141 = $Frequence$0 * $140;
        $142 = $141 * 32.0;
        $143 = (~~(($142)));
        $144 = ((($this) + ($j8$01<<2)|0) + 14524|0);
        HEAP32[$144>>2] = $143;
        $145 = -$142;
        $146 = (~~(($145)));
        $147 = ((($this) + ($j8$01<<2)|0) + 15036|0);
        HEAP32[$147>>2] = $146;
        $148 = (($j8$01) + 1)|0;
        $exitcond = ($148|0)==(32);
        if ($exitcond) {
         $j8$01$1 = 0;
         break;
        } else {
         $j8$01$phi = $148;$j8$01 = $j8$01$phi;
        }
       }
       while(1) {
        $149 = (($j8$01$1) + 32)|0;
        $150 = (53680 + ($149)|0);
        $151 = HEAP8[$150]|0;
        $152 = (+($151&255));
        $153 = $Frequence$0 * $152;
        $154 = $153 * 32.0;
        $155 = (~~(($154)));
        $156 = ((($this) + ($j8$01$1<<2)|0) + 14652|0);
        HEAP32[$156>>2] = $155;
        $157 = -$154;
        $158 = (~~(($157)));
        $159 = ((($this) + ($j8$01$1<<2)|0) + 15164|0);
        HEAP32[$159>>2] = $158;
        $160 = (($j8$01$1) + 1)|0;
        $exitcond$1 = ($160|0)==(32);
        if ($exitcond$1) {
         $j8$01$2 = 0;
         break;
        } else {
         $j8$01$1$phi = $160;$j8$01$1 = $j8$01$1$phi;
        }
       }
       while(1) {
        $161 = (($j8$01$2) + 64)|0;
        $162 = (53680 + ($161)|0);
        $163 = HEAP8[$162]|0;
        $164 = (+($163&255));
        $165 = $Frequence$0 * $164;
        $166 = $165 * 32.0;
        $167 = (~~(($166)));
        $168 = ((($this) + ($j8$01$2<<2)|0) + 14780|0);
        HEAP32[$168>>2] = $167;
        $169 = -$166;
        $170 = (~~(($169)));
        $171 = ((($this) + ($j8$01$2<<2)|0) + 15292|0);
        HEAP32[$171>>2] = $170;
        $172 = (($j8$01$2) + 1)|0;
        $exitcond$2 = ($172|0)==(32);
        if ($exitcond$2) {
         $j8$01$3 = 0;
         break;
        } else {
         $j8$01$2$phi = $172;$j8$01$2 = $j8$01$2$phi;
        }
       }
       while(1) {
        $173 = (($j8$01$3) + 96)|0;
        $174 = (53680 + ($173)|0);
        $175 = HEAP8[$174]|0;
        $176 = (+($175&255));
        $177 = $Frequence$0 * $176;
        $178 = $177 * 32.0;
        $179 = (~~(($178)));
        $180 = ((($this) + ($j8$01$3<<2)|0) + 14908|0);
        HEAP32[$180>>2] = $179;
        $181 = -$178;
        $182 = (~~(($181)));
        $183 = ((($this) + ($j8$01$3<<2)|0) + 15420|0);
        HEAP32[$183>>2] = $182;
        $184 = (($j8$01$3) + 1)|0;
        $exitcond$3 = ($184|0)==(32);
        if ($exitcond$3) {
         break;
        } else {
         $j8$01$3$phi = $184;$j8$01$3 = $j8$01$3$phi;
        }
       }
       $185 = 1068373114.87999999523 / $sample_rate;
       $186 = (~~(($185))>>>0);
       $187 = (($this) + 15740|0);
       HEAP32[$187>>2] = $186;
       $188 = 1492501135.3599998951 / $sample_rate;
       $189 = (~~(($188))>>>0);
       $190 = (($this) + 15744|0);
       HEAP32[$190>>2] = $189;
       $191 = 1615981445.11999988556 / $sample_rate;
       $192 = (~~(($191))>>>0);
       $193 = (($this) + 15748|0);
       HEAP32[$193>>2] = $192;
       $194 = 1709933854.72000002861 / $sample_rate;
       $195 = (~~(($194))>>>0);
       $196 = (($this) + 15752|0);
       HEAP32[$196>>2] = $195;
       $197 = 1846835937.27999997139 / $sample_rate;
       $198 = (~~(($197))>>>0);
       $199 = (($this) + 15756|0);
       HEAP32[$199>>2] = $198;
       $200 = 2585033441.28000020981 / $sample_rate;
       $201 = (~~(($200))>>>0);
       $202 = (($this) + 15760|0);
       HEAP32[$202>>2] = $201;
       $203 = 12911745433.6000003815 / $sample_rate;
       $204 = (~~(($203))>>>0);
       $205 = (($this) + 15764|0);
       HEAP32[$205>>2] = $204;
       $206 = 19381039923.2000007629 / $sample_rate;
       $207 = (~~(($206))>>>0);
       $208 = (($this) + 15768|0);
       HEAP32[$208>>2] = $207;
       __ZN11Ym2612_Impl5resetEv($this);
       STACKTOP = sp;return;
      }
      function __ZN11Ym2612_Impl5resetEv($this) {
       $this = $this|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
       var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
       var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0;
       var $exitcond = 0, $exitcond15 = 0, $i$07 = 0, $i$07$phi = 0, $i$15 = 0, $i$15$phi = 0, $i$31 = 0, $i$31$phi = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($this) + 13620|0);
       HEAP32[$1>>2] = 0;
       $2 = (($this) + 36|0);
       HEAP32[$2>>2] = 0;
       $3 = (($this) + 4|0);
       $4 = $3;
       ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;HEAP32[$4+16>>2]=0|0;HEAP32[$4+20>>2]=0|0;HEAP32[$4+24>>2]=0|0;
       $i$07 = 0;
       while(1) {
        $5 = ((($this) + (($i$07*556)|0)|0) + 56|0);
        HEAP32[$5>>2] = -1;
        $6 = ((($this) + (($i$07*556)|0)|0) + 60|0);
        HEAP32[$6>>2] = -1;
        $7 = ((($this) + (($i$07*556)|0)|0) + 64|0);
        HEAP32[$7>>2] = 0;
        $8 = ((($this) + (($i$07*556)|0)|0) + 68|0);
        HEAP32[$8>>2] = 31;
        $9 = ((($this) + (($i$07*556)|0)|0) + 72|0);
        HEAP32[$9>>2] = 0;
        $10 = ((($this) + (($i$07*556)|0)|0) + 76|0);
        HEAP32[$10>>2] = 0;
        $11 = ((($this) + (($i$07*556)|0)|0) + 40|0);
        HEAP32[$11>>2] = 0;
        $12 = ((($this) + (($i$07*556)|0)|0) + 80|0);
        HEAP32[$12>>2] = 0;
        $13 = ((($this) + (($i$07*556)|0)|0) + 96|0);
        HEAP32[$13>>2] = 0;
        $14 = ((($this) + (($i$07*556)|0)|0) + 112|0);
        HEAP32[$14>>2] = 0;
        $15 = ((($this) + (($i$07*556)|0)|0) + 184|0);
        HEAP32[$15>>2] = 0;
        $16 = ((($this) + (($i$07*556)|0)|0) + 188|0);
        HEAP32[$16>>2] = 0;
        $17 = ((($this) + (($i$07*556)|0)|0) + 196|0);
        HEAP32[$17>>2] = 536870912;
        $18 = ((($this) + (($i$07*556)|0)|0) + 200|0);
        HEAP32[$18>>2] = 0;
        $19 = ((($this) + (($i$07*556)|0)|0) + 204|0);
        HEAP32[$19>>2] = 0;
        $20 = ((($this) + (($i$07*556)|0)|0) + 192|0);
        HEAP32[$20>>2] = 3;
        $21 = ((($this) + (($i$07*556)|0)|0) + 232|0);
        HEAP32[$21>>2] = 0;
        $22 = ((($this) + (($i$07*556)|0)|0) + 44|0);
        HEAP32[$22>>2] = 0;
        $23 = ((($this) + (($i$07*556)|0)|0) + 84|0);
        HEAP32[$23>>2] = 0;
        $24 = ((($this) + (($i$07*556)|0)|0) + 100|0);
        HEAP32[$24>>2] = 0;
        $25 = ((($this) + (($i$07*556)|0)|0) + 116|0);
        HEAP32[$25>>2] = 0;
        $26 = ((($this) + (($i$07*556)|0)|0) + 300|0);
        HEAP32[$26>>2] = 0;
        $27 = ((($this) + (($i$07*556)|0)|0) + 304|0);
        HEAP32[$27>>2] = 0;
        $28 = ((($this) + (($i$07*556)|0)|0) + 312|0);
        HEAP32[$28>>2] = 536870912;
        $29 = ((($this) + (($i$07*556)|0)|0) + 316|0);
        HEAP32[$29>>2] = 0;
        $30 = ((($this) + (($i$07*556)|0)|0) + 320|0);
        HEAP32[$30>>2] = 0;
        $31 = ((($this) + (($i$07*556)|0)|0) + 308|0);
        HEAP32[$31>>2] = 3;
        $32 = ((($this) + (($i$07*556)|0)|0) + 348|0);
        HEAP32[$32>>2] = 0;
        $33 = ((($this) + (($i$07*556)|0)|0) + 48|0);
        HEAP32[$33>>2] = 0;
        $34 = ((($this) + (($i$07*556)|0)|0) + 88|0);
        HEAP32[$34>>2] = 0;
        $35 = ((($this) + (($i$07*556)|0)|0) + 104|0);
        HEAP32[$35>>2] = 0;
        $36 = ((($this) + (($i$07*556)|0)|0) + 120|0);
        HEAP32[$36>>2] = 0;
        $37 = ((($this) + (($i$07*556)|0)|0) + 416|0);
        HEAP32[$37>>2] = 0;
        $38 = ((($this) + (($i$07*556)|0)|0) + 420|0);
        HEAP32[$38>>2] = 0;
        $39 = ((($this) + (($i$07*556)|0)|0) + 428|0);
        HEAP32[$39>>2] = 536870912;
        $40 = ((($this) + (($i$07*556)|0)|0) + 432|0);
        HEAP32[$40>>2] = 0;
        $41 = ((($this) + (($i$07*556)|0)|0) + 436|0);
        HEAP32[$41>>2] = 0;
        $42 = ((($this) + (($i$07*556)|0)|0) + 424|0);
        HEAP32[$42>>2] = 3;
        $43 = ((($this) + (($i$07*556)|0)|0) + 464|0);
        HEAP32[$43>>2] = 0;
        $44 = ((($this) + (($i$07*556)|0)|0) + 52|0);
        HEAP32[$44>>2] = 0;
        $45 = ((($this) + (($i$07*556)|0)|0) + 92|0);
        HEAP32[$45>>2] = 0;
        $46 = ((($this) + (($i$07*556)|0)|0) + 108|0);
        HEAP32[$46>>2] = 0;
        $47 = ((($this) + (($i$07*556)|0)|0) + 124|0);
        HEAP32[$47>>2] = 0;
        $48 = ((($this) + (($i$07*556)|0)|0) + 532|0);
        HEAP32[$48>>2] = 0;
        $49 = ((($this) + (($i$07*556)|0)|0) + 536|0);
        HEAP32[$49>>2] = 0;
        $50 = ((($this) + (($i$07*556)|0)|0) + 544|0);
        HEAP32[$50>>2] = 536870912;
        $51 = ((($this) + (($i$07*556)|0)|0) + 548|0);
        HEAP32[$51>>2] = 0;
        $52 = ((($this) + (($i$07*556)|0)|0) + 552|0);
        HEAP32[$52>>2] = 0;
        $53 = ((($this) + (($i$07*556)|0)|0) + 540|0);
        HEAP32[$53>>2] = 3;
        $54 = ((($this) + (($i$07*556)|0)|0) + 580|0);
        HEAP32[$54>>2] = 0;
        $55 = (($i$07) + 1)|0;
        $exitcond15 = ($55|0)==(6);
        if ($exitcond15) {
         $i$15 = 0;
         break;
        } else {
         $i$07$phi = $55;$i$07 = $i$07$phi;
        }
       }
       while(1) {
        $56 = ((($this) + ($i$15<<2)|0) + 3376|0);
        HEAP32[$56>>2] = -1;
        $57 = ((($this) + ($i$15<<2)|0) + 4400|0);
        HEAP32[$57>>2] = -1;
        $58 = (($i$15) + 1)|0;
        $exitcond = ($58|0)==(256);
        if ($exitcond) {
         break;
        } else {
         $i$15$phi = $58;$i$15 = $i$15$phi;
        }
       }
       __ZN11Ym2612_Impl6write0Eii($this,182,192);
       __ZN11Ym2612_Impl6write1Eii($this,182,192);
       __ZN11Ym2612_Impl6write0Eii($this,181,192);
       __ZN11Ym2612_Impl6write1Eii($this,181,192);
       __ZN11Ym2612_Impl6write0Eii($this,180,192);
       __ZN11Ym2612_Impl6write1Eii($this,180,192);
       $i$31 = 178;
       while(1) {
        __ZN11Ym2612_Impl6write0Eii($this,$i$31,0);
        __ZN11Ym2612_Impl6write1Eii($this,$i$31,0);
        $59 = (($i$31) + -1)|0;
        $60 = ($59|0)>(33);
        if ($60) {
         $i$31$phi = $59;$i$31 = $i$31$phi;
        } else {
         break;
        }
       }
       __ZN11Ym2612_Impl6write0Eii($this,42,128);
       STACKTOP = sp;return;
      }
      function __ZN10Ym2612_Emu8set_rateEdd($this,$sample_rate,$clock_rate) {
       $this = $this|0;
       $sample_rate = +$sample_rate;
       $clock_rate = +$clock_rate;
       var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = HEAP32[$1>>2]|0;
       $3 = ($2|0)==(0|0);
       do {
        if ($3) {
         $4 = (_malloc(159148)|0);
         $5 = $4;
         HEAP32[$1>>2] = $5;
         $6 = ($4|0)==(0|0);
         if ($6) {
          $$0 = (53808);
          STACKTOP = sp;return ($$0|0);
         } else {
          $7 = (($4) + 5424|0);
          $8 = $7;
          HEAP32[$8>>2] = 0;
          break;
         }
        }
       } while(0);
       $9 = HEAP32[$1>>2]|0;
       $10 = $9;
       _memset(($10|0),0,5424)|0;
       $11 = HEAP32[$1>>2]|0;
       __ZN11Ym2612_Impl8set_rateEdd($11,$sample_rate,$clock_rate);
       $$0 = 0;
       STACKTOP = sp;return ($$0|0);
      }
      function __ZN10Ym2612_EmuD2Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = HEAP32[$1>>2]|0;
       $3 = $2;
       _free($3);
       STACKTOP = sp;return;
      }
      function __ZN10Ym2612_Emu5resetEv($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = HEAP32[$1>>2]|0;
       __ZN11Ym2612_Impl5resetEv($2);
       STACKTOP = sp;return;
      }
      function __ZN11Ym2612_Impl6write0Eii($this,$opn_addr,$data) {
       $this = $this|0;
       $opn_addr = $opn_addr|0;
       $data = $data|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($data>>>0)<(256);
       if (!($1)) {
        ___assert_fail(((53856)|0),((53592)|0),850,((53888)|0));
        // unreachable;
       }
       $2 = ($opn_addr|0)<(48);
       $3 = ((($this) + ($opn_addr<<2)|0) + 3376|0);
       if ($2) {
        HEAP32[$3>>2] = $data;
        (__ZN11Ym2612_Impl6YM_SETEii($this,$opn_addr,$data)|0);
        STACKTOP = sp;return;
       }
       $4 = HEAP32[$3>>2]|0;
       $5 = ($4|0)==($data|0);
       if ($5) {
        STACKTOP = sp;return;
       }
       HEAP32[$3>>2] = $data;
       $6 = ($opn_addr|0)<(160);
       if ($6) {
        (__ZN11Ym2612_Impl8SLOT_SETEii($this,$opn_addr,$data)|0);
        STACKTOP = sp;return;
       } else {
        (__ZN11Ym2612_Impl11CHANNEL_SETEii($this,$opn_addr,$data)|0);
        STACKTOP = sp;return;
       }
      }
      function __ZN11Ym2612_Impl6write1Eii($this,$opn_addr,$data) {
       $this = $this|0;
       $opn_addr = $opn_addr|0;
       $data = $data|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($data>>>0)<(256);
       if (!($1)) {
        ___assert_fail(((53856)|0),((53592)|0),870,((53880)|0));
        // unreachable;
       }
       $2 = ($opn_addr|0)>(47);
       if (!($2)) {
        STACKTOP = sp;return;
       }
       $3 = ((($this) + ($opn_addr<<2)|0) + 4400|0);
       $4 = HEAP32[$3>>2]|0;
       $5 = ($4|0)==($data|0);
       if ($5) {
        STACKTOP = sp;return;
       }
       HEAP32[$3>>2] = $data;
       $6 = ($opn_addr|0)<(160);
       $7 = (($opn_addr) + 256)|0;
       if ($6) {
        (__ZN11Ym2612_Impl8SLOT_SETEii($this,$7,$data)|0);
        STACKTOP = sp;return;
       } else {
        (__ZN11Ym2612_Impl11CHANNEL_SETEii($this,$7,$data)|0);
        STACKTOP = sp;return;
       }
      }
      function __ZN10Ym2612_Emu6write0Eii($this,$addr,$data) {
       $this = $this|0;
       $addr = $addr|0;
       $data = $data|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = HEAP32[$1>>2]|0;
       __ZN11Ym2612_Impl6write0Eii($2,$addr,$data);
       STACKTOP = sp;return;
      }
      function __ZN10Ym2612_Emu6write1Eii($this,$addr,$data) {
       $this = $this|0;
       $addr = $addr|0;
       $data = $data|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = HEAP32[$1>>2]|0;
       __ZN11Ym2612_Impl6write1Eii($2,$addr,$data);
       STACKTOP = sp;return;
      }
      function __ZN10Ym2612_Emu11mute_voicesEi($this,$mask) {
       $this = $this|0;
       $mask = $mask|0;
       var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = HEAP32[$1>>2]|0;
       $3 = (($2) + 5424|0);
       HEAP32[$3>>2] = $mask;
       STACKTOP = sp;return;
      }
      function __ZN11Ym2612_Impl9run_timerEi($this,$length) {
       $this = $this|0;
       $length = $length|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
       var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
       var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $remain$0 = 0, $remain$0$ = 0, $remain$0$phi = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = (($this) + 32|0);
       $3 = (($this) + 28|0);
       $4 = (($this) + 4|0);
       $5 = (($this) + 24|0);
       $6 = (($this) + 16|0);
       $7 = (($this) + 4|0);
       $8 = (($this) + 12|0);
       $9 = (($this) + 1152|0);
       $remain$0 = $length;
       while(1) {
        $10 = ($remain$0|0)<(6);
        $remain$0$ = $10 ? $remain$0 : 6;
        $11 = (($remain$0) - ($remain$0$))|0;
        $12 = HEAP32[$1>>2]|0;
        $13 = Math_imul($remain$0$, $12)|0;
        $14 = HEAP32[$2>>2]|0;
        $15 = $14 & 1;
        $16 = ($15|0)==(0);
        do {
         if (!($16)) {
          $17 = HEAP32[$6>>2]|0;
          $18 = (($17) - ($13))|0;
          HEAP32[$6>>2] = $18;
          $19 = ($18|0)<(1);
          if (!($19)) {
           break;
          }
          $20 = HEAP32[$2>>2]|0;
          $21 = $20 >>> 2;
          $22 = $21 & 1;
          $23 = HEAP32[$7>>2]|0;
          $24 = $22 | $23;
          HEAP32[$7>>2] = $24;
          $25 = HEAP32[$8>>2]|0;
          $26 = HEAP32[$6>>2]|0;
          $27 = (($26) + ($25))|0;
          HEAP32[$6>>2] = $27;
          $28 = HEAP32[$2>>2]|0;
          $29 = $28 & 128;
          $30 = ($29|0)==(0);
          if ($30) {
           break;
          }
          __ZN11Ym2612_Impl6KEY_ONER9channel_ti($this,$9,0);
          __ZN11Ym2612_Impl6KEY_ONER9channel_ti($this,$9,1);
          __ZN11Ym2612_Impl6KEY_ONER9channel_ti($this,$9,2);
          __ZN11Ym2612_Impl6KEY_ONER9channel_ti($this,$9,3);
         }
        } while(0);
        $31 = HEAP32[$2>>2]|0;
        $32 = $31 & 2;
        $33 = ($32|0)==(0);
        do {
         if (!($33)) {
          $34 = HEAP32[$3>>2]|0;
          $35 = (($34) - ($13))|0;
          HEAP32[$3>>2] = $35;
          $36 = ($35|0)<(1);
          if (!($36)) {
           break;
          }
          $37 = HEAP32[$2>>2]|0;
          $38 = $37 >>> 2;
          $39 = $38 & 2;
          $40 = HEAP32[$4>>2]|0;
          $41 = $39 | $40;
          HEAP32[$4>>2] = $41;
          $42 = HEAP32[$5>>2]|0;
          $43 = HEAP32[$3>>2]|0;
          $44 = (($43) + ($42))|0;
          HEAP32[$3>>2] = $44;
         }
        } while(0);
        $45 = ($11|0)>(0);
        if ($45) {
         $remain$0$phi = $11;$remain$0 = $remain$0$phi;
        } else {
         break;
        }
       }
       STACKTOP = sp;return;
      }
      function __ZN11Ym2612_Impl3runEiPs($this,$pair_count,$out) {
       $this = $this|0;
       $pair_count = $pair_count|0;
       $out = $out|0;
       var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
       var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
       var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
       var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
       var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
       var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
       var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $chi$07 = 0, $exitcond = 0, $exitcond9 = 0, $i$04 = 0, $i2$15 = 0, $i2$2 = 0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($pair_count|0)<(1);
       if ($1) {
        STACKTOP = sp;return;
       }
       $2 = (($this) + 32|0);
       $3 = HEAP32[$2>>2]|0;
       $4 = $3 & 3;
       $5 = ($4|0)==(0);
       if ($5) {
        $chi$07 = 0;
       } else {
        __ZN11Ym2612_Impl9run_timerEi($this,$pair_count);
        $chi$07 = 0;
       }
       while(1) {
        $6 = ((($this) + (($chi$07*556)|0)|0) + 188|0);
        $7 = HEAP32[$6>>2]|0;
        $8 = ($7|0)==(-1);
        if ($8) {
         $9 = ($chi$07|0)==(2);
         if ($9) {
          $10 = HEAP32[$2>>2]|0;
          $11 = $10 >>> 5;
          $12 = $11 & 2;
          $i$04 = 0;$i2$15 = $12;
         } else {
          $i$04 = 0;$i2$15 = 0;
         }
         while(1) {
          $13 = (((($this) + (($chi$07*556)|0)|0) + ($i2$15<<2)|0) + 80|0);
          $14 = HEAP32[$13>>2]|0;
          $15 = ((($this) + ($14<<2)|0) + 150956|0);
          $16 = HEAP32[$15>>2]|0;
          $17 = (((($this) + (($chi$07*556)|0)|0) + ($i2$15<<2)|0) + 96|0);
          $18 = HEAP32[$17>>2]|0;
          $19 = (7 - ($18))|0;
          $20 = $16 >>> $19;
          $21 = (((($this) + (($chi$07*556)|0)|0) + ($i2$15<<2)|0) + 112|0);
          $22 = HEAP32[$21>>2]|0;
          $23 = (((($this) + (($chi$07*556)|0)|0) + (($i$04*116)|0)|0) + 148|0);
          $24 = HEAP32[$23>>2]|0;
          $25 = $22 >> $24;
          $26 = (((($this) + (($chi$07*556)|0)|0) + (($i$04*116)|0)|0) + 128|0);
          $27 = HEAP32[$26>>2]|0;
          $28 = (($27) + ($22<<2)|0);
          $29 = HEAP32[$28>>2]|0;
          $30 = (($29) + ($20))|0;
          $31 = (((($this) + (($chi$07*556)|0)|0) + (($i$04*116)|0)|0) + 132|0);
          $32 = HEAP32[$31>>2]|0;
          $33 = Math_imul($30, $32)|0;
          $34 = (((($this) + (($chi$07*556)|0)|0) + (($i$04*116)|0)|0) + 188|0);
          HEAP32[$34>>2] = $33;
          $35 = (((($this) + (($chi$07*556)|0)|0) + (($i$04*116)|0)|0) + 152|0);
          $36 = HEAP32[$35>>2]|0;
          $37 = ($36|0)==($25|0);
          do {
           if (!($37)) {
            HEAP32[$35>>2] = $25;
            $38 = (((($this) + (($chi$07*556)|0)|0) + (($i$04*116)|0)|0) + 168|0);
            $39 = HEAP32[$38>>2]|0;
            $40 = (($39) + ($25<<2)|0);
            $41 = HEAP32[$40>>2]|0;
            $42 = (((($this) + (($chi$07*556)|0)|0) + (($i$04*116)|0)|0) + 208|0);
            HEAP32[$42>>2] = $41;
            $43 = (((($this) + (($chi$07*556)|0)|0) + (($i$04*116)|0)|0) + 172|0);
            $44 = HEAP32[$43>>2]|0;
            $45 = (($44) + ($25<<2)|0);
            $46 = HEAP32[$45>>2]|0;
            $47 = (((($this) + (($chi$07*556)|0)|0) + (($i$04*116)|0)|0) + 212|0);
            HEAP32[$47>>2] = $46;
            $48 = (((($this) + (($chi$07*556)|0)|0) + (($i$04*116)|0)|0) + 176|0);
            $49 = HEAP32[$48>>2]|0;
            $50 = (($49) + ($25<<2)|0);
            $51 = HEAP32[$50>>2]|0;
            $52 = (((($this) + (($chi$07*556)|0)|0) + (($i$04*116)|0)|0) + 216|0);
            HEAP32[$52>>2] = $51;
            $53 = (((($this) + (($chi$07*556)|0)|0) + (($i$04*116)|0)|0) + 180|0);
            $54 = HEAP32[$53>>2]|0;
            $55 = (($54) + ($25<<2)|0);
            $56 = HEAP32[$55>>2]|0;
            $57 = (((($this) + (($chi$07*556)|0)|0) + (($i$04*116)|0)|0) + 220|0);
            HEAP32[$57>>2] = $56;
            $58 = (((($this) + (($chi$07*556)|0)|0) + (($i$04*116)|0)|0) + 192|0);
            $59 = HEAP32[$58>>2]|0;
            if ((($59|0) == 1)) {
             $62 = HEAP32[$47>>2]|0;
             $63 = (((($this) + (($chi$07*556)|0)|0) + (($i$04*116)|0)|0) + 200|0);
             HEAP32[$63>>2] = $62;
             break;
            } else if ((($59|0) == 0)) {
             $60 = HEAP32[$42>>2]|0;
             $61 = (((($this) + (($chi$07*556)|0)|0) + (($i$04*116)|0)|0) + 200|0);
             HEAP32[$61>>2] = $60;
             break;
            } else {
             $64 = (((($this) + (($chi$07*556)|0)|0) + (($i$04*116)|0)|0) + 196|0);
             $65 = HEAP32[$64>>2]|0;
             $66 = ($65|0)<(536870912);
             if (!($66)) {
              break;
             }
             if ((($59|0) == 2)) {
              $67 = HEAP32[$52>>2]|0;
              $68 = (((($this) + (($chi$07*556)|0)|0) + (($i$04*116)|0)|0) + 200|0);
              HEAP32[$68>>2] = $67;
              break;
             } else if ((($59|0) == 3)) {
              $69 = (((($this) + (($chi$07*556)|0)|0) + (($i$04*116)|0)|0) + 200|0);
              HEAP32[$69>>2] = $56;
              break;
             } else {
              break;
             }
            }
           }
          } while(0);
          $70 = ($i2$15|0)==(0);
          if ($70) {
           $i2$2 = 0;
          } else {
           $71 = $i2$15 ^ 2;
           $72 = $i2$15 >> 1;
           $73 = $71 ^ $72;
           $i2$2 = $73;
          }
          $74 = (($i$04) + 1)|0;
          $exitcond = ($74|0)==(4);
          if ($exitcond) {
           break;
          } else {
           $i$04 = $74;$i2$15 = $i2$2;
          }
         }
        }
        $75 = (($chi$07) + 1)|0;
        $exitcond9 = ($75|0)==(6);
        if ($exitcond9) {
         break;
        } else {
         $chi$07 = $75;
        }
       }
       $76 = (($this) + 5424|0);
       $77 = (($this) + 36|0);
       $78 = (($this) + 5428|0);
       $79 = HEAP32[$76>>2]|0;
       $80 = $79 & 1;
       $81 = ($80|0)==(0);
       if ($81) {
        $82 = (($this) + 40|0);
        $83 = (($this) + 64|0);
        $84 = HEAP32[$83>>2]|0;
        $85 = ((53824) + ($84<<2)|0);
        $86 = HEAP32[$85>>2]|0;
        FUNCTION_TABLE_viiii[$86 & 15]($78,$82,$out,$pair_count);
       }
       $87 = HEAP32[$76>>2]|0;
       $88 = $87 & 2;
       $89 = ($88|0)==(0);
       if ($89) {
        $90 = (($this) + 596|0);
        $91 = (($this) + 620|0);
        $92 = HEAP32[$91>>2]|0;
        $93 = ((53824) + ($92<<2)|0);
        $94 = HEAP32[$93>>2]|0;
        FUNCTION_TABLE_viiii[$94 & 15]($78,$90,$out,$pair_count);
       }
       $95 = HEAP32[$76>>2]|0;
       $96 = $95 & 4;
       $97 = ($96|0)==(0);
       if ($97) {
        $98 = (($this) + 1152|0);
        $99 = (($this) + 1176|0);
        $100 = HEAP32[$99>>2]|0;
        $101 = ((53824) + ($100<<2)|0);
        $102 = HEAP32[$101>>2]|0;
        FUNCTION_TABLE_viiii[$102 & 15]($78,$98,$out,$pair_count);
       }
       $103 = HEAP32[$76>>2]|0;
       $104 = $103 & 8;
       $105 = ($104|0)==(0);
       if ($105) {
        $106 = (($this) + 1708|0);
        $107 = (($this) + 1732|0);
        $108 = HEAP32[$107>>2]|0;
        $109 = ((53824) + ($108<<2)|0);
        $110 = HEAP32[$109>>2]|0;
        FUNCTION_TABLE_viiii[$110 & 15]($78,$106,$out,$pair_count);
       }
       $111 = HEAP32[$76>>2]|0;
       $112 = $111 & 16;
       $113 = ($112|0)==(0);
       if ($113) {
        $114 = (($this) + 2264|0);
        $115 = (($this) + 2288|0);
        $116 = HEAP32[$115>>2]|0;
        $117 = ((53824) + ($116<<2)|0);
        $118 = HEAP32[$117>>2]|0;
        FUNCTION_TABLE_viiii[$118 & 15]($78,$114,$out,$pair_count);
       }
       $119 = HEAP32[$76>>2]|0;
       $120 = $119 & 32;
       $121 = ($120|0)==(0);
       do {
        if ($121) {
         $122 = HEAP32[$77>>2]|0;
         $123 = ($122|0)==(0);
         if (!($123)) {
          break;
         }
         $124 = (($this) + 2820|0);
         $125 = (($this) + 2844|0);
         $126 = HEAP32[$125>>2]|0;
         $127 = ((53824) + ($126<<2)|0);
         $128 = HEAP32[$127>>2]|0;
         FUNCTION_TABLE_viiii[$128 & 15]($78,$124,$out,$pair_count);
        }
       } while(0);
       $129 = (($this) + 13624|0);
       $130 = HEAP32[$129>>2]|0;
       $131 = Math_imul($130, $pair_count)|0;
       $132 = (($this) + 13620|0);
       $133 = HEAP32[$132>>2]|0;
       $134 = (($133) + ($131))|0;
       HEAP32[$132>>2] = $134;
       STACKTOP = sp;return;
      }
      function __ZN10Ym2612_Emu3runEiPs($this,$pair_count,$out) {
       $this = $this|0;
       $pair_count = $pair_count|0;
       $out = $out|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = HEAP32[$1>>2]|0;
       __ZN11Ym2612_Impl3runEiPs($2,$pair_count,$out);
       STACKTOP = sp;return;
      }
      function __ZN18ym2612_update_chanILi0EE4funcER8tables_tR9channel_tPsi($g,$ch,$buf,$length) {
       $g = $g|0;
       $ch = $ch|0;
       $buf = $buf|0;
       $length = $length|0;
       var $$0 = 0, $$0$phi = 0, $$01 = 0, $$01$phi = 0, $$pn = 0, $$pn$phi = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
       var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
       var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
       var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
       var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
       var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
       var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
       var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
       var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
       var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
       var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $CH_S0_OUT_1$0 = 0, $CH_S0_OUT_1$0$phi = 0, $YM2612_LFOcnt$0 = 0, $in0$0 = 0, $in0$0$phi = 0, $in1$0 = 0, $in1$0$phi = 0, $in2$0 = 0, $in2$0$phi = 0, $in3$0 = 0, $in3$0$phi = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($ch) + 436|0);
       $2 = (($ch) + 504|0);
       $3 = HEAP32[$2>>2]|0;
       $4 = (($ch) + 4|0);
       $5 = (($ch) + 88|0);
       $6 = (($ch) + 144|0);
       $7 = (($ch) + 320|0);
       $8 = (($ch) + 376|0);
       $9 = (($ch) + 204|0);
       $10 = (($ch) + 260|0);
       $11 = (($ch) + 492|0);
       $12 = (($g) + 8196|0);
       $13 = HEAP32[$12>>2]|0;
       $14 = ($3|0)==(536870912);
       if ($14) {
        STACKTOP = sp;return;
       }
       $15 = (($g) + 8192|0);
       $16 = HEAP32[$15>>2]|0;
       $17 = HEAP32[$11>>2]|0;
       $18 = HEAP32[$10>>2]|0;
       $19 = HEAP32[$8>>2]|0;
       $20 = HEAP32[$6>>2]|0;
       $21 = HEAP32[$4>>2]|0;
       $22 = (($ch) + 156|0);
       $23 = (($ch) + 100|0);
       $24 = (($ch) + 120|0);
       $25 = (($ch) + 196|0);
       $26 = (($ch) + 124|0);
       $27 = (($ch) + 388|0);
       $28 = (($ch) + 332|0);
       $29 = (($ch) + 352|0);
       $30 = (($ch) + 428|0);
       $31 = (($ch) + 356|0);
       $32 = (($ch) + 272|0);
       $33 = (($ch) + 216|0);
       $34 = (($ch) + 236|0);
       $35 = (($ch) + 312|0);
       $36 = (($ch) + 240|0);
       $37 = (($ch) + 448|0);
       $38 = (($ch) + 468|0);
       $39 = (($ch) + 544|0);
       $40 = (($ch) + 472|0);
       $41 = ($ch);
       $42 = (($ch) + 28|0);
       $43 = (($ch) + 32|0);
       $44 = (($ch) + 148|0);
       $45 = (($ch) + 380|0);
       $46 = (($ch) + 264|0);
       $47 = (($ch) + 496|0);
       $48 = (($ch) + 16|0);
       $49 = (($ch) + 20|0);
       $$0 = $buf;$$01 = $length;$$pn = $16;$CH_S0_OUT_1$0 = $21;$in0$0 = $20;$in1$0 = $19;$in2$0 = $18;$in3$0 = $17;
       while(1) {
        $YM2612_LFOcnt$0 = (($$pn) + ($13))|0;
        $50 = $YM2612_LFOcnt$0 >>> 18;
        $51 = $50 & 1023;
        $52 = ((($g) + ($51<<1)|0) + 26744|0);
        $53 = HEAP16[$52>>1]|0;
        $54 = $53 << 16 >> 16;
        $55 = HEAP32[$22>>2]|0;
        $56 = $55 >> 16;
        $57 = ((($g) + ($56<<1)|0) + 10344|0);
        $58 = HEAP16[$57>>1]|0;
        $59 = $58 << 16 >> 16;
        $60 = HEAP32[$23>>2]|0;
        $61 = (($59) + ($60))|0;
        $62 = HEAP32[$24>>2]|0;
        $63 = $61 ^ $62;
        $64 = HEAP32[$25>>2]|0;
        $65 = $54 >> $64;
        $66 = (($65) + ($63))|0;
        $67 = HEAP32[$26>>2]|0;
        $68 = (($61) - ($67))|0;
        $69 = $68 >> 31;
        $70 = $69 & $66;
        $71 = HEAP32[$27>>2]|0;
        $72 = $71 >> 16;
        $73 = ((($g) + ($72<<1)|0) + 10344|0);
        $74 = HEAP16[$73>>1]|0;
        $75 = $74 << 16 >> 16;
        $76 = HEAP32[$28>>2]|0;
        $77 = (($75) + ($76))|0;
        $78 = HEAP32[$29>>2]|0;
        $79 = $77 ^ $78;
        $80 = HEAP32[$30>>2]|0;
        $81 = $54 >> $80;
        $82 = (($81) + ($79))|0;
        $83 = HEAP32[$31>>2]|0;
        $84 = (($77) - ($83))|0;
        $85 = $84 >> 31;
        $86 = $85 & $82;
        $87 = HEAP32[$32>>2]|0;
        $88 = $87 >> 16;
        $89 = ((($g) + ($88<<1)|0) + 10344|0);
        $90 = HEAP16[$89>>1]|0;
        $91 = $90 << 16 >> 16;
        $92 = HEAP32[$33>>2]|0;
        $93 = (($91) + ($92))|0;
        $94 = HEAP32[$34>>2]|0;
        $95 = $93 ^ $94;
        $96 = HEAP32[$35>>2]|0;
        $97 = $54 >> $96;
        $98 = (($97) + ($95))|0;
        $99 = HEAP32[$36>>2]|0;
        $100 = (($93) - ($99))|0;
        $101 = $100 >> 31;
        $102 = $101 & $98;
        $103 = HEAP32[$2>>2]|0;
        $104 = $103 >> 16;
        $105 = ((($g) + ($104<<1)|0) + 10344|0);
        $106 = HEAP16[$105>>1]|0;
        $107 = $106 << 16 >> 16;
        $108 = HEAP32[$37>>2]|0;
        $109 = (($107) + ($108))|0;
        $110 = HEAP32[$38>>2]|0;
        $111 = $109 ^ $110;
        $112 = HEAP32[$39>>2]|0;
        $113 = $54 >> $112;
        $114 = (($113) + ($111))|0;
        $115 = HEAP32[$40>>2]|0;
        $116 = (($109) - ($115))|0;
        $117 = $116 >> 31;
        $118 = $117 & $114;
        $119 = HEAP32[$41>>2]|0;
        $120 = (($119) + ($CH_S0_OUT_1$0))|0;
        $121 = HEAP32[$42>>2]|0;
        $122 = $120 >> $121;
        $123 = (($122) + ($in0$0))|0;
        $124 = $123 >>> 14;
        $125 = $124 & 4095;
        $126 = (($g) + ($125<<1)|0);
        $127 = HEAP16[$126>>1]|0;
        $128 = $127 << 16 >> 16;
        $129 = (($128) + ($70))|0;
        $130 = ((($g) + ($129<<2)|0) + 30840|0);
        $131 = HEAP32[$130>>2]|0;
        $132 = (($119) + ($in1$0))|0;
        $133 = $132 >>> 14;
        $134 = $133 & 4095;
        $135 = (($g) + ($134<<1)|0);
        $136 = HEAP16[$135>>1]|0;
        $137 = $136 << 16 >> 16;
        $138 = (($137) + ($86))|0;
        $139 = ((($g) + ($138<<2)|0) + 30840|0);
        $140 = HEAP32[$139>>2]|0;
        $141 = (($140) + ($in2$0))|0;
        $142 = $141 >>> 14;
        $143 = $142 & 4095;
        $144 = (($g) + ($143<<1)|0);
        $145 = HEAP16[$144>>1]|0;
        $146 = $145 << 16 >> 16;
        $147 = (($146) + ($102))|0;
        $148 = ((($g) + ($147<<2)|0) + 30840|0);
        $149 = HEAP32[$148>>2]|0;
        $150 = (($149) + ($in3$0))|0;
        $151 = $150 >>> 14;
        $152 = $151 & 4095;
        $153 = (($g) + ($152<<1)|0);
        $154 = HEAP16[$153>>1]|0;
        $155 = $154 << 16 >> 16;
        $156 = (($155) + ($118))|0;
        $157 = ((($g) + ($156<<2)|0) + 30840|0);
        $158 = HEAP32[$157>>2]|0;
        $159 = $158 >> 16;
        $160 = ((($g) + ($51<<1)|0) + 28792|0);
        $161 = HEAP16[$160>>1]|0;
        $162 = $161 << 16 >> 16;
        $163 = HEAP32[$43>>2]|0;
        $164 = Math_imul($162, $163)|0;
        $165 = $164 >> 10;
        $166 = (($165) + 256)|0;
        $167 = HEAP32[$44>>2]|0;
        $168 = Math_imul($166, $167)|0;
        $169 = $168 >>> 8;
        $170 = (($169) + ($in0$0))|0;
        $171 = HEAP32[$45>>2]|0;
        $172 = Math_imul($166, $171)|0;
        $173 = $172 >>> 8;
        $174 = (($173) + ($in1$0))|0;
        $175 = HEAP32[$46>>2]|0;
        $176 = Math_imul($175, $166)|0;
        $177 = $176 >>> 8;
        $178 = (($177) + ($in2$0))|0;
        $179 = HEAP32[$47>>2]|0;
        $180 = Math_imul($179, $166)|0;
        $181 = $180 >>> 8;
        $182 = (($181) + ($in3$0))|0;
        $183 = HEAP16[$$0>>1]|0;
        $184 = $183&65535;
        $185 = HEAP32[$48>>2]|0;
        $186 = $185 & $159;
        $187 = (($186) + ($184))|0;
        $188 = (($$0) + 2|0);
        $189 = HEAP16[$188>>1]|0;
        $190 = $189&65535;
        $191 = HEAP32[$49>>2]|0;
        $192 = $191 & $159;
        $193 = (($192) + ($190))|0;
        __Z15update_envelopeR6slot_t($5);
        __Z15update_envelopeR6slot_t($9);
        __Z15update_envelopeR6slot_t($7);
        __Z15update_envelopeR6slot_t($1);
        HEAP32[$41>>2] = $131;
        $194 = $187&65535;
        HEAP16[$$0>>1] = $194;
        $195 = $193&65535;
        HEAP16[$188>>1] = $195;
        $196 = (($$0) + 4|0);
        $197 = (($$01) + -1)|0;
        $198 = ($197|0)==(0);
        if ($198) {
         break;
        } else {
         $in3$0$phi = $182;$in2$0$phi = $178;$in1$0$phi = $174;$in0$0$phi = $170;$CH_S0_OUT_1$0$phi = $119;$$pn$phi = $YM2612_LFOcnt$0;$$01$phi = $197;$$0$phi = $196;$in3$0 = $in3$0$phi;$in2$0 = $in2$0$phi;$in1$0 = $in1$0$phi;$in0$0 = $in0$0$phi;$CH_S0_OUT_1$0 = $CH_S0_OUT_1$0$phi;$$pn = $$pn$phi;$$01 = $$01$phi;$$0 = $$0$phi;
        }
       }
       HEAP32[$4>>2] = $119;
       HEAP32[$6>>2] = $170;
       HEAP32[$8>>2] = $174;
       HEAP32[$10>>2] = $178;
       HEAP32[$11>>2] = $182;
       STACKTOP = sp;return;
      }
      function __ZN18ym2612_update_chanILi1EE4funcER8tables_tR9channel_tPsi($g,$ch,$buf,$length) {
       $g = $g|0;
       $ch = $ch|0;
       $buf = $buf|0;
       $length = $length|0;
       var $$0 = 0, $$0$phi = 0, $$01 = 0, $$01$phi = 0, $$pn = 0, $$pn$phi = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
       var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
       var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
       var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
       var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
       var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
       var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
       var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
       var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
       var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
       var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $CH_S0_OUT_1$0 = 0, $CH_S0_OUT_1$0$phi = 0, $YM2612_LFOcnt$0 = 0, $in0$0 = 0, $in0$0$phi = 0, $in1$0 = 0, $in1$0$phi = 0, $in2$0 = 0, $in2$0$phi = 0, $in3$0 = 0, $in3$0$phi = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($ch) + 436|0);
       $2 = (($ch) + 504|0);
       $3 = HEAP32[$2>>2]|0;
       $4 = (($ch) + 4|0);
       $5 = (($ch) + 88|0);
       $6 = (($ch) + 144|0);
       $7 = (($ch) + 320|0);
       $8 = (($ch) + 376|0);
       $9 = (($ch) + 204|0);
       $10 = (($ch) + 260|0);
       $11 = (($ch) + 492|0);
       $12 = (($g) + 8196|0);
       $13 = HEAP32[$12>>2]|0;
       $14 = ($3|0)==(536870912);
       if ($14) {
        STACKTOP = sp;return;
       }
       $15 = (($g) + 8192|0);
       $16 = HEAP32[$15>>2]|0;
       $17 = HEAP32[$11>>2]|0;
       $18 = HEAP32[$10>>2]|0;
       $19 = HEAP32[$8>>2]|0;
       $20 = HEAP32[$6>>2]|0;
       $21 = HEAP32[$4>>2]|0;
       $22 = (($ch) + 156|0);
       $23 = (($ch) + 100|0);
       $24 = (($ch) + 120|0);
       $25 = (($ch) + 196|0);
       $26 = (($ch) + 124|0);
       $27 = (($ch) + 388|0);
       $28 = (($ch) + 332|0);
       $29 = (($ch) + 352|0);
       $30 = (($ch) + 428|0);
       $31 = (($ch) + 356|0);
       $32 = (($ch) + 272|0);
       $33 = (($ch) + 216|0);
       $34 = (($ch) + 236|0);
       $35 = (($ch) + 312|0);
       $36 = (($ch) + 240|0);
       $37 = (($ch) + 448|0);
       $38 = (($ch) + 468|0);
       $39 = (($ch) + 544|0);
       $40 = (($ch) + 472|0);
       $41 = ($ch);
       $42 = (($ch) + 28|0);
       $43 = (($ch) + 32|0);
       $44 = (($ch) + 148|0);
       $45 = (($ch) + 380|0);
       $46 = (($ch) + 264|0);
       $47 = (($ch) + 496|0);
       $48 = (($ch) + 16|0);
       $49 = (($ch) + 20|0);
       $$0 = $buf;$$01 = $length;$$pn = $16;$CH_S0_OUT_1$0 = $21;$in0$0 = $20;$in1$0 = $19;$in2$0 = $18;$in3$0 = $17;
       while(1) {
        $YM2612_LFOcnt$0 = (($$pn) + ($13))|0;
        $50 = $YM2612_LFOcnt$0 >>> 18;
        $51 = $50 & 1023;
        $52 = ((($g) + ($51<<1)|0) + 26744|0);
        $53 = HEAP16[$52>>1]|0;
        $54 = $53 << 16 >> 16;
        $55 = HEAP32[$22>>2]|0;
        $56 = $55 >> 16;
        $57 = ((($g) + ($56<<1)|0) + 10344|0);
        $58 = HEAP16[$57>>1]|0;
        $59 = $58 << 16 >> 16;
        $60 = HEAP32[$23>>2]|0;
        $61 = (($59) + ($60))|0;
        $62 = HEAP32[$24>>2]|0;
        $63 = $61 ^ $62;
        $64 = HEAP32[$25>>2]|0;
        $65 = $54 >> $64;
        $66 = (($65) + ($63))|0;
        $67 = HEAP32[$26>>2]|0;
        $68 = (($61) - ($67))|0;
        $69 = $68 >> 31;
        $70 = $69 & $66;
        $71 = HEAP32[$27>>2]|0;
        $72 = $71 >> 16;
        $73 = ((($g) + ($72<<1)|0) + 10344|0);
        $74 = HEAP16[$73>>1]|0;
        $75 = $74 << 16 >> 16;
        $76 = HEAP32[$28>>2]|0;
        $77 = (($75) + ($76))|0;
        $78 = HEAP32[$29>>2]|0;
        $79 = $77 ^ $78;
        $80 = HEAP32[$30>>2]|0;
        $81 = $54 >> $80;
        $82 = (($81) + ($79))|0;
        $83 = HEAP32[$31>>2]|0;
        $84 = (($77) - ($83))|0;
        $85 = $84 >> 31;
        $86 = $85 & $82;
        $87 = HEAP32[$32>>2]|0;
        $88 = $87 >> 16;
        $89 = ((($g) + ($88<<1)|0) + 10344|0);
        $90 = HEAP16[$89>>1]|0;
        $91 = $90 << 16 >> 16;
        $92 = HEAP32[$33>>2]|0;
        $93 = (($91) + ($92))|0;
        $94 = HEAP32[$34>>2]|0;
        $95 = $93 ^ $94;
        $96 = HEAP32[$35>>2]|0;
        $97 = $54 >> $96;
        $98 = (($97) + ($95))|0;
        $99 = HEAP32[$36>>2]|0;
        $100 = (($93) - ($99))|0;
        $101 = $100 >> 31;
        $102 = $101 & $98;
        $103 = HEAP32[$2>>2]|0;
        $104 = $103 >> 16;
        $105 = ((($g) + ($104<<1)|0) + 10344|0);
        $106 = HEAP16[$105>>1]|0;
        $107 = $106 << 16 >> 16;
        $108 = HEAP32[$37>>2]|0;
        $109 = (($107) + ($108))|0;
        $110 = HEAP32[$38>>2]|0;
        $111 = $109 ^ $110;
        $112 = HEAP32[$39>>2]|0;
        $113 = $54 >> $112;
        $114 = (($113) + ($111))|0;
        $115 = HEAP32[$40>>2]|0;
        $116 = (($109) - ($115))|0;
        $117 = $116 >> 31;
        $118 = $117 & $114;
        $119 = HEAP32[$41>>2]|0;
        $120 = (($119) + ($CH_S0_OUT_1$0))|0;
        $121 = HEAP32[$42>>2]|0;
        $122 = $120 >> $121;
        $123 = (($122) + ($in0$0))|0;
        $124 = $123 >>> 14;
        $125 = $124 & 4095;
        $126 = (($g) + ($125<<1)|0);
        $127 = HEAP16[$126>>1]|0;
        $128 = $127 << 16 >> 16;
        $129 = (($128) + ($70))|0;
        $130 = ((($g) + ($129<<2)|0) + 30840|0);
        $131 = HEAP32[$130>>2]|0;
        $132 = (($119) + ($in2$0))|0;
        $133 = $in1$0 >>> 14;
        $134 = $133 & 4095;
        $135 = (($g) + ($134<<1)|0);
        $136 = HEAP16[$135>>1]|0;
        $137 = $136 << 16 >> 16;
        $138 = (($137) + ($86))|0;
        $139 = ((($g) + ($138<<2)|0) + 30840|0);
        $140 = HEAP32[$139>>2]|0;
        $141 = (($132) + ($140))|0;
        $142 = $141 >>> 14;
        $143 = $142 & 4095;
        $144 = (($g) + ($143<<1)|0);
        $145 = HEAP16[$144>>1]|0;
        $146 = $145 << 16 >> 16;
        $147 = (($146) + ($102))|0;
        $148 = ((($g) + ($147<<2)|0) + 30840|0);
        $149 = HEAP32[$148>>2]|0;
        $150 = (($149) + ($in3$0))|0;
        $151 = $150 >>> 14;
        $152 = $151 & 4095;
        $153 = (($g) + ($152<<1)|0);
        $154 = HEAP16[$153>>1]|0;
        $155 = $154 << 16 >> 16;
        $156 = (($155) + ($118))|0;
        $157 = ((($g) + ($156<<2)|0) + 30840|0);
        $158 = HEAP32[$157>>2]|0;
        $159 = $158 >> 16;
        $160 = ((($g) + ($51<<1)|0) + 28792|0);
        $161 = HEAP16[$160>>1]|0;
        $162 = $161 << 16 >> 16;
        $163 = HEAP32[$43>>2]|0;
        $164 = Math_imul($162, $163)|0;
        $165 = $164 >> 10;
        $166 = (($165) + 256)|0;
        $167 = HEAP32[$44>>2]|0;
        $168 = Math_imul($166, $167)|0;
        $169 = $168 >>> 8;
        $170 = (($169) + ($in0$0))|0;
        $171 = HEAP32[$45>>2]|0;
        $172 = Math_imul($166, $171)|0;
        $173 = $172 >>> 8;
        $174 = (($173) + ($in1$0))|0;
        $175 = HEAP32[$46>>2]|0;
        $176 = Math_imul($175, $166)|0;
        $177 = $176 >>> 8;
        $178 = (($177) + ($in2$0))|0;
        $179 = HEAP32[$47>>2]|0;
        $180 = Math_imul($179, $166)|0;
        $181 = $180 >>> 8;
        $182 = (($181) + ($in3$0))|0;
        $183 = HEAP16[$$0>>1]|0;
        $184 = $183&65535;
        $185 = HEAP32[$48>>2]|0;
        $186 = $185 & $159;
        $187 = (($186) + ($184))|0;
        $188 = (($$0) + 2|0);
        $189 = HEAP16[$188>>1]|0;
        $190 = $189&65535;
        $191 = HEAP32[$49>>2]|0;
        $192 = $191 & $159;
        $193 = (($192) + ($190))|0;
        __Z15update_envelopeR6slot_t($5);
        __Z15update_envelopeR6slot_t($9);
        __Z15update_envelopeR6slot_t($7);
        __Z15update_envelopeR6slot_t($1);
        HEAP32[$41>>2] = $131;
        $194 = $187&65535;
        HEAP16[$$0>>1] = $194;
        $195 = $193&65535;
        HEAP16[$188>>1] = $195;
        $196 = (($$0) + 4|0);
        $197 = (($$01) + -1)|0;
        $198 = ($197|0)==(0);
        if ($198) {
         break;
        } else {
         $in3$0$phi = $182;$in2$0$phi = $178;$in1$0$phi = $174;$in0$0$phi = $170;$CH_S0_OUT_1$0$phi = $119;$$pn$phi = $YM2612_LFOcnt$0;$$01$phi = $197;$$0$phi = $196;$in3$0 = $in3$0$phi;$in2$0 = $in2$0$phi;$in1$0 = $in1$0$phi;$in0$0 = $in0$0$phi;$CH_S0_OUT_1$0 = $CH_S0_OUT_1$0$phi;$$pn = $$pn$phi;$$01 = $$01$phi;$$0 = $$0$phi;
        }
       }
       HEAP32[$4>>2] = $119;
       HEAP32[$6>>2] = $170;
       HEAP32[$8>>2] = $174;
       HEAP32[$10>>2] = $178;
       HEAP32[$11>>2] = $182;
       STACKTOP = sp;return;
      }
      function __ZN18ym2612_update_chanILi2EE4funcER8tables_tR9channel_tPsi($g,$ch,$buf,$length) {
       $g = $g|0;
       $ch = $ch|0;
       $buf = $buf|0;
       $length = $length|0;
       var $$0 = 0, $$0$phi = 0, $$01 = 0, $$01$phi = 0, $$pn = 0, $$pn$phi = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
       var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
       var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
       var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
       var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
       var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
       var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
       var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
       var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
       var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
       var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $CH_S0_OUT_1$0 = 0, $CH_S0_OUT_1$0$phi = 0, $YM2612_LFOcnt$0 = 0, $in0$0 = 0, $in0$0$phi = 0, $in1$0 = 0, $in1$0$phi = 0, $in2$0 = 0, $in2$0$phi = 0, $in3$0 = 0, $in3$0$phi = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($ch) + 436|0);
       $2 = (($ch) + 504|0);
       $3 = HEAP32[$2>>2]|0;
       $4 = (($ch) + 4|0);
       $5 = (($ch) + 88|0);
       $6 = (($ch) + 144|0);
       $7 = (($ch) + 320|0);
       $8 = (($ch) + 376|0);
       $9 = (($ch) + 204|0);
       $10 = (($ch) + 260|0);
       $11 = (($ch) + 492|0);
       $12 = (($g) + 8196|0);
       $13 = HEAP32[$12>>2]|0;
       $14 = ($3|0)==(536870912);
       if ($14) {
        STACKTOP = sp;return;
       }
       $15 = (($g) + 8192|0);
       $16 = HEAP32[$15>>2]|0;
       $17 = HEAP32[$11>>2]|0;
       $18 = HEAP32[$10>>2]|0;
       $19 = HEAP32[$8>>2]|0;
       $20 = HEAP32[$6>>2]|0;
       $21 = HEAP32[$4>>2]|0;
       $22 = (($ch) + 156|0);
       $23 = (($ch) + 100|0);
       $24 = (($ch) + 120|0);
       $25 = (($ch) + 196|0);
       $26 = (($ch) + 124|0);
       $27 = (($ch) + 388|0);
       $28 = (($ch) + 332|0);
       $29 = (($ch) + 352|0);
       $30 = (($ch) + 428|0);
       $31 = (($ch) + 356|0);
       $32 = (($ch) + 272|0);
       $33 = (($ch) + 216|0);
       $34 = (($ch) + 236|0);
       $35 = (($ch) + 312|0);
       $36 = (($ch) + 240|0);
       $37 = (($ch) + 448|0);
       $38 = (($ch) + 468|0);
       $39 = (($ch) + 544|0);
       $40 = (($ch) + 472|0);
       $41 = ($ch);
       $42 = (($ch) + 28|0);
       $43 = (($ch) + 32|0);
       $44 = (($ch) + 148|0);
       $45 = (($ch) + 380|0);
       $46 = (($ch) + 264|0);
       $47 = (($ch) + 496|0);
       $48 = (($ch) + 16|0);
       $49 = (($ch) + 20|0);
       $$0 = $buf;$$01 = $length;$$pn = $16;$CH_S0_OUT_1$0 = $21;$in0$0 = $20;$in1$0 = $19;$in2$0 = $18;$in3$0 = $17;
       while(1) {
        $YM2612_LFOcnt$0 = (($$pn) + ($13))|0;
        $50 = $YM2612_LFOcnt$0 >>> 18;
        $51 = $50 & 1023;
        $52 = ((($g) + ($51<<1)|0) + 26744|0);
        $53 = HEAP16[$52>>1]|0;
        $54 = $53 << 16 >> 16;
        $55 = HEAP32[$22>>2]|0;
        $56 = $55 >> 16;
        $57 = ((($g) + ($56<<1)|0) + 10344|0);
        $58 = HEAP16[$57>>1]|0;
        $59 = $58 << 16 >> 16;
        $60 = HEAP32[$23>>2]|0;
        $61 = (($59) + ($60))|0;
        $62 = HEAP32[$24>>2]|0;
        $63 = $61 ^ $62;
        $64 = HEAP32[$25>>2]|0;
        $65 = $54 >> $64;
        $66 = (($65) + ($63))|0;
        $67 = HEAP32[$26>>2]|0;
        $68 = (($61) - ($67))|0;
        $69 = $68 >> 31;
        $70 = $69 & $66;
        $71 = HEAP32[$27>>2]|0;
        $72 = $71 >> 16;
        $73 = ((($g) + ($72<<1)|0) + 10344|0);
        $74 = HEAP16[$73>>1]|0;
        $75 = $74 << 16 >> 16;
        $76 = HEAP32[$28>>2]|0;
        $77 = (($75) + ($76))|0;
        $78 = HEAP32[$29>>2]|0;
        $79 = $77 ^ $78;
        $80 = HEAP32[$30>>2]|0;
        $81 = $54 >> $80;
        $82 = (($81) + ($79))|0;
        $83 = HEAP32[$31>>2]|0;
        $84 = (($77) - ($83))|0;
        $85 = $84 >> 31;
        $86 = $85 & $82;
        $87 = HEAP32[$32>>2]|0;
        $88 = $87 >> 16;
        $89 = ((($g) + ($88<<1)|0) + 10344|0);
        $90 = HEAP16[$89>>1]|0;
        $91 = $90 << 16 >> 16;
        $92 = HEAP32[$33>>2]|0;
        $93 = (($91) + ($92))|0;
        $94 = HEAP32[$34>>2]|0;
        $95 = $93 ^ $94;
        $96 = HEAP32[$35>>2]|0;
        $97 = $54 >> $96;
        $98 = (($97) + ($95))|0;
        $99 = HEAP32[$36>>2]|0;
        $100 = (($93) - ($99))|0;
        $101 = $100 >> 31;
        $102 = $101 & $98;
        $103 = HEAP32[$2>>2]|0;
        $104 = $103 >> 16;
        $105 = ((($g) + ($104<<1)|0) + 10344|0);
        $106 = HEAP16[$105>>1]|0;
        $107 = $106 << 16 >> 16;
        $108 = HEAP32[$37>>2]|0;
        $109 = (($107) + ($108))|0;
        $110 = HEAP32[$38>>2]|0;
        $111 = $109 ^ $110;
        $112 = HEAP32[$39>>2]|0;
        $113 = $54 >> $112;
        $114 = (($113) + ($111))|0;
        $115 = HEAP32[$40>>2]|0;
        $116 = (($109) - ($115))|0;
        $117 = $116 >> 31;
        $118 = $117 & $114;
        $119 = HEAP32[$41>>2]|0;
        $120 = (($119) + ($CH_S0_OUT_1$0))|0;
        $121 = HEAP32[$42>>2]|0;
        $122 = $120 >> $121;
        $123 = (($122) + ($in0$0))|0;
        $124 = $123 >>> 14;
        $125 = $124 & 4095;
        $126 = (($g) + ($125<<1)|0);
        $127 = HEAP16[$126>>1]|0;
        $128 = $127 << 16 >> 16;
        $129 = (($128) + ($70))|0;
        $130 = ((($g) + ($129<<2)|0) + 30840|0);
        $131 = HEAP32[$130>>2]|0;
        $132 = $in1$0 >>> 14;
        $133 = $132 & 4095;
        $134 = (($g) + ($133<<1)|0);
        $135 = HEAP16[$134>>1]|0;
        $136 = $135 << 16 >> 16;
        $137 = (($136) + ($86))|0;
        $138 = ((($g) + ($137<<2)|0) + 30840|0);
        $139 = HEAP32[$138>>2]|0;
        $140 = (($139) + ($in2$0))|0;
        $141 = (($119) + ($in3$0))|0;
        $142 = $140 >>> 14;
        $143 = $142 & 4095;
        $144 = (($g) + ($143<<1)|0);
        $145 = HEAP16[$144>>1]|0;
        $146 = $145 << 16 >> 16;
        $147 = (($146) + ($102))|0;
        $148 = ((($g) + ($147<<2)|0) + 30840|0);
        $149 = HEAP32[$148>>2]|0;
        $150 = (($141) + ($149))|0;
        $151 = $150 >>> 14;
        $152 = $151 & 4095;
        $153 = (($g) + ($152<<1)|0);
        $154 = HEAP16[$153>>1]|0;
        $155 = $154 << 16 >> 16;
        $156 = (($155) + ($118))|0;
        $157 = ((($g) + ($156<<2)|0) + 30840|0);
        $158 = HEAP32[$157>>2]|0;
        $159 = $158 >> 16;
        $160 = ((($g) + ($51<<1)|0) + 28792|0);
        $161 = HEAP16[$160>>1]|0;
        $162 = $161 << 16 >> 16;
        $163 = HEAP32[$43>>2]|0;
        $164 = Math_imul($162, $163)|0;
        $165 = $164 >> 10;
        $166 = (($165) + 256)|0;
        $167 = HEAP32[$44>>2]|0;
        $168 = Math_imul($166, $167)|0;
        $169 = $168 >>> 8;
        $170 = (($169) + ($in0$0))|0;
        $171 = HEAP32[$45>>2]|0;
        $172 = Math_imul($166, $171)|0;
        $173 = $172 >>> 8;
        $174 = (($173) + ($in1$0))|0;
        $175 = HEAP32[$46>>2]|0;
        $176 = Math_imul($175, $166)|0;
        $177 = $176 >>> 8;
        $178 = (($177) + ($in2$0))|0;
        $179 = HEAP32[$47>>2]|0;
        $180 = Math_imul($179, $166)|0;
        $181 = $180 >>> 8;
        $182 = (($181) + ($in3$0))|0;
        $183 = HEAP16[$$0>>1]|0;
        $184 = $183&65535;
        $185 = HEAP32[$48>>2]|0;
        $186 = $185 & $159;
        $187 = (($186) + ($184))|0;
        $188 = (($$0) + 2|0);
        $189 = HEAP16[$188>>1]|0;
        $190 = $189&65535;
        $191 = HEAP32[$49>>2]|0;
        $192 = $191 & $159;
        $193 = (($192) + ($190))|0;
        __Z15update_envelopeR6slot_t($5);
        __Z15update_envelopeR6slot_t($9);
        __Z15update_envelopeR6slot_t($7);
        __Z15update_envelopeR6slot_t($1);
        HEAP32[$41>>2] = $131;
        $194 = $187&65535;
        HEAP16[$$0>>1] = $194;
        $195 = $193&65535;
        HEAP16[$188>>1] = $195;
        $196 = (($$0) + 4|0);
        $197 = (($$01) + -1)|0;
        $198 = ($197|0)==(0);
        if ($198) {
         break;
        } else {
         $in3$0$phi = $182;$in2$0$phi = $178;$in1$0$phi = $174;$in0$0$phi = $170;$CH_S0_OUT_1$0$phi = $119;$$pn$phi = $YM2612_LFOcnt$0;$$01$phi = $197;$$0$phi = $196;$in3$0 = $in3$0$phi;$in2$0 = $in2$0$phi;$in1$0 = $in1$0$phi;$in0$0 = $in0$0$phi;$CH_S0_OUT_1$0 = $CH_S0_OUT_1$0$phi;$$pn = $$pn$phi;$$01 = $$01$phi;$$0 = $$0$phi;
        }
       }
       HEAP32[$4>>2] = $119;
       HEAP32[$6>>2] = $170;
       HEAP32[$8>>2] = $174;
       HEAP32[$10>>2] = $178;
       HEAP32[$11>>2] = $182;
       STACKTOP = sp;return;
      }
      function __ZN18ym2612_update_chanILi3EE4funcER8tables_tR9channel_tPsi($g,$ch,$buf,$length) {
       $g = $g|0;
       $ch = $ch|0;
       $buf = $buf|0;
       $length = $length|0;
       var $$0 = 0, $$0$phi = 0, $$01 = 0, $$01$phi = 0, $$pn = 0, $$pn$phi = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
       var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
       var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
       var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
       var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
       var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
       var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
       var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
       var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
       var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
       var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $CH_S0_OUT_1$0 = 0, $CH_S0_OUT_1$0$phi = 0, $YM2612_LFOcnt$0 = 0, $in0$0 = 0, $in0$0$phi = 0, $in1$0 = 0, $in1$0$phi = 0, $in2$0 = 0, $in2$0$phi = 0, $in3$0 = 0, $in3$0$phi = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($ch) + 436|0);
       $2 = (($ch) + 504|0);
       $3 = HEAP32[$2>>2]|0;
       $4 = (($ch) + 4|0);
       $5 = (($ch) + 88|0);
       $6 = (($ch) + 144|0);
       $7 = (($ch) + 320|0);
       $8 = (($ch) + 376|0);
       $9 = (($ch) + 204|0);
       $10 = (($ch) + 260|0);
       $11 = (($ch) + 492|0);
       $12 = (($g) + 8196|0);
       $13 = HEAP32[$12>>2]|0;
       $14 = ($3|0)==(536870912);
       if ($14) {
        STACKTOP = sp;return;
       }
       $15 = (($g) + 8192|0);
       $16 = HEAP32[$15>>2]|0;
       $17 = HEAP32[$11>>2]|0;
       $18 = HEAP32[$10>>2]|0;
       $19 = HEAP32[$8>>2]|0;
       $20 = HEAP32[$6>>2]|0;
       $21 = HEAP32[$4>>2]|0;
       $22 = (($ch) + 156|0);
       $23 = (($ch) + 100|0);
       $24 = (($ch) + 120|0);
       $25 = (($ch) + 196|0);
       $26 = (($ch) + 124|0);
       $27 = (($ch) + 388|0);
       $28 = (($ch) + 332|0);
       $29 = (($ch) + 352|0);
       $30 = (($ch) + 428|0);
       $31 = (($ch) + 356|0);
       $32 = (($ch) + 272|0);
       $33 = (($ch) + 216|0);
       $34 = (($ch) + 236|0);
       $35 = (($ch) + 312|0);
       $36 = (($ch) + 240|0);
       $37 = (($ch) + 448|0);
       $38 = (($ch) + 468|0);
       $39 = (($ch) + 544|0);
       $40 = (($ch) + 472|0);
       $41 = ($ch);
       $42 = (($ch) + 28|0);
       $43 = (($ch) + 32|0);
       $44 = (($ch) + 148|0);
       $45 = (($ch) + 380|0);
       $46 = (($ch) + 264|0);
       $47 = (($ch) + 496|0);
       $48 = (($ch) + 16|0);
       $49 = (($ch) + 20|0);
       $$0 = $buf;$$01 = $length;$$pn = $16;$CH_S0_OUT_1$0 = $21;$in0$0 = $20;$in1$0 = $19;$in2$0 = $18;$in3$0 = $17;
       while(1) {
        $YM2612_LFOcnt$0 = (($$pn) + ($13))|0;
        $50 = $YM2612_LFOcnt$0 >>> 18;
        $51 = $50 & 1023;
        $52 = ((($g) + ($51<<1)|0) + 26744|0);
        $53 = HEAP16[$52>>1]|0;
        $54 = $53 << 16 >> 16;
        $55 = HEAP32[$22>>2]|0;
        $56 = $55 >> 16;
        $57 = ((($g) + ($56<<1)|0) + 10344|0);
        $58 = HEAP16[$57>>1]|0;
        $59 = $58 << 16 >> 16;
        $60 = HEAP32[$23>>2]|0;
        $61 = (($59) + ($60))|0;
        $62 = HEAP32[$24>>2]|0;
        $63 = $61 ^ $62;
        $64 = HEAP32[$25>>2]|0;
        $65 = $54 >> $64;
        $66 = (($65) + ($63))|0;
        $67 = HEAP32[$26>>2]|0;
        $68 = (($61) - ($67))|0;
        $69 = $68 >> 31;
        $70 = $69 & $66;
        $71 = HEAP32[$27>>2]|0;
        $72 = $71 >> 16;
        $73 = ((($g) + ($72<<1)|0) + 10344|0);
        $74 = HEAP16[$73>>1]|0;
        $75 = $74 << 16 >> 16;
        $76 = HEAP32[$28>>2]|0;
        $77 = (($75) + ($76))|0;
        $78 = HEAP32[$29>>2]|0;
        $79 = $77 ^ $78;
        $80 = HEAP32[$30>>2]|0;
        $81 = $54 >> $80;
        $82 = (($81) + ($79))|0;
        $83 = HEAP32[$31>>2]|0;
        $84 = (($77) - ($83))|0;
        $85 = $84 >> 31;
        $86 = $85 & $82;
        $87 = HEAP32[$32>>2]|0;
        $88 = $87 >> 16;
        $89 = ((($g) + ($88<<1)|0) + 10344|0);
        $90 = HEAP16[$89>>1]|0;
        $91 = $90 << 16 >> 16;
        $92 = HEAP32[$33>>2]|0;
        $93 = (($91) + ($92))|0;
        $94 = HEAP32[$34>>2]|0;
        $95 = $93 ^ $94;
        $96 = HEAP32[$35>>2]|0;
        $97 = $54 >> $96;
        $98 = (($97) + ($95))|0;
        $99 = HEAP32[$36>>2]|0;
        $100 = (($93) - ($99))|0;
        $101 = $100 >> 31;
        $102 = $101 & $98;
        $103 = HEAP32[$2>>2]|0;
        $104 = $103 >> 16;
        $105 = ((($g) + ($104<<1)|0) + 10344|0);
        $106 = HEAP16[$105>>1]|0;
        $107 = $106 << 16 >> 16;
        $108 = HEAP32[$37>>2]|0;
        $109 = (($107) + ($108))|0;
        $110 = HEAP32[$38>>2]|0;
        $111 = $109 ^ $110;
        $112 = HEAP32[$39>>2]|0;
        $113 = $54 >> $112;
        $114 = (($113) + ($111))|0;
        $115 = HEAP32[$40>>2]|0;
        $116 = (($109) - ($115))|0;
        $117 = $116 >> 31;
        $118 = $117 & $114;
        $119 = HEAP32[$41>>2]|0;
        $120 = (($119) + ($CH_S0_OUT_1$0))|0;
        $121 = HEAP32[$42>>2]|0;
        $122 = $120 >> $121;
        $123 = (($122) + ($in0$0))|0;
        $124 = $123 >>> 14;
        $125 = $124 & 4095;
        $126 = (($g) + ($125<<1)|0);
        $127 = HEAP16[$126>>1]|0;
        $128 = $127 << 16 >> 16;
        $129 = (($128) + ($70))|0;
        $130 = ((($g) + ($129<<2)|0) + 30840|0);
        $131 = HEAP32[$130>>2]|0;
        $132 = (($119) + ($in1$0))|0;
        $133 = $132 >>> 14;
        $134 = $133 & 4095;
        $135 = (($g) + ($134<<1)|0);
        $136 = HEAP16[$135>>1]|0;
        $137 = $136 << 16 >> 16;
        $138 = (($137) + ($86))|0;
        $139 = ((($g) + ($138<<2)|0) + 30840|0);
        $140 = HEAP32[$139>>2]|0;
        $141 = (($140) + ($in3$0))|0;
        $142 = $in2$0 >>> 14;
        $143 = $142 & 4095;
        $144 = (($g) + ($143<<1)|0);
        $145 = HEAP16[$144>>1]|0;
        $146 = $145 << 16 >> 16;
        $147 = (($146) + ($102))|0;
        $148 = ((($g) + ($147<<2)|0) + 30840|0);
        $149 = HEAP32[$148>>2]|0;
        $150 = (($141) + ($149))|0;
        $151 = $150 >>> 14;
        $152 = $151 & 4095;
        $153 = (($g) + ($152<<1)|0);
        $154 = HEAP16[$153>>1]|0;
        $155 = $154 << 16 >> 16;
        $156 = (($155) + ($118))|0;
        $157 = ((($g) + ($156<<2)|0) + 30840|0);
        $158 = HEAP32[$157>>2]|0;
        $159 = $158 >> 16;
        $160 = ((($g) + ($51<<1)|0) + 28792|0);
        $161 = HEAP16[$160>>1]|0;
        $162 = $161 << 16 >> 16;
        $163 = HEAP32[$43>>2]|0;
        $164 = Math_imul($162, $163)|0;
        $165 = $164 >> 10;
        $166 = (($165) + 256)|0;
        $167 = HEAP32[$44>>2]|0;
        $168 = Math_imul($166, $167)|0;
        $169 = $168 >>> 8;
        $170 = (($169) + ($in0$0))|0;
        $171 = HEAP32[$45>>2]|0;
        $172 = Math_imul($166, $171)|0;
        $173 = $172 >>> 8;
        $174 = (($173) + ($in1$0))|0;
        $175 = HEAP32[$46>>2]|0;
        $176 = Math_imul($175, $166)|0;
        $177 = $176 >>> 8;
        $178 = (($177) + ($in2$0))|0;
        $179 = HEAP32[$47>>2]|0;
        $180 = Math_imul($179, $166)|0;
        $181 = $180 >>> 8;
        $182 = (($181) + ($in3$0))|0;
        $183 = HEAP16[$$0>>1]|0;
        $184 = $183&65535;
        $185 = HEAP32[$48>>2]|0;
        $186 = $185 & $159;
        $187 = (($186) + ($184))|0;
        $188 = (($$0) + 2|0);
        $189 = HEAP16[$188>>1]|0;
        $190 = $189&65535;
        $191 = HEAP32[$49>>2]|0;
        $192 = $191 & $159;
        $193 = (($192) + ($190))|0;
        __Z15update_envelopeR6slot_t($5);
        __Z15update_envelopeR6slot_t($9);
        __Z15update_envelopeR6slot_t($7);
        __Z15update_envelopeR6slot_t($1);
        HEAP32[$41>>2] = $131;
        $194 = $187&65535;
        HEAP16[$$0>>1] = $194;
        $195 = $193&65535;
        HEAP16[$188>>1] = $195;
        $196 = (($$0) + 4|0);
        $197 = (($$01) + -1)|0;
        $198 = ($197|0)==(0);
        if ($198) {
         break;
        } else {
         $in3$0$phi = $182;$in2$0$phi = $178;$in1$0$phi = $174;$in0$0$phi = $170;$CH_S0_OUT_1$0$phi = $119;$$pn$phi = $YM2612_LFOcnt$0;$$01$phi = $197;$$0$phi = $196;$in3$0 = $in3$0$phi;$in2$0 = $in2$0$phi;$in1$0 = $in1$0$phi;$in0$0 = $in0$0$phi;$CH_S0_OUT_1$0 = $CH_S0_OUT_1$0$phi;$$pn = $$pn$phi;$$01 = $$01$phi;$$0 = $$0$phi;
        }
       }
       HEAP32[$4>>2] = $119;
       HEAP32[$6>>2] = $170;
       HEAP32[$8>>2] = $174;
       HEAP32[$10>>2] = $178;
       HEAP32[$11>>2] = $182;
       STACKTOP = sp;return;
      }
      function __ZN18ym2612_update_chanILi4EE4funcER8tables_tR9channel_tPsi($g,$ch,$buf,$length) {
       $g = $g|0;
       $ch = $ch|0;
       $buf = $buf|0;
       $length = $length|0;
       var $$0 = 0, $$0$phi = 0, $$01 = 0, $$01$phi = 0, $$pn = 0, $$pn$phi = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
       var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
       var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
       var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
       var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
       var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
       var $201 = 0, $202 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
       var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
       var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
       var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
       var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $CH_S0_OUT_1$0 = 0, $CH_S0_OUT_1$0$phi = 0, $YM2612_LFOcnt$0 = 0, $in0$0 = 0, $in0$0$phi = 0, $in1$0 = 0, $in1$0$phi = 0, $in2$0 = 0, $in2$0$phi = 0, $in3$0 = 0, $in3$0$phi = 0, label = 0;
       var sp = 0;
       sp = STACKTOP;
       $1 = (($ch) + 436|0);
       $2 = (($ch) + 504|0);
       $3 = HEAP32[$2>>2]|0;
       $4 = (($3) + -536870912)|0;
       $5 = (($ch) + 320|0);
       $6 = (($ch) + 388|0);
       $7 = HEAP32[$6>>2]|0;
       $8 = (($7) + -536870912)|0;
       $9 = $8 | $4;
       $10 = (($ch) + 4|0);
       $11 = (($ch) + 88|0);
       $12 = (($ch) + 144|0);
       $13 = (($ch) + 376|0);
       $14 = (($ch) + 204|0);
       $15 = (($ch) + 260|0);
       $16 = (($ch) + 492|0);
       $17 = (($g) + 8196|0);
       $18 = HEAP32[$17>>2]|0;
       $19 = ($9|0)==(0);
       if ($19) {
        STACKTOP = sp;return;
       }
       $20 = (($g) + 8192|0);
       $21 = HEAP32[$20>>2]|0;
       $22 = HEAP32[$16>>2]|0;
       $23 = HEAP32[$15>>2]|0;
       $24 = HEAP32[$13>>2]|0;
       $25 = HEAP32[$12>>2]|0;
       $26 = HEAP32[$10>>2]|0;
       $27 = (($ch) + 156|0);
       $28 = (($ch) + 100|0);
       $29 = (($ch) + 120|0);
       $30 = (($ch) + 196|0);
       $31 = (($ch) + 124|0);
       $32 = (($ch) + 332|0);
       $33 = (($ch) + 352|0);
       $34 = (($ch) + 428|0);
       $35 = (($ch) + 356|0);
       $36 = (($ch) + 272|0);
       $37 = (($ch) + 216|0);
       $38 = (($ch) + 236|0);
       $39 = (($ch) + 312|0);
       $40 = (($ch) + 240|0);
       $41 = (($ch) + 448|0);
       $42 = (($ch) + 468|0);
       $43 = (($ch) + 544|0);
       $44 = (($ch) + 472|0);
       $45 = ($ch);
       $46 = (($ch) + 28|0);
       $47 = (($ch) + 32|0);
       $48 = (($ch) + 148|0);
       $49 = (($ch) + 380|0);
       $50 = (($ch) + 264|0);
       $51 = (($ch) + 496|0);
       $52 = (($ch) + 16|0);
       $53 = (($ch) + 20|0);
       $$0 = $buf;$$01 = $length;$$pn = $21;$CH_S0_OUT_1$0 = $26;$in0$0 = $25;$in1$0 = $24;$in2$0 = $23;$in3$0 = $22;
       while(1) {
        $YM2612_LFOcnt$0 = (($$pn) + ($18))|0;
        $54 = $YM2612_LFOcnt$0 >>> 18;
        $55 = $54 & 1023;
        $56 = ((($g) + ($55<<1)|0) + 26744|0);
        $57 = HEAP16[$56>>1]|0;
        $58 = $57 << 16 >> 16;
        $59 = HEAP32[$27>>2]|0;
        $60 = $59 >> 16;
        $61 = ((($g) + ($60<<1)|0) + 10344|0);
        $62 = HEAP16[$61>>1]|0;
        $63 = $62 << 16 >> 16;
        $64 = HEAP32[$28>>2]|0;
        $65 = (($63) + ($64))|0;
        $66 = HEAP32[$29>>2]|0;
        $67 = $65 ^ $66;
        $68 = HEAP32[$30>>2]|0;
        $69 = $58 >> $68;
        $70 = (($69) + ($67))|0;
        $71 = HEAP32[$31>>2]|0;
        $72 = (($65) - ($71))|0;
        $73 = $72 >> 31;
        $74 = $73 & $70;
        $75 = HEAP32[$6>>2]|0;
        $76 = $75 >> 16;
        $77 = ((($g) + ($76<<1)|0) + 10344|0);
        $78 = HEAP16[$77>>1]|0;
        $79 = $78 << 16 >> 16;
        $80 = HEAP32[$32>>2]|0;
        $81 = (($79) + ($80))|0;
        $82 = HEAP32[$33>>2]|0;
        $83 = $81 ^ $82;
        $84 = HEAP32[$34>>2]|0;
        $85 = $58 >> $84;
        $86 = (($85) + ($83))|0;
        $87 = HEAP32[$35>>2]|0;
        $88 = (($81) - ($87))|0;
        $89 = $88 >> 31;
        $90 = $89 & $86;
        $91 = HEAP32[$36>>2]|0;
        $92 = $91 >> 16;
        $93 = ((($g) + ($92<<1)|0) + 10344|0);
        $94 = HEAP16[$93>>1]|0;
        $95 = $94 << 16 >> 16;
        $96 = HEAP32[$37>>2]|0;
        $97 = (($95) + ($96))|0;
        $98 = HEAP32[$38>>2]|0;
        $99 = $97 ^ $98;
        $100 = HEAP32[$39>>2]|0;
        $101 = $58 >> $100;
        $102 = (($101) + ($99))|0;
        $103 = HEAP32[$40>>2]|0;
        $104 = (($97) - ($103))|0;
        $105 = $104 >> 31;
        $106 = $105 & $102;
        $107 = HEAP32[$2>>2]|0;
        $108 = $107 >> 16;
        $109 = ((($g) + ($108<<1)|0) + 10344|0);
        $110 = HEAP16[$109>>1]|0;
        $111 = $110 << 16 >> 16;
        $112 = HEAP32[$41>>2]|0;
        $113 = (($111) + ($112))|0;
        $114 = HEAP32[$42>>2]|0;
        $115 = $113 ^ $114;
        $116 = HEAP32[$43>>2]|0;
        $117 = $58 >> $116;
        $118 = (($117) + ($115))|0;
        $119 = HEAP32[$44>>2]|0;
        $120 = (($113) - ($119))|0;
        $121 = $120 >> 31;
        $122 = $121 & $118;
        $123 = HEAP32[$45>>2]|0;
        $124 = (($123) + ($CH_S0_OUT_1$0))|0;
        $125 = HEAP32[$46>>2]|0;
        $126 = $124 >> $125;
        $127 = (($126) + ($in0$0))|0;
        $128 = $127 >>> 14;
        $129 = $128 & 4095;
        $130 = (($g) + ($129<<1)|0);
        $131 = HEAP16[$130>>1]|0;
        $132 = $131 << 16 >> 16;
        $133 = (($132) + ($74))|0;
        $134 = ((($g) + ($133<<2)|0) + 30840|0);
        $135 = HEAP32[$134>>2]|0;
        $136 = $in2$0 >>> 14;
        $137 = $136 & 4095;
        $138 = (($g) + ($137<<1)|0);
        $139 = HEAP16[$138>>1]|0;
        $140 = $139 << 16 >> 16;
        $141 = (($140) + ($106))|0;
        $142 = ((($g) + ($141<<2)|0) + 30840|0);
        $143 = HEAP32[$142>>2]|0;
        $144 = (($143) + ($in3$0))|0;
        $145 = $144 >>> 14;
        $146 = $145 & 4095;
        $147 = (($g) + ($146<<1)|0);
        $148 = HEAP16[$147>>1]|0;
        $149 = $148 << 16 >> 16;
        $150 = (($149) + ($122))|0;
        $151 = ((($g) + ($150<<2)|0) + 30840|0);
        $152 = HEAP32[$151>>2]|0;
        $153 = (($123) + ($in1$0))|0;
        $154 = $153 >>> 14;
        $155 = $154 & 4095;
        $156 = (($g) + ($155<<1)|0);
        $157 = HEAP16[$156>>1]|0;
        $158 = $157 << 16 >> 16;
        $159 = (($158) + ($90))|0;
        $160 = ((($g) + ($159<<2)|0) + 30840|0);
        $161 = HEAP32[$160>>2]|0;
        $162 = (($161) + ($152))|0;
        $163 = $162 >> 16;
        $164 = ((($g) + ($55<<1)|0) + 28792|0);
        $165 = HEAP16[$164>>1]|0;
        $166 = $165 << 16 >> 16;
        $167 = HEAP32[$47>>2]|0;
        $168 = Math_imul($166, $167)|0;
        $169 = $168 >> 10;
        $170 = (($169) + 256)|0;
        $171 = HEAP32[$48>>2]|0;
        $172 = Math_imul($170, $171)|0;
        $173 = $172 >>> 8;
        $174 = (($173) + ($in0$0))|0;
        $175 = HEAP32[$49>>2]|0;
        $176 = Math_imul($170, $175)|0;
        $177 = $176 >>> 8;
        $178 = (($177) + ($in1$0))|0;
        $179 = HEAP32[$50>>2]|0;
        $180 = Math_imul($179, $170)|0;
        $181 = $180 >>> 8;
        $182 = (($181) + ($in2$0))|0;
        $183 = HEAP32[$51>>2]|0;
        $184 = Math_imul($183, $170)|0;
        $185 = $184 >>> 8;
        $186 = (($185) + ($in3$0))|0;
        $187 = HEAP16[$$0>>1]|0;
        $188 = $187&65535;
        $189 = HEAP32[$52>>2]|0;
        $190 = $189 & $163;
        $191 = (($190) + ($188))|0;
        $192 = (($$0) + 2|0);
        $193 = HEAP16[$192>>1]|0;
        $194 = $193&65535;
        $195 = HEAP32[$53>>2]|0;
        $196 = $195 & $163;
        $197 = (($196) + ($194))|0;
        __Z15update_envelopeR6slot_t($11);
        __Z15update_envelopeR6slot_t($14);
        __Z15update_envelopeR6slot_t($5);
        __Z15update_envelopeR6slot_t($1);
        HEAP32[$45>>2] = $135;
        $198 = $191&65535;
        HEAP16[$$0>>1] = $198;
        $199 = $197&65535;
        HEAP16[$192>>1] = $199;
        $200 = (($$0) + 4|0);
        $201 = (($$01) + -1)|0;
        $202 = ($201|0)==(0);
        if ($202) {
         break;
        } else {
         $in3$0$phi = $186;$in2$0$phi = $182;$in1$0$phi = $178;$in0$0$phi = $174;$CH_S0_OUT_1$0$phi = $123;$$pn$phi = $YM2612_LFOcnt$0;$$01$phi = $201;$$0$phi = $200;$in3$0 = $in3$0$phi;$in2$0 = $in2$0$phi;$in1$0 = $in1$0$phi;$in0$0 = $in0$0$phi;$CH_S0_OUT_1$0 = $CH_S0_OUT_1$0$phi;$$pn = $$pn$phi;$$01 = $$01$phi;$$0 = $$0$phi;
        }
       }
       HEAP32[$10>>2] = $123;
       HEAP32[$12>>2] = $174;
       HEAP32[$13>>2] = $178;
       HEAP32[$15>>2] = $182;
       HEAP32[$16>>2] = $186;
       STACKTOP = sp;return;
      }
      function __ZN18ym2612_update_chanILi5EE4funcER8tables_tR9channel_tPsi($g,$ch,$buf,$length) {
       $g = $g|0;
       $ch = $ch|0;
       $buf = $buf|0;
       $length = $length|0;
       var $$0 = 0, $$0$phi = 0, $$01 = 0, $$01$phi = 0, $$pn = 0, $$pn$phi = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
       var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
       var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
       var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
       var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
       var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
       var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
       var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
       var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
       var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
       var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $CH_S0_OUT_1$0 = 0, $CH_S0_OUT_1$0$phi = 0, $YM2612_LFOcnt$0 = 0, $in0$0 = 0, $in0$0$phi = 0, $in1$0 = 0, $in1$0$phi = 0;
       var $in2$0 = 0, $in2$0$phi = 0, $in3$0 = 0, $in3$0$phi = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($ch) + 436|0);
       $2 = (($ch) + 504|0);
       $3 = HEAP32[$2>>2]|0;
       $4 = (($3) + -536870912)|0;
       $5 = (($ch) + 204|0);
       $6 = (($ch) + 272|0);
       $7 = HEAP32[$6>>2]|0;
       $8 = (($7) + -536870912)|0;
       $9 = $8 | $4;
       $10 = (($ch) + 320|0);
       $11 = (($ch) + 388|0);
       $12 = HEAP32[$11>>2]|0;
       $13 = (($12) + -536870912)|0;
       $14 = $9 | $13;
       $15 = (($ch) + 4|0);
       $16 = (($ch) + 88|0);
       $17 = (($ch) + 144|0);
       $18 = (($ch) + 376|0);
       $19 = (($ch) + 260|0);
       $20 = (($ch) + 492|0);
       $21 = (($g) + 8196|0);
       $22 = HEAP32[$21>>2]|0;
       $23 = ($14|0)==(0);
       if ($23) {
        STACKTOP = sp;return;
       }
       $24 = (($g) + 8192|0);
       $25 = HEAP32[$24>>2]|0;
       $26 = HEAP32[$20>>2]|0;
       $27 = HEAP32[$19>>2]|0;
       $28 = HEAP32[$18>>2]|0;
       $29 = HEAP32[$17>>2]|0;
       $30 = HEAP32[$15>>2]|0;
       $31 = (($ch) + 156|0);
       $32 = (($ch) + 100|0);
       $33 = (($ch) + 120|0);
       $34 = (($ch) + 196|0);
       $35 = (($ch) + 124|0);
       $36 = (($ch) + 332|0);
       $37 = (($ch) + 352|0);
       $38 = (($ch) + 428|0);
       $39 = (($ch) + 356|0);
       $40 = (($ch) + 216|0);
       $41 = (($ch) + 236|0);
       $42 = (($ch) + 312|0);
       $43 = (($ch) + 240|0);
       $44 = (($ch) + 448|0);
       $45 = (($ch) + 468|0);
       $46 = (($ch) + 544|0);
       $47 = (($ch) + 472|0);
       $48 = ($ch);
       $49 = (($ch) + 28|0);
       $50 = (($ch) + 32|0);
       $51 = (($ch) + 148|0);
       $52 = (($ch) + 380|0);
       $53 = (($ch) + 264|0);
       $54 = (($ch) + 496|0);
       $55 = (($ch) + 16|0);
       $56 = (($ch) + 20|0);
       $$0 = $buf;$$01 = $length;$$pn = $25;$CH_S0_OUT_1$0 = $30;$in0$0 = $29;$in1$0 = $28;$in2$0 = $27;$in3$0 = $26;
       while(1) {
        $YM2612_LFOcnt$0 = (($$pn) + ($22))|0;
        $57 = $YM2612_LFOcnt$0 >>> 18;
        $58 = $57 & 1023;
        $59 = ((($g) + ($58<<1)|0) + 26744|0);
        $60 = HEAP16[$59>>1]|0;
        $61 = $60 << 16 >> 16;
        $62 = HEAP32[$31>>2]|0;
        $63 = $62 >> 16;
        $64 = ((($g) + ($63<<1)|0) + 10344|0);
        $65 = HEAP16[$64>>1]|0;
        $66 = $65 << 16 >> 16;
        $67 = HEAP32[$32>>2]|0;
        $68 = (($66) + ($67))|0;
        $69 = HEAP32[$33>>2]|0;
        $70 = $68 ^ $69;
        $71 = HEAP32[$34>>2]|0;
        $72 = $61 >> $71;
        $73 = (($72) + ($70))|0;
        $74 = HEAP32[$35>>2]|0;
        $75 = (($68) - ($74))|0;
        $76 = $75 >> 31;
        $77 = $76 & $73;
        $78 = HEAP32[$11>>2]|0;
        $79 = $78 >> 16;
        $80 = ((($g) + ($79<<1)|0) + 10344|0);
        $81 = HEAP16[$80>>1]|0;
        $82 = $81 << 16 >> 16;
        $83 = HEAP32[$36>>2]|0;
        $84 = (($82) + ($83))|0;
        $85 = HEAP32[$37>>2]|0;
        $86 = $84 ^ $85;
        $87 = HEAP32[$38>>2]|0;
        $88 = $61 >> $87;
        $89 = (($88) + ($86))|0;
        $90 = HEAP32[$39>>2]|0;
        $91 = (($84) - ($90))|0;
        $92 = $91 >> 31;
        $93 = $92 & $89;
        $94 = HEAP32[$6>>2]|0;
        $95 = $94 >> 16;
        $96 = ((($g) + ($95<<1)|0) + 10344|0);
        $97 = HEAP16[$96>>1]|0;
        $98 = $97 << 16 >> 16;
        $99 = HEAP32[$40>>2]|0;
        $100 = (($98) + ($99))|0;
        $101 = HEAP32[$41>>2]|0;
        $102 = $100 ^ $101;
        $103 = HEAP32[$42>>2]|0;
        $104 = $61 >> $103;
        $105 = (($104) + ($102))|0;
        $106 = HEAP32[$43>>2]|0;
        $107 = (($100) - ($106))|0;
        $108 = $107 >> 31;
        $109 = $108 & $105;
        $110 = HEAP32[$2>>2]|0;
        $111 = $110 >> 16;
        $112 = ((($g) + ($111<<1)|0) + 10344|0);
        $113 = HEAP16[$112>>1]|0;
        $114 = $113 << 16 >> 16;
        $115 = HEAP32[$44>>2]|0;
        $116 = (($114) + ($115))|0;
        $117 = HEAP32[$45>>2]|0;
        $118 = $116 ^ $117;
        $119 = HEAP32[$46>>2]|0;
        $120 = $61 >> $119;
        $121 = (($120) + ($118))|0;
        $122 = HEAP32[$47>>2]|0;
        $123 = (($116) - ($122))|0;
        $124 = $123 >> 31;
        $125 = $124 & $121;
        $126 = HEAP32[$48>>2]|0;
        $127 = (($126) + ($CH_S0_OUT_1$0))|0;
        $128 = HEAP32[$49>>2]|0;
        $129 = $127 >> $128;
        $130 = (($129) + ($in0$0))|0;
        $131 = $130 >>> 14;
        $132 = $131 & 4095;
        $133 = (($g) + ($132<<1)|0);
        $134 = HEAP16[$133>>1]|0;
        $135 = $134 << 16 >> 16;
        $136 = (($135) + ($77))|0;
        $137 = ((($g) + ($136<<2)|0) + 30840|0);
        $138 = HEAP32[$137>>2]|0;
        $139 = (($126) + ($in3$0))|0;
        $140 = $139 >>> 14;
        $141 = $140 & 4095;
        $142 = (($g) + ($141<<1)|0);
        $143 = HEAP16[$142>>1]|0;
        $144 = $143 << 16 >> 16;
        $145 = (($144) + ($125))|0;
        $146 = ((($g) + ($145<<2)|0) + 30840|0);
        $147 = HEAP32[$146>>2]|0;
        $148 = (($126) + ($in1$0))|0;
        $149 = $148 >>> 14;
        $150 = $149 & 4095;
        $151 = (($g) + ($150<<1)|0);
        $152 = HEAP16[$151>>1]|0;
        $153 = $152 << 16 >> 16;
        $154 = (($153) + ($93))|0;
        $155 = ((($g) + ($154<<2)|0) + 30840|0);
        $156 = HEAP32[$155>>2]|0;
        $157 = (($156) + ($147))|0;
        $158 = (($126) + ($in2$0))|0;
        $159 = $158 >>> 14;
        $160 = $159 & 4095;
        $161 = (($g) + ($160<<1)|0);
        $162 = HEAP16[$161>>1]|0;
        $163 = $162 << 16 >> 16;
        $164 = (($163) + ($109))|0;
        $165 = ((($g) + ($164<<2)|0) + 30840|0);
        $166 = HEAP32[$165>>2]|0;
        $167 = (($157) + ($166))|0;
        $168 = $167 >> 16;
        $169 = ((($g) + ($58<<1)|0) + 28792|0);
        $170 = HEAP16[$169>>1]|0;
        $171 = $170 << 16 >> 16;
        $172 = HEAP32[$50>>2]|0;
        $173 = Math_imul($171, $172)|0;
        $174 = $173 >> 10;
        $175 = (($174) + 256)|0;
        $176 = HEAP32[$51>>2]|0;
        $177 = Math_imul($175, $176)|0;
        $178 = $177 >>> 8;
        $179 = (($178) + ($in0$0))|0;
        $180 = HEAP32[$52>>2]|0;
        $181 = Math_imul($175, $180)|0;
        $182 = $181 >>> 8;
        $183 = (($182) + ($in1$0))|0;
        $184 = HEAP32[$53>>2]|0;
        $185 = Math_imul($184, $175)|0;
        $186 = $185 >>> 8;
        $187 = (($186) + ($in2$0))|0;
        $188 = HEAP32[$54>>2]|0;
        $189 = Math_imul($188, $175)|0;
        $190 = $189 >>> 8;
        $191 = (($190) + ($in3$0))|0;
        $192 = HEAP16[$$0>>1]|0;
        $193 = $192&65535;
        $194 = HEAP32[$55>>2]|0;
        $195 = $194 & $168;
        $196 = (($195) + ($193))|0;
        $197 = (($$0) + 2|0);
        $198 = HEAP16[$197>>1]|0;
        $199 = $198&65535;
        $200 = HEAP32[$56>>2]|0;
        $201 = $200 & $168;
        $202 = (($201) + ($199))|0;
        __Z15update_envelopeR6slot_t($16);
        __Z15update_envelopeR6slot_t($5);
        __Z15update_envelopeR6slot_t($10);
        __Z15update_envelopeR6slot_t($1);
        HEAP32[$48>>2] = $138;
        $203 = $196&65535;
        HEAP16[$$0>>1] = $203;
        $204 = $202&65535;
        HEAP16[$197>>1] = $204;
        $205 = (($$0) + 4|0);
        $206 = (($$01) + -1)|0;
        $207 = ($206|0)==(0);
        if ($207) {
         break;
        } else {
         $in3$0$phi = $191;$in2$0$phi = $187;$in1$0$phi = $183;$in0$0$phi = $179;$CH_S0_OUT_1$0$phi = $126;$$pn$phi = $YM2612_LFOcnt$0;$$01$phi = $206;$$0$phi = $205;$in3$0 = $in3$0$phi;$in2$0 = $in2$0$phi;$in1$0 = $in1$0$phi;$in0$0 = $in0$0$phi;$CH_S0_OUT_1$0 = $CH_S0_OUT_1$0$phi;$$pn = $$pn$phi;$$01 = $$01$phi;$$0 = $$0$phi;
        }
       }
       HEAP32[$15>>2] = $126;
       HEAP32[$17>>2] = $179;
       HEAP32[$18>>2] = $183;
       HEAP32[$19>>2] = $187;
       HEAP32[$20>>2] = $191;
       STACKTOP = sp;return;
      }
      function __ZN18ym2612_update_chanILi6EE4funcER8tables_tR9channel_tPsi($g,$ch,$buf,$length) {
       $g = $g|0;
       $ch = $ch|0;
       $buf = $buf|0;
       $length = $length|0;
       var $$0 = 0, $$0$phi = 0, $$01 = 0, $$01$phi = 0, $$pn = 0, $$pn$phi = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
       var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
       var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
       var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
       var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
       var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
       var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
       var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
       var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
       var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
       var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $CH_S0_OUT_1$0 = 0, $CH_S0_OUT_1$0$phi = 0, $YM2612_LFOcnt$0 = 0, $in0$0 = 0, $in0$0$phi = 0, $in1$0 = 0, $in1$0$phi = 0, $in2$0 = 0, $in2$0$phi = 0;
       var $in3$0 = 0, $in3$0$phi = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($ch) + 436|0);
       $2 = (($ch) + 504|0);
       $3 = HEAP32[$2>>2]|0;
       $4 = (($3) + -536870912)|0;
       $5 = (($ch) + 204|0);
       $6 = (($ch) + 272|0);
       $7 = HEAP32[$6>>2]|0;
       $8 = (($7) + -536870912)|0;
       $9 = $8 | $4;
       $10 = (($ch) + 320|0);
       $11 = (($ch) + 388|0);
       $12 = HEAP32[$11>>2]|0;
       $13 = (($12) + -536870912)|0;
       $14 = $9 | $13;
       $15 = (($ch) + 4|0);
       $16 = (($ch) + 88|0);
       $17 = (($ch) + 144|0);
       $18 = (($ch) + 376|0);
       $19 = (($ch) + 260|0);
       $20 = (($ch) + 492|0);
       $21 = (($g) + 8196|0);
       $22 = HEAP32[$21>>2]|0;
       $23 = ($14|0)==(0);
       if ($23) {
        STACKTOP = sp;return;
       }
       $24 = (($g) + 8192|0);
       $25 = HEAP32[$24>>2]|0;
       $26 = HEAP32[$20>>2]|0;
       $27 = HEAP32[$19>>2]|0;
       $28 = HEAP32[$18>>2]|0;
       $29 = HEAP32[$17>>2]|0;
       $30 = HEAP32[$15>>2]|0;
       $31 = (($ch) + 156|0);
       $32 = (($ch) + 100|0);
       $33 = (($ch) + 120|0);
       $34 = (($ch) + 196|0);
       $35 = (($ch) + 124|0);
       $36 = (($ch) + 332|0);
       $37 = (($ch) + 352|0);
       $38 = (($ch) + 428|0);
       $39 = (($ch) + 356|0);
       $40 = (($ch) + 216|0);
       $41 = (($ch) + 236|0);
       $42 = (($ch) + 312|0);
       $43 = (($ch) + 240|0);
       $44 = (($ch) + 448|0);
       $45 = (($ch) + 468|0);
       $46 = (($ch) + 544|0);
       $47 = (($ch) + 472|0);
       $48 = ($ch);
       $49 = (($ch) + 28|0);
       $50 = (($ch) + 32|0);
       $51 = (($ch) + 148|0);
       $52 = (($ch) + 380|0);
       $53 = (($ch) + 264|0);
       $54 = (($ch) + 496|0);
       $55 = (($ch) + 16|0);
       $56 = (($ch) + 20|0);
       $$0 = $buf;$$01 = $length;$$pn = $25;$CH_S0_OUT_1$0 = $30;$in0$0 = $29;$in1$0 = $28;$in2$0 = $27;$in3$0 = $26;
       while(1) {
        $YM2612_LFOcnt$0 = (($$pn) + ($22))|0;
        $57 = $YM2612_LFOcnt$0 >>> 18;
        $58 = $57 & 1023;
        $59 = ((($g) + ($58<<1)|0) + 26744|0);
        $60 = HEAP16[$59>>1]|0;
        $61 = $60 << 16 >> 16;
        $62 = HEAP32[$31>>2]|0;
        $63 = $62 >> 16;
        $64 = ((($g) + ($63<<1)|0) + 10344|0);
        $65 = HEAP16[$64>>1]|0;
        $66 = $65 << 16 >> 16;
        $67 = HEAP32[$32>>2]|0;
        $68 = (($66) + ($67))|0;
        $69 = HEAP32[$33>>2]|0;
        $70 = $68 ^ $69;
        $71 = HEAP32[$34>>2]|0;
        $72 = $61 >> $71;
        $73 = (($72) + ($70))|0;
        $74 = HEAP32[$35>>2]|0;
        $75 = (($68) - ($74))|0;
        $76 = $75 >> 31;
        $77 = $76 & $73;
        $78 = HEAP32[$11>>2]|0;
        $79 = $78 >> 16;
        $80 = ((($g) + ($79<<1)|0) + 10344|0);
        $81 = HEAP16[$80>>1]|0;
        $82 = $81 << 16 >> 16;
        $83 = HEAP32[$36>>2]|0;
        $84 = (($82) + ($83))|0;
        $85 = HEAP32[$37>>2]|0;
        $86 = $84 ^ $85;
        $87 = HEAP32[$38>>2]|0;
        $88 = $61 >> $87;
        $89 = (($88) + ($86))|0;
        $90 = HEAP32[$39>>2]|0;
        $91 = (($84) - ($90))|0;
        $92 = $91 >> 31;
        $93 = $92 & $89;
        $94 = HEAP32[$6>>2]|0;
        $95 = $94 >> 16;
        $96 = ((($g) + ($95<<1)|0) + 10344|0);
        $97 = HEAP16[$96>>1]|0;
        $98 = $97 << 16 >> 16;
        $99 = HEAP32[$40>>2]|0;
        $100 = (($98) + ($99))|0;
        $101 = HEAP32[$41>>2]|0;
        $102 = $100 ^ $101;
        $103 = HEAP32[$42>>2]|0;
        $104 = $61 >> $103;
        $105 = (($104) + ($102))|0;
        $106 = HEAP32[$43>>2]|0;
        $107 = (($100) - ($106))|0;
        $108 = $107 >> 31;
        $109 = $108 & $105;
        $110 = HEAP32[$2>>2]|0;
        $111 = $110 >> 16;
        $112 = ((($g) + ($111<<1)|0) + 10344|0);
        $113 = HEAP16[$112>>1]|0;
        $114 = $113 << 16 >> 16;
        $115 = HEAP32[$44>>2]|0;
        $116 = (($114) + ($115))|0;
        $117 = HEAP32[$45>>2]|0;
        $118 = $116 ^ $117;
        $119 = HEAP32[$46>>2]|0;
        $120 = $61 >> $119;
        $121 = (($120) + ($118))|0;
        $122 = HEAP32[$47>>2]|0;
        $123 = (($116) - ($122))|0;
        $124 = $123 >> 31;
        $125 = $124 & $121;
        $126 = HEAP32[$48>>2]|0;
        $127 = (($126) + ($CH_S0_OUT_1$0))|0;
        $128 = HEAP32[$49>>2]|0;
        $129 = $127 >> $128;
        $130 = (($129) + ($in0$0))|0;
        $131 = $130 >>> 14;
        $132 = $131 & 4095;
        $133 = (($g) + ($132<<1)|0);
        $134 = HEAP16[$133>>1]|0;
        $135 = $134 << 16 >> 16;
        $136 = (($135) + ($77))|0;
        $137 = ((($g) + ($136<<2)|0) + 30840|0);
        $138 = HEAP32[$137>>2]|0;
        $139 = $in3$0 >>> 14;
        $140 = $139 & 4095;
        $141 = (($g) + ($140<<1)|0);
        $142 = HEAP16[$141>>1]|0;
        $143 = $142 << 16 >> 16;
        $144 = (($143) + ($125))|0;
        $145 = ((($g) + ($144<<2)|0) + 30840|0);
        $146 = HEAP32[$145>>2]|0;
        $147 = (($126) + ($in1$0))|0;
        $148 = $147 >>> 14;
        $149 = $148 & 4095;
        $150 = (($g) + ($149<<1)|0);
        $151 = HEAP16[$150>>1]|0;
        $152 = $151 << 16 >> 16;
        $153 = (($152) + ($93))|0;
        $154 = ((($g) + ($153<<2)|0) + 30840|0);
        $155 = HEAP32[$154>>2]|0;
        $156 = (($155) + ($146))|0;
        $157 = $in2$0 >>> 14;
        $158 = $157 & 4095;
        $159 = (($g) + ($158<<1)|0);
        $160 = HEAP16[$159>>1]|0;
        $161 = $160 << 16 >> 16;
        $162 = (($161) + ($109))|0;
        $163 = ((($g) + ($162<<2)|0) + 30840|0);
        $164 = HEAP32[$163>>2]|0;
        $165 = (($156) + ($164))|0;
        $166 = $165 >> 16;
        $167 = ((($g) + ($58<<1)|0) + 28792|0);
        $168 = HEAP16[$167>>1]|0;
        $169 = $168 << 16 >> 16;
        $170 = HEAP32[$50>>2]|0;
        $171 = Math_imul($169, $170)|0;
        $172 = $171 >> 10;
        $173 = (($172) + 256)|0;
        $174 = HEAP32[$51>>2]|0;
        $175 = Math_imul($173, $174)|0;
        $176 = $175 >>> 8;
        $177 = (($176) + ($in0$0))|0;
        $178 = HEAP32[$52>>2]|0;
        $179 = Math_imul($173, $178)|0;
        $180 = $179 >>> 8;
        $181 = (($180) + ($in1$0))|0;
        $182 = HEAP32[$53>>2]|0;
        $183 = Math_imul($182, $173)|0;
        $184 = $183 >>> 8;
        $185 = (($184) + ($in2$0))|0;
        $186 = HEAP32[$54>>2]|0;
        $187 = Math_imul($186, $173)|0;
        $188 = $187 >>> 8;
        $189 = (($188) + ($in3$0))|0;
        $190 = HEAP16[$$0>>1]|0;
        $191 = $190&65535;
        $192 = HEAP32[$55>>2]|0;
        $193 = $192 & $166;
        $194 = (($193) + ($191))|0;
        $195 = (($$0) + 2|0);
        $196 = HEAP16[$195>>1]|0;
        $197 = $196&65535;
        $198 = HEAP32[$56>>2]|0;
        $199 = $198 & $166;
        $200 = (($199) + ($197))|0;
        __Z15update_envelopeR6slot_t($16);
        __Z15update_envelopeR6slot_t($5);
        __Z15update_envelopeR6slot_t($10);
        __Z15update_envelopeR6slot_t($1);
        HEAP32[$48>>2] = $138;
        $201 = $194&65535;
        HEAP16[$$0>>1] = $201;
        $202 = $200&65535;
        HEAP16[$195>>1] = $202;
        $203 = (($$0) + 4|0);
        $204 = (($$01) + -1)|0;
        $205 = ($204|0)==(0);
        if ($205) {
         break;
        } else {
         $in3$0$phi = $189;$in2$0$phi = $185;$in1$0$phi = $181;$in0$0$phi = $177;$CH_S0_OUT_1$0$phi = $126;$$pn$phi = $YM2612_LFOcnt$0;$$01$phi = $204;$$0$phi = $203;$in3$0 = $in3$0$phi;$in2$0 = $in2$0$phi;$in1$0 = $in1$0$phi;$in0$0 = $in0$0$phi;$CH_S0_OUT_1$0 = $CH_S0_OUT_1$0$phi;$$pn = $$pn$phi;$$01 = $$01$phi;$$0 = $$0$phi;
        }
       }
       HEAP32[$15>>2] = $126;
       HEAP32[$17>>2] = $177;
       HEAP32[$18>>2] = $181;
       HEAP32[$19>>2] = $185;
       HEAP32[$20>>2] = $189;
       STACKTOP = sp;return;
      }
      function __ZN18ym2612_update_chanILi7EE4funcER8tables_tR9channel_tPsi($g,$ch,$buf,$length) {
       $g = $g|0;
       $ch = $ch|0;
       $buf = $buf|0;
       $length = $length|0;
       var $$0 = 0, $$0$phi = 0, $$01 = 0, $$01$phi = 0, $$pn = 0, $$pn$phi = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
       var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
       var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
       var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
       var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
       var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
       var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
       var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
       var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
       var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
       var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $CH_S0_OUT_1$0 = 0, $CH_S0_OUT_1$0$phi = 0, $YM2612_LFOcnt$0 = 0, $in0$0 = 0, $in0$0$phi = 0, $in1$0 = 0;
       var $in1$0$phi = 0, $in2$0 = 0, $in2$0$phi = 0, $in3$0 = 0, $in3$0$phi = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($ch) + 436|0);
       $2 = (($ch) + 504|0);
       $3 = HEAP32[$2>>2]|0;
       $4 = (($3) + -536870912)|0;
       $5 = (($ch) + 88|0);
       $6 = (($ch) + 156|0);
       $7 = HEAP32[$6>>2]|0;
       $8 = (($7) + -536870912)|0;
       $9 = $8 | $4;
       $10 = (($ch) + 204|0);
       $11 = (($ch) + 272|0);
       $12 = HEAP32[$11>>2]|0;
       $13 = (($12) + -536870912)|0;
       $14 = $9 | $13;
       $15 = (($ch) + 320|0);
       $16 = (($ch) + 388|0);
       $17 = HEAP32[$16>>2]|0;
       $18 = (($17) + -536870912)|0;
       $19 = $14 | $18;
       $20 = (($ch) + 4|0);
       $21 = (($ch) + 144|0);
       $22 = (($ch) + 376|0);
       $23 = (($ch) + 260|0);
       $24 = (($ch) + 492|0);
       $25 = (($g) + 8196|0);
       $26 = HEAP32[$25>>2]|0;
       $27 = ($19|0)==(0);
       if ($27) {
        STACKTOP = sp;return;
       }
       $28 = (($g) + 8192|0);
       $29 = HEAP32[$28>>2]|0;
       $30 = HEAP32[$24>>2]|0;
       $31 = HEAP32[$23>>2]|0;
       $32 = HEAP32[$22>>2]|0;
       $33 = HEAP32[$21>>2]|0;
       $34 = HEAP32[$20>>2]|0;
       $35 = (($ch) + 100|0);
       $36 = (($ch) + 120|0);
       $37 = (($ch) + 196|0);
       $38 = (($ch) + 124|0);
       $39 = (($ch) + 332|0);
       $40 = (($ch) + 352|0);
       $41 = (($ch) + 428|0);
       $42 = (($ch) + 356|0);
       $43 = (($ch) + 216|0);
       $44 = (($ch) + 236|0);
       $45 = (($ch) + 312|0);
       $46 = (($ch) + 240|0);
       $47 = (($ch) + 448|0);
       $48 = (($ch) + 468|0);
       $49 = (($ch) + 544|0);
       $50 = (($ch) + 472|0);
       $51 = ($ch);
       $52 = (($ch) + 28|0);
       $53 = (($ch) + 32|0);
       $54 = (($ch) + 148|0);
       $55 = (($ch) + 380|0);
       $56 = (($ch) + 264|0);
       $57 = (($ch) + 496|0);
       $58 = (($ch) + 16|0);
       $59 = (($ch) + 20|0);
       $$0 = $buf;$$01 = $length;$$pn = $29;$CH_S0_OUT_1$0 = $34;$in0$0 = $33;$in1$0 = $32;$in2$0 = $31;$in3$0 = $30;
       while(1) {
        $YM2612_LFOcnt$0 = (($$pn) + ($26))|0;
        $60 = $YM2612_LFOcnt$0 >>> 18;
        $61 = $60 & 1023;
        $62 = ((($g) + ($61<<1)|0) + 26744|0);
        $63 = HEAP16[$62>>1]|0;
        $64 = $63 << 16 >> 16;
        $65 = HEAP32[$6>>2]|0;
        $66 = $65 >> 16;
        $67 = ((($g) + ($66<<1)|0) + 10344|0);
        $68 = HEAP16[$67>>1]|0;
        $69 = $68 << 16 >> 16;
        $70 = HEAP32[$35>>2]|0;
        $71 = (($69) + ($70))|0;
        $72 = HEAP32[$36>>2]|0;
        $73 = $71 ^ $72;
        $74 = HEAP32[$37>>2]|0;
        $75 = $64 >> $74;
        $76 = (($75) + ($73))|0;
        $77 = HEAP32[$38>>2]|0;
        $78 = (($71) - ($77))|0;
        $79 = $78 >> 31;
        $80 = $79 & $76;
        $81 = HEAP32[$16>>2]|0;
        $82 = $81 >> 16;
        $83 = ((($g) + ($82<<1)|0) + 10344|0);
        $84 = HEAP16[$83>>1]|0;
        $85 = $84 << 16 >> 16;
        $86 = HEAP32[$39>>2]|0;
        $87 = (($85) + ($86))|0;
        $88 = HEAP32[$40>>2]|0;
        $89 = $87 ^ $88;
        $90 = HEAP32[$41>>2]|0;
        $91 = $64 >> $90;
        $92 = (($91) + ($89))|0;
        $93 = HEAP32[$42>>2]|0;
        $94 = (($87) - ($93))|0;
        $95 = $94 >> 31;
        $96 = $95 & $92;
        $97 = HEAP32[$11>>2]|0;
        $98 = $97 >> 16;
        $99 = ((($g) + ($98<<1)|0) + 10344|0);
        $100 = HEAP16[$99>>1]|0;
        $101 = $100 << 16 >> 16;
        $102 = HEAP32[$43>>2]|0;
        $103 = (($101) + ($102))|0;
        $104 = HEAP32[$44>>2]|0;
        $105 = $103 ^ $104;
        $106 = HEAP32[$45>>2]|0;
        $107 = $64 >> $106;
        $108 = (($107) + ($105))|0;
        $109 = HEAP32[$46>>2]|0;
        $110 = (($103) - ($109))|0;
        $111 = $110 >> 31;
        $112 = $111 & $108;
        $113 = HEAP32[$2>>2]|0;
        $114 = $113 >> 16;
        $115 = ((($g) + ($114<<1)|0) + 10344|0);
        $116 = HEAP16[$115>>1]|0;
        $117 = $116 << 16 >> 16;
        $118 = HEAP32[$47>>2]|0;
        $119 = (($117) + ($118))|0;
        $120 = HEAP32[$48>>2]|0;
        $121 = $119 ^ $120;
        $122 = HEAP32[$49>>2]|0;
        $123 = $64 >> $122;
        $124 = (($123) + ($121))|0;
        $125 = HEAP32[$50>>2]|0;
        $126 = (($119) - ($125))|0;
        $127 = $126 >> 31;
        $128 = $127 & $124;
        $129 = HEAP32[$51>>2]|0;
        $130 = (($129) + ($CH_S0_OUT_1$0))|0;
        $131 = HEAP32[$52>>2]|0;
        $132 = $130 >> $131;
        $133 = (($132) + ($in0$0))|0;
        $134 = $133 >>> 14;
        $135 = $134 & 4095;
        $136 = (($g) + ($135<<1)|0);
        $137 = HEAP16[$136>>1]|0;
        $138 = $137 << 16 >> 16;
        $139 = (($138) + ($80))|0;
        $140 = ((($g) + ($139<<2)|0) + 30840|0);
        $141 = HEAP32[$140>>2]|0;
        $142 = $in3$0 >>> 14;
        $143 = $142 & 4095;
        $144 = (($g) + ($143<<1)|0);
        $145 = HEAP16[$144>>1]|0;
        $146 = $145 << 16 >> 16;
        $147 = (($146) + ($128))|0;
        $148 = ((($g) + ($147<<2)|0) + 30840|0);
        $149 = HEAP32[$148>>2]|0;
        $150 = $in1$0 >>> 14;
        $151 = $150 & 4095;
        $152 = (($g) + ($151<<1)|0);
        $153 = HEAP16[$152>>1]|0;
        $154 = $153 << 16 >> 16;
        $155 = (($154) + ($96))|0;
        $156 = ((($g) + ($155<<2)|0) + 30840|0);
        $157 = HEAP32[$156>>2]|0;
        $158 = $in2$0 >>> 14;
        $159 = $158 & 4095;
        $160 = (($g) + ($159<<1)|0);
        $161 = HEAP16[$160>>1]|0;
        $162 = $161 << 16 >> 16;
        $163 = (($162) + ($112))|0;
        $164 = ((($g) + ($163<<2)|0) + 30840|0);
        $165 = HEAP32[$164>>2]|0;
        $166 = (($149) + ($129))|0;
        $167 = (($166) + ($157))|0;
        $168 = (($167) + ($165))|0;
        $169 = $168 >> 16;
        $170 = ((($g) + ($61<<1)|0) + 28792|0);
        $171 = HEAP16[$170>>1]|0;
        $172 = $171 << 16 >> 16;
        $173 = HEAP32[$53>>2]|0;
        $174 = Math_imul($172, $173)|0;
        $175 = $174 >> 10;
        $176 = (($175) + 256)|0;
        $177 = HEAP32[$54>>2]|0;
        $178 = Math_imul($176, $177)|0;
        $179 = $178 >>> 8;
        $180 = (($179) + ($in0$0))|0;
        $181 = HEAP32[$55>>2]|0;
        $182 = Math_imul($176, $181)|0;
        $183 = $182 >>> 8;
        $184 = (($183) + ($in1$0))|0;
        $185 = HEAP32[$56>>2]|0;
        $186 = Math_imul($185, $176)|0;
        $187 = $186 >>> 8;
        $188 = (($187) + ($in2$0))|0;
        $189 = HEAP32[$57>>2]|0;
        $190 = Math_imul($189, $176)|0;
        $191 = $190 >>> 8;
        $192 = (($191) + ($in3$0))|0;
        $193 = HEAP16[$$0>>1]|0;
        $194 = $193&65535;
        $195 = HEAP32[$58>>2]|0;
        $196 = $195 & $169;
        $197 = (($196) + ($194))|0;
        $198 = (($$0) + 2|0);
        $199 = HEAP16[$198>>1]|0;
        $200 = $199&65535;
        $201 = HEAP32[$59>>2]|0;
        $202 = $201 & $169;
        $203 = (($202) + ($200))|0;
        __Z15update_envelopeR6slot_t($5);
        __Z15update_envelopeR6slot_t($10);
        __Z15update_envelopeR6slot_t($15);
        __Z15update_envelopeR6slot_t($1);
        HEAP32[$51>>2] = $141;
        $204 = $197&65535;
        HEAP16[$$0>>1] = $204;
        $205 = $203&65535;
        HEAP16[$198>>1] = $205;
        $206 = (($$0) + 4|0);
        $207 = (($$01) + -1)|0;
        $208 = ($207|0)==(0);
        if ($208) {
         break;
        } else {
         $in3$0$phi = $192;$in2$0$phi = $188;$in1$0$phi = $184;$in0$0$phi = $180;$CH_S0_OUT_1$0$phi = $129;$$pn$phi = $YM2612_LFOcnt$0;$$01$phi = $207;$$0$phi = $206;$in3$0 = $in3$0$phi;$in2$0 = $in2$0$phi;$in1$0 = $in1$0$phi;$in0$0 = $in0$0$phi;$CH_S0_OUT_1$0 = $CH_S0_OUT_1$0$phi;$$pn = $$pn$phi;$$01 = $$01$phi;$$0 = $$0$phi;
        }
       }
       HEAP32[$20>>2] = $129;
       HEAP32[$21>>2] = $180;
       HEAP32[$22>>2] = $184;
       HEAP32[$23>>2] = $188;
       HEAP32[$24>>2] = $192;
       STACKTOP = sp;return;
      }
      function __Z15update_envelopeR6slot_t($sl) {
       $sl = $sl|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($sl) + 76|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = (($sl) + 72|0);
       $4 = HEAP32[$3>>2]|0;
       $5 = (($sl) + 68|0);
       $6 = HEAP32[$5>>2]|0;
       $7 = (($6) + ($4))|0;
       HEAP32[$5>>2] = $7;
       $8 = ($7|0)<($2|0);
       if ($8) {
        STACKTOP = sp;return;
       }
       __ZL16update_envelope_P6slot_t($sl);
       STACKTOP = sp;return;
      }
      function __ZL16update_envelope_P6slot_t($sl) {
       $sl = $sl|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
       var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($sl) + 64|0);
       $2 = HEAP32[$1>>2]|0;
       do {
        if ((($2|0) == 0)) {
         $3 = (($sl) + 68|0);
         HEAP32[$3>>2] = 268435456;
         $4 = (($sl) + 84|0);
         $5 = HEAP32[$4>>2]|0;
         $6 = (($sl) + 72|0);
         HEAP32[$6>>2] = $5;
         $7 = (($sl) + 16|0);
         $8 = HEAP32[$7>>2]|0;
         $9 = (($sl) + 76|0);
         HEAP32[$9>>2] = $8;
         HEAP32[$1>>2] = 1;
         STACKTOP = sp;return;
        } else if ((($2|0) == 2)) {
         $17 = (($sl) + 28|0);
         $18 = HEAP32[$17>>2]|0;
         $19 = $18 & 8;
         $20 = ($19|0)==(0);
         if ($20) {
          break;
         }
         $21 = $18 & 1;
         $22 = ($21|0)==(0);
         if (!($22)) {
          $31 = $18 << 1;
          $32 = $31 & 4;
          __Z7set_segR6slot_ti($sl,$32);
          break;
         }
         $23 = (($sl) + 68|0);
         HEAP32[$23>>2] = 0;
         $24 = (($sl) + 80|0);
         $25 = HEAP32[$24>>2]|0;
         $26 = (($sl) + 72|0);
         HEAP32[$26>>2] = $25;
         $27 = (($sl) + 76|0);
         HEAP32[$27>>2] = 268435456;
         HEAP32[$1>>2] = 0;
         $28 = HEAP32[$17>>2]|0;
         $29 = $28 << 1;
         $30 = $29 & 4;
         __Z7set_segR6slot_ti($sl,$30);
         STACKTOP = sp;return;
        } else if ((($2|0) == 1)) {
         $10 = (($sl) + 16|0);
         $11 = HEAP32[$10>>2]|0;
         $12 = (($sl) + 68|0);
         HEAP32[$12>>2] = $11;
         $13 = (($sl) + 88|0);
         $14 = HEAP32[$13>>2]|0;
         $15 = (($sl) + 72|0);
         HEAP32[$15>>2] = $14;
         $16 = (($sl) + 76|0);
         HEAP32[$16>>2] = 536870912;
         HEAP32[$1>>2] = 2;
         STACKTOP = sp;return;
        } else if (!((($2|0) == 3))) {
         STACKTOP = sp;return;
        }
       } while(0);
       $33 = (($sl) + 68|0);
       HEAP32[$33>>2] = 536870912;
       $34 = (($sl) + 72|0);
       HEAP32[$34>>2] = 0;
       $35 = (($sl) + 76|0);
       HEAP32[$35>>2] = 536870913;
       STACKTOP = sp;return;
      }
      function _gme_type_list() {
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = HEAP8[(53944)]|0;
       $2 = ($1<<24>>24)==(0);
       if (!($2)) {
        STACKTOP = sp;return (((53896))|0);
       }
       $3 = (___cxa_guard_acquire(((53944)|0))|0);
       $4 = ($3|0)==(0);
       if ($4) {
        STACKTOP = sp;return (((53896))|0);
       }
       $5 = HEAP32[(36080)>>2]|0;
       HEAP32[((53896))>>2] = $5;
       $6 = HEAP32[(39408)>>2]|0;
       HEAP32[(((53896) + 4|0))>>2] = $6;
       $7 = HEAP32[(40440)>>2]|0;
       HEAP32[(((53896) + 8|0))>>2] = $7;
       $8 = HEAP32[(41584)>>2]|0;
       HEAP32[(((53896) + 12|0))>>2] = $8;
       $9 = HEAP32[(42992)>>2]|0;
       HEAP32[(((53896) + 16|0))>>2] = $9;
       $10 = HEAP32[(46480)>>2]|0;
       HEAP32[(((53896) + 20|0))>>2] = $10;
       $11 = HEAP32[(47752)>>2]|0;
       HEAP32[(((53896) + 24|0))>>2] = $11;
       $12 = HEAP32[(48496)>>2]|0;
       HEAP32[(((53896) + 28|0))>>2] = $12;
       $13 = HEAP32[(52160)>>2]|0;
       HEAP32[(((53896) + 32|0))>>2] = $13;
       $14 = HEAP32[(52688)>>2]|0;
       HEAP32[(((53896) + 36|0))>>2] = $14;
       $15 = HEAP32[(52776)>>2]|0;
       HEAP32[(((53896) + 40|0))>>2] = $15;
       HEAP32[(((53896) + 44|0))>>2] = 0;
       ___cxa_guard_release(((53944)|0));
       STACKTOP = sp;return (((53896))|0);
      }
      function _gme_identify_header($header) {
       $header = $header|0;
       var $$0 = 0, $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (__Z8get_be32PKv($header)|0);
       if ((($1|0) == 1449618720)) {
        $$0 = (54024);
       } else if ((($1|0) == 1314080325)) {
        $$0 = (54000);
       } else if ((($1|0) == 1313166157)) {
        $$0 = (53992);
       } else if ((($1|0) == 1397638483)) {
        $$0 = (54016);
       } else if ((($1|0) == 1396789261)) {
        $$0 = (54008);
       } else if ((($1|0) == 1515733337)) {
        $$0 = (53952);
       } else if ((($1|0) == 1195528961)) {
        $$0 = (53960);
       } else if ((($1|0) == 1263752024) | (($1|0) == 1263747907)) {
        $$0 = (53984);
       } else if ((($1|0) == 1197034840)) {
        $$0 = (53968);
       } else if ((($1|0) == 1212502861)) {
        $$0 = (53976);
       } else {
        $$0 = (54032);
       }
       STACKTOP = sp;return ($$0|0);
      }
      function __Z8get_be32PKv($p) {
       $p = $p|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = HEAP8[$p]|0;
       $2 = $1&255;
       $3 = $2 << 24;
       $4 = (($p) + 1|0);
       $5 = HEAP8[$4]|0;
       $6 = $5&255;
       $7 = $6 << 16;
       $8 = $7 | $3;
       $9 = (($p) + 2|0);
       $10 = HEAP8[$9]|0;
       $11 = $10&255;
       $12 = $11 << 8;
       $13 = $8 | $12;
       $14 = (($p) + 3|0);
       $15 = HEAP8[$14]|0;
       $16 = $15&255;
       $17 = $13 | $16;
       STACKTOP = sp;return ($17|0);
      }
      function _gme_identify_extension($extension_) {
       $extension_ = $extension_|0;
       var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $extension = 0, $extension_$ = 0, $types$02 = 0, $types$02$phi = 0, label = 0;
       var sp = 0;
       sp = STACKTOP;
       STACKTOP = STACKTOP + 8|0;
       $extension = sp;
       $1 = (_strrchr(($extension_|0),46)|0);
       $2 = ($1|0)==(0|0);
       $3 = (($1) + 1|0);
       $extension_$ = $2 ? $extension_ : $3;
       $4 = ($extension);
       __ZL12to_uppercasePKciPc($extension_$,$4);
       (_gme_type_list()|0);
       $5 = HEAP32[((53896))>>2]|0;
       $6 = ($5|0)==(0|0);
       if ($6) {
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
       } else {
        $9 = $5;$types$02 = ((53896));
       }
       while(1) {
        $10 = (($9) + 16|0);
        $11 = HEAP32[$10>>2]|0;
        $12 = (_strcmp($4,$11)|0);
        $13 = ($12|0)==(0);
        $14 = (($types$02) + 4|0);
        if ($13) {
         $$0 = $9;
         label = 4;
         break;
        }
        $7 = HEAP32[$14>>2]|0;
        $8 = ($7|0)==(0|0);
        if ($8) {
         $$0 = 0;
         label = 4;
         break;
        } else {
         $types$02$phi = $14;$9 = $7;$types$02 = $types$02$phi;
        }
       }
       if ((label|0) == 4) {
        STACKTOP = sp;return ($$0|0);
       }
       return 0|0;
      }
      function __ZL12to_uppercasePKciPc($in,$out) {
       $in = $in|0;
       $out = $out|0;
       var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, $i$01$phi = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $i$01 = 0;
       while(1) {
        $2 = (($in) + ($i$01)|0);
        $3 = HEAP8[$2]|0;
        $4 = $3 << 24 >> 24;
        $5 = (_toupper(($4|0))|0);
        $6 = $5&255;
        $7 = (($out) + ($i$01)|0);
        HEAP8[$7] = $6;
        $8 = ($6<<24>>24)==(0);
        $9 = (($i$01) + 1)|0;
        if ($8) {
         label = 5;
         break;
        }
        $1 = ($9|0)<(6);
        if ($1) {
         $i$01$phi = $9;$i$01 = $i$01$phi;
        } else {
         break;
        }
       }
       if ((label|0) == 5) {
        STACKTOP = sp;return;
       }
       HEAP8[$out] = 0;
       STACKTOP = sp;return;
      }
      function _gme_open_data($data,$size,$out,$sample_rate) {
       $data = $data|0;
       $size = $size|0;
       $out = $out|0;
       $sample_rate = $sample_rate|0;
       var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0, $or$cond1 = 0, label = 0;
       var sp = 0;
       sp = STACKTOP;
       $notlhs = ($data|0)==(0|0);
       $notrhs = ($size|0)!=(0);
       $or$cond$not = $notrhs & $notlhs;
       $1 = ($out|0)==(0|0);
       $or$cond1 = $or$cond$not | $1;
       if ($or$cond1) {
        ___assert_fail(((54040)|0),((54064)|0),131,((54096)|0));
        // unreachable;
       }
       HEAP32[$out>>2] = 0;
       $2 = ($size|0)>(3);
       do {
        if ($2) {
         $3 = (_gme_identify_header($data)|0);
         $4 = (_gme_identify_extension($3)|0);
         $5 = ($4|0)==(0|0);
         if ($5) {
          break;
         }
         $7 = (_gme_new_emu($4,$sample_rate)|0);
         $8 = ($7|0)==(0|0);
         if ($8) {
          $$0 = (54112);
          STACKTOP = sp;return ($$0|0);
         }
         $9 = (_gme_load_data($7,$data,$size)|0);
         $10 = ($9|0)==(0|0);
         if ($10) {
          HEAP32[$out>>2] = $7;
          $$0 = 0;
          STACKTOP = sp;return ($$0|0);
         } else {
          $11 = $7;
          $12 = HEAP32[$11>>2]|0;
          $13 = (($12) + 4|0);
          $14 = HEAP32[$13>>2]|0;
          FUNCTION_TABLE_vi[$14 & 127]($7);
          $$0 = $9;
          STACKTOP = sp;return ($$0|0);
         }
        }
       } while(0);
       $6 = HEAP32[(40024)>>2]|0;
       $$0 = $6;
       STACKTOP = sp;return ($$0|0);
      }
      function _gme_new_emu($type,$rate) {
       $type = $type|0;
       $rate = $rate|0;
       var $$0 = 0, $$mux = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
       var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $brmerge = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($type|0)==(0|0);
       if ($1) {
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
       }
       $2 = ($rate|0)==(-1);
       if ($2) {
        $3 = (($type) + 12|0);
        $4 = HEAP32[$3>>2]|0;
        $5 = (FUNCTION_TABLE_i[$4 & 31]()|0);
        $$0 = $5;
        STACKTOP = sp;return ($$0|0);
       }
       $6 = (($type) + 8|0);
       $7 = HEAP32[$6>>2]|0;
       $8 = (FUNCTION_TABLE_i[$7 & 31]()|0);
       $9 = ($8|0)==(0|0);
       if ($9) {
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
       }
       $10 = (($type) + 20|0);
       $11 = HEAP32[$10>>2]|0;
       $12 = $11 & 1;
       $13 = ($12|0)==(0);
       do {
        if (!($13)) {
         $14 = (__ZN12Multi_BuffernwEj(512)|0);
         $15 = ($14|0)==(0|0);
         if ($15) {
          $16 = (($8) + 312|0);
          HEAP32[$16>>2] = 0;
          break;
         } else {
          $17 = $14;
          __ZN14Effects_BufferC2Eb($17,0);
          $18 = $14;
          $19 = (($8) + 312|0);
          HEAP32[$19>>2] = $18;
          $20 = $8;
          $21 = HEAP32[$20>>2]|0;
          $22 = (($21) + 36|0);
          $23 = HEAP32[$22>>2]|0;
          FUNCTION_TABLE_vii[$23 & 31]($8,$18);
          break;
         }
        }
       } while(0);
       $24 = HEAP32[$10>>2]|0;
       $25 = $24 & 1;
       $26 = ($25|0)==(0);
       do {
        if ($26) {
         label = 11;
        } else {
         $27 = (($8) + 312|0);
         $28 = HEAP32[$27>>2]|0;
         $29 = ($28|0)==(0|0);
         if (!($29)) {
          label = 11;
          break;
         }
         if ($9) {
          $$0 = 0;
         } else {
          break;
         }
         STACKTOP = sp;return ($$0|0);
        }
       } while(0);
       do {
        if ((label|0) == 11) {
         $30 = (__ZN9Music_Emu15set_sample_rateEl($8,$rate)|0);
         $31 = ($30|0)==(0|0);
         $brmerge = $31 | $9;
         $$mux = $31 ? $8 : 0;
         if ($brmerge) {
          $$0 = $$mux;
         } else {
          break;
         }
         STACKTOP = sp;return ($$0|0);
        }
       } while(0);
       $32 = $8;
       $33 = HEAP32[$32>>2]|0;
       $34 = (($33) + 4|0);
       $35 = HEAP32[$34>>2]|0;
       FUNCTION_TABLE_vi[$35 & 127]($8);
       $$0 = 0;
       STACKTOP = sp;return ($$0|0);
      }
      function _gme_load_data($me,$data,$size) {
       $me = $me|0;
       $data = $data|0;
       $size = $size|0;
       var $1 = 0, $2 = 0, $3 = 0, $in = 0, label = 0, sp = 0;
       sp = STACKTOP;
       STACKTOP = STACKTOP + 16|0;
       $in = sp;
       __ZN15Mem_File_ReaderC2EPKvl($in,$data,$size);
       $1 = ($me);
       $2 = ($in);
       $3 = (__ZN8Gme_File4loadER11Data_Reader($1,$2)|0);
       STACKTOP = sp;return ($3|0);
      }
      function _gme_track_count($me) {
       $me = $me|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($me);
       $2 = (__ZNK8Gme_File11track_countEv($1)|0);
       STACKTOP = sp;return ($2|0);
      }
      function _gme_track_info($me,$out,$track) {
       $me = $me|0;
       $out = $out|0;
       $track = $track|0;
       var $$ = 0, $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
       var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
       var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
       var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
       sp = STACKTOP;
       HEAP32[$out>>2] = 0;
       $1 = (__ZN11gme_info_t_nwEj(1936)|0);
       $2 = ($1|0)==(0|0);
       if ($2) {
        $$0 = (54112);
        STACKTOP = sp;return ($$0|0);
       }
       $3 = ($me);
       $4 = (($1) + 128|0);
       $5 = $4;
       $6 = (__ZNK8Gme_File10track_infoEP12track_info_ti($3,$5,$track)|0);
       $7 = ($6|0)==(0|0);
       if (!($7)) {
        $8 = $1;
        _gme_free_info($8);
        $$0 = $6;
        STACKTOP = sp;return ($$0|0);
       }
       $9 = (($1) + 132|0);
       $10 = $9;
       $11 = HEAP32[$10>>2]|0;
       $12 = $1;
       $13 = $1;
       HEAP32[$13>>2] = $11;
       $14 = (($1) + 136|0);
       $15 = $14;
       $16 = HEAP32[$15>>2]|0;
       $17 = (($1) + 4|0);
       $18 = $17;
       HEAP32[$18>>2] = $16;
       $19 = (($1) + 140|0);
       $20 = $19;
       $21 = HEAP32[$20>>2]|0;
       $22 = (($1) + 8|0);
       $23 = $22;
       HEAP32[$23>>2] = $21;
       $24 = (($1) + 16|0);
       $25 = (($1) + 92|0);
       $26 = $25;
       dest=$24+0|0; stop=dest+48|0; do { HEAP32[dest>>2]=4294967295|0; dest=dest+4|0; } while ((dest|0) < (stop|0));;
       HEAP32[$26>>2] = (54032);
       $27 = (($1) + 96|0);
       $28 = $27;
       HEAP32[$28>>2] = (54032);
       $29 = (($1) + 100|0);
       $30 = $29;
       HEAP32[$30>>2] = (54032);
       $31 = (($1) + 104|0);
       $32 = $31;
       HEAP32[$32>>2] = (54032);
       $33 = (($1) + 108|0);
       $34 = $33;
       HEAP32[$34>>2] = (54032);
       $35 = (($1) + 112|0);
       $36 = $35;
       HEAP32[$36>>2] = (54032);
       $37 = (($1) + 116|0);
       $38 = $37;
       HEAP32[$38>>2] = (54032);
       $39 = (($1) + 120|0);
       $40 = $39;
       HEAP32[$40>>2] = (54032);
       $41 = (($1) + 124|0);
       $42 = $41;
       HEAP32[$42>>2] = (54032);
       $43 = (($1) + 144|0);
       $44 = (($1) + 64|0);
       $45 = $44;
       HEAP32[$45>>2] = $43;
       $46 = (($1) + 400|0);
       $47 = (($1) + 68|0);
       $48 = $47;
       HEAP32[$48>>2] = $46;
       $49 = (($1) + 656|0);
       $50 = (($1) + 72|0);
       $51 = $50;
       HEAP32[$51>>2] = $49;
       $52 = (($1) + 912|0);
       $53 = (($1) + 76|0);
       $54 = $53;
       HEAP32[$54>>2] = $52;
       $55 = (($1) + 1168|0);
       $56 = (($1) + 80|0);
       $57 = $56;
       HEAP32[$57>>2] = $55;
       $58 = (($1) + 1424|0);
       $59 = (($1) + 84|0);
       $60 = $59;
       HEAP32[$60>>2] = $58;
       $61 = (($1) + 1680|0);
       $62 = (($1) + 88|0);
       $63 = $62;
       HEAP32[$63>>2] = $61;
       $64 = HEAP32[$13>>2]|0;
       $65 = (($1) + 12|0);
       $66 = $65;
       HEAP32[$66>>2] = $64;
       $67 = ($64|0)<(1);
       if ($67) {
        $68 = HEAP32[$18>>2]|0;
        $69 = HEAP32[$23>>2]|0;
        $70 = $69 << 1;
        $71 = (($70) + ($68))|0;
        $72 = ($71|0)<(1);
        $$ = $72 ? 150000 : $71;
        HEAP32[$66>>2] = $$;
       }
       HEAP32[$out>>2] = $12;
       $$0 = 0;
       STACKTOP = sp;return ($$0|0);
      }
      function __ZN11gme_info_t_nwEj($s) {
       $s = $s|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (_malloc($s)|0);
       STACKTOP = sp;return ($1|0);
      }
      function _gme_free_info($info) {
       $info = $info|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($info|0)==(0|0);
       if (!($1)) {
        $2 = $info;
        __ZN11gme_info_t_dlEPv($2);
       }
       STACKTOP = sp;return;
      }
      function __ZN11gme_info_t_dlEPv($p) {
       $p = $p|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       _free($p);
       STACKTOP = sp;return;
      }
      function _gme_start_track($me,$index) {
       $me = $me|0;
       $index = $index|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (__ZN9Music_Emu11start_trackEi($me,$index)|0);
       STACKTOP = sp;return ($1|0);
      }
      function _gme_play($me,$n,$p) {
       $me = $me|0;
       $n = $n|0;
       $p = $p|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (__ZN9Music_Emu4playElPs($me,$n,$p)|0);
       STACKTOP = sp;return ($1|0);
      }
      function __ZNSt9type_infoD2Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       STACKTOP = sp;return;
      }
      function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       STACKTOP = sp;return;
      }
      function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       STACKTOP = sp;return;
      }
      function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       STACKTOP = sp;return;
      }
      function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $this;
       __ZdlPv($1);
       STACKTOP = sp;return;
      }
      function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $this;
       __ZdlPv($1);
       STACKTOP = sp;return;
      }
      function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $this;
       __ZdlPv($1);
       STACKTOP = sp;return;
      }
      function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr) {
       $this = $this|0;
       $thrown_type = $thrown_type|0;
       $adjustedPtr = $adjustedPtr|0;
       var $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
       var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $info = 0, dest = 0, label = 0, sp = 0, stop = 0;
       sp = STACKTOP;
       STACKTOP = STACKTOP + 56|0;
       $info = sp;
       $1 = ($this);
       $2 = ($thrown_type);
       $3 = ($1|0)==($2|0);
       if ($3) {
        $$1 = 1;
        STACKTOP = sp;return ($$1|0);
       }
       $4 = ($thrown_type|0)==(0|0);
       if ($4) {
        $$1 = 0;
        STACKTOP = sp;return ($$1|0);
       }
       $5 = $thrown_type;
       $6 = (___dynamic_cast($5,(54192),(54248),0)|0);
       $7 = $6;
       $8 = ($6|0)==(0|0);
       if ($8) {
        $$1 = 0;
        STACKTOP = sp;return ($$1|0);
       }
       $9 = $info;
       dest=$9+0|0; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));;
       $10 = ($info);
       HEAP32[$10>>2] = $7;
       $11 = (($info) + 8|0);
       HEAP32[$11>>2] = $this;
       $12 = (($info) + 12|0);
       HEAP32[$12>>2] = -1;
       $13 = (($info) + 48|0);
       HEAP32[$13>>2] = 1;
       $14 = $6;
       $15 = HEAP32[$14>>2]|0;
       $16 = (($15) + 28|0);
       $17 = HEAP32[$16>>2]|0;
       $18 = HEAP32[$adjustedPtr>>2]|0;
       FUNCTION_TABLE_viiii[$17 & 15]($7,$info,$18,1);
       $19 = (($info) + 24|0);
       $20 = HEAP32[$19>>2]|0;
       $21 = ($20|0)==(1);
       if (!($21)) {
        $$1 = 0;
        STACKTOP = sp;return ($$1|0);
       }
       $22 = (($info) + 16|0);
       $23 = HEAP32[$22>>2]|0;
       HEAP32[$adjustedPtr>>2] = $23;
       $$1 = 1;
       STACKTOP = sp;return ($$1|0);
      }
      function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
       $this = $this|0;
       $info = $info|0;
       $adjustedPtr = $adjustedPtr|0;
       $path_below = $path_below|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($info) + 8|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = ($2|0)==($this|0);
       if (!($3)) {
        STACKTOP = sp;return;
       }
       $4 = (($info) + 16|0);
       $5 = HEAP32[$4>>2]|0;
       $6 = ($5|0)==(0|0);
       if ($6) {
        HEAP32[$4>>2] = $adjustedPtr;
        $7 = (($info) + 24|0);
        HEAP32[$7>>2] = $path_below;
        $8 = (($info) + 36|0);
        HEAP32[$8>>2] = 1;
        STACKTOP = sp;return;
       }
       $9 = ($5|0)==($adjustedPtr|0);
       if (!($9)) {
        $13 = (($info) + 36|0);
        $14 = HEAP32[$13>>2]|0;
        $15 = (($14) + 1)|0;
        HEAP32[$13>>2] = $15;
        $16 = (($info) + 24|0);
        HEAP32[$16>>2] = 2;
        $17 = (($info) + 54|0);
        HEAP8[$17] = 1;
        STACKTOP = sp;return;
       }
       $10 = (($info) + 24|0);
       $11 = HEAP32[$10>>2]|0;
       $12 = ($11|0)==(2);
       if (!($12)) {
        STACKTOP = sp;return;
       }
       HEAP32[$10>>2] = $path_below;
       STACKTOP = sp;return;
      }
      function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
       $this = $this|0;
       $info = $info|0;
       $adjustedPtr = $adjustedPtr|0;
       $path_below = $path_below|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0;
       var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = (($info) + 8|0);
       $3 = HEAP32[$2>>2]|0;
       $4 = ($3);
       $5 = ($1|0)==($4|0);
       if (!($5)) {
        $20 = (($this) + 8|0);
        $21 = HEAP32[$20>>2]|0;
        $22 = $21;
        $23 = HEAP32[$22>>2]|0;
        $24 = (($23) + 28|0);
        $25 = HEAP32[$24>>2]|0;
        FUNCTION_TABLE_viiii[$25 & 15]($21,$info,$adjustedPtr,$path_below);
        STACKTOP = sp;return;
       }
       $6 = (($info) + 16|0);
       $7 = HEAP32[$6>>2]|0;
       $8 = ($7|0)==(0|0);
       if ($8) {
        HEAP32[$6>>2] = $adjustedPtr;
        $9 = (($info) + 24|0);
        HEAP32[$9>>2] = $path_below;
        $10 = (($info) + 36|0);
        HEAP32[$10>>2] = 1;
        STACKTOP = sp;return;
       }
       $11 = ($7|0)==($adjustedPtr|0);
       if (!($11)) {
        $15 = (($info) + 36|0);
        $16 = HEAP32[$15>>2]|0;
        $17 = (($16) + 1)|0;
        HEAP32[$15>>2] = $17;
        $18 = (($info) + 24|0);
        HEAP32[$18>>2] = 2;
        $19 = (($info) + 54|0);
        HEAP8[$19] = 1;
        STACKTOP = sp;return;
       }
       $12 = (($info) + 24|0);
       $13 = HEAP32[$12>>2]|0;
       $14 = ($13|0)==(2);
       if (!($14)) {
        STACKTOP = sp;return;
       }
       HEAP32[$12>>2] = $path_below;
       STACKTOP = sp;return;
      }
      function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
       $this = $this|0;
       $info = $info|0;
       $adjustedPtr = $adjustedPtr|0;
       $path_below = $path_below|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
       var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
       var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
       var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0$i = 0, $offset_to_base$0$i1 = 0, $p$0 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = (($info) + 8|0);
       $3 = HEAP32[$2>>2]|0;
       $4 = ($3);
       $5 = ($1|0)==($4|0);
       if ($5) {
        $6 = (($info) + 16|0);
        $7 = HEAP32[$6>>2]|0;
        $8 = ($7|0)==(0|0);
        if ($8) {
         HEAP32[$6>>2] = $adjustedPtr;
         $9 = (($info) + 24|0);
         HEAP32[$9>>2] = $path_below;
         $10 = (($info) + 36|0);
         HEAP32[$10>>2] = 1;
         STACKTOP = sp;return;
        }
        $11 = ($7|0)==($adjustedPtr|0);
        if (!($11)) {
         $15 = (($info) + 36|0);
         $16 = HEAP32[$15>>2]|0;
         $17 = (($16) + 1)|0;
         HEAP32[$15>>2] = $17;
         $18 = (($info) + 24|0);
         HEAP32[$18>>2] = 2;
         $19 = (($info) + 54|0);
         HEAP8[$19] = 1;
         STACKTOP = sp;return;
        }
        $12 = (($info) + 24|0);
        $13 = HEAP32[$12>>2]|0;
        $14 = ($13|0)==(2);
        if (!($14)) {
         STACKTOP = sp;return;
        }
        HEAP32[$12>>2] = $path_below;
        STACKTOP = sp;return;
       }
       $20 = (($this) + 12|0);
       $21 = HEAP32[$20>>2]|0;
       $22 = ((($this) + ($21<<3)|0) + 16|0);
       $23 = (($this) + 20|0);
       $24 = HEAP32[$23>>2]|0;
       $25 = $24 >> 8;
       $26 = $24 & 1;
       $27 = ($26|0)==(0);
       if ($27) {
        $offset_to_base$0$i1 = $25;
       } else {
        $28 = $adjustedPtr;
        $29 = HEAP32[$28>>2]|0;
        $30 = (($29) + ($25)|0);
        $31 = $30;
        $32 = HEAP32[$31>>2]|0;
        $offset_to_base$0$i1 = $32;
       }
       $33 = (($this) + 16|0);
       $34 = HEAP32[$33>>2]|0;
       $35 = $34;
       $36 = HEAP32[$35>>2]|0;
       $37 = (($36) + 28|0);
       $38 = HEAP32[$37>>2]|0;
       $39 = (($adjustedPtr) + ($offset_to_base$0$i1)|0);
       $40 = $24 & 2;
       $41 = ($40|0)!=(0);
       $42 = $41 ? $path_below : 2;
       FUNCTION_TABLE_viiii[$38 & 15]($34,$info,$39,$42);
       $43 = ($21|0)>(1);
       if (!($43)) {
        STACKTOP = sp;return;
       }
       $44 = (($this) + 24|0);
       $45 = (($info) + 54|0);
       $46 = $adjustedPtr;
       $p$0 = $44;
       while(1) {
        $47 = (($p$0) + 4|0);
        $48 = HEAP32[$47>>2]|0;
        $49 = $48 >> 8;
        $50 = $48 & 1;
        $51 = ($50|0)==(0);
        if ($51) {
         $offset_to_base$0$i = $49;
        } else {
         $52 = HEAP32[$46>>2]|0;
         $53 = (($52) + ($49)|0);
         $54 = $53;
         $55 = HEAP32[$54>>2]|0;
         $offset_to_base$0$i = $55;
        }
        $56 = ($p$0);
        $57 = HEAP32[$56>>2]|0;
        $58 = $57;
        $59 = HEAP32[$58>>2]|0;
        $60 = (($59) + 28|0);
        $61 = HEAP32[$60>>2]|0;
        $62 = (($adjustedPtr) + ($offset_to_base$0$i)|0);
        $63 = $48 & 2;
        $64 = ($63|0)!=(0);
        $65 = $64 ? $path_below : 2;
        FUNCTION_TABLE_viiii[$61 & 15]($57,$info,$62,$65);
        $66 = HEAP8[$45]|0;
        $67 = ($66<<24>>24)==(0);
        if (!($67)) {
         label = 16;
         break;
        }
        $68 = (($p$0) + 8|0);
        $69 = ($68>>>0)<($22>>>0);
        if ($69) {
         $p$0 = $68;
        } else {
         label = 16;
         break;
        }
       }
       if ((label|0) == 16) {
        STACKTOP = sp;return;
       }
      }
      function ___dynamic_cast($static_ptr,$static_type,$dst_type,$src2dst_offset) {
       $static_ptr = $static_ptr|0;
       $static_type = $static_type|0;
       $dst_type = $dst_type|0;
       $src2dst_offset = $src2dst_offset|0;
       var $$ = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
       var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
       var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dst_ptr$0 = 0, $info = 0, dest = 0, label = 0, sp = 0;
       var stop = 0;
       sp = STACKTOP;
       STACKTOP = STACKTOP + 56|0;
       $info = sp;
       $1 = $static_ptr;
       $2 = HEAP32[$1>>2]|0;
       $3 = (($2) + -8|0);
       $4 = HEAP32[$3>>2]|0;
       $5 = $4;
       $6 = (($static_ptr) + ($5)|0);
       $7 = (($2) + -4|0);
       $8 = HEAP32[$7>>2]|0;
       $9 = $8;
       $10 = $info;
       $11 = ($info);
       HEAP32[$11>>2] = $dst_type;
       $12 = (($info) + 4|0);
       HEAP32[$12>>2] = $static_ptr;
       $13 = (($info) + 8|0);
       HEAP32[$13>>2] = $static_type;
       $14 = (($info) + 12|0);
       HEAP32[$14>>2] = $src2dst_offset;
       $15 = (($info) + 16|0);
       $16 = (($info) + 20|0);
       $17 = (($info) + 24|0);
       $18 = (($info) + 28|0);
       $19 = (($info) + 32|0);
       $20 = (($info) + 40|0);
       $21 = $8;
       $22 = ($dst_type);
       $23 = ($21|0)==($22|0);
       $24 = $15;
       dest=$24+0|0; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));;HEAP16[$24+36>>1]=0|0;HEAP8[$24+38|0]=0|0;
       if ($23) {
        $25 = (($info) + 48|0);
        HEAP32[$25>>2] = 1;
        $26 = $8;
        $27 = HEAP32[$26>>2]|0;
        $28 = (($27) + 20|0);
        $29 = HEAP32[$28>>2]|0;
        FUNCTION_TABLE_viiiiii[$29 & 3]($9,$info,$6,$6,1,0);
        $30 = HEAP32[$17>>2]|0;
        $31 = ($30|0)==(1);
        $$ = $31 ? $6 : 0;
        $dst_ptr$0 = $$;
        STACKTOP = sp;return ($dst_ptr$0|0);
       }
       $32 = (($info) + 36|0);
       $33 = $8;
       $34 = HEAP32[$33>>2]|0;
       $35 = (($34) + 24|0);
       $36 = HEAP32[$35>>2]|0;
       FUNCTION_TABLE_viiiii[$36 & 15]($9,$info,$6,1,0);
       $37 = HEAP32[$32>>2]|0;
       if ((($37|0) == 0)) {
        $38 = HEAP32[$20>>2]|0;
        $39 = ($38|0)==(1);
        if (!($39)) {
         $dst_ptr$0 = 0;
         STACKTOP = sp;return ($dst_ptr$0|0);
        }
        $40 = HEAP32[$18>>2]|0;
        $41 = ($40|0)==(1);
        if (!($41)) {
         $dst_ptr$0 = 0;
         STACKTOP = sp;return ($dst_ptr$0|0);
        }
        $42 = HEAP32[$19>>2]|0;
        $43 = ($42|0)==(1);
        $44 = HEAP32[$16>>2]|0;
        $$1 = $43 ? $44 : 0;
        $dst_ptr$0 = $$1;
        STACKTOP = sp;return ($dst_ptr$0|0);
       } else if ((($37|0) == 1)) {
        $45 = HEAP32[$17>>2]|0;
        $46 = ($45|0)==(1);
        do {
         if (!($46)) {
          $47 = HEAP32[$20>>2]|0;
          $48 = ($47|0)==(0);
          if (!($48)) {
           $dst_ptr$0 = 0;
           STACKTOP = sp;return ($dst_ptr$0|0);
          }
          $49 = HEAP32[$18>>2]|0;
          $50 = ($49|0)==(1);
          if (!($50)) {
           $dst_ptr$0 = 0;
           STACKTOP = sp;return ($dst_ptr$0|0);
          }
          $51 = HEAP32[$19>>2]|0;
          $52 = ($51|0)==(1);
          if ($52) {
           break;
          } else {
           $dst_ptr$0 = 0;
          }
          STACKTOP = sp;return ($dst_ptr$0|0);
         }
        } while(0);
        $53 = HEAP32[$15>>2]|0;
        $dst_ptr$0 = $53;
        STACKTOP = sp;return ($dst_ptr$0|0);
       } else {
        $dst_ptr$0 = 0;
        STACKTOP = sp;return ($dst_ptr$0|0);
       }
       return 0|0;
      }
      function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
       $this = $this|0;
       $info = $info|0;
       $current_ptr = $current_ptr|0;
       $path_below = $path_below|0;
       $use_strcmp = $use_strcmp|0;
       var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
       var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
       var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
       var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
       var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
       var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
       var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
       var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
       var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
       var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $does_dst_type_point_to_our_static_type$0$off0$lcssa = 0;
       var $does_dst_type_point_to_our_static_type$0$off019 = 0, $does_dst_type_point_to_our_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$0$off021 = 0, $is_dst_type_derived_from_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$2$off0 = 0, $is_dst_type_derived_from_static_type$2$off030 = 0, $is_dst_type_derived_from_static_type$2$off031 = 0, $offset_to_base$0$i = 0, $offset_to_base$0$i11 = 0, $offset_to_base$0$i13 = 0, $offset_to_base$0$i14 = 0, $offset_to_base$0$i9 = 0, $p$020 = 0, $p2$0 = 0, $p2$1 = 0, $p2$2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = (($info) + 8|0);
       $3 = HEAP32[$2>>2]|0;
       $4 = ($3);
       $5 = ($1|0)==($4|0);
       if ($5) {
        $6 = (($info) + 4|0);
        $7 = HEAP32[$6>>2]|0;
        $8 = ($7|0)==($current_ptr|0);
        if (!($8)) {
         STACKTOP = sp;return;
        }
        $9 = (($info) + 28|0);
        $10 = HEAP32[$9>>2]|0;
        $11 = ($10|0)==(1);
        if ($11) {
         STACKTOP = sp;return;
        }
        HEAP32[$9>>2] = $path_below;
        STACKTOP = sp;return;
       }
       $12 = ($info);
       $13 = HEAP32[$12>>2]|0;
       $14 = ($13);
       $15 = ($1|0)==($14|0);
       if ($15) {
        $16 = (($info) + 16|0);
        $17 = HEAP32[$16>>2]|0;
        $18 = ($17|0)==($current_ptr|0);
        do {
         if (!($18)) {
          $19 = (($info) + 20|0);
          $20 = HEAP32[$19>>2]|0;
          $21 = ($20|0)==($current_ptr|0);
          if ($21) {
           break;
          }
          $24 = (($info) + 32|0);
          HEAP32[$24>>2] = $path_below;
          $25 = (($info) + 44|0);
          $26 = HEAP32[$25>>2]|0;
          $27 = ($26|0)==(4);
          if ($27) {
           STACKTOP = sp;return;
          }
          $28 = (($this) + 12|0);
          $29 = HEAP32[$28>>2]|0;
          $30 = ((($this) + ($29<<3)|0) + 16|0);
          $31 = ($29|0)>(0);
          L19: do {
           if ($31) {
            $32 = (($this) + 16|0);
            $33 = (($info) + 52|0);
            $34 = (($info) + 53|0);
            $35 = (($info) + 54|0);
            $36 = (($this) + 8|0);
            $37 = (($info) + 24|0);
            $38 = $current_ptr;
            $does_dst_type_point_to_our_static_type$0$off019 = 0;$is_dst_type_derived_from_static_type$0$off021 = 0;$p$020 = $32;
            L21: while(1) {
             HEAP8[$33] = 0;
             HEAP8[$34] = 0;
             $39 = (($p$020) + 4|0);
             $40 = HEAP32[$39>>2]|0;
             $41 = $40 >> 8;
             $42 = $40 & 1;
             $43 = ($42|0)==(0);
             if ($43) {
              $offset_to_base$0$i13 = $41;
             } else {
              $44 = HEAP32[$38>>2]|0;
              $45 = (($44) + ($41)|0);
              $46 = $45;
              $47 = HEAP32[$46>>2]|0;
              $offset_to_base$0$i13 = $47;
             }
             $48 = ($p$020);
             $49 = HEAP32[$48>>2]|0;
             $50 = $49;
             $51 = HEAP32[$50>>2]|0;
             $52 = (($51) + 20|0);
             $53 = HEAP32[$52>>2]|0;
             $54 = (($current_ptr) + ($offset_to_base$0$i13)|0);
             $55 = $40 >>> 1;
             $56 = $55 & 1;
             $57 = (2 - ($56))|0;
             FUNCTION_TABLE_viiiiii[$53 & 3]($49,$info,$current_ptr,$54,$57,$use_strcmp);
             $58 = HEAP8[$35]|0;
             $59 = ($58<<24>>24)==(0);
             if (!($59)) {
              $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off019;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$0$off021;
              break;
             }
             $60 = HEAP8[$34]|0;
             $61 = ($60<<24>>24)==(0);
             do {
              if ($61) {
               $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off019;$is_dst_type_derived_from_static_type$1$off0 = $is_dst_type_derived_from_static_type$0$off021;
              } else {
               $62 = HEAP8[$33]|0;
               $63 = ($62<<24>>24)==(0);
               if ($63) {
                $69 = HEAP32[$36>>2]|0;
                $70 = $69 & 1;
                $71 = ($70|0)==(0);
                if ($71) {
                 $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off019;$is_dst_type_derived_from_static_type$2$off0 = 1;
                 break L21;
                } else {
                 $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off019;$is_dst_type_derived_from_static_type$1$off0 = 1;
                 break;
                }
               }
               $64 = HEAP32[$37>>2]|0;
               $65 = ($64|0)==(1);
               if ($65) {
                label = 27;
                break L19;
               }
               $66 = HEAP32[$36>>2]|0;
               $67 = $66 & 2;
               $68 = ($67|0)==(0);
               if ($68) {
                label = 27;
                break L19;
               } else {
                $does_dst_type_point_to_our_static_type$1$off0 = 1;$is_dst_type_derived_from_static_type$1$off0 = 1;
               }
              }
             } while(0);
             $72 = (($p$020) + 8|0);
             $73 = ($72>>>0)<($30>>>0);
             if ($73) {
              $does_dst_type_point_to_our_static_type$0$off019 = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type$0$off021 = $is_dst_type_derived_from_static_type$1$off0;$p$020 = $72;
             } else {
              $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$1$off0;
              break;
             }
            }
            if ($does_dst_type_point_to_our_static_type$0$off0$lcssa) {
             $is_dst_type_derived_from_static_type$2$off031 = $is_dst_type_derived_from_static_type$2$off0;
             label = 26;
            } else {
             $is_dst_type_derived_from_static_type$2$off030 = $is_dst_type_derived_from_static_type$2$off0;
             label = 23;
            }
           } else {
            $is_dst_type_derived_from_static_type$2$off030 = 0;
            label = 23;
           }
          } while(0);
          do {
           if ((label|0) == 23) {
            HEAP32[$19>>2] = $current_ptr;
            $74 = (($info) + 40|0);
            $75 = HEAP32[$74>>2]|0;
            $76 = (($75) + 1)|0;
            HEAP32[$74>>2] = $76;
            $77 = (($info) + 36|0);
            $78 = HEAP32[$77>>2]|0;
            $79 = ($78|0)==(1);
            if (!($79)) {
             $is_dst_type_derived_from_static_type$2$off031 = $is_dst_type_derived_from_static_type$2$off030;
             label = 26;
             break;
            }
            $80 = (($info) + 24|0);
            $81 = HEAP32[$80>>2]|0;
            $82 = ($81|0)==(2);
            if (!($82)) {
             $is_dst_type_derived_from_static_type$2$off031 = $is_dst_type_derived_from_static_type$2$off030;
             label = 26;
             break;
            }
            $83 = (($info) + 54|0);
            HEAP8[$83] = 1;
            if ($is_dst_type_derived_from_static_type$2$off030) {
             label = 27;
            } else {
             label = 28;
            }
           }
          } while(0);
          if ((label|0) == 26) {
           if ($is_dst_type_derived_from_static_type$2$off031) {
            label = 27;
           } else {
            label = 28;
           }
          }
          if ((label|0) == 27) {
           HEAP32[$25>>2] = 3;
           STACKTOP = sp;return;
          }
          else if ((label|0) == 28) {
           HEAP32[$25>>2] = 4;
           STACKTOP = sp;return;
          }
         }
        } while(0);
        $22 = ($path_below|0)==(1);
        if (!($22)) {
         STACKTOP = sp;return;
        }
        $23 = (($info) + 32|0);
        HEAP32[$23>>2] = 1;
        STACKTOP = sp;return;
       }
       $84 = (($this) + 12|0);
       $85 = HEAP32[$84>>2]|0;
       $86 = ((($this) + ($85<<3)|0) + 16|0);
       $87 = (($this) + 20|0);
       $88 = HEAP32[$87>>2]|0;
       $89 = $88 >> 8;
       $90 = $88 & 1;
       $91 = ($90|0)==(0);
       if ($91) {
        $offset_to_base$0$i14 = $89;
       } else {
        $92 = $current_ptr;
        $93 = HEAP32[$92>>2]|0;
        $94 = (($93) + ($89)|0);
        $95 = $94;
        $96 = HEAP32[$95>>2]|0;
        $offset_to_base$0$i14 = $96;
       }
       $97 = (($this) + 16|0);
       $98 = HEAP32[$97>>2]|0;
       $99 = $98;
       $100 = HEAP32[$99>>2]|0;
       $101 = (($100) + 24|0);
       $102 = HEAP32[$101>>2]|0;
       $103 = (($current_ptr) + ($offset_to_base$0$i14)|0);
       $104 = $88 & 2;
       $105 = ($104|0)!=(0);
       $106 = $105 ? $path_below : 2;
       FUNCTION_TABLE_viiiii[$102 & 15]($98,$info,$103,$106,$use_strcmp);
       $107 = (($this) + 24|0);
       $108 = ($85|0)>(1);
       if (!($108)) {
        STACKTOP = sp;return;
       }
       $109 = (($this) + 8|0);
       $110 = HEAP32[$109>>2]|0;
       $111 = $110 & 2;
       $112 = ($111|0)==(0);
       do {
        if ($112) {
         $113 = (($info) + 36|0);
         $114 = HEAP32[$113>>2]|0;
         $115 = ($114|0)==(1);
         if ($115) {
          break;
         }
         $141 = $110 & 1;
         $142 = ($141|0)==(0);
         if ($142) {
          $146 = (($info) + 54|0);
          $147 = $current_ptr;
          $p2$2 = $107;
          while(1) {
           $175 = HEAP8[$146]|0;
           $176 = ($175<<24>>24)==(0);
           if (!($176)) {
            label = 53;
            break;
           }
           $177 = HEAP32[$113>>2]|0;
           $178 = ($177|0)==(1);
           if ($178) {
            label = 53;
            break;
           }
           $179 = (($p2$2) + 4|0);
           $180 = HEAP32[$179>>2]|0;
           $181 = $180 >> 8;
           $182 = $180 & 1;
           $183 = ($182|0)==(0);
           if ($183) {
            $offset_to_base$0$i = $181;
           } else {
            $184 = HEAP32[$147>>2]|0;
            $185 = (($184) + ($181)|0);
            $186 = $185;
            $187 = HEAP32[$186>>2]|0;
            $offset_to_base$0$i = $187;
           }
           $188 = ($p2$2);
           $189 = HEAP32[$188>>2]|0;
           $190 = $189;
           $191 = HEAP32[$190>>2]|0;
           $192 = (($191) + 24|0);
           $193 = HEAP32[$192>>2]|0;
           $194 = (($current_ptr) + ($offset_to_base$0$i)|0);
           $195 = $180 & 2;
           $196 = ($195|0)!=(0);
           $197 = $196 ? $path_below : 2;
           FUNCTION_TABLE_viiiii[$193 & 15]($189,$info,$194,$197,$use_strcmp);
           $198 = (($p2$2) + 8|0);
           $199 = ($198>>>0)<($86>>>0);
           if ($199) {
            $p2$2 = $198;
           } else {
            label = 53;
            break;
           }
          }
          if ((label|0) == 53) {
           STACKTOP = sp;return;
          }
         }
         $143 = (($info) + 24|0);
         $144 = (($info) + 54|0);
         $145 = $current_ptr;
         $p2$1 = $107;
         while(1) {
          $148 = HEAP8[$144]|0;
          $149 = ($148<<24>>24)==(0);
          if (!($149)) {
           label = 53;
           break;
          }
          $150 = HEAP32[$113>>2]|0;
          $151 = ($150|0)==(1);
          if ($151) {
           $152 = HEAP32[$143>>2]|0;
           $153 = ($152|0)==(1);
           if ($153) {
            label = 53;
            break;
           }
          }
          $154 = (($p2$1) + 4|0);
          $155 = HEAP32[$154>>2]|0;
          $156 = $155 >> 8;
          $157 = $155 & 1;
          $158 = ($157|0)==(0);
          if ($158) {
           $offset_to_base$0$i9 = $156;
          } else {
           $159 = HEAP32[$145>>2]|0;
           $160 = (($159) + ($156)|0);
           $161 = $160;
           $162 = HEAP32[$161>>2]|0;
           $offset_to_base$0$i9 = $162;
          }
          $163 = ($p2$1);
          $164 = HEAP32[$163>>2]|0;
          $165 = $164;
          $166 = HEAP32[$165>>2]|0;
          $167 = (($166) + 24|0);
          $168 = HEAP32[$167>>2]|0;
          $169 = (($current_ptr) + ($offset_to_base$0$i9)|0);
          $170 = $155 & 2;
          $171 = ($170|0)!=(0);
          $172 = $171 ? $path_below : 2;
          FUNCTION_TABLE_viiiii[$168 & 15]($164,$info,$169,$172,$use_strcmp);
          $173 = (($p2$1) + 8|0);
          $174 = ($173>>>0)<($86>>>0);
          if ($174) {
           $p2$1 = $173;
          } else {
           label = 53;
           break;
          }
         }
         if ((label|0) == 53) {
          STACKTOP = sp;return;
         }
        }
       } while(0);
       $116 = (($info) + 54|0);
       $117 = $current_ptr;
       $p2$0 = $107;
       while(1) {
        $118 = HEAP8[$116]|0;
        $119 = ($118<<24>>24)==(0);
        if (!($119)) {
         label = 53;
         break;
        }
        $120 = (($p2$0) + 4|0);
        $121 = HEAP32[$120>>2]|0;
        $122 = $121 >> 8;
        $123 = $121 & 1;
        $124 = ($123|0)==(0);
        if ($124) {
         $offset_to_base$0$i11 = $122;
        } else {
         $125 = HEAP32[$117>>2]|0;
         $126 = (($125) + ($122)|0);
         $127 = $126;
         $128 = HEAP32[$127>>2]|0;
         $offset_to_base$0$i11 = $128;
        }
        $129 = ($p2$0);
        $130 = HEAP32[$129>>2]|0;
        $131 = $130;
        $132 = HEAP32[$131>>2]|0;
        $133 = (($132) + 24|0);
        $134 = HEAP32[$133>>2]|0;
        $135 = (($current_ptr) + ($offset_to_base$0$i11)|0);
        $136 = $121 & 2;
        $137 = ($136|0)!=(0);
        $138 = $137 ? $path_below : 2;
        FUNCTION_TABLE_viiiii[$134 & 15]($130,$info,$135,$138,$use_strcmp);
        $139 = (($p2$0) + 8|0);
        $140 = ($139>>>0)<($86>>>0);
        if ($140) {
         $p2$0 = $139;
        } else {
         label = 53;
         break;
        }
       }
       if ((label|0) == 53) {
        STACKTOP = sp;return;
       }
      }
      function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
       $this = $this|0;
       $info = $info|0;
       $current_ptr = $current_ptr|0;
       $path_below = $path_below|0;
       $use_strcmp = $use_strcmp|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
       var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
       var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $is_dst_type_derived_from_static_type$0$off01 = 0, $not$ = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = (($info) + 8|0);
       $3 = HEAP32[$2>>2]|0;
       $4 = ($3);
       $5 = ($1|0)==($4|0);
       if ($5) {
        $6 = (($info) + 4|0);
        $7 = HEAP32[$6>>2]|0;
        $8 = ($7|0)==($current_ptr|0);
        if (!($8)) {
         STACKTOP = sp;return;
        }
        $9 = (($info) + 28|0);
        $10 = HEAP32[$9>>2]|0;
        $11 = ($10|0)==(1);
        if ($11) {
         STACKTOP = sp;return;
        }
        HEAP32[$9>>2] = $path_below;
        STACKTOP = sp;return;
       }
       $12 = ($info);
       $13 = HEAP32[$12>>2]|0;
       $14 = ($13);
       $15 = ($1|0)==($14|0);
       if (!($15)) {
        $49 = (($this) + 8|0);
        $50 = HEAP32[$49>>2]|0;
        $51 = $50;
        $52 = HEAP32[$51>>2]|0;
        $53 = (($52) + 24|0);
        $54 = HEAP32[$53>>2]|0;
        FUNCTION_TABLE_viiiii[$54 & 15]($50,$info,$current_ptr,$path_below,$use_strcmp);
        STACKTOP = sp;return;
       }
       $16 = (($info) + 16|0);
       $17 = HEAP32[$16>>2]|0;
       $18 = ($17|0)==($current_ptr|0);
       do {
        if (!($18)) {
         $19 = (($info) + 20|0);
         $20 = HEAP32[$19>>2]|0;
         $21 = ($20|0)==($current_ptr|0);
         if ($21) {
          break;
         }
         $24 = (($info) + 32|0);
         HEAP32[$24>>2] = $path_below;
         $25 = (($info) + 44|0);
         $26 = HEAP32[$25>>2]|0;
         $27 = ($26|0)==(4);
         if ($27) {
          STACKTOP = sp;return;
         }
         $28 = (($info) + 52|0);
         HEAP8[$28] = 0;
         $29 = (($info) + 53|0);
         HEAP8[$29] = 0;
         $30 = (($this) + 8|0);
         $31 = HEAP32[$30>>2]|0;
         $32 = $31;
         $33 = HEAP32[$32>>2]|0;
         $34 = (($33) + 20|0);
         $35 = HEAP32[$34>>2]|0;
         FUNCTION_TABLE_viiiiii[$35 & 3]($31,$info,$current_ptr,$current_ptr,1,$use_strcmp);
         $36 = HEAP8[$29]|0;
         $37 = ($36<<24>>24)==(0);
         if ($37) {
          $is_dst_type_derived_from_static_type$0$off01 = 0;
          label = 13;
         } else {
          $38 = HEAP8[$28]|0;
          $not$ = ($38<<24>>24)==(0);
          if ($not$) {
           $is_dst_type_derived_from_static_type$0$off01 = 1;
           label = 13;
          }
         }
         L23: do {
          if ((label|0) == 13) {
           HEAP32[$19>>2] = $current_ptr;
           $39 = (($info) + 40|0);
           $40 = HEAP32[$39>>2]|0;
           $41 = (($40) + 1)|0;
           HEAP32[$39>>2] = $41;
           $42 = (($info) + 36|0);
           $43 = HEAP32[$42>>2]|0;
           $44 = ($43|0)==(1);
           do {
            if ($44) {
             $45 = (($info) + 24|0);
             $46 = HEAP32[$45>>2]|0;
             $47 = ($46|0)==(2);
             if (!($47)) {
              label = 16;
              break;
             }
             $48 = (($info) + 54|0);
             HEAP8[$48] = 1;
             if ($is_dst_type_derived_from_static_type$0$off01) {
              break L23;
             }
            } else {
             label = 16;
            }
           } while(0);
           if ((label|0) == 16) {
            if ($is_dst_type_derived_from_static_type$0$off01) {
             break;
            }
           }
           HEAP32[$25>>2] = 4;
           STACKTOP = sp;return;
          }
         } while(0);
         HEAP32[$25>>2] = 3;
         STACKTOP = sp;return;
        }
       } while(0);
       $22 = ($path_below|0)==(1);
       if (!($22)) {
        STACKTOP = sp;return;
       }
       $23 = (($info) + 32|0);
       HEAP32[$23>>2] = 1;
       STACKTOP = sp;return;
      }
      function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
       $this = $this|0;
       $info = $info|0;
       $current_ptr = $current_ptr|0;
       $path_below = $path_below|0;
       $use_strcmp = $use_strcmp|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
       var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($info) + 8|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = ($2|0)==($this|0);
       if ($3) {
        $4 = (($info) + 4|0);
        $5 = HEAP32[$4>>2]|0;
        $6 = ($5|0)==($current_ptr|0);
        if (!($6)) {
         STACKTOP = sp;return;
        }
        $7 = (($info) + 28|0);
        $8 = HEAP32[$7>>2]|0;
        $9 = ($8|0)==(1);
        if ($9) {
         STACKTOP = sp;return;
        }
        HEAP32[$7>>2] = $path_below;
        STACKTOP = sp;return;
       }
       $10 = ($info);
       $11 = HEAP32[$10>>2]|0;
       $12 = ($11|0)==($this|0);
       if (!($12)) {
        STACKTOP = sp;return;
       }
       $13 = (($info) + 16|0);
       $14 = HEAP32[$13>>2]|0;
       $15 = ($14|0)==($current_ptr|0);
       do {
        if (!($15)) {
         $16 = (($info) + 20|0);
         $17 = HEAP32[$16>>2]|0;
         $18 = ($17|0)==($current_ptr|0);
         if ($18) {
          break;
         }
         $21 = (($info) + 32|0);
         HEAP32[$21>>2] = $path_below;
         HEAP32[$16>>2] = $current_ptr;
         $22 = (($info) + 40|0);
         $23 = HEAP32[$22>>2]|0;
         $24 = (($23) + 1)|0;
         HEAP32[$22>>2] = $24;
         $25 = (($info) + 36|0);
         $26 = HEAP32[$25>>2]|0;
         $27 = ($26|0)==(1);
         do {
          if ($27) {
           $28 = (($info) + 24|0);
           $29 = HEAP32[$28>>2]|0;
           $30 = ($29|0)==(2);
           if (!($30)) {
            break;
           }
           $31 = (($info) + 54|0);
           HEAP8[$31] = 1;
          }
         } while(0);
         $32 = (($info) + 44|0);
         HEAP32[$32>>2] = 4;
         STACKTOP = sp;return;
        }
       } while(0);
       $19 = ($path_below|0)==(1);
       if (!($19)) {
        STACKTOP = sp;return;
       }
       $20 = (($info) + 32|0);
       HEAP32[$20>>2] = 1;
       STACKTOP = sp;return;
      }
      function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
       $this = $this|0;
       $info = $info|0;
       $dst_ptr = $dst_ptr|0;
       $current_ptr = $current_ptr|0;
       $path_below = $path_below|0;
       $use_strcmp = $use_strcmp|0;
       var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
       var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
       var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
       var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
       var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
       var $98 = 0, $99 = 0, $offset_to_base$0$i = 0, $offset_to_base$0$i1 = 0, $or$cond$i = 0, $or$cond1$i = 0, $p$0 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = (($info) + 8|0);
       $3 = HEAP32[$2>>2]|0;
       $4 = ($3);
       $5 = ($1|0)==($4|0);
       if (!($5)) {
        $35 = (($info) + 52|0);
        $36 = HEAP8[$35]|0;
        $37 = (($info) + 53|0);
        $38 = HEAP8[$37]|0;
        $39 = (($this) + 12|0);
        $40 = HEAP32[$39>>2]|0;
        $41 = ((($this) + ($40<<3)|0) + 16|0);
        HEAP8[$35] = 0;
        HEAP8[$37] = 0;
        $42 = (($this) + 20|0);
        $43 = HEAP32[$42>>2]|0;
        $44 = $43 >> 8;
        $45 = $43 & 1;
        $46 = ($45|0)==(0);
        if ($46) {
         $offset_to_base$0$i1 = $44;
        } else {
         $47 = $current_ptr;
         $48 = HEAP32[$47>>2]|0;
         $49 = (($48) + ($44)|0);
         $50 = $49;
         $51 = HEAP32[$50>>2]|0;
         $offset_to_base$0$i1 = $51;
        }
        $52 = (($this) + 16|0);
        $53 = HEAP32[$52>>2]|0;
        $54 = $53;
        $55 = HEAP32[$54>>2]|0;
        $56 = (($55) + 20|0);
        $57 = HEAP32[$56>>2]|0;
        $58 = (($current_ptr) + ($offset_to_base$0$i1)|0);
        $59 = $43 & 2;
        $60 = ($59|0)!=(0);
        $61 = $60 ? $path_below : 2;
        FUNCTION_TABLE_viiiiii[$57 & 3]($53,$info,$dst_ptr,$58,$61,$use_strcmp);
        $62 = ($40|0)>(1);
        L6: do {
         if ($62) {
          $63 = (($this) + 24|0);
          $64 = (($info) + 24|0);
          $65 = (($this) + 8|0);
          $66 = (($info) + 54|0);
          $67 = $current_ptr;
          $p$0 = $63;
          while(1) {
           $68 = HEAP8[$66]|0;
           $69 = ($68<<24>>24)==(0);
           if (!($69)) {
            break L6;
           }
           $70 = HEAP8[$35]|0;
           $71 = ($70<<24>>24)==(0);
           do {
            if ($71) {
             $77 = HEAP8[$37]|0;
             $78 = ($77<<24>>24)==(0);
             if ($78) {
              break;
             }
             $79 = HEAP32[$65>>2]|0;
             $80 = $79 & 1;
             $81 = ($80|0)==(0);
             if ($81) {
              break L6;
             }
            } else {
             $72 = HEAP32[$64>>2]|0;
             $73 = ($72|0)==(1);
             if ($73) {
              break L6;
             }
             $74 = HEAP32[$65>>2]|0;
             $75 = $74 & 2;
             $76 = ($75|0)==(0);
             if ($76) {
              break L6;
             }
            }
           } while(0);
           HEAP8[$35] = 0;
           HEAP8[$37] = 0;
           $82 = (($p$0) + 4|0);
           $83 = HEAP32[$82>>2]|0;
           $84 = $83 >> 8;
           $85 = $83 & 1;
           $86 = ($85|0)==(0);
           if ($86) {
            $offset_to_base$0$i = $84;
           } else {
            $87 = HEAP32[$67>>2]|0;
            $88 = (($87) + ($84)|0);
            $89 = $88;
            $90 = HEAP32[$89>>2]|0;
            $offset_to_base$0$i = $90;
           }
           $91 = ($p$0);
           $92 = HEAP32[$91>>2]|0;
           $93 = $92;
           $94 = HEAP32[$93>>2]|0;
           $95 = (($94) + 20|0);
           $96 = HEAP32[$95>>2]|0;
           $97 = (($current_ptr) + ($offset_to_base$0$i)|0);
           $98 = $83 & 2;
           $99 = ($98|0)!=(0);
           $100 = $99 ? $path_below : 2;
           FUNCTION_TABLE_viiiiii[$96 & 3]($92,$info,$dst_ptr,$97,$100,$use_strcmp);
           $101 = (($p$0) + 8|0);
           $102 = ($101>>>0)<($41>>>0);
           if ($102) {
            $p$0 = $101;
           } else {
            break;
           }
          }
         }
        } while(0);
        HEAP8[$35] = $36;
        HEAP8[$37] = $38;
        STACKTOP = sp;return;
       }
       $6 = (($info) + 53|0);
       HEAP8[$6] = 1;
       $7 = (($info) + 4|0);
       $8 = HEAP32[$7>>2]|0;
       $9 = ($8|0)==($current_ptr|0);
       if (!($9)) {
        STACKTOP = sp;return;
       }
       $10 = (($info) + 52|0);
       HEAP8[$10] = 1;
       $11 = (($info) + 16|0);
       $12 = HEAP32[$11>>2]|0;
       $13 = ($12|0)==(0|0);
       if ($13) {
        HEAP32[$11>>2] = $dst_ptr;
        $14 = (($info) + 24|0);
        HEAP32[$14>>2] = $path_below;
        $15 = (($info) + 36|0);
        HEAP32[$15>>2] = 1;
        $16 = (($info) + 48|0);
        $17 = HEAP32[$16>>2]|0;
        $18 = ($17|0)==(1);
        $19 = ($path_below|0)==(1);
        $or$cond$i = $18 & $19;
        if (!($or$cond$i)) {
         STACKTOP = sp;return;
        }
        $20 = (($info) + 54|0);
        HEAP8[$20] = 1;
        STACKTOP = sp;return;
       }
       $21 = ($12|0)==($dst_ptr|0);
       if (!($21)) {
        $31 = (($info) + 36|0);
        $32 = HEAP32[$31>>2]|0;
        $33 = (($32) + 1)|0;
        HEAP32[$31>>2] = $33;
        $34 = (($info) + 54|0);
        HEAP8[$34] = 1;
        STACKTOP = sp;return;
       }
       $22 = (($info) + 24|0);
       $23 = HEAP32[$22>>2]|0;
       $24 = ($23|0)==(2);
       if ($24) {
        HEAP32[$22>>2] = $path_below;
        $25 = $path_below;
       } else {
        $25 = $23;
       }
       $26 = (($info) + 48|0);
       $27 = HEAP32[$26>>2]|0;
       $28 = ($27|0)==(1);
       $29 = ($25|0)==(1);
       $or$cond1$i = $28 & $29;
       if (!($or$cond1$i)) {
        STACKTOP = sp;return;
       }
       $30 = (($info) + 54|0);
       HEAP8[$30] = 1;
       STACKTOP = sp;return;
      }
      function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
       $this = $this|0;
       $info = $info|0;
       $dst_ptr = $dst_ptr|0;
       $current_ptr = $current_ptr|0;
       $path_below = $path_below|0;
       $use_strcmp = $use_strcmp|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
       var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
       var $or$cond$i = 0, $or$cond1$i = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       $2 = (($info) + 8|0);
       $3 = HEAP32[$2>>2]|0;
       $4 = ($3);
       $5 = ($1|0)==($4|0);
       if (!($5)) {
        $35 = (($this) + 8|0);
        $36 = HEAP32[$35>>2]|0;
        $37 = $36;
        $38 = HEAP32[$37>>2]|0;
        $39 = (($38) + 20|0);
        $40 = HEAP32[$39>>2]|0;
        FUNCTION_TABLE_viiiiii[$40 & 3]($36,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
        STACKTOP = sp;return;
       }
       $6 = (($info) + 53|0);
       HEAP8[$6] = 1;
       $7 = (($info) + 4|0);
       $8 = HEAP32[$7>>2]|0;
       $9 = ($8|0)==($current_ptr|0);
       if (!($9)) {
        STACKTOP = sp;return;
       }
       $10 = (($info) + 52|0);
       HEAP8[$10] = 1;
       $11 = (($info) + 16|0);
       $12 = HEAP32[$11>>2]|0;
       $13 = ($12|0)==(0|0);
       if ($13) {
        HEAP32[$11>>2] = $dst_ptr;
        $14 = (($info) + 24|0);
        HEAP32[$14>>2] = $path_below;
        $15 = (($info) + 36|0);
        HEAP32[$15>>2] = 1;
        $16 = (($info) + 48|0);
        $17 = HEAP32[$16>>2]|0;
        $18 = ($17|0)==(1);
        $19 = ($path_below|0)==(1);
        $or$cond$i = $18 & $19;
        if (!($or$cond$i)) {
         STACKTOP = sp;return;
        }
        $20 = (($info) + 54|0);
        HEAP8[$20] = 1;
        STACKTOP = sp;return;
       }
       $21 = ($12|0)==($dst_ptr|0);
       if (!($21)) {
        $31 = (($info) + 36|0);
        $32 = HEAP32[$31>>2]|0;
        $33 = (($32) + 1)|0;
        HEAP32[$31>>2] = $33;
        $34 = (($info) + 54|0);
        HEAP8[$34] = 1;
        STACKTOP = sp;return;
       }
       $22 = (($info) + 24|0);
       $23 = HEAP32[$22>>2]|0;
       $24 = ($23|0)==(2);
       if ($24) {
        HEAP32[$22>>2] = $path_below;
        $25 = $path_below;
       } else {
        $25 = $23;
       }
       $26 = (($info) + 48|0);
       $27 = HEAP32[$26>>2]|0;
       $28 = ($27|0)==(1);
       $29 = ($25|0)==(1);
       $or$cond1$i = $28 & $29;
       if (!($or$cond1$i)) {
        STACKTOP = sp;return;
       }
       $30 = (($info) + 54|0);
       HEAP8[$30] = 1;
       STACKTOP = sp;return;
      }
      function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
       $this = $this|0;
       $info = $info|0;
       $dst_ptr = $dst_ptr|0;
       $current_ptr = $current_ptr|0;
       $path_below = $path_below|0;
       $use_strcmp = $use_strcmp|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
       var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i = 0, $or$cond1$i = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($info) + 8|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = ($2|0)==($this|0);
       if (!($3)) {
        STACKTOP = sp;return;
       }
       $4 = (($info) + 53|0);
       HEAP8[$4] = 1;
       $5 = (($info) + 4|0);
       $6 = HEAP32[$5>>2]|0;
       $7 = ($6|0)==($current_ptr|0);
       if (!($7)) {
        STACKTOP = sp;return;
       }
       $8 = (($info) + 52|0);
       HEAP8[$8] = 1;
       $9 = (($info) + 16|0);
       $10 = HEAP32[$9>>2]|0;
       $11 = ($10|0)==(0|0);
       if ($11) {
        HEAP32[$9>>2] = $dst_ptr;
        $12 = (($info) + 24|0);
        HEAP32[$12>>2] = $path_below;
        $13 = (($info) + 36|0);
        HEAP32[$13>>2] = 1;
        $14 = (($info) + 48|0);
        $15 = HEAP32[$14>>2]|0;
        $16 = ($15|0)==(1);
        $17 = ($path_below|0)==(1);
        $or$cond$i = $16 & $17;
        if (!($or$cond$i)) {
         STACKTOP = sp;return;
        }
        $18 = (($info) + 54|0);
        HEAP8[$18] = 1;
        STACKTOP = sp;return;
       }
       $19 = ($10|0)==($dst_ptr|0);
       if (!($19)) {
        $29 = (($info) + 36|0);
        $30 = HEAP32[$29>>2]|0;
        $31 = (($30) + 1)|0;
        HEAP32[$29>>2] = $31;
        $32 = (($info) + 54|0);
        HEAP8[$32] = 1;
        STACKTOP = sp;return;
       }
       $20 = (($info) + 24|0);
       $21 = HEAP32[$20>>2]|0;
       $22 = ($21|0)==(2);
       if ($22) {
        HEAP32[$20>>2] = $path_below;
        $23 = $path_below;
       } else {
        $23 = $21;
       }
       $24 = (($info) + 48|0);
       $25 = HEAP32[$24>>2]|0;
       $26 = ($25|0)==(1);
       $27 = ($23|0)==(1);
       $or$cond1$i = $26 & $27;
       if (!($or$cond1$i)) {
        STACKTOP = sp;return;
       }
       $28 = (($info) + 54|0);
       HEAP8[$28] = 1;
       STACKTOP = sp;return;
      }
      function _malloc($bytes) {
       $bytes = $bytes|0;
       var $$$i = 0, $$3$i = 0, $$4$i = 0, $$c$i$i = 0, $$c6$i$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i25 = 0, $$pre$i25$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i26$iZ2D = 0, $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre57$i$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0;
       var $$sum$i$i = 0, $$sum$i$i$i = 0, $$sum$i14$i = 0, $$sum$i15$i = 0, $$sum$i18$i = 0, $$sum$i21$i = 0, $$sum$i2334 = 0, $$sum$i32 = 0, $$sum$i35 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i16$i = 0, $$sum1$i22$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum10$pre$i$i = 0, $$sum107$i = 0;
       var $$sum108$i = 0, $$sum109$i = 0, $$sum11$i = 0, $$sum11$i$i = 0, $$sum11$i24$i = 0, $$sum110$i = 0, $$sum111$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum116$i = 0, $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum120$i = 0, $$sum13$i = 0;
       var $$sum13$i$i = 0, $$sum14$i$i = 0, $$sum14$pre$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0, $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i17$i = 0, $$sum2$i19$i = 0, $$sum2$i23$i = 0, $$sum2$pre$i = 0, $$sum20$i$i = 0;
       var $$sum21$i$i = 0, $$sum22$i$i = 0, $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum26$pre$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i$i = 0, $$sum3$i27 = 0, $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0;
       var $$sum4$i28 = 0, $$sum40$i$i = 0, $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0, $$sum8$pre = 0, $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $1 = 0, $10 = 0, $100 = 0;
       var $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0;
       var $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0;
       var $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0;
       var $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0;
       var $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0;
       var $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0;
       var $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1114$phi = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0;
       var $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0;
       var $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0;
       var $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0;
       var $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0;
       var $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0;
       var $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0;
       var $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
       var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
       var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
       var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
       var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
       var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
       var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
       var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
       var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
       var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
       var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
       var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
       var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
       var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
       var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
       var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
       var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
       var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
       var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
       var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
       var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
       var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
       var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
       var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
       var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
       var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
       var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
       var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
       var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
       var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
       var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
       var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
       var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
       var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
       var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0;
       var $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0;
       var $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0;
       var $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0;
       var $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0;
       var $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0;
       var $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0;
       var $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0;
       var $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0;
       var $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0;
       var $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0;
       var $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0;
       var $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0;
       var $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0;
       var $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0;
       var $I1$0$c$i$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$025$i = 0, $K2$014$i$i = 0, $K8$052$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i$i$phi = 0, $R$0$i$phi = 0, $R$0$i18 = 0, $R$0$i18$phi = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i$i$phi = 0, $RP$0$i$phi = 0;
       var $RP$0$i17 = 0, $RP$0$i17$phi = 0, $T$0$c$i$i = 0, $T$0$c7$i$i = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i28$i = 0, $T$013$i$i = 0, $T$013$i$i$phi = 0, $T$024$i = 0, $T$024$i$phi = 0, $T$051$i$i = 0, $T$051$i$i$phi = 0, $br$0$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $i$02$i$i$phi = 0;
       var $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0, $notlhs$i = 0, $notrhs$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i29 = 0, $or$cond1$i = 0, $or$cond10$i = 0, $or$cond19$i = 0, $or$cond2$i = 0, $or$cond49$i = 0, $or$cond5$i = 0, $or$cond6$i = 0, $or$cond8$not$i = 0, $or$cond9$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i15 = 0;
       var $rsize$1$i = 0, $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$329$i = 0, $rsize$329$i$phi = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$075$i = 0, $sp$168$i = 0, $ssize$0$$i = 0, $ssize$0$i = 0, $ssize$1$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0;
       var $t$2$v$3$i = 0, $t$228$i = 0, $t$228$i$phi = 0, $tbase$0$i = 0, $tbase$247$i = 0, $tsize$0$i = 0, $tsize$0323841$i = 0, $tsize$1$i = 0, $tsize$246$i = 0, $v$0$i = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$330$i = 0, $v$330$i$phi = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($bytes>>>0)<(245);
       do {
        if ($1) {
         $2 = ($bytes>>>0)<(11);
         if ($2) {
          $5 = 16;
         } else {
          $3 = (($bytes) + 11)|0;
          $4 = $3 & -8;
          $5 = $4;
         }
         $6 = $5 >>> 3;
         $7 = HEAP32[((54496))>>2]|0;
         $8 = $7 >>> $6;
         $9 = $8 & 3;
         $10 = ($9|0)==(0);
         if (!($10)) {
          $11 = $8 & 1;
          $12 = $11 ^ 1;
          $13 = (($12) + ($6))|0;
          $14 = $13 << 1;
          $15 = (((54496) + ($14<<2)|0) + 40|0);
          $16 = $15;
          $$sum10 = (($14) + 2)|0;
          $17 = (((54496) + ($$sum10<<2)|0) + 40|0);
          $18 = HEAP32[$17>>2]|0;
          $19 = (($18) + 8|0);
          $20 = HEAP32[$19>>2]|0;
          $21 = ($16|0)==($20|0);
          do {
           if ($21) {
            $22 = 1 << $13;
            $23 = $22 ^ -1;
            $24 = $7 & $23;
            HEAP32[((54496))>>2] = $24;
           } else {
            $25 = $20;
            $26 = HEAP32[(((54496) + 16|0))>>2]|0;
            $27 = ($25>>>0)<($26>>>0);
            if ($27) {
             _abort();
             // unreachable;
            }
            $28 = (($20) + 12|0);
            $29 = HEAP32[$28>>2]|0;
            $30 = ($29|0)==($18|0);
            if ($30) {
             HEAP32[$28>>2] = $16;
             HEAP32[$17>>2] = $20;
             break;
            } else {
             _abort();
             // unreachable;
            }
           }
          } while(0);
          $31 = $13 << 3;
          $32 = $31 | 3;
          $33 = (($18) + 4|0);
          HEAP32[$33>>2] = $32;
          $34 = $18;
          $$sum1112 = $31 | 4;
          $35 = (($34) + ($$sum1112)|0);
          $36 = $35;
          $37 = HEAP32[$36>>2]|0;
          $38 = $37 | 1;
          HEAP32[$36>>2] = $38;
          $39 = $19;
          $mem$0 = $39;
          STACKTOP = sp;return ($mem$0|0);
         }
         $40 = HEAP32[(((54496) + 8|0))>>2]|0;
         $41 = ($5>>>0)>($40>>>0);
         if (!($41)) {
          $nb$0 = $5;
          break;
         }
         $42 = ($8|0)==(0);
         if (!($42)) {
          $43 = $8 << $6;
          $44 = 2 << $6;
          $45 = (0 - ($44))|0;
          $46 = $44 | $45;
          $47 = $43 & $46;
          $48 = (0 - ($47))|0;
          $49 = $47 & $48;
          $50 = (($49) + -1)|0;
          $51 = $50 >>> 12;
          $52 = $51 & 16;
          $53 = $50 >>> $52;
          $54 = $53 >>> 5;
          $55 = $54 & 8;
          $56 = $55 | $52;
          $57 = $53 >>> $55;
          $58 = $57 >>> 2;
          $59 = $58 & 4;
          $60 = $56 | $59;
          $61 = $57 >>> $59;
          $62 = $61 >>> 1;
          $63 = $62 & 2;
          $64 = $60 | $63;
          $65 = $61 >>> $63;
          $66 = $65 >>> 1;
          $67 = $66 & 1;
          $68 = $64 | $67;
          $69 = $65 >>> $67;
          $70 = (($68) + ($69))|0;
          $71 = $70 << 1;
          $72 = (((54496) + ($71<<2)|0) + 40|0);
          $73 = $72;
          $$sum4 = (($71) + 2)|0;
          $74 = (((54496) + ($$sum4<<2)|0) + 40|0);
          $75 = HEAP32[$74>>2]|0;
          $76 = (($75) + 8|0);
          $77 = HEAP32[$76>>2]|0;
          $78 = ($73|0)==($77|0);
          do {
           if ($78) {
            $79 = 1 << $70;
            $80 = $79 ^ -1;
            $81 = $7 & $80;
            HEAP32[((54496))>>2] = $81;
           } else {
            $82 = $77;
            $83 = HEAP32[(((54496) + 16|0))>>2]|0;
            $84 = ($82>>>0)<($83>>>0);
            if ($84) {
             _abort();
             // unreachable;
            }
            $85 = (($77) + 12|0);
            $86 = HEAP32[$85>>2]|0;
            $87 = ($86|0)==($75|0);
            if ($87) {
             HEAP32[$85>>2] = $73;
             HEAP32[$74>>2] = $77;
             break;
            } else {
             _abort();
             // unreachable;
            }
           }
          } while(0);
          $88 = $70 << 3;
          $89 = (($88) - ($5))|0;
          $90 = $5 | 3;
          $91 = (($75) + 4|0);
          HEAP32[$91>>2] = $90;
          $92 = $75;
          $93 = (($92) + ($5)|0);
          $94 = $93;
          $95 = $89 | 1;
          $$sum56 = $5 | 4;
          $96 = (($92) + ($$sum56)|0);
          $97 = $96;
          HEAP32[$97>>2] = $95;
          $98 = (($92) + ($88)|0);
          $99 = $98;
          HEAP32[$99>>2] = $89;
          $100 = HEAP32[(((54496) + 8|0))>>2]|0;
          $101 = ($100|0)==(0);
          if (!($101)) {
           $102 = HEAP32[(((54496) + 20|0))>>2]|0;
           $103 = $100 >>> 3;
           $104 = $103 << 1;
           $105 = (((54496) + ($104<<2)|0) + 40|0);
           $106 = $105;
           $107 = HEAP32[((54496))>>2]|0;
           $108 = 1 << $103;
           $109 = $107 & $108;
           $110 = ($109|0)==(0);
           do {
            if ($110) {
             $111 = $107 | $108;
             HEAP32[((54496))>>2] = $111;
             $$sum8$pre = (($104) + 2)|0;
             $$pre = (((54496) + ($$sum8$pre<<2)|0) + 40|0);
             $$pre$phiZ2D = $$pre;$F4$0 = $106;
            } else {
             $$sum9 = (($104) + 2)|0;
             $112 = (((54496) + ($$sum9<<2)|0) + 40|0);
             $113 = HEAP32[$112>>2]|0;
             $114 = $113;
             $115 = HEAP32[(((54496) + 16|0))>>2]|0;
             $116 = ($114>>>0)<($115>>>0);
             if (!($116)) {
              $$pre$phiZ2D = $112;$F4$0 = $113;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           HEAP32[$$pre$phiZ2D>>2] = $102;
           $117 = (($F4$0) + 12|0);
           HEAP32[$117>>2] = $102;
           $118 = (($102) + 8|0);
           HEAP32[$118>>2] = $F4$0;
           $119 = (($102) + 12|0);
           HEAP32[$119>>2] = $106;
          }
          HEAP32[(((54496) + 8|0))>>2] = $89;
          HEAP32[(((54496) + 20|0))>>2] = $94;
          $120 = $76;
          $mem$0 = $120;
          STACKTOP = sp;return ($mem$0|0);
         }
         $121 = HEAP32[(((54496) + 4|0))>>2]|0;
         $122 = ($121|0)==(0);
         if ($122) {
          $nb$0 = $5;
          break;
         }
         $123 = (0 - ($121))|0;
         $124 = $121 & $123;
         $125 = (($124) + -1)|0;
         $126 = $125 >>> 12;
         $127 = $126 & 16;
         $128 = $125 >>> $127;
         $129 = $128 >>> 5;
         $130 = $129 & 8;
         $131 = $130 | $127;
         $132 = $128 >>> $130;
         $133 = $132 >>> 2;
         $134 = $133 & 4;
         $135 = $131 | $134;
         $136 = $132 >>> $134;
         $137 = $136 >>> 1;
         $138 = $137 & 2;
         $139 = $135 | $138;
         $140 = $136 >>> $138;
         $141 = $140 >>> 1;
         $142 = $141 & 1;
         $143 = $139 | $142;
         $144 = $140 >>> $142;
         $145 = (($143) + ($144))|0;
         $146 = (((54496) + ($145<<2)|0) + 304|0);
         $147 = HEAP32[$146>>2]|0;
         $148 = (($147) + 4|0);
         $149 = HEAP32[$148>>2]|0;
         $150 = $149 & -8;
         $151 = (($150) - ($5))|0;
         $rsize$0$i = $151;$t$0$i = $147;$v$0$i = $147;
         while(1) {
          $152 = (($t$0$i) + 16|0);
          $153 = HEAP32[$152>>2]|0;
          $154 = ($153|0)==(0|0);
          if ($154) {
           $155 = (($t$0$i) + 20|0);
           $156 = HEAP32[$155>>2]|0;
           $157 = ($156|0)==(0|0);
           if ($157) {
            break;
           } else {
            $158 = $156;
           }
          } else {
           $158 = $153;
          }
          $159 = (($158) + 4|0);
          $160 = HEAP32[$159>>2]|0;
          $161 = $160 & -8;
          $162 = (($161) - ($5))|0;
          $163 = ($162>>>0)<($rsize$0$i>>>0);
          $$rsize$0$i = $163 ? $162 : $rsize$0$i;
          $$v$0$i = $163 ? $158 : $v$0$i;
          $rsize$0$i = $$rsize$0$i;$t$0$i = $158;$v$0$i = $$v$0$i;
         }
         $164 = $v$0$i;
         $165 = HEAP32[(((54496) + 16|0))>>2]|0;
         $166 = ($164>>>0)<($165>>>0);
         if ($166) {
          _abort();
          // unreachable;
         }
         $167 = (($164) + ($5)|0);
         $168 = $167;
         $169 = ($164>>>0)<($167>>>0);
         if (!($169)) {
          _abort();
          // unreachable;
         }
         $170 = (($v$0$i) + 24|0);
         $171 = HEAP32[$170>>2]|0;
         $172 = (($v$0$i) + 12|0);
         $173 = HEAP32[$172>>2]|0;
         $174 = ($173|0)==($v$0$i|0);
         do {
          if ($174) {
           $185 = (($v$0$i) + 20|0);
           $186 = HEAP32[$185>>2]|0;
           $187 = ($186|0)==(0|0);
           if ($187) {
            $188 = (($v$0$i) + 16|0);
            $189 = HEAP32[$188>>2]|0;
            $190 = ($189|0)==(0|0);
            if ($190) {
             $R$1$i = 0;
             break;
            } else {
             $R$0$i = $189;$RP$0$i = $188;
            }
           } else {
            $R$0$i = $186;$RP$0$i = $185;
           }
           while(1) {
            $191 = (($R$0$i) + 20|0);
            $192 = HEAP32[$191>>2]|0;
            $193 = ($192|0)==(0|0);
            if (!($193)) {
             $RP$0$i$phi = $191;$R$0$i$phi = $192;$RP$0$i = $RP$0$i$phi;$R$0$i = $R$0$i$phi;
             continue;
            }
            $194 = (($R$0$i) + 16|0);
            $195 = HEAP32[$194>>2]|0;
            $196 = ($195|0)==(0|0);
            if ($196) {
             break;
            } else {
             $R$0$i = $195;$RP$0$i = $194;
            }
           }
           $197 = $RP$0$i;
           $198 = ($197>>>0)<($165>>>0);
           if ($198) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$RP$0$i>>2] = 0;
            $R$1$i = $R$0$i;
            break;
           }
          } else {
           $175 = (($v$0$i) + 8|0);
           $176 = HEAP32[$175>>2]|0;
           $177 = $176;
           $178 = ($177>>>0)<($165>>>0);
           if ($178) {
            _abort();
            // unreachable;
           }
           $179 = (($176) + 12|0);
           $180 = HEAP32[$179>>2]|0;
           $181 = ($180|0)==($v$0$i|0);
           if (!($181)) {
            _abort();
            // unreachable;
           }
           $182 = (($173) + 8|0);
           $183 = HEAP32[$182>>2]|0;
           $184 = ($183|0)==($v$0$i|0);
           if ($184) {
            HEAP32[$179>>2] = $173;
            HEAP32[$182>>2] = $176;
            $R$1$i = $173;
            break;
           } else {
            _abort();
            // unreachable;
           }
          }
         } while(0);
         $199 = ($171|0)==(0|0);
         L78: do {
          if (!($199)) {
           $200 = (($v$0$i) + 28|0);
           $201 = HEAP32[$200>>2]|0;
           $202 = (((54496) + ($201<<2)|0) + 304|0);
           $203 = HEAP32[$202>>2]|0;
           $204 = ($v$0$i|0)==($203|0);
           do {
            if ($204) {
             HEAP32[$202>>2] = $R$1$i;
             $cond$i = ($R$1$i|0)==(0|0);
             if (!($cond$i)) {
              break;
             }
             $205 = 1 << $201;
             $206 = $205 ^ -1;
             $207 = HEAP32[(((54496) + 4|0))>>2]|0;
             $208 = $207 & $206;
             HEAP32[(((54496) + 4|0))>>2] = $208;
             break L78;
            } else {
             $209 = $171;
             $210 = HEAP32[(((54496) + 16|0))>>2]|0;
             $211 = ($209>>>0)<($210>>>0);
             if ($211) {
              _abort();
              // unreachable;
             }
             $212 = (($171) + 16|0);
             $213 = HEAP32[$212>>2]|0;
             $214 = ($213|0)==($v$0$i|0);
             if ($214) {
              HEAP32[$212>>2] = $R$1$i;
             } else {
              $215 = (($171) + 20|0);
              HEAP32[$215>>2] = $R$1$i;
             }
             $216 = ($R$1$i|0)==(0|0);
             if ($216) {
              break L78;
             }
            }
           } while(0);
           $217 = $R$1$i;
           $218 = HEAP32[(((54496) + 16|0))>>2]|0;
           $219 = ($217>>>0)<($218>>>0);
           if ($219) {
            _abort();
            // unreachable;
           }
           $220 = (($R$1$i) + 24|0);
           HEAP32[$220>>2] = $171;
           $221 = (($v$0$i) + 16|0);
           $222 = HEAP32[$221>>2]|0;
           $223 = ($222|0)==(0|0);
           do {
            if (!($223)) {
             $224 = $222;
             $225 = HEAP32[(((54496) + 16|0))>>2]|0;
             $226 = ($224>>>0)<($225>>>0);
             if ($226) {
              _abort();
              // unreachable;
             } else {
              $227 = (($R$1$i) + 16|0);
              HEAP32[$227>>2] = $222;
              $228 = (($222) + 24|0);
              HEAP32[$228>>2] = $R$1$i;
              break;
             }
            }
           } while(0);
           $229 = (($v$0$i) + 20|0);
           $230 = HEAP32[$229>>2]|0;
           $231 = ($230|0)==(0|0);
           if ($231) {
            break;
           }
           $232 = $230;
           $233 = HEAP32[(((54496) + 16|0))>>2]|0;
           $234 = ($232>>>0)<($233>>>0);
           if ($234) {
            _abort();
            // unreachable;
           } else {
            $235 = (($R$1$i) + 20|0);
            HEAP32[$235>>2] = $230;
            $236 = (($230) + 24|0);
            HEAP32[$236>>2] = $R$1$i;
            break;
           }
          }
         } while(0);
         $237 = ($rsize$0$i>>>0)<(16);
         if ($237) {
          $238 = (($rsize$0$i) + ($5))|0;
          $239 = $238 | 3;
          $240 = (($v$0$i) + 4|0);
          HEAP32[$240>>2] = $239;
          $$sum4$i = (($238) + 4)|0;
          $241 = (($164) + ($$sum4$i)|0);
          $242 = $241;
          $243 = HEAP32[$242>>2]|0;
          $244 = $243 | 1;
          HEAP32[$242>>2] = $244;
         } else {
          $245 = $5 | 3;
          $246 = (($v$0$i) + 4|0);
          HEAP32[$246>>2] = $245;
          $247 = $rsize$0$i | 1;
          $$sum$i35 = $5 | 4;
          $248 = (($164) + ($$sum$i35)|0);
          $249 = $248;
          HEAP32[$249>>2] = $247;
          $$sum1$i = (($rsize$0$i) + ($5))|0;
          $250 = (($164) + ($$sum1$i)|0);
          $251 = $250;
          HEAP32[$251>>2] = $rsize$0$i;
          $252 = HEAP32[(((54496) + 8|0))>>2]|0;
          $253 = ($252|0)==(0);
          if (!($253)) {
           $254 = HEAP32[(((54496) + 20|0))>>2]|0;
           $255 = $252 >>> 3;
           $256 = $255 << 1;
           $257 = (((54496) + ($256<<2)|0) + 40|0);
           $258 = $257;
           $259 = HEAP32[((54496))>>2]|0;
           $260 = 1 << $255;
           $261 = $259 & $260;
           $262 = ($261|0)==(0);
           do {
            if ($262) {
             $263 = $259 | $260;
             HEAP32[((54496))>>2] = $263;
             $$sum2$pre$i = (($256) + 2)|0;
             $$pre$i = (((54496) + ($$sum2$pre$i<<2)|0) + 40|0);
             $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $258;
            } else {
             $$sum3$i = (($256) + 2)|0;
             $264 = (((54496) + ($$sum3$i<<2)|0) + 40|0);
             $265 = HEAP32[$264>>2]|0;
             $266 = $265;
             $267 = HEAP32[(((54496) + 16|0))>>2]|0;
             $268 = ($266>>>0)<($267>>>0);
             if (!($268)) {
              $$pre$phi$iZ2D = $264;$F1$0$i = $265;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           HEAP32[$$pre$phi$iZ2D>>2] = $254;
           $269 = (($F1$0$i) + 12|0);
           HEAP32[$269>>2] = $254;
           $270 = (($254) + 8|0);
           HEAP32[$270>>2] = $F1$0$i;
           $271 = (($254) + 12|0);
           HEAP32[$271>>2] = $258;
          }
          HEAP32[(((54496) + 8|0))>>2] = $rsize$0$i;
          HEAP32[(((54496) + 20|0))>>2] = $168;
         }
         $272 = (($v$0$i) + 8|0);
         $273 = $272;
         $mem$0 = $273;
         STACKTOP = sp;return ($mem$0|0);
        } else {
         $274 = ($bytes>>>0)>(4294967231);
         if ($274) {
          $nb$0 = -1;
          break;
         }
         $275 = (($bytes) + 11)|0;
         $276 = $275 & -8;
         $277 = HEAP32[(((54496) + 4|0))>>2]|0;
         $278 = ($277|0)==(0);
         if ($278) {
          $nb$0 = $276;
          break;
         }
         $279 = (0 - ($276))|0;
         $280 = $275 >>> 8;
         $281 = ($280|0)==(0);
         do {
          if ($281) {
           $idx$0$i = 0;
          } else {
           $282 = ($276>>>0)>(16777215);
           if ($282) {
            $idx$0$i = 31;
            break;
           }
           $283 = (($280) + 1048320)|0;
           $284 = $283 >>> 16;
           $285 = $284 & 8;
           $286 = $280 << $285;
           $287 = (($286) + 520192)|0;
           $288 = $287 >>> 16;
           $289 = $288 & 4;
           $290 = $289 | $285;
           $291 = $286 << $289;
           $292 = (($291) + 245760)|0;
           $293 = $292 >>> 16;
           $294 = $293 & 2;
           $295 = $290 | $294;
           $296 = (14 - ($295))|0;
           $297 = $291 << $294;
           $298 = $297 >>> 15;
           $299 = (($296) + ($298))|0;
           $300 = $299 << 1;
           $301 = (($299) + 7)|0;
           $302 = $276 >>> $301;
           $303 = $302 & 1;
           $304 = $303 | $300;
           $idx$0$i = $304;
          }
         } while(0);
         $305 = (((54496) + ($idx$0$i<<2)|0) + 304|0);
         $306 = HEAP32[$305>>2]|0;
         $307 = ($306|0)==(0|0);
         L126: do {
          if ($307) {
           $rsize$2$i = $279;$t$1$i = 0;$v$2$i = 0;
          } else {
           $308 = ($idx$0$i|0)==(31);
           if ($308) {
            $311 = 0;
           } else {
            $309 = $idx$0$i >>> 1;
            $310 = (25 - ($309))|0;
            $311 = $310;
           }
           $312 = $276 << $311;
           $rsize$0$i15 = $279;$rst$0$i = 0;$sizebits$0$i = $312;$t$0$i14 = $306;$v$0$i16 = 0;
           while(1) {
            $313 = (($t$0$i14) + 4|0);
            $314 = HEAP32[$313>>2]|0;
            $315 = $314 & -8;
            $316 = (($315) - ($276))|0;
            $317 = ($316>>>0)<($rsize$0$i15>>>0);
            if ($317) {
             $318 = ($315|0)==($276|0);
             if ($318) {
              $rsize$2$i = $316;$t$1$i = $t$0$i14;$v$2$i = $t$0$i14;
              break L126;
             } else {
              $rsize$1$i = $316;$v$1$i = $t$0$i14;
             }
            } else {
             $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
            }
            $319 = (($t$0$i14) + 20|0);
            $320 = HEAP32[$319>>2]|0;
            $321 = $sizebits$0$i >>> 31;
            $322 = ((($t$0$i14) + ($321<<2)|0) + 16|0);
            $323 = HEAP32[$322>>2]|0;
            $324 = ($320|0)==(0|0);
            $325 = ($320|0)==($323|0);
            $or$cond$i = $324 | $325;
            $rst$1$i = $or$cond$i ? $rst$0$i : $320;
            $326 = ($323|0)==(0|0);
            $327 = $sizebits$0$i << 1;
            if ($326) {
             $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
             break;
            } else {
             $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $327;$t$0$i14 = $323;$v$0$i16 = $v$1$i;
            }
           }
          }
         } while(0);
         $328 = ($t$1$i|0)==(0|0);
         $329 = ($v$2$i|0)==(0|0);
         $or$cond19$i = $328 & $329;
         if ($or$cond19$i) {
          $330 = 2 << $idx$0$i;
          $331 = (0 - ($330))|0;
          $332 = $330 | $331;
          $333 = $277 & $332;
          $334 = ($333|0)==(0);
          if ($334) {
           $nb$0 = $276;
           break;
          }
          $335 = (0 - ($333))|0;
          $336 = $333 & $335;
          $337 = (($336) + -1)|0;
          $338 = $337 >>> 12;
          $339 = $338 & 16;
          $340 = $337 >>> $339;
          $341 = $340 >>> 5;
          $342 = $341 & 8;
          $343 = $342 | $339;
          $344 = $340 >>> $342;
          $345 = $344 >>> 2;
          $346 = $345 & 4;
          $347 = $343 | $346;
          $348 = $344 >>> $346;
          $349 = $348 >>> 1;
          $350 = $349 & 2;
          $351 = $347 | $350;
          $352 = $348 >>> $350;
          $353 = $352 >>> 1;
          $354 = $353 & 1;
          $355 = $351 | $354;
          $356 = $352 >>> $354;
          $357 = (($355) + ($356))|0;
          $358 = (((54496) + ($357<<2)|0) + 304|0);
          $359 = HEAP32[$358>>2]|0;
          $t$2$ph$i = $359;
         } else {
          $t$2$ph$i = $t$1$i;
         }
         $360 = ($t$2$ph$i|0)==(0|0);
         if ($360) {
          $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$2$i;
         } else {
          $rsize$329$i = $rsize$2$i;$t$228$i = $t$2$ph$i;$v$330$i = $v$2$i;
          while(1) {
           $361 = (($t$228$i) + 4|0);
           $362 = HEAP32[$361>>2]|0;
           $363 = $362 & -8;
           $364 = (($363) - ($276))|0;
           $365 = ($364>>>0)<($rsize$329$i>>>0);
           $$rsize$3$i = $365 ? $364 : $rsize$329$i;
           $t$2$v$3$i = $365 ? $t$228$i : $v$330$i;
           $366 = (($t$228$i) + 16|0);
           $367 = HEAP32[$366>>2]|0;
           $368 = ($367|0)==(0|0);
           if (!($368)) {
            $v$330$i$phi = $t$2$v$3$i;$t$228$i$phi = $367;$rsize$329$i$phi = $$rsize$3$i;$v$330$i = $v$330$i$phi;$t$228$i = $t$228$i$phi;$rsize$329$i = $rsize$329$i$phi;
            continue;
           }
           $369 = (($t$228$i) + 20|0);
           $370 = HEAP32[$369>>2]|0;
           $371 = ($370|0)==(0|0);
           if ($371) {
            $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
            break;
           } else {
            $v$330$i$phi = $t$2$v$3$i;$rsize$329$i$phi = $$rsize$3$i;$t$228$i = $370;$v$330$i = $v$330$i$phi;$rsize$329$i = $rsize$329$i$phi;
           }
          }
         }
         $372 = ($v$3$lcssa$i|0)==(0|0);
         if ($372) {
          $nb$0 = $276;
          break;
         }
         $373 = HEAP32[(((54496) + 8|0))>>2]|0;
         $374 = (($373) - ($276))|0;
         $375 = ($rsize$3$lcssa$i>>>0)<($374>>>0);
         if (!($375)) {
          $nb$0 = $276;
          break;
         }
         $376 = $v$3$lcssa$i;
         $377 = HEAP32[(((54496) + 16|0))>>2]|0;
         $378 = ($376>>>0)<($377>>>0);
         if ($378) {
          _abort();
          // unreachable;
         }
         $379 = (($376) + ($276)|0);
         $380 = $379;
         $381 = ($376>>>0)<($379>>>0);
         if (!($381)) {
          _abort();
          // unreachable;
         }
         $382 = (($v$3$lcssa$i) + 24|0);
         $383 = HEAP32[$382>>2]|0;
         $384 = (($v$3$lcssa$i) + 12|0);
         $385 = HEAP32[$384>>2]|0;
         $386 = ($385|0)==($v$3$lcssa$i|0);
         do {
          if ($386) {
           $397 = (($v$3$lcssa$i) + 20|0);
           $398 = HEAP32[$397>>2]|0;
           $399 = ($398|0)==(0|0);
           if ($399) {
            $400 = (($v$3$lcssa$i) + 16|0);
            $401 = HEAP32[$400>>2]|0;
            $402 = ($401|0)==(0|0);
            if ($402) {
             $R$1$i20 = 0;
             break;
            } else {
             $R$0$i18 = $401;$RP$0$i17 = $400;
            }
           } else {
            $R$0$i18 = $398;$RP$0$i17 = $397;
           }
           while(1) {
            $403 = (($R$0$i18) + 20|0);
            $404 = HEAP32[$403>>2]|0;
            $405 = ($404|0)==(0|0);
            if (!($405)) {
             $RP$0$i17$phi = $403;$R$0$i18$phi = $404;$RP$0$i17 = $RP$0$i17$phi;$R$0$i18 = $R$0$i18$phi;
             continue;
            }
            $406 = (($R$0$i18) + 16|0);
            $407 = HEAP32[$406>>2]|0;
            $408 = ($407|0)==(0|0);
            if ($408) {
             break;
            } else {
             $R$0$i18 = $407;$RP$0$i17 = $406;
            }
           }
           $409 = $RP$0$i17;
           $410 = ($409>>>0)<($377>>>0);
           if ($410) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$RP$0$i17>>2] = 0;
            $R$1$i20 = $R$0$i18;
            break;
           }
          } else {
           $387 = (($v$3$lcssa$i) + 8|0);
           $388 = HEAP32[$387>>2]|0;
           $389 = $388;
           $390 = ($389>>>0)<($377>>>0);
           if ($390) {
            _abort();
            // unreachable;
           }
           $391 = (($388) + 12|0);
           $392 = HEAP32[$391>>2]|0;
           $393 = ($392|0)==($v$3$lcssa$i|0);
           if (!($393)) {
            _abort();
            // unreachable;
           }
           $394 = (($385) + 8|0);
           $395 = HEAP32[$394>>2]|0;
           $396 = ($395|0)==($v$3$lcssa$i|0);
           if ($396) {
            HEAP32[$391>>2] = $385;
            HEAP32[$394>>2] = $388;
            $R$1$i20 = $385;
            break;
           } else {
            _abort();
            // unreachable;
           }
          }
         } while(0);
         $411 = ($383|0)==(0|0);
         L176: do {
          if (!($411)) {
           $412 = (($v$3$lcssa$i) + 28|0);
           $413 = HEAP32[$412>>2]|0;
           $414 = (((54496) + ($413<<2)|0) + 304|0);
           $415 = HEAP32[$414>>2]|0;
           $416 = ($v$3$lcssa$i|0)==($415|0);
           do {
            if ($416) {
             HEAP32[$414>>2] = $R$1$i20;
             $cond$i21 = ($R$1$i20|0)==(0|0);
             if (!($cond$i21)) {
              break;
             }
             $417 = 1 << $413;
             $418 = $417 ^ -1;
             $419 = HEAP32[(((54496) + 4|0))>>2]|0;
             $420 = $419 & $418;
             HEAP32[(((54496) + 4|0))>>2] = $420;
             break L176;
            } else {
             $421 = $383;
             $422 = HEAP32[(((54496) + 16|0))>>2]|0;
             $423 = ($421>>>0)<($422>>>0);
             if ($423) {
              _abort();
              // unreachable;
             }
             $424 = (($383) + 16|0);
             $425 = HEAP32[$424>>2]|0;
             $426 = ($425|0)==($v$3$lcssa$i|0);
             if ($426) {
              HEAP32[$424>>2] = $R$1$i20;
             } else {
              $427 = (($383) + 20|0);
              HEAP32[$427>>2] = $R$1$i20;
             }
             $428 = ($R$1$i20|0)==(0|0);
             if ($428) {
              break L176;
             }
            }
           } while(0);
           $429 = $R$1$i20;
           $430 = HEAP32[(((54496) + 16|0))>>2]|0;
           $431 = ($429>>>0)<($430>>>0);
           if ($431) {
            _abort();
            // unreachable;
           }
           $432 = (($R$1$i20) + 24|0);
           HEAP32[$432>>2] = $383;
           $433 = (($v$3$lcssa$i) + 16|0);
           $434 = HEAP32[$433>>2]|0;
           $435 = ($434|0)==(0|0);
           do {
            if (!($435)) {
             $436 = $434;
             $437 = HEAP32[(((54496) + 16|0))>>2]|0;
             $438 = ($436>>>0)<($437>>>0);
             if ($438) {
              _abort();
              // unreachable;
             } else {
              $439 = (($R$1$i20) + 16|0);
              HEAP32[$439>>2] = $434;
              $440 = (($434) + 24|0);
              HEAP32[$440>>2] = $R$1$i20;
              break;
             }
            }
           } while(0);
           $441 = (($v$3$lcssa$i) + 20|0);
           $442 = HEAP32[$441>>2]|0;
           $443 = ($442|0)==(0|0);
           if ($443) {
            break;
           }
           $444 = $442;
           $445 = HEAP32[(((54496) + 16|0))>>2]|0;
           $446 = ($444>>>0)<($445>>>0);
           if ($446) {
            _abort();
            // unreachable;
           } else {
            $447 = (($R$1$i20) + 20|0);
            HEAP32[$447>>2] = $442;
            $448 = (($442) + 24|0);
            HEAP32[$448>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $449 = ($rsize$3$lcssa$i>>>0)<(16);
         L204: do {
          if ($449) {
           $450 = (($rsize$3$lcssa$i) + ($276))|0;
           $451 = $450 | 3;
           $452 = (($v$3$lcssa$i) + 4|0);
           HEAP32[$452>>2] = $451;
           $$sum18$i = (($450) + 4)|0;
           $453 = (($376) + ($$sum18$i)|0);
           $454 = $453;
           $455 = HEAP32[$454>>2]|0;
           $456 = $455 | 1;
           HEAP32[$454>>2] = $456;
          } else {
           $457 = $276 | 3;
           $458 = (($v$3$lcssa$i) + 4|0);
           HEAP32[$458>>2] = $457;
           $459 = $rsize$3$lcssa$i | 1;
           $$sum$i2334 = $276 | 4;
           $460 = (($376) + ($$sum$i2334)|0);
           $461 = $460;
           HEAP32[$461>>2] = $459;
           $$sum1$i24 = (($rsize$3$lcssa$i) + ($276))|0;
           $462 = (($376) + ($$sum1$i24)|0);
           $463 = $462;
           HEAP32[$463>>2] = $rsize$3$lcssa$i;
           $464 = $rsize$3$lcssa$i >>> 3;
           $465 = ($rsize$3$lcssa$i>>>0)<(256);
           if ($465) {
            $466 = $464 << 1;
            $467 = (((54496) + ($466<<2)|0) + 40|0);
            $468 = $467;
            $469 = HEAP32[((54496))>>2]|0;
            $470 = 1 << $464;
            $471 = $469 & $470;
            $472 = ($471|0)==(0);
            do {
             if ($472) {
              $473 = $469 | $470;
              HEAP32[((54496))>>2] = $473;
              $$sum14$pre$i = (($466) + 2)|0;
              $$pre$i25 = (((54496) + ($$sum14$pre$i<<2)|0) + 40|0);
              $$pre$phi$i26Z2D = $$pre$i25;$F5$0$i = $468;
             } else {
              $$sum17$i = (($466) + 2)|0;
              $474 = (((54496) + ($$sum17$i<<2)|0) + 40|0);
              $475 = HEAP32[$474>>2]|0;
              $476 = $475;
              $477 = HEAP32[(((54496) + 16|0))>>2]|0;
              $478 = ($476>>>0)<($477>>>0);
              if (!($478)) {
               $$pre$phi$i26Z2D = $474;$F5$0$i = $475;
               break;
              }
              _abort();
              // unreachable;
             }
            } while(0);
            HEAP32[$$pre$phi$i26Z2D>>2] = $380;
            $479 = (($F5$0$i) + 12|0);
            HEAP32[$479>>2] = $380;
            $$sum15$i = (($276) + 8)|0;
            $480 = (($376) + ($$sum15$i)|0);
            $481 = $480;
            HEAP32[$481>>2] = $F5$0$i;
            $$sum16$i = (($276) + 12)|0;
            $482 = (($376) + ($$sum16$i)|0);
            $483 = $482;
            HEAP32[$483>>2] = $468;
            break;
           }
           $484 = $379;
           $485 = $rsize$3$lcssa$i >>> 8;
           $486 = ($485|0)==(0);
           do {
            if ($486) {
             $I7$0$i = 0;
            } else {
             $487 = ($rsize$3$lcssa$i>>>0)>(16777215);
             if ($487) {
              $I7$0$i = 31;
              break;
             }
             $488 = (($485) + 1048320)|0;
             $489 = $488 >>> 16;
             $490 = $489 & 8;
             $491 = $485 << $490;
             $492 = (($491) + 520192)|0;
             $493 = $492 >>> 16;
             $494 = $493 & 4;
             $495 = $494 | $490;
             $496 = $491 << $494;
             $497 = (($496) + 245760)|0;
             $498 = $497 >>> 16;
             $499 = $498 & 2;
             $500 = $495 | $499;
             $501 = (14 - ($500))|0;
             $502 = $496 << $499;
             $503 = $502 >>> 15;
             $504 = (($501) + ($503))|0;
             $505 = $504 << 1;
             $506 = (($504) + 7)|0;
             $507 = $rsize$3$lcssa$i >>> $506;
             $508 = $507 & 1;
             $509 = $508 | $505;
             $I7$0$i = $509;
            }
           } while(0);
           $510 = (((54496) + ($I7$0$i<<2)|0) + 304|0);
           $$sum2$i = (($276) + 28)|0;
           $511 = (($376) + ($$sum2$i)|0);
           $512 = $511;
           HEAP32[$512>>2] = $I7$0$i;
           $$sum3$i27 = (($276) + 16)|0;
           $513 = (($376) + ($$sum3$i27)|0);
           $$sum4$i28 = (($276) + 20)|0;
           $514 = (($376) + ($$sum4$i28)|0);
           $515 = $514;
           HEAP32[$515>>2] = 0;
           $516 = $513;
           HEAP32[$516>>2] = 0;
           $517 = HEAP32[(((54496) + 4|0))>>2]|0;
           $518 = 1 << $I7$0$i;
           $519 = $517 & $518;
           $520 = ($519|0)==(0);
           if ($520) {
            $521 = $517 | $518;
            HEAP32[(((54496) + 4|0))>>2] = $521;
            HEAP32[$510>>2] = $484;
            $522 = $510;
            $$sum5$i = (($276) + 24)|0;
            $523 = (($376) + ($$sum5$i)|0);
            $524 = $523;
            HEAP32[$524>>2] = $522;
            $$sum6$i = (($276) + 12)|0;
            $525 = (($376) + ($$sum6$i)|0);
            $526 = $525;
            HEAP32[$526>>2] = $484;
            $$sum7$i = (($276) + 8)|0;
            $527 = (($376) + ($$sum7$i)|0);
            $528 = $527;
            HEAP32[$528>>2] = $484;
            break;
           }
           $529 = HEAP32[$510>>2]|0;
           $530 = ($I7$0$i|0)==(31);
           if ($530) {
            $533 = 0;
           } else {
            $531 = $I7$0$i >>> 1;
            $532 = (25 - ($531))|0;
            $533 = $532;
           }
           $534 = (($529) + 4|0);
           $535 = HEAP32[$534>>2]|0;
           $536 = $535 & -8;
           $537 = ($536|0)==($rsize$3$lcssa$i|0);
           L225: do {
            if ($537) {
             $T$0$lcssa$i = $529;
            } else {
             $538 = $rsize$3$lcssa$i << $533;
             $K12$025$i = $538;$T$024$i = $529;
             while(1) {
              $544 = $K12$025$i >>> 31;
              $545 = ((($T$024$i) + ($544<<2)|0) + 16|0);
              $546 = HEAP32[$545>>2]|0;
              $547 = ($546|0)==(0|0);
              if ($547) {
               break;
              }
              $539 = $K12$025$i << 1;
              $540 = (($546) + 4|0);
              $541 = HEAP32[$540>>2]|0;
              $542 = $541 & -8;
              $543 = ($542|0)==($rsize$3$lcssa$i|0);
              if ($543) {
               $T$0$lcssa$i = $546;
               break L225;
              } else {
               $T$024$i$phi = $546;$K12$025$i = $539;$T$024$i = $T$024$i$phi;
              }
             }
             $548 = $545;
             $549 = HEAP32[(((54496) + 16|0))>>2]|0;
             $550 = ($548>>>0)<($549>>>0);
             if ($550) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$545>>2] = $484;
              $$sum11$i = (($276) + 24)|0;
              $551 = (($376) + ($$sum11$i)|0);
              $552 = $551;
              HEAP32[$552>>2] = $T$024$i;
              $$sum12$i = (($276) + 12)|0;
              $553 = (($376) + ($$sum12$i)|0);
              $554 = $553;
              HEAP32[$554>>2] = $484;
              $$sum13$i = (($276) + 8)|0;
              $555 = (($376) + ($$sum13$i)|0);
              $556 = $555;
              HEAP32[$556>>2] = $484;
              break L204;
             }
            }
           } while(0);
           $557 = (($T$0$lcssa$i) + 8|0);
           $558 = HEAP32[$557>>2]|0;
           $559 = $T$0$lcssa$i;
           $560 = HEAP32[(((54496) + 16|0))>>2]|0;
           $561 = ($559>>>0)<($560>>>0);
           if ($561) {
            _abort();
            // unreachable;
           }
           $562 = $558;
           $563 = ($562>>>0)<($560>>>0);
           if ($563) {
            _abort();
            // unreachable;
           } else {
            $564 = (($558) + 12|0);
            HEAP32[$564>>2] = $484;
            HEAP32[$557>>2] = $484;
            $$sum8$i = (($276) + 8)|0;
            $565 = (($376) + ($$sum8$i)|0);
            $566 = $565;
            HEAP32[$566>>2] = $558;
            $$sum9$i = (($276) + 12)|0;
            $567 = (($376) + ($$sum9$i)|0);
            $568 = $567;
            HEAP32[$568>>2] = $T$0$lcssa$i;
            $$sum10$i = (($276) + 24)|0;
            $569 = (($376) + ($$sum10$i)|0);
            $570 = $569;
            HEAP32[$570>>2] = 0;
            break;
           }
          }
         } while(0);
         $571 = (($v$3$lcssa$i) + 8|0);
         $572 = $571;
         $mem$0 = $572;
         STACKTOP = sp;return ($mem$0|0);
        }
       } while(0);
       $573 = HEAP32[(((54496) + 8|0))>>2]|0;
       $574 = ($nb$0>>>0)>($573>>>0);
       if (!($574)) {
        $575 = (($573) - ($nb$0))|0;
        $576 = HEAP32[(((54496) + 20|0))>>2]|0;
        $577 = ($575>>>0)>(15);
        if ($577) {
         $578 = $576;
         $579 = (($578) + ($nb$0)|0);
         $580 = $579;
         HEAP32[(((54496) + 20|0))>>2] = $580;
         HEAP32[(((54496) + 8|0))>>2] = $575;
         $581 = $575 | 1;
         $$sum2 = (($nb$0) + 4)|0;
         $582 = (($578) + ($$sum2)|0);
         $583 = $582;
         HEAP32[$583>>2] = $581;
         $584 = (($578) + ($573)|0);
         $585 = $584;
         HEAP32[$585>>2] = $575;
         $586 = $nb$0 | 3;
         $587 = (($576) + 4|0);
         HEAP32[$587>>2] = $586;
        } else {
         HEAP32[(((54496) + 8|0))>>2] = 0;
         HEAP32[(((54496) + 20|0))>>2] = 0;
         $588 = $573 | 3;
         $589 = (($576) + 4|0);
         HEAP32[$589>>2] = $588;
         $590 = $576;
         $$sum1 = (($573) + 4)|0;
         $591 = (($590) + ($$sum1)|0);
         $592 = $591;
         $593 = HEAP32[$592>>2]|0;
         $594 = $593 | 1;
         HEAP32[$592>>2] = $594;
        }
        $595 = (($576) + 8|0);
        $596 = $595;
        $mem$0 = $596;
        STACKTOP = sp;return ($mem$0|0);
       }
       $597 = HEAP32[(((54496) + 12|0))>>2]|0;
       $598 = ($nb$0>>>0)<($597>>>0);
       if ($598) {
        $599 = (($597) - ($nb$0))|0;
        HEAP32[(((54496) + 12|0))>>2] = $599;
        $600 = HEAP32[(((54496) + 24|0))>>2]|0;
        $601 = $600;
        $602 = (($601) + ($nb$0)|0);
        $603 = $602;
        HEAP32[(((54496) + 24|0))>>2] = $603;
        $604 = $599 | 1;
        $$sum = (($nb$0) + 4)|0;
        $605 = (($601) + ($$sum)|0);
        $606 = $605;
        HEAP32[$606>>2] = $604;
        $607 = $nb$0 | 3;
        $608 = (($600) + 4|0);
        HEAP32[$608>>2] = $607;
        $609 = (($600) + 8|0);
        $610 = $609;
        $mem$0 = $610;
        STACKTOP = sp;return ($mem$0|0);
       }
       $611 = HEAP32[((54968))>>2]|0;
       $612 = ($611|0)==(0);
       do {
        if ($612) {
         $613 = (_sysconf(30)|0);
         $614 = (($613) + -1)|0;
         $615 = $614 & $613;
         $616 = ($615|0)==(0);
         if ($616) {
          HEAP32[(((54968) + 8|0))>>2] = $613;
          HEAP32[(((54968) + 4|0))>>2] = $613;
          HEAP32[(((54968) + 12|0))>>2] = -1;
          HEAP32[(((54968) + 16|0))>>2] = -1;
          HEAP32[(((54968) + 20|0))>>2] = 0;
          HEAP32[(((54496) + 444|0))>>2] = 0;
          $617 = (_time((0|0))|0);
          $618 = $617 & -16;
          $619 = $618 ^ 1431655768;
          HEAP32[((54968))>>2] = $619;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $620 = (($nb$0) + 48)|0;
       $621 = HEAP32[(((54968) + 8|0))>>2]|0;
       $622 = (($nb$0) + 47)|0;
       $623 = (($621) + ($622))|0;
       $624 = (0 - ($621))|0;
       $625 = $623 & $624;
       $626 = ($625>>>0)>($nb$0>>>0);
       if (!($626)) {
        $mem$0 = 0;
        STACKTOP = sp;return ($mem$0|0);
       }
       $627 = HEAP32[(((54496) + 440|0))>>2]|0;
       $628 = ($627|0)==(0);
       do {
        if (!($628)) {
         $629 = HEAP32[(((54496) + 432|0))>>2]|0;
         $630 = (($629) + ($625))|0;
         $631 = ($630>>>0)<=($629>>>0);
         $632 = ($630>>>0)>($627>>>0);
         $or$cond1$i = $631 | $632;
         if ($or$cond1$i) {
          $mem$0 = 0;
         } else {
          break;
         }
         STACKTOP = sp;return ($mem$0|0);
        }
       } while(0);
       $633 = HEAP32[(((54496) + 444|0))>>2]|0;
       $634 = $633 & 4;
       $635 = ($634|0)==(0);
       L269: do {
        if ($635) {
         $636 = HEAP32[(((54496) + 24|0))>>2]|0;
         $637 = ($636|0)==(0|0);
         L271: do {
          if ($637) {
           label = 182;
          } else {
           $638 = $636;
           $sp$0$i$i = (((54496) + 448|0));
           while(1) {
            $639 = ($sp$0$i$i);
            $640 = HEAP32[$639>>2]|0;
            $641 = ($640>>>0)>($638>>>0);
            if (!($641)) {
             $642 = (($sp$0$i$i) + 4|0);
             $643 = HEAP32[$642>>2]|0;
             $644 = (($640) + ($643)|0);
             $645 = ($644>>>0)>($638>>>0);
             if ($645) {
              break;
             }
            }
            $646 = (($sp$0$i$i) + 8|0);
            $647 = HEAP32[$646>>2]|0;
            $648 = ($647|0)==(0|0);
            if ($648) {
             label = 182;
             break L271;
            } else {
             $sp$0$i$i = $647;
            }
           }
           $649 = ($sp$0$i$i|0)==(0|0);
           if ($649) {
            label = 182;
            break;
           }
           $672 = HEAP32[(((54496) + 12|0))>>2]|0;
           $673 = (($623) - ($672))|0;
           $674 = $673 & $624;
           $675 = ($674>>>0)<(2147483647);
           if (!($675)) {
            $tsize$0323841$i = 0;
            break;
           }
           $676 = (_sbrk(($674|0))|0);
           $677 = HEAP32[$639>>2]|0;
           $678 = HEAP32[$642>>2]|0;
           $679 = (($677) + ($678)|0);
           $680 = ($676|0)==($679|0);
           $$3$i = $680 ? $674 : 0;
           $$4$i = $680 ? $676 : (-1);
           $br$0$i = $676;$ssize$1$i = $674;$tbase$0$i = $$4$i;$tsize$0$i = $$3$i;
           label = 191;
          }
         } while(0);
         do {
          if ((label|0) == 182) {
           $650 = (_sbrk(0)|0);
           $651 = ($650|0)==((-1)|0);
           if ($651) {
            $tsize$0323841$i = 0;
            break;
           }
           $652 = $650;
           $653 = HEAP32[(((54968) + 4|0))>>2]|0;
           $654 = (($653) + -1)|0;
           $655 = $654 & $652;
           $656 = ($655|0)==(0);
           if ($656) {
            $ssize$0$i = $625;
           } else {
            $657 = (($654) + ($652))|0;
            $658 = (0 - ($653))|0;
            $659 = $657 & $658;
            $660 = (($625) - ($652))|0;
            $661 = (($660) + ($659))|0;
            $ssize$0$i = $661;
           }
           $662 = HEAP32[(((54496) + 432|0))>>2]|0;
           $663 = (($662) + ($ssize$0$i))|0;
           $664 = ($ssize$0$i>>>0)>($nb$0>>>0);
           $665 = ($ssize$0$i>>>0)<(2147483647);
           $or$cond$i29 = $664 & $665;
           if (!($or$cond$i29)) {
            $tsize$0323841$i = 0;
            break;
           }
           $666 = HEAP32[(((54496) + 440|0))>>2]|0;
           $667 = ($666|0)==(0);
           if (!($667)) {
            $668 = ($663>>>0)<=($662>>>0);
            $669 = ($663>>>0)>($666>>>0);
            $or$cond2$i = $668 | $669;
            if ($or$cond2$i) {
             $tsize$0323841$i = 0;
             break;
            }
           }
           $670 = (_sbrk(($ssize$0$i|0))|0);
           $671 = ($670|0)==($650|0);
           $ssize$0$$i = $671 ? $ssize$0$i : 0;
           $$$i = $671 ? $650 : (-1);
           $br$0$i = $670;$ssize$1$i = $ssize$0$i;$tbase$0$i = $$$i;$tsize$0$i = $ssize$0$$i;
           label = 191;
          }
         } while(0);
         L291: do {
          if ((label|0) == 191) {
           $681 = (0 - ($ssize$1$i))|0;
           $682 = ($tbase$0$i|0)==((-1)|0);
           if (!($682)) {
            $tbase$247$i = $tbase$0$i;$tsize$246$i = $tsize$0$i;
            label = 202;
            break L269;
           }
           $683 = ($br$0$i|0)!=((-1)|0);
           $684 = ($ssize$1$i>>>0)<(2147483647);
           $or$cond5$i = $683 & $684;
           $685 = ($ssize$1$i>>>0)<($620>>>0);
           $or$cond6$i = $or$cond5$i & $685;
           do {
            if ($or$cond6$i) {
             $686 = HEAP32[(((54968) + 8|0))>>2]|0;
             $687 = (($622) - ($ssize$1$i))|0;
             $688 = (($687) + ($686))|0;
             $689 = (0 - ($686))|0;
             $690 = $688 & $689;
             $691 = ($690>>>0)<(2147483647);
             if (!($691)) {
              $ssize$2$i = $ssize$1$i;
              break;
             }
             $692 = (_sbrk(($690|0))|0);
             $693 = ($692|0)==((-1)|0);
             if ($693) {
              (_sbrk(($681|0))|0);
              $tsize$0323841$i = $tsize$0$i;
              break L291;
             } else {
              $694 = (($690) + ($ssize$1$i))|0;
              $ssize$2$i = $694;
              break;
             }
            } else {
             $ssize$2$i = $ssize$1$i;
            }
           } while(0);
           $695 = ($br$0$i|0)==((-1)|0);
           if ($695) {
            $tsize$0323841$i = $tsize$0$i;
           } else {
            $tbase$247$i = $br$0$i;$tsize$246$i = $ssize$2$i;
            label = 202;
            break L269;
           }
          }
         } while(0);
         $696 = HEAP32[(((54496) + 444|0))>>2]|0;
         $697 = $696 | 4;
         HEAP32[(((54496) + 444|0))>>2] = $697;
         $tsize$1$i = $tsize$0323841$i;
         label = 199;
        } else {
         $tsize$1$i = 0;
         label = 199;
        }
       } while(0);
       do {
        if ((label|0) == 199) {
         $698 = ($625>>>0)<(2147483647);
         if (!($698)) {
          break;
         }
         $699 = (_sbrk(($625|0))|0);
         $700 = (_sbrk(0)|0);
         $notlhs$i = ($699|0)!=((-1)|0);
         $notrhs$i = ($700|0)!=((-1)|0);
         $or$cond8$not$i = $notrhs$i & $notlhs$i;
         $701 = ($699>>>0)<($700>>>0);
         $or$cond9$i = $or$cond8$not$i & $701;
         if (!($or$cond9$i)) {
          break;
         }
         $702 = $700;
         $703 = $699;
         $704 = (($702) - ($703))|0;
         $705 = (($nb$0) + 40)|0;
         $706 = ($704>>>0)>($705>>>0);
         $$tsize$1$i = $706 ? $704 : $tsize$1$i;
         if ($706) {
          $tbase$247$i = $699;$tsize$246$i = $$tsize$1$i;
          label = 202;
         }
        }
       } while(0);
       do {
        if ((label|0) == 202) {
         $707 = HEAP32[(((54496) + 432|0))>>2]|0;
         $708 = (($707) + ($tsize$246$i))|0;
         HEAP32[(((54496) + 432|0))>>2] = $708;
         $709 = HEAP32[(((54496) + 436|0))>>2]|0;
         $710 = ($708>>>0)>($709>>>0);
         if ($710) {
          HEAP32[(((54496) + 436|0))>>2] = $708;
         }
         $711 = HEAP32[(((54496) + 24|0))>>2]|0;
         $712 = ($711|0)==(0|0);
         L311: do {
          if ($712) {
           $713 = HEAP32[(((54496) + 16|0))>>2]|0;
           $714 = ($713|0)==(0|0);
           $715 = ($tbase$247$i>>>0)<($713>>>0);
           $or$cond10$i = $714 | $715;
           if ($or$cond10$i) {
            HEAP32[(((54496) + 16|0))>>2] = $tbase$247$i;
           }
           HEAP32[(((54496) + 448|0))>>2] = $tbase$247$i;
           HEAP32[(((54496) + 452|0))>>2] = $tsize$246$i;
           HEAP32[(((54496) + 460|0))>>2] = 0;
           $716 = HEAP32[((54968))>>2]|0;
           HEAP32[(((54496) + 36|0))>>2] = $716;
           HEAP32[(((54496) + 32|0))>>2] = -1;
           $i$02$i$i = 0;
           while(1) {
            $717 = $i$02$i$i << 1;
            $718 = (((54496) + ($717<<2)|0) + 40|0);
            $719 = $718;
            $$sum$i$i = (($717) + 3)|0;
            $720 = (((54496) + ($$sum$i$i<<2)|0) + 40|0);
            HEAP32[$720>>2] = $719;
            $$sum1$i$i = (($717) + 2)|0;
            $721 = (((54496) + ($$sum1$i$i<<2)|0) + 40|0);
            HEAP32[$721>>2] = $719;
            $722 = (($i$02$i$i) + 1)|0;
            $exitcond$i$i = ($722|0)==(32);
            if ($exitcond$i$i) {
             break;
            } else {
             $i$02$i$i$phi = $722;$i$02$i$i = $i$02$i$i$phi;
            }
           }
           $723 = (($tsize$246$i) + -40)|0;
           $724 = (($tbase$247$i) + 8|0);
           $725 = $724;
           $726 = $725 & 7;
           $727 = ($726|0)==(0);
           if ($727) {
            $730 = 0;
           } else {
            $728 = (0 - ($725))|0;
            $729 = $728 & 7;
            $730 = $729;
           }
           $731 = (($tbase$247$i) + ($730)|0);
           $732 = $731;
           $733 = (($723) - ($730))|0;
           HEAP32[(((54496) + 24|0))>>2] = $732;
           HEAP32[(((54496) + 12|0))>>2] = $733;
           $734 = $733 | 1;
           $$sum$i14$i = (($730) + 4)|0;
           $735 = (($tbase$247$i) + ($$sum$i14$i)|0);
           $736 = $735;
           HEAP32[$736>>2] = $734;
           $$sum2$i$i = (($tsize$246$i) + -36)|0;
           $737 = (($tbase$247$i) + ($$sum2$i$i)|0);
           $738 = $737;
           HEAP32[$738>>2] = 40;
           $739 = HEAP32[(((54968) + 16|0))>>2]|0;
           HEAP32[(((54496) + 28|0))>>2] = $739;
          } else {
           $sp$075$i = (((54496) + 448|0));
           while(1) {
            $740 = ($sp$075$i);
            $741 = HEAP32[$740>>2]|0;
            $742 = (($sp$075$i) + 4|0);
            $743 = HEAP32[$742>>2]|0;
            $744 = (($741) + ($743)|0);
            $745 = ($tbase$247$i|0)==($744|0);
            if ($745) {
             label = 214;
             break;
            }
            $746 = (($sp$075$i) + 8|0);
            $747 = HEAP32[$746>>2]|0;
            $748 = ($747|0)==(0|0);
            if ($748) {
             break;
            } else {
             $sp$075$i = $747;
            }
           }
           do {
            if ((label|0) == 214) {
             $749 = (($sp$075$i) + 12|0);
             $750 = HEAP32[$749>>2]|0;
             $751 = $750 & 8;
             $752 = ($751|0)==(0);
             if (!($752)) {
              break;
             }
             $753 = $711;
             $754 = ($753>>>0)>=($741>>>0);
             $755 = ($753>>>0)<($tbase$247$i>>>0);
             $or$cond49$i = $754 & $755;
             if (!($or$cond49$i)) {
              break;
             }
             $756 = (($743) + ($tsize$246$i))|0;
             HEAP32[$742>>2] = $756;
             $757 = HEAP32[(((54496) + 12|0))>>2]|0;
             $758 = (($757) + ($tsize$246$i))|0;
             $759 = (($711) + 8|0);
             $760 = $759;
             $761 = $760 & 7;
             $762 = ($761|0)==(0);
             if ($762) {
              $765 = 0;
             } else {
              $763 = (0 - ($760))|0;
              $764 = $763 & 7;
              $765 = $764;
             }
             $766 = (($753) + ($765)|0);
             $767 = $766;
             $768 = (($758) - ($765))|0;
             HEAP32[(((54496) + 24|0))>>2] = $767;
             HEAP32[(((54496) + 12|0))>>2] = $768;
             $769 = $768 | 1;
             $$sum$i18$i = (($765) + 4)|0;
             $770 = (($753) + ($$sum$i18$i)|0);
             $771 = $770;
             HEAP32[$771>>2] = $769;
             $$sum2$i19$i = (($758) + 4)|0;
             $772 = (($753) + ($$sum2$i19$i)|0);
             $773 = $772;
             HEAP32[$773>>2] = 40;
             $774 = HEAP32[(((54968) + 16|0))>>2]|0;
             HEAP32[(((54496) + 28|0))>>2] = $774;
             break L311;
            }
           } while(0);
           $775 = HEAP32[(((54496) + 16|0))>>2]|0;
           $776 = ($tbase$247$i>>>0)<($775>>>0);
           if ($776) {
            HEAP32[(((54496) + 16|0))>>2] = $tbase$247$i;
           }
           $777 = (($tbase$247$i) + ($tsize$246$i)|0);
           $sp$168$i = (((54496) + 448|0));
           while(1) {
            $778 = ($sp$168$i);
            $779 = HEAP32[$778>>2]|0;
            $780 = ($779|0)==($777|0);
            if ($780) {
             label = 224;
             break;
            }
            $781 = (($sp$168$i) + 8|0);
            $782 = HEAP32[$781>>2]|0;
            $783 = ($782|0)==(0|0);
            if ($783) {
             break;
            } else {
             $sp$168$i = $782;
            }
           }
           do {
            if ((label|0) == 224) {
             $784 = (($sp$168$i) + 12|0);
             $785 = HEAP32[$784>>2]|0;
             $786 = $785 & 8;
             $787 = ($786|0)==(0);
             if (!($787)) {
              break;
             }
             HEAP32[$778>>2] = $tbase$247$i;
             $788 = (($sp$168$i) + 4|0);
             $789 = HEAP32[$788>>2]|0;
             $790 = (($789) + ($tsize$246$i))|0;
             HEAP32[$788>>2] = $790;
             $791 = (($tbase$247$i) + 8|0);
             $792 = $791;
             $793 = $792 & 7;
             $794 = ($793|0)==(0);
             if ($794) {
              $797 = 0;
             } else {
              $795 = (0 - ($792))|0;
              $796 = $795 & 7;
              $797 = $796;
             }
             $798 = (($tbase$247$i) + ($797)|0);
             $$sum107$i = (($tsize$246$i) + 8)|0;
             $799 = (($tbase$247$i) + ($$sum107$i)|0);
             $800 = $799;
             $801 = $800 & 7;
             $802 = ($801|0)==(0);
             if ($802) {
              $805 = 0;
             } else {
              $803 = (0 - ($800))|0;
              $804 = $803 & 7;
              $805 = $804;
             }
             $$sum108$i = (($805) + ($tsize$246$i))|0;
             $806 = (($tbase$247$i) + ($$sum108$i)|0);
             $807 = $806;
             $808 = $806;
             $809 = $798;
             $810 = (($808) - ($809))|0;
             $$sum$i21$i = (($797) + ($nb$0))|0;
             $811 = (($tbase$247$i) + ($$sum$i21$i)|0);
             $812 = $811;
             $813 = (($810) - ($nb$0))|0;
             $814 = $nb$0 | 3;
             $$sum1$i22$i = (($797) + 4)|0;
             $815 = (($tbase$247$i) + ($$sum1$i22$i)|0);
             $816 = $815;
             HEAP32[$816>>2] = $814;
             $817 = HEAP32[(((54496) + 24|0))>>2]|0;
             $818 = ($807|0)==($817|0);
             L348: do {
              if ($818) {
               $819 = HEAP32[(((54496) + 12|0))>>2]|0;
               $820 = (($819) + ($813))|0;
               HEAP32[(((54496) + 12|0))>>2] = $820;
               HEAP32[(((54496) + 24|0))>>2] = $812;
               $821 = $820 | 1;
               $$sum42$i$i = (($$sum$i21$i) + 4)|0;
               $822 = (($tbase$247$i) + ($$sum42$i$i)|0);
               $823 = $822;
               HEAP32[$823>>2] = $821;
              } else {
               $824 = HEAP32[(((54496) + 20|0))>>2]|0;
               $825 = ($807|0)==($824|0);
               if ($825) {
                $826 = HEAP32[(((54496) + 8|0))>>2]|0;
                $827 = (($826) + ($813))|0;
                HEAP32[(((54496) + 8|0))>>2] = $827;
                HEAP32[(((54496) + 20|0))>>2] = $812;
                $828 = $827 | 1;
                $$sum40$i$i = (($$sum$i21$i) + 4)|0;
                $829 = (($tbase$247$i) + ($$sum40$i$i)|0);
                $830 = $829;
                HEAP32[$830>>2] = $828;
                $$sum41$i$i = (($827) + ($$sum$i21$i))|0;
                $831 = (($tbase$247$i) + ($$sum41$i$i)|0);
                $832 = $831;
                HEAP32[$832>>2] = $827;
                break;
               }
               $$sum2$i23$i = (($tsize$246$i) + 4)|0;
               $$sum109$i = (($$sum2$i23$i) + ($805))|0;
               $833 = (($tbase$247$i) + ($$sum109$i)|0);
               $834 = $833;
               $835 = HEAP32[$834>>2]|0;
               $836 = $835 & 3;
               $837 = ($836|0)==(1);
               if ($837) {
                $838 = $835 & -8;
                $839 = $835 >>> 3;
                $840 = ($835>>>0)<(256);
                L356: do {
                 if ($840) {
                  $$sum3738$i$i = $805 | 8;
                  $$sum119$i = (($$sum3738$i$i) + ($tsize$246$i))|0;
                  $841 = (($tbase$247$i) + ($$sum119$i)|0);
                  $842 = $841;
                  $843 = HEAP32[$842>>2]|0;
                  $$sum39$i$i = (($tsize$246$i) + 12)|0;
                  $$sum120$i = (($$sum39$i$i) + ($805))|0;
                  $844 = (($tbase$247$i) + ($$sum120$i)|0);
                  $845 = $844;
                  $846 = HEAP32[$845>>2]|0;
                  $847 = $839 << 1;
                  $848 = (((54496) + ($847<<2)|0) + 40|0);
                  $849 = $848;
                  $850 = ($843|0)==($849|0);
                  do {
                   if (!($850)) {
                    $851 = $843;
                    $852 = HEAP32[(((54496) + 16|0))>>2]|0;
                    $853 = ($851>>>0)<($852>>>0);
                    if ($853) {
                     _abort();
                     // unreachable;
                    }
                    $854 = (($843) + 12|0);
                    $855 = HEAP32[$854>>2]|0;
                    $856 = ($855|0)==($807|0);
                    if ($856) {
                     break;
                    }
                    _abort();
                    // unreachable;
                   }
                  } while(0);
                  $857 = ($846|0)==($843|0);
                  if ($857) {
                   $858 = 1 << $839;
                   $859 = $858 ^ -1;
                   $860 = HEAP32[((54496))>>2]|0;
                   $861 = $860 & $859;
                   HEAP32[((54496))>>2] = $861;
                   break;
                  }
                  $862 = ($846|0)==($849|0);
                  do {
                   if ($862) {
                    $$pre57$i$i = (($846) + 8|0);
                    $$pre$phi58$i$iZ2D = $$pre57$i$i;
                   } else {
                    $863 = $846;
                    $864 = HEAP32[(((54496) + 16|0))>>2]|0;
                    $865 = ($863>>>0)<($864>>>0);
                    if ($865) {
                     _abort();
                     // unreachable;
                    }
                    $866 = (($846) + 8|0);
                    $867 = HEAP32[$866>>2]|0;
                    $868 = ($867|0)==($807|0);
                    if ($868) {
                     $$pre$phi58$i$iZ2D = $866;
                     break;
                    }
                    _abort();
                    // unreachable;
                   }
                  } while(0);
                  $869 = (($843) + 12|0);
                  HEAP32[$869>>2] = $846;
                  HEAP32[$$pre$phi58$i$iZ2D>>2] = $843;
                 } else {
                  $870 = $806;
                  $$sum34$i$i = $805 | 24;
                  $$sum110$i = (($$sum34$i$i) + ($tsize$246$i))|0;
                  $871 = (($tbase$247$i) + ($$sum110$i)|0);
                  $872 = $871;
                  $873 = HEAP32[$872>>2]|0;
                  $$sum5$i$i = (($tsize$246$i) + 12)|0;
                  $$sum111$i = (($$sum5$i$i) + ($805))|0;
                  $874 = (($tbase$247$i) + ($$sum111$i)|0);
                  $875 = $874;
                  $876 = HEAP32[$875>>2]|0;
                  $877 = ($876|0)==($870|0);
                  do {
                   if ($877) {
                    $$sum67$i$i = $805 | 16;
                    $$sum117$i = (($$sum2$i23$i) + ($$sum67$i$i))|0;
                    $890 = (($tbase$247$i) + ($$sum117$i)|0);
                    $891 = $890;
                    $892 = HEAP32[$891>>2]|0;
                    $893 = ($892|0)==(0|0);
                    if ($893) {
                     $$sum118$i = (($$sum67$i$i) + ($tsize$246$i))|0;
                     $894 = (($tbase$247$i) + ($$sum118$i)|0);
                     $895 = $894;
                     $896 = HEAP32[$895>>2]|0;
                     $897 = ($896|0)==(0|0);
                     if ($897) {
                      $R$1$i$i = 0;
                      break;
                     } else {
                      $R$0$i$i = $896;$RP$0$i$i = $895;
                     }
                    } else {
                     $R$0$i$i = $892;$RP$0$i$i = $891;
                    }
                    while(1) {
                     $898 = (($R$0$i$i) + 20|0);
                     $899 = HEAP32[$898>>2]|0;
                     $900 = ($899|0)==(0|0);
                     if (!($900)) {
                      $RP$0$i$i$phi = $898;$R$0$i$i$phi = $899;$RP$0$i$i = $RP$0$i$i$phi;$R$0$i$i = $R$0$i$i$phi;
                      continue;
                     }
                     $901 = (($R$0$i$i) + 16|0);
                     $902 = HEAP32[$901>>2]|0;
                     $903 = ($902|0)==(0|0);
                     if ($903) {
                      break;
                     } else {
                      $R$0$i$i = $902;$RP$0$i$i = $901;
                     }
                    }
                    $904 = $RP$0$i$i;
                    $905 = HEAP32[(((54496) + 16|0))>>2]|0;
                    $906 = ($904>>>0)<($905>>>0);
                    if ($906) {
                     _abort();
                     // unreachable;
                    } else {
                     HEAP32[$RP$0$i$i>>2] = 0;
                     $R$1$i$i = $R$0$i$i;
                     break;
                    }
                   } else {
                    $$sum3536$i$i = $805 | 8;
                    $$sum112$i = (($$sum3536$i$i) + ($tsize$246$i))|0;
                    $878 = (($tbase$247$i) + ($$sum112$i)|0);
                    $879 = $878;
                    $880 = HEAP32[$879>>2]|0;
                    $881 = $880;
                    $882 = HEAP32[(((54496) + 16|0))>>2]|0;
                    $883 = ($881>>>0)<($882>>>0);
                    if ($883) {
                     _abort();
                     // unreachable;
                    }
                    $884 = (($880) + 12|0);
                    $885 = HEAP32[$884>>2]|0;
                    $886 = ($885|0)==($870|0);
                    if (!($886)) {
                     _abort();
                     // unreachable;
                    }
                    $887 = (($876) + 8|0);
                    $888 = HEAP32[$887>>2]|0;
                    $889 = ($888|0)==($870|0);
                    if ($889) {
                     HEAP32[$884>>2] = $876;
                     HEAP32[$887>>2] = $880;
                     $R$1$i$i = $876;
                     break;
                    } else {
                     _abort();
                     // unreachable;
                    }
                   }
                  } while(0);
                  $907 = ($873|0)==(0|0);
                  if ($907) {
                   break;
                  }
                  $$sum30$i$i = (($tsize$246$i) + 28)|0;
                  $$sum113$i = (($$sum30$i$i) + ($805))|0;
                  $908 = (($tbase$247$i) + ($$sum113$i)|0);
                  $909 = $908;
                  $910 = HEAP32[$909>>2]|0;
                  $911 = (((54496) + ($910<<2)|0) + 304|0);
                  $912 = HEAP32[$911>>2]|0;
                  $913 = ($870|0)==($912|0);
                  do {
                   if ($913) {
                    HEAP32[$911>>2] = $R$1$i$i;
                    $cond$i$i = ($R$1$i$i|0)==(0|0);
                    if (!($cond$i$i)) {
                     break;
                    }
                    $914 = 1 << $910;
                    $915 = $914 ^ -1;
                    $916 = HEAP32[(((54496) + 4|0))>>2]|0;
                    $917 = $916 & $915;
                    HEAP32[(((54496) + 4|0))>>2] = $917;
                    break L356;
                   } else {
                    $918 = $873;
                    $919 = HEAP32[(((54496) + 16|0))>>2]|0;
                    $920 = ($918>>>0)<($919>>>0);
                    if ($920) {
                     _abort();
                     // unreachable;
                    }
                    $921 = (($873) + 16|0);
                    $922 = HEAP32[$921>>2]|0;
                    $923 = ($922|0)==($870|0);
                    if ($923) {
                     HEAP32[$921>>2] = $R$1$i$i;
                    } else {
                     $924 = (($873) + 20|0);
                     HEAP32[$924>>2] = $R$1$i$i;
                    }
                    $925 = ($R$1$i$i|0)==(0|0);
                    if ($925) {
                     break L356;
                    }
                   }
                  } while(0);
                  $926 = $R$1$i$i;
                  $927 = HEAP32[(((54496) + 16|0))>>2]|0;
                  $928 = ($926>>>0)<($927>>>0);
                  if ($928) {
                   _abort();
                   // unreachable;
                  }
                  $929 = (($R$1$i$i) + 24|0);
                  HEAP32[$929>>2] = $873;
                  $$sum3132$i$i = $805 | 16;
                  $$sum114$i = (($$sum3132$i$i) + ($tsize$246$i))|0;
                  $930 = (($tbase$247$i) + ($$sum114$i)|0);
                  $931 = $930;
                  $932 = HEAP32[$931>>2]|0;
                  $933 = ($932|0)==(0|0);
                  do {
                   if (!($933)) {
                    $934 = $932;
                    $935 = HEAP32[(((54496) + 16|0))>>2]|0;
                    $936 = ($934>>>0)<($935>>>0);
                    if ($936) {
                     _abort();
                     // unreachable;
                    } else {
                     $937 = (($R$1$i$i) + 16|0);
                     HEAP32[$937>>2] = $932;
                     $938 = (($932) + 24|0);
                     HEAP32[$938>>2] = $R$1$i$i;
                     break;
                    }
                   }
                  } while(0);
                  $$sum115$i = (($$sum2$i23$i) + ($$sum3132$i$i))|0;
                  $939 = (($tbase$247$i) + ($$sum115$i)|0);
                  $940 = $939;
                  $941 = HEAP32[$940>>2]|0;
                  $942 = ($941|0)==(0|0);
                  if ($942) {
                   break;
                  }
                  $943 = $941;
                  $944 = HEAP32[(((54496) + 16|0))>>2]|0;
                  $945 = ($943>>>0)<($944>>>0);
                  if ($945) {
                   _abort();
                   // unreachable;
                  } else {
                   $946 = (($R$1$i$i) + 20|0);
                   HEAP32[$946>>2] = $941;
                   $947 = (($941) + 24|0);
                   HEAP32[$947>>2] = $R$1$i$i;
                   break;
                  }
                 }
                } while(0);
                $$sum9$i$i = $838 | $805;
                $$sum116$i = (($$sum9$i$i) + ($tsize$246$i))|0;
                $948 = (($tbase$247$i) + ($$sum116$i)|0);
                $949 = $948;
                $950 = (($838) + ($813))|0;
                $oldfirst$0$i$i = $949;$qsize$0$i$i = $950;
               } else {
                $oldfirst$0$i$i = $807;$qsize$0$i$i = $813;
               }
               $951 = (($oldfirst$0$i$i) + 4|0);
               $952 = HEAP32[$951>>2]|0;
               $953 = $952 & -2;
               HEAP32[$951>>2] = $953;
               $954 = $qsize$0$i$i | 1;
               $$sum10$i$i = (($$sum$i21$i) + 4)|0;
               $955 = (($tbase$247$i) + ($$sum10$i$i)|0);
               $956 = $955;
               HEAP32[$956>>2] = $954;
               $$sum11$i24$i = (($qsize$0$i$i) + ($$sum$i21$i))|0;
               $957 = (($tbase$247$i) + ($$sum11$i24$i)|0);
               $958 = $957;
               HEAP32[$958>>2] = $qsize$0$i$i;
               $959 = $qsize$0$i$i >>> 3;
               $960 = ($qsize$0$i$i>>>0)<(256);
               if ($960) {
                $961 = $959 << 1;
                $962 = (((54496) + ($961<<2)|0) + 40|0);
                $963 = $962;
                $964 = HEAP32[((54496))>>2]|0;
                $965 = 1 << $959;
                $966 = $964 & $965;
                $967 = ($966|0)==(0);
                do {
                 if ($967) {
                  $968 = $964 | $965;
                  HEAP32[((54496))>>2] = $968;
                  $$sum26$pre$i$i = (($961) + 2)|0;
                  $$pre$i25$i = (((54496) + ($$sum26$pre$i$i<<2)|0) + 40|0);
                  $$pre$phi$i26$iZ2D = $$pre$i25$i;$F4$0$i$i = $963;
                 } else {
                  $$sum29$i$i = (($961) + 2)|0;
                  $969 = (((54496) + ($$sum29$i$i<<2)|0) + 40|0);
                  $970 = HEAP32[$969>>2]|0;
                  $971 = $970;
                  $972 = HEAP32[(((54496) + 16|0))>>2]|0;
                  $973 = ($971>>>0)<($972>>>0);
                  if (!($973)) {
                   $$pre$phi$i26$iZ2D = $969;$F4$0$i$i = $970;
                   break;
                  }
                  _abort();
                  // unreachable;
                 }
                } while(0);
                HEAP32[$$pre$phi$i26$iZ2D>>2] = $812;
                $974 = (($F4$0$i$i) + 12|0);
                HEAP32[$974>>2] = $812;
                $$sum27$i$i = (($$sum$i21$i) + 8)|0;
                $975 = (($tbase$247$i) + ($$sum27$i$i)|0);
                $976 = $975;
                HEAP32[$976>>2] = $F4$0$i$i;
                $$sum28$i$i = (($$sum$i21$i) + 12)|0;
                $977 = (($tbase$247$i) + ($$sum28$i$i)|0);
                $978 = $977;
                HEAP32[$978>>2] = $963;
                break;
               }
               $979 = $811;
               $980 = $qsize$0$i$i >>> 8;
               $981 = ($980|0)==(0);
               do {
                if ($981) {
                 $I7$0$i$i = 0;
                } else {
                 $982 = ($qsize$0$i$i>>>0)>(16777215);
                 if ($982) {
                  $I7$0$i$i = 31;
                  break;
                 }
                 $983 = (($980) + 1048320)|0;
                 $984 = $983 >>> 16;
                 $985 = $984 & 8;
                 $986 = $980 << $985;
                 $987 = (($986) + 520192)|0;
                 $988 = $987 >>> 16;
                 $989 = $988 & 4;
                 $990 = $989 | $985;
                 $991 = $986 << $989;
                 $992 = (($991) + 245760)|0;
                 $993 = $992 >>> 16;
                 $994 = $993 & 2;
                 $995 = $990 | $994;
                 $996 = (14 - ($995))|0;
                 $997 = $991 << $994;
                 $998 = $997 >>> 15;
                 $999 = (($996) + ($998))|0;
                 $1000 = $999 << 1;
                 $1001 = (($999) + 7)|0;
                 $1002 = $qsize$0$i$i >>> $1001;
                 $1003 = $1002 & 1;
                 $1004 = $1003 | $1000;
                 $I7$0$i$i = $1004;
                }
               } while(0);
               $1005 = (((54496) + ($I7$0$i$i<<2)|0) + 304|0);
               $$sum12$i$i = (($$sum$i21$i) + 28)|0;
               $1006 = (($tbase$247$i) + ($$sum12$i$i)|0);
               $1007 = $1006;
               HEAP32[$1007>>2] = $I7$0$i$i;
               $$sum13$i$i = (($$sum$i21$i) + 16)|0;
               $1008 = (($tbase$247$i) + ($$sum13$i$i)|0);
               $$sum14$i$i = (($$sum$i21$i) + 20)|0;
               $1009 = (($tbase$247$i) + ($$sum14$i$i)|0);
               $1010 = $1009;
               HEAP32[$1010>>2] = 0;
               $1011 = $1008;
               HEAP32[$1011>>2] = 0;
               $1012 = HEAP32[(((54496) + 4|0))>>2]|0;
               $1013 = 1 << $I7$0$i$i;
               $1014 = $1012 & $1013;
               $1015 = ($1014|0)==(0);
               if ($1015) {
                $1016 = $1012 | $1013;
                HEAP32[(((54496) + 4|0))>>2] = $1016;
                HEAP32[$1005>>2] = $979;
                $1017 = $1005;
                $$sum15$i$i = (($$sum$i21$i) + 24)|0;
                $1018 = (($tbase$247$i) + ($$sum15$i$i)|0);
                $1019 = $1018;
                HEAP32[$1019>>2] = $1017;
                $$sum16$i$i = (($$sum$i21$i) + 12)|0;
                $1020 = (($tbase$247$i) + ($$sum16$i$i)|0);
                $1021 = $1020;
                HEAP32[$1021>>2] = $979;
                $$sum17$i$i = (($$sum$i21$i) + 8)|0;
                $1022 = (($tbase$247$i) + ($$sum17$i$i)|0);
                $1023 = $1022;
                HEAP32[$1023>>2] = $979;
                break;
               }
               $1024 = HEAP32[$1005>>2]|0;
               $1025 = ($I7$0$i$i|0)==(31);
               if ($1025) {
                $1028 = 0;
               } else {
                $1026 = $I7$0$i$i >>> 1;
                $1027 = (25 - ($1026))|0;
                $1028 = $1027;
               }
               $1029 = (($1024) + 4|0);
               $1030 = HEAP32[$1029>>2]|0;
               $1031 = $1030 & -8;
               $1032 = ($1031|0)==($qsize$0$i$i|0);
               L445: do {
                if ($1032) {
                 $T$0$lcssa$i28$i = $1024;
                } else {
                 $1033 = $qsize$0$i$i << $1028;
                 $K8$052$i$i = $1033;$T$051$i$i = $1024;
                 while(1) {
                  $1039 = $K8$052$i$i >>> 31;
                  $1040 = ((($T$051$i$i) + ($1039<<2)|0) + 16|0);
                  $1041 = HEAP32[$1040>>2]|0;
                  $1042 = ($1041|0)==(0|0);
                  if ($1042) {
                   break;
                  }
                  $1034 = $K8$052$i$i << 1;
                  $1035 = (($1041) + 4|0);
                  $1036 = HEAP32[$1035>>2]|0;
                  $1037 = $1036 & -8;
                  $1038 = ($1037|0)==($qsize$0$i$i|0);
                  if ($1038) {
                   $T$0$lcssa$i28$i = $1041;
                   break L445;
                  } else {
                   $T$051$i$i$phi = $1041;$K8$052$i$i = $1034;$T$051$i$i = $T$051$i$i$phi;
                  }
                 }
                 $1043 = $1040;
                 $1044 = HEAP32[(((54496) + 16|0))>>2]|0;
                 $1045 = ($1043>>>0)<($1044>>>0);
                 if ($1045) {
                  _abort();
                  // unreachable;
                 } else {
                  HEAP32[$1040>>2] = $979;
                  $$sum23$i$i = (($$sum$i21$i) + 24)|0;
                  $1046 = (($tbase$247$i) + ($$sum23$i$i)|0);
                  $1047 = $1046;
                  HEAP32[$1047>>2] = $T$051$i$i;
                  $$sum24$i$i = (($$sum$i21$i) + 12)|0;
                  $1048 = (($tbase$247$i) + ($$sum24$i$i)|0);
                  $1049 = $1048;
                  HEAP32[$1049>>2] = $979;
                  $$sum25$i$i = (($$sum$i21$i) + 8)|0;
                  $1050 = (($tbase$247$i) + ($$sum25$i$i)|0);
                  $1051 = $1050;
                  HEAP32[$1051>>2] = $979;
                  break L348;
                 }
                }
               } while(0);
               $1052 = (($T$0$lcssa$i28$i) + 8|0);
               $1053 = HEAP32[$1052>>2]|0;
               $1054 = $T$0$lcssa$i28$i;
               $1055 = HEAP32[(((54496) + 16|0))>>2]|0;
               $1056 = ($1054>>>0)<($1055>>>0);
               if ($1056) {
                _abort();
                // unreachable;
               }
               $1057 = $1053;
               $1058 = ($1057>>>0)<($1055>>>0);
               if ($1058) {
                _abort();
                // unreachable;
               } else {
                $1059 = (($1053) + 12|0);
                HEAP32[$1059>>2] = $979;
                HEAP32[$1052>>2] = $979;
                $$sum20$i$i = (($$sum$i21$i) + 8)|0;
                $1060 = (($tbase$247$i) + ($$sum20$i$i)|0);
                $1061 = $1060;
                HEAP32[$1061>>2] = $1053;
                $$sum21$i$i = (($$sum$i21$i) + 12)|0;
                $1062 = (($tbase$247$i) + ($$sum21$i$i)|0);
                $1063 = $1062;
                HEAP32[$1063>>2] = $T$0$lcssa$i28$i;
                $$sum22$i$i = (($$sum$i21$i) + 24)|0;
                $1064 = (($tbase$247$i) + ($$sum22$i$i)|0);
                $1065 = $1064;
                HEAP32[$1065>>2] = 0;
                break;
               }
              }
             } while(0);
             $$sum1819$i$i = $797 | 8;
             $1066 = (($tbase$247$i) + ($$sum1819$i$i)|0);
             $mem$0 = $1066;
             STACKTOP = sp;return ($mem$0|0);
            }
           } while(0);
           $1067 = $711;
           $sp$0$i$i$i = (((54496) + 448|0));
           while(1) {
            $1068 = ($sp$0$i$i$i);
            $1069 = HEAP32[$1068>>2]|0;
            $1070 = ($1069>>>0)>($1067>>>0);
            if (!($1070)) {
             $1071 = (($sp$0$i$i$i) + 4|0);
             $1072 = HEAP32[$1071>>2]|0;
             $1073 = (($1069) + ($1072)|0);
             $1074 = ($1073>>>0)>($1067>>>0);
             if ($1074) {
              break;
             }
            }
            $1075 = (($sp$0$i$i$i) + 8|0);
            $1076 = HEAP32[$1075>>2]|0;
            $sp$0$i$i$i = $1076;
           }
           $$sum$i15$i = (($1072) + -47)|0;
           $$sum1$i16$i = (($1072) + -39)|0;
           $1077 = (($1069) + ($$sum1$i16$i)|0);
           $1078 = $1077;
           $1079 = $1078 & 7;
           $1080 = ($1079|0)==(0);
           if ($1080) {
            $1083 = 0;
           } else {
            $1081 = (0 - ($1078))|0;
            $1082 = $1081 & 7;
            $1083 = $1082;
           }
           $$sum2$i17$i = (($$sum$i15$i) + ($1083))|0;
           $1084 = (($1069) + ($$sum2$i17$i)|0);
           $1085 = (($711) + 16|0);
           $1086 = $1085;
           $1087 = ($1084>>>0)<($1086>>>0);
           $1088 = $1087 ? $1067 : $1084;
           $1089 = (($1088) + 8|0);
           $1090 = $1089;
           $1091 = (($tsize$246$i) + -40)|0;
           $1092 = (($tbase$247$i) + 8|0);
           $1093 = $1092;
           $1094 = $1093 & 7;
           $1095 = ($1094|0)==(0);
           if ($1095) {
            $1098 = 0;
           } else {
            $1096 = (0 - ($1093))|0;
            $1097 = $1096 & 7;
            $1098 = $1097;
           }
           $1099 = (($tbase$247$i) + ($1098)|0);
           $1100 = $1099;
           $1101 = (($1091) - ($1098))|0;
           HEAP32[(((54496) + 24|0))>>2] = $1100;
           HEAP32[(((54496) + 12|0))>>2] = $1101;
           $1102 = $1101 | 1;
           $$sum$i$i$i = (($1098) + 4)|0;
           $1103 = (($tbase$247$i) + ($$sum$i$i$i)|0);
           $1104 = $1103;
           HEAP32[$1104>>2] = $1102;
           $$sum2$i$i$i = (($tsize$246$i) + -36)|0;
           $1105 = (($tbase$247$i) + ($$sum2$i$i$i)|0);
           $1106 = $1105;
           HEAP32[$1106>>2] = 40;
           $1107 = HEAP32[(((54968) + 16|0))>>2]|0;
           HEAP32[(((54496) + 28|0))>>2] = $1107;
           $1108 = (($1088) + 4|0);
           $1109 = $1108;
           HEAP32[$1109>>2] = 27;
           ;HEAP32[$1089+0>>2]=HEAP32[((((54496) + 448|0)))+0>>2]|0;HEAP32[$1089+4>>2]=HEAP32[((((54496) + 448|0)))+4>>2]|0;HEAP32[$1089+8>>2]=HEAP32[((((54496) + 448|0)))+8>>2]|0;HEAP32[$1089+12>>2]=HEAP32[((((54496) + 448|0)))+12>>2]|0;
           HEAP32[(((54496) + 448|0))>>2] = $tbase$247$i;
           HEAP32[(((54496) + 452|0))>>2] = $tsize$246$i;
           HEAP32[(((54496) + 460|0))>>2] = 0;
           HEAP32[(((54496) + 456|0))>>2] = $1090;
           $1110 = (($1088) + 28|0);
           $1111 = $1110;
           HEAP32[$1111>>2] = 7;
           $1112 = (($1088) + 32|0);
           $1113 = ($1112>>>0)<($1073>>>0);
           if ($1113) {
            $1114 = $1111;
            while(1) {
             $1115 = (($1114) + 4|0);
             HEAP32[$1115>>2] = 7;
             $1116 = (($1114) + 8|0);
             $1117 = $1116;
             $1118 = ($1117>>>0)<($1073>>>0);
             if ($1118) {
              $1114$phi = $1115;$1114 = $1114$phi;
             } else {
              break;
             }
            }
           }
           $1119 = ($1088|0)==($1067|0);
           if ($1119) {
            break;
           }
           $1120 = $1088;
           $1121 = $711;
           $1122 = (($1120) - ($1121))|0;
           $1123 = (($1067) + ($1122)|0);
           $$sum3$i$i = (($1122) + 4)|0;
           $1124 = (($1067) + ($$sum3$i$i)|0);
           $1125 = $1124;
           $1126 = HEAP32[$1125>>2]|0;
           $1127 = $1126 & -2;
           HEAP32[$1125>>2] = $1127;
           $1128 = $1122 | 1;
           $1129 = (($711) + 4|0);
           HEAP32[$1129>>2] = $1128;
           $1130 = $1123;
           HEAP32[$1130>>2] = $1122;
           $1131 = $1122 >>> 3;
           $1132 = ($1122>>>0)<(256);
           if ($1132) {
            $1133 = $1131 << 1;
            $1134 = (((54496) + ($1133<<2)|0) + 40|0);
            $1135 = $1134;
            $1136 = HEAP32[((54496))>>2]|0;
            $1137 = 1 << $1131;
            $1138 = $1136 & $1137;
            $1139 = ($1138|0)==(0);
            do {
             if ($1139) {
              $1140 = $1136 | $1137;
              HEAP32[((54496))>>2] = $1140;
              $$sum10$pre$i$i = (($1133) + 2)|0;
              $$pre$i$i = (((54496) + ($$sum10$pre$i$i<<2)|0) + 40|0);
              $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $1135;
             } else {
              $$sum11$i$i = (($1133) + 2)|0;
              $1141 = (((54496) + ($$sum11$i$i<<2)|0) + 40|0);
              $1142 = HEAP32[$1141>>2]|0;
              $1143 = $1142;
              $1144 = HEAP32[(((54496) + 16|0))>>2]|0;
              $1145 = ($1143>>>0)<($1144>>>0);
              if (!($1145)) {
               $$pre$phi$i$iZ2D = $1141;$F$0$i$i = $1142;
               break;
              }
              _abort();
              // unreachable;
             }
            } while(0);
            HEAP32[$$pre$phi$i$iZ2D>>2] = $711;
            $1146 = (($F$0$i$i) + 12|0);
            HEAP32[$1146>>2] = $711;
            $1147 = (($711) + 8|0);
            HEAP32[$1147>>2] = $F$0$i$i;
            $1148 = (($711) + 12|0);
            HEAP32[$1148>>2] = $1135;
            break;
           }
           $1149 = $711;
           $1150 = $1122 >>> 8;
           $1151 = ($1150|0)==(0);
           do {
            if ($1151) {
             $I1$0$i$i = 0;
            } else {
             $1152 = ($1122>>>0)>(16777215);
             if ($1152) {
              $I1$0$i$i = 31;
              break;
             }
             $1153 = (($1150) + 1048320)|0;
             $1154 = $1153 >>> 16;
             $1155 = $1154 & 8;
             $1156 = $1150 << $1155;
             $1157 = (($1156) + 520192)|0;
             $1158 = $1157 >>> 16;
             $1159 = $1158 & 4;
             $1160 = $1159 | $1155;
             $1161 = $1156 << $1159;
             $1162 = (($1161) + 245760)|0;
             $1163 = $1162 >>> 16;
             $1164 = $1163 & 2;
             $1165 = $1160 | $1164;
             $1166 = (14 - ($1165))|0;
             $1167 = $1161 << $1164;
             $1168 = $1167 >>> 15;
             $1169 = (($1166) + ($1168))|0;
             $1170 = $1169 << 1;
             $1171 = (($1169) + 7)|0;
             $1172 = $1122 >>> $1171;
             $1173 = $1172 & 1;
             $1174 = $1173 | $1170;
             $I1$0$i$i = $1174;
            }
           } while(0);
           $1175 = (((54496) + ($I1$0$i$i<<2)|0) + 304|0);
           $1176 = (($711) + 28|0);
           $I1$0$c$i$i = $I1$0$i$i;
           HEAP32[$1176>>2] = $I1$0$c$i$i;
           $1177 = (($711) + 20|0);
           HEAP32[$1177>>2] = 0;
           $1178 = (($711) + 16|0);
           HEAP32[$1178>>2] = 0;
           $1179 = HEAP32[(((54496) + 4|0))>>2]|0;
           $1180 = 1 << $I1$0$i$i;
           $1181 = $1179 & $1180;
           $1182 = ($1181|0)==(0);
           if ($1182) {
            $1183 = $1179 | $1180;
            HEAP32[(((54496) + 4|0))>>2] = $1183;
            HEAP32[$1175>>2] = $1149;
            $1184 = (($711) + 24|0);
            $$c$i$i = $1175;
            HEAP32[$1184>>2] = $$c$i$i;
            $1185 = (($711) + 12|0);
            HEAP32[$1185>>2] = $711;
            $1186 = (($711) + 8|0);
            HEAP32[$1186>>2] = $711;
            break;
           }
           $1187 = HEAP32[$1175>>2]|0;
           $1188 = ($I1$0$i$i|0)==(31);
           if ($1188) {
            $1191 = 0;
           } else {
            $1189 = $I1$0$i$i >>> 1;
            $1190 = (25 - ($1189))|0;
            $1191 = $1190;
           }
           $1192 = (($1187) + 4|0);
           $1193 = HEAP32[$1192>>2]|0;
           $1194 = $1193 & -8;
           $1195 = ($1194|0)==($1122|0);
           L499: do {
            if ($1195) {
             $T$0$lcssa$i$i = $1187;
            } else {
             $1196 = $1122 << $1191;
             $K2$014$i$i = $1196;$T$013$i$i = $1187;
             while(1) {
              $1202 = $K2$014$i$i >>> 31;
              $1203 = ((($T$013$i$i) + ($1202<<2)|0) + 16|0);
              $1204 = HEAP32[$1203>>2]|0;
              $1205 = ($1204|0)==(0|0);
              if ($1205) {
               break;
              }
              $1197 = $K2$014$i$i << 1;
              $1198 = (($1204) + 4|0);
              $1199 = HEAP32[$1198>>2]|0;
              $1200 = $1199 & -8;
              $1201 = ($1200|0)==($1122|0);
              if ($1201) {
               $T$0$lcssa$i$i = $1204;
               break L499;
              } else {
               $T$013$i$i$phi = $1204;$K2$014$i$i = $1197;$T$013$i$i = $T$013$i$i$phi;
              }
             }
             $1206 = $1203;
             $1207 = HEAP32[(((54496) + 16|0))>>2]|0;
             $1208 = ($1206>>>0)<($1207>>>0);
             if ($1208) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$1203>>2] = $1149;
              $1209 = (($711) + 24|0);
              $T$0$c7$i$i = $T$013$i$i;
              HEAP32[$1209>>2] = $T$0$c7$i$i;
              $1210 = (($711) + 12|0);
              HEAP32[$1210>>2] = $711;
              $1211 = (($711) + 8|0);
              HEAP32[$1211>>2] = $711;
              break L311;
             }
            }
           } while(0);
           $1212 = (($T$0$lcssa$i$i) + 8|0);
           $1213 = HEAP32[$1212>>2]|0;
           $1214 = $T$0$lcssa$i$i;
           $1215 = HEAP32[(((54496) + 16|0))>>2]|0;
           $1216 = ($1214>>>0)<($1215>>>0);
           if ($1216) {
            _abort();
            // unreachable;
           }
           $1217 = $1213;
           $1218 = ($1217>>>0)<($1215>>>0);
           if ($1218) {
            _abort();
            // unreachable;
           } else {
            $1219 = (($1213) + 12|0);
            HEAP32[$1219>>2] = $1149;
            HEAP32[$1212>>2] = $1149;
            $1220 = (($711) + 8|0);
            $$c6$i$i = $1213;
            HEAP32[$1220>>2] = $$c6$i$i;
            $1221 = (($711) + 12|0);
            $T$0$c$i$i = $T$0$lcssa$i$i;
            HEAP32[$1221>>2] = $T$0$c$i$i;
            $1222 = (($711) + 24|0);
            HEAP32[$1222>>2] = 0;
            break;
           }
          }
         } while(0);
         $1223 = HEAP32[(((54496) + 12|0))>>2]|0;
         $1224 = ($1223>>>0)>($nb$0>>>0);
         if (!($1224)) {
          break;
         }
         $1225 = (($1223) - ($nb$0))|0;
         HEAP32[(((54496) + 12|0))>>2] = $1225;
         $1226 = HEAP32[(((54496) + 24|0))>>2]|0;
         $1227 = $1226;
         $1228 = (($1227) + ($nb$0)|0);
         $1229 = $1228;
         HEAP32[(((54496) + 24|0))>>2] = $1229;
         $1230 = $1225 | 1;
         $$sum$i32 = (($nb$0) + 4)|0;
         $1231 = (($1227) + ($$sum$i32)|0);
         $1232 = $1231;
         HEAP32[$1232>>2] = $1230;
         $1233 = $nb$0 | 3;
         $1234 = (($1226) + 4|0);
         HEAP32[$1234>>2] = $1233;
         $1235 = (($1226) + 8|0);
         $1236 = $1235;
         $mem$0 = $1236;
         STACKTOP = sp;return ($mem$0|0);
        }
       } while(0);
       $1237 = (___errno_location()|0);
       HEAP32[$1237>>2] = 12;
       $mem$0 = 0;
       STACKTOP = sp;return ($mem$0|0);
      }
      function _free($mem) {
       $mem = $mem|0;
       var $$c = 0, $$c12 = 0, $$pre = 0, $$pre$phi68Z2D = 0, $$pre$phi70Z2D = 0, $$pre$phiZ2D = 0, $$pre67 = 0, $$pre69 = 0, $$sum = 0, $$sum16$pre = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum2324 = 0, $$sum25 = 0, $$sum26 = 0, $$sum28 = 0, $$sum29 = 0;
       var $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum32 = 0, $$sum33 = 0, $$sum34 = 0, $$sum35 = 0, $$sum36 = 0, $$sum37 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
       var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
       var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
       var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
       var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
       var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
       var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
       var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
       var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
       var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
       var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
       var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
       var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
       var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
       var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
       var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
       var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
       var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
       var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
       var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $I18$0$c = 0;
       var $K19$057 = 0, $R$0 = 0, $R$0$phi = 0, $R$1 = 0, $R7$0 = 0, $R7$0$phi = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$phi = 0, $RP9$0 = 0, $RP9$0$phi = 0, $T$0$c = 0, $T$0$c13 = 0, $T$0$lcssa = 0, $T$056 = 0, $T$056$phi = 0, $cond = 0, $cond54 = 0, $p$0 = 0, $psize$0 = 0;
       var $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, $sp$0$in$i$phi = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($mem|0)==(0|0);
       if ($1) {
        STACKTOP = sp;return;
       }
       $2 = (($mem) + -8|0);
       $3 = $2;
       $4 = HEAP32[(((54496) + 16|0))>>2]|0;
       $5 = ($2>>>0)<($4>>>0);
       if ($5) {
        _abort();
        // unreachable;
       }
       $6 = (($mem) + -4|0);
       $7 = $6;
       $8 = HEAP32[$7>>2]|0;
       $9 = $8 & 3;
       $10 = ($9|0)==(1);
       if ($10) {
        _abort();
        // unreachable;
       }
       $11 = $8 & -8;
       $$sum = (($11) + -8)|0;
       $12 = (($mem) + ($$sum)|0);
       $13 = $12;
       $14 = $8 & 1;
       $15 = ($14|0)==(0);
       L10: do {
        if ($15) {
         $16 = $2;
         $17 = HEAP32[$16>>2]|0;
         $18 = ($9|0)==(0);
         if ($18) {
          STACKTOP = sp;return;
         }
         $$sum2 = (-8 - ($17))|0;
         $19 = (($mem) + ($$sum2)|0);
         $20 = $19;
         $21 = (($17) + ($11))|0;
         $22 = ($19>>>0)<($4>>>0);
         if ($22) {
          _abort();
          // unreachable;
         }
         $23 = HEAP32[(((54496) + 20|0))>>2]|0;
         $24 = ($20|0)==($23|0);
         if ($24) {
          $$sum3 = (($11) + -4)|0;
          $130 = (($mem) + ($$sum3)|0);
          $131 = $130;
          $132 = HEAP32[$131>>2]|0;
          $133 = $132 & 3;
          $134 = ($133|0)==(3);
          if (!($134)) {
           $p$0 = $20;$psize$0 = $21;
           break;
          }
          HEAP32[(((54496) + 8|0))>>2] = $21;
          $135 = HEAP32[$131>>2]|0;
          $136 = $135 & -2;
          HEAP32[$131>>2] = $136;
          $137 = $21 | 1;
          $$sum26 = (($$sum2) + 4)|0;
          $138 = (($mem) + ($$sum26)|0);
          $139 = $138;
          HEAP32[$139>>2] = $137;
          $140 = $12;
          HEAP32[$140>>2] = $21;
          STACKTOP = sp;return;
         }
         $25 = $17 >>> 3;
         $26 = ($17>>>0)<(256);
         if ($26) {
          $$sum36 = (($$sum2) + 8)|0;
          $27 = (($mem) + ($$sum36)|0);
          $28 = $27;
          $29 = HEAP32[$28>>2]|0;
          $$sum37 = (($$sum2) + 12)|0;
          $30 = (($mem) + ($$sum37)|0);
          $31 = $30;
          $32 = HEAP32[$31>>2]|0;
          $33 = $25 << 1;
          $34 = (((54496) + ($33<<2)|0) + 40|0);
          $35 = $34;
          $36 = ($29|0)==($35|0);
          do {
           if (!($36)) {
            $37 = $29;
            $38 = ($37>>>0)<($4>>>0);
            if ($38) {
             _abort();
             // unreachable;
            }
            $39 = (($29) + 12|0);
            $40 = HEAP32[$39>>2]|0;
            $41 = ($40|0)==($20|0);
            if ($41) {
             break;
            }
            _abort();
            // unreachable;
           }
          } while(0);
          $42 = ($32|0)==($29|0);
          if ($42) {
           $43 = 1 << $25;
           $44 = $43 ^ -1;
           $45 = HEAP32[((54496))>>2]|0;
           $46 = $45 & $44;
           HEAP32[((54496))>>2] = $46;
           $p$0 = $20;$psize$0 = $21;
           break;
          }
          $47 = ($32|0)==($35|0);
          do {
           if ($47) {
            $$pre69 = (($32) + 8|0);
            $$pre$phi70Z2D = $$pre69;
           } else {
            $48 = $32;
            $49 = ($48>>>0)<($4>>>0);
            if ($49) {
             _abort();
             // unreachable;
            }
            $50 = (($32) + 8|0);
            $51 = HEAP32[$50>>2]|0;
            $52 = ($51|0)==($20|0);
            if ($52) {
             $$pre$phi70Z2D = $50;
             break;
            }
            _abort();
            // unreachable;
           }
          } while(0);
          $53 = (($29) + 12|0);
          HEAP32[$53>>2] = $32;
          HEAP32[$$pre$phi70Z2D>>2] = $29;
          $p$0 = $20;$psize$0 = $21;
          break;
         }
         $54 = $19;
         $$sum28 = (($$sum2) + 24)|0;
         $55 = (($mem) + ($$sum28)|0);
         $56 = $55;
         $57 = HEAP32[$56>>2]|0;
         $$sum29 = (($$sum2) + 12)|0;
         $58 = (($mem) + ($$sum29)|0);
         $59 = $58;
         $60 = HEAP32[$59>>2]|0;
         $61 = ($60|0)==($54|0);
         do {
          if ($61) {
           $$sum31 = (($$sum2) + 20)|0;
           $73 = (($mem) + ($$sum31)|0);
           $74 = $73;
           $75 = HEAP32[$74>>2]|0;
           $76 = ($75|0)==(0|0);
           if ($76) {
            $$sum30 = (($$sum2) + 16)|0;
            $77 = (($mem) + ($$sum30)|0);
            $78 = $77;
            $79 = HEAP32[$78>>2]|0;
            $80 = ($79|0)==(0|0);
            if ($80) {
             $R$1 = 0;
             break;
            } else {
             $R$0 = $79;$RP$0 = $78;
            }
           } else {
            $R$0 = $75;$RP$0 = $74;
           }
           while(1) {
            $81 = (($R$0) + 20|0);
            $82 = HEAP32[$81>>2]|0;
            $83 = ($82|0)==(0|0);
            if (!($83)) {
             $RP$0$phi = $81;$R$0$phi = $82;$RP$0 = $RP$0$phi;$R$0 = $R$0$phi;
             continue;
            }
            $84 = (($R$0) + 16|0);
            $85 = HEAP32[$84>>2]|0;
            $86 = ($85|0)==(0|0);
            if ($86) {
             break;
            } else {
             $R$0 = $85;$RP$0 = $84;
            }
           }
           $87 = $RP$0;
           $88 = ($87>>>0)<($4>>>0);
           if ($88) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$RP$0>>2] = 0;
            $R$1 = $R$0;
            break;
           }
          } else {
           $$sum35 = (($$sum2) + 8)|0;
           $62 = (($mem) + ($$sum35)|0);
           $63 = $62;
           $64 = HEAP32[$63>>2]|0;
           $65 = $64;
           $66 = ($65>>>0)<($4>>>0);
           if ($66) {
            _abort();
            // unreachable;
           }
           $67 = (($64) + 12|0);
           $68 = HEAP32[$67>>2]|0;
           $69 = ($68|0)==($54|0);
           if (!($69)) {
            _abort();
            // unreachable;
           }
           $70 = (($60) + 8|0);
           $71 = HEAP32[$70>>2]|0;
           $72 = ($71|0)==($54|0);
           if ($72) {
            HEAP32[$67>>2] = $60;
            HEAP32[$70>>2] = $64;
            $R$1 = $60;
            break;
           } else {
            _abort();
            // unreachable;
           }
          }
         } while(0);
         $89 = ($57|0)==(0|0);
         if ($89) {
          $p$0 = $20;$psize$0 = $21;
          break;
         }
         $$sum32 = (($$sum2) + 28)|0;
         $90 = (($mem) + ($$sum32)|0);
         $91 = $90;
         $92 = HEAP32[$91>>2]|0;
         $93 = (((54496) + ($92<<2)|0) + 304|0);
         $94 = HEAP32[$93>>2]|0;
         $95 = ($54|0)==($94|0);
         do {
          if ($95) {
           HEAP32[$93>>2] = $R$1;
           $cond = ($R$1|0)==(0|0);
           if (!($cond)) {
            break;
           }
           $96 = 1 << $92;
           $97 = $96 ^ -1;
           $98 = HEAP32[(((54496) + 4|0))>>2]|0;
           $99 = $98 & $97;
           HEAP32[(((54496) + 4|0))>>2] = $99;
           $p$0 = $20;$psize$0 = $21;
           break L10;
          } else {
           $100 = $57;
           $101 = HEAP32[(((54496) + 16|0))>>2]|0;
           $102 = ($100>>>0)<($101>>>0);
           if ($102) {
            _abort();
            // unreachable;
           }
           $103 = (($57) + 16|0);
           $104 = HEAP32[$103>>2]|0;
           $105 = ($104|0)==($54|0);
           if ($105) {
            HEAP32[$103>>2] = $R$1;
           } else {
            $106 = (($57) + 20|0);
            HEAP32[$106>>2] = $R$1;
           }
           $107 = ($R$1|0)==(0|0);
           if ($107) {
            $p$0 = $20;$psize$0 = $21;
            break L10;
           }
          }
         } while(0);
         $108 = $R$1;
         $109 = HEAP32[(((54496) + 16|0))>>2]|0;
         $110 = ($108>>>0)<($109>>>0);
         if ($110) {
          _abort();
          // unreachable;
         }
         $111 = (($R$1) + 24|0);
         HEAP32[$111>>2] = $57;
         $$sum33 = (($$sum2) + 16)|0;
         $112 = (($mem) + ($$sum33)|0);
         $113 = $112;
         $114 = HEAP32[$113>>2]|0;
         $115 = ($114|0)==(0|0);
         do {
          if (!($115)) {
           $116 = $114;
           $117 = HEAP32[(((54496) + 16|0))>>2]|0;
           $118 = ($116>>>0)<($117>>>0);
           if ($118) {
            _abort();
            // unreachable;
           } else {
            $119 = (($R$1) + 16|0);
            HEAP32[$119>>2] = $114;
            $120 = (($114) + 24|0);
            HEAP32[$120>>2] = $R$1;
            break;
           }
          }
         } while(0);
         $$sum34 = (($$sum2) + 20)|0;
         $121 = (($mem) + ($$sum34)|0);
         $122 = $121;
         $123 = HEAP32[$122>>2]|0;
         $124 = ($123|0)==(0|0);
         if ($124) {
          $p$0 = $20;$psize$0 = $21;
          break;
         }
         $125 = $123;
         $126 = HEAP32[(((54496) + 16|0))>>2]|0;
         $127 = ($125>>>0)<($126>>>0);
         if ($127) {
          _abort();
          // unreachable;
         } else {
          $128 = (($R$1) + 20|0);
          HEAP32[$128>>2] = $123;
          $129 = (($123) + 24|0);
          HEAP32[$129>>2] = $R$1;
          $p$0 = $20;$psize$0 = $21;
          break;
         }
        } else {
         $p$0 = $3;$psize$0 = $11;
        }
       } while(0);
       $141 = $p$0;
       $142 = ($141>>>0)<($12>>>0);
       if (!($142)) {
        _abort();
        // unreachable;
       }
       $$sum25 = (($11) + -4)|0;
       $143 = (($mem) + ($$sum25)|0);
       $144 = $143;
       $145 = HEAP32[$144>>2]|0;
       $146 = $145 & 1;
       $147 = ($146|0)==(0);
       if ($147) {
        _abort();
        // unreachable;
       }
       $148 = $145 & 2;
       $149 = ($148|0)==(0);
       do {
        if ($149) {
         $150 = HEAP32[(((54496) + 24|0))>>2]|0;
         $151 = ($13|0)==($150|0);
         if ($151) {
          $152 = HEAP32[(((54496) + 12|0))>>2]|0;
          $153 = (($152) + ($psize$0))|0;
          HEAP32[(((54496) + 12|0))>>2] = $153;
          HEAP32[(((54496) + 24|0))>>2] = $p$0;
          $154 = $153 | 1;
          $155 = (($p$0) + 4|0);
          HEAP32[$155>>2] = $154;
          $156 = HEAP32[(((54496) + 20|0))>>2]|0;
          $157 = ($p$0|0)==($156|0);
          if (!($157)) {
           STACKTOP = sp;return;
          }
          HEAP32[(((54496) + 20|0))>>2] = 0;
          HEAP32[(((54496) + 8|0))>>2] = 0;
          STACKTOP = sp;return;
         }
         $158 = HEAP32[(((54496) + 20|0))>>2]|0;
         $159 = ($13|0)==($158|0);
         if ($159) {
          $160 = HEAP32[(((54496) + 8|0))>>2]|0;
          $161 = (($160) + ($psize$0))|0;
          HEAP32[(((54496) + 8|0))>>2] = $161;
          HEAP32[(((54496) + 20|0))>>2] = $p$0;
          $162 = $161 | 1;
          $163 = (($p$0) + 4|0);
          HEAP32[$163>>2] = $162;
          $164 = (($141) + ($161)|0);
          $165 = $164;
          HEAP32[$165>>2] = $161;
          STACKTOP = sp;return;
         }
         $166 = $145 & -8;
         $167 = (($166) + ($psize$0))|0;
         $168 = $145 >>> 3;
         $169 = ($145>>>0)<(256);
         L113: do {
          if ($169) {
           $170 = (($mem) + ($11)|0);
           $171 = $170;
           $172 = HEAP32[$171>>2]|0;
           $$sum2324 = $11 | 4;
           $173 = (($mem) + ($$sum2324)|0);
           $174 = $173;
           $175 = HEAP32[$174>>2]|0;
           $176 = $168 << 1;
           $177 = (((54496) + ($176<<2)|0) + 40|0);
           $178 = $177;
           $179 = ($172|0)==($178|0);
           do {
            if (!($179)) {
             $180 = $172;
             $181 = HEAP32[(((54496) + 16|0))>>2]|0;
             $182 = ($180>>>0)<($181>>>0);
             if ($182) {
              _abort();
              // unreachable;
             }
             $183 = (($172) + 12|0);
             $184 = HEAP32[$183>>2]|0;
             $185 = ($184|0)==($13|0);
             if ($185) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $186 = ($175|0)==($172|0);
           if ($186) {
            $187 = 1 << $168;
            $188 = $187 ^ -1;
            $189 = HEAP32[((54496))>>2]|0;
            $190 = $189 & $188;
            HEAP32[((54496))>>2] = $190;
            break;
           }
           $191 = ($175|0)==($178|0);
           do {
            if ($191) {
             $$pre67 = (($175) + 8|0);
             $$pre$phi68Z2D = $$pre67;
            } else {
             $192 = $175;
             $193 = HEAP32[(((54496) + 16|0))>>2]|0;
             $194 = ($192>>>0)<($193>>>0);
             if ($194) {
              _abort();
              // unreachable;
             }
             $195 = (($175) + 8|0);
             $196 = HEAP32[$195>>2]|0;
             $197 = ($196|0)==($13|0);
             if ($197) {
              $$pre$phi68Z2D = $195;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $198 = (($172) + 12|0);
           HEAP32[$198>>2] = $175;
           HEAP32[$$pre$phi68Z2D>>2] = $172;
          } else {
           $199 = $12;
           $$sum5 = (($11) + 16)|0;
           $200 = (($mem) + ($$sum5)|0);
           $201 = $200;
           $202 = HEAP32[$201>>2]|0;
           $$sum67 = $11 | 4;
           $203 = (($mem) + ($$sum67)|0);
           $204 = $203;
           $205 = HEAP32[$204>>2]|0;
           $206 = ($205|0)==($199|0);
           do {
            if ($206) {
             $$sum9 = (($11) + 12)|0;
             $219 = (($mem) + ($$sum9)|0);
             $220 = $219;
             $221 = HEAP32[$220>>2]|0;
             $222 = ($221|0)==(0|0);
             if ($222) {
              $$sum8 = (($11) + 8)|0;
              $223 = (($mem) + ($$sum8)|0);
              $224 = $223;
              $225 = HEAP32[$224>>2]|0;
              $226 = ($225|0)==(0|0);
              if ($226) {
               $R7$1 = 0;
               break;
              } else {
               $R7$0 = $225;$RP9$0 = $224;
              }
             } else {
              $R7$0 = $221;$RP9$0 = $220;
             }
             while(1) {
              $227 = (($R7$0) + 20|0);
              $228 = HEAP32[$227>>2]|0;
              $229 = ($228|0)==(0|0);
              if (!($229)) {
               $RP9$0$phi = $227;$R7$0$phi = $228;$RP9$0 = $RP9$0$phi;$R7$0 = $R7$0$phi;
               continue;
              }
              $230 = (($R7$0) + 16|0);
              $231 = HEAP32[$230>>2]|0;
              $232 = ($231|0)==(0|0);
              if ($232) {
               break;
              } else {
               $R7$0 = $231;$RP9$0 = $230;
              }
             }
             $233 = $RP9$0;
             $234 = HEAP32[(((54496) + 16|0))>>2]|0;
             $235 = ($233>>>0)<($234>>>0);
             if ($235) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP9$0>>2] = 0;
              $R7$1 = $R7$0;
              break;
             }
            } else {
             $207 = (($mem) + ($11)|0);
             $208 = $207;
             $209 = HEAP32[$208>>2]|0;
             $210 = $209;
             $211 = HEAP32[(((54496) + 16|0))>>2]|0;
             $212 = ($210>>>0)<($211>>>0);
             if ($212) {
              _abort();
              // unreachable;
             }
             $213 = (($209) + 12|0);
             $214 = HEAP32[$213>>2]|0;
             $215 = ($214|0)==($199|0);
             if (!($215)) {
              _abort();
              // unreachable;
             }
             $216 = (($205) + 8|0);
             $217 = HEAP32[$216>>2]|0;
             $218 = ($217|0)==($199|0);
             if ($218) {
              HEAP32[$213>>2] = $205;
              HEAP32[$216>>2] = $209;
              $R7$1 = $205;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $236 = ($202|0)==(0|0);
           if ($236) {
            break;
           }
           $$sum18 = (($11) + 20)|0;
           $237 = (($mem) + ($$sum18)|0);
           $238 = $237;
           $239 = HEAP32[$238>>2]|0;
           $240 = (((54496) + ($239<<2)|0) + 304|0);
           $241 = HEAP32[$240>>2]|0;
           $242 = ($199|0)==($241|0);
           do {
            if ($242) {
             HEAP32[$240>>2] = $R7$1;
             $cond54 = ($R7$1|0)==(0|0);
             if (!($cond54)) {
              break;
             }
             $243 = 1 << $239;
             $244 = $243 ^ -1;
             $245 = HEAP32[(((54496) + 4|0))>>2]|0;
             $246 = $245 & $244;
             HEAP32[(((54496) + 4|0))>>2] = $246;
             break L113;
            } else {
             $247 = $202;
             $248 = HEAP32[(((54496) + 16|0))>>2]|0;
             $249 = ($247>>>0)<($248>>>0);
             if ($249) {
              _abort();
              // unreachable;
             }
             $250 = (($202) + 16|0);
             $251 = HEAP32[$250>>2]|0;
             $252 = ($251|0)==($199|0);
             if ($252) {
              HEAP32[$250>>2] = $R7$1;
             } else {
              $253 = (($202) + 20|0);
              HEAP32[$253>>2] = $R7$1;
             }
             $254 = ($R7$1|0)==(0|0);
             if ($254) {
              break L113;
             }
            }
           } while(0);
           $255 = $R7$1;
           $256 = HEAP32[(((54496) + 16|0))>>2]|0;
           $257 = ($255>>>0)<($256>>>0);
           if ($257) {
            _abort();
            // unreachable;
           }
           $258 = (($R7$1) + 24|0);
           HEAP32[$258>>2] = $202;
           $$sum19 = (($11) + 8)|0;
           $259 = (($mem) + ($$sum19)|0);
           $260 = $259;
           $261 = HEAP32[$260>>2]|0;
           $262 = ($261|0)==(0|0);
           do {
            if (!($262)) {
             $263 = $261;
             $264 = HEAP32[(((54496) + 16|0))>>2]|0;
             $265 = ($263>>>0)<($264>>>0);
             if ($265) {
              _abort();
              // unreachable;
             } else {
              $266 = (($R7$1) + 16|0);
              HEAP32[$266>>2] = $261;
              $267 = (($261) + 24|0);
              HEAP32[$267>>2] = $R7$1;
              break;
             }
            }
           } while(0);
           $$sum20 = (($11) + 12)|0;
           $268 = (($mem) + ($$sum20)|0);
           $269 = $268;
           $270 = HEAP32[$269>>2]|0;
           $271 = ($270|0)==(0|0);
           if ($271) {
            break;
           }
           $272 = $270;
           $273 = HEAP32[(((54496) + 16|0))>>2]|0;
           $274 = ($272>>>0)<($273>>>0);
           if ($274) {
            _abort();
            // unreachable;
           } else {
            $275 = (($R7$1) + 20|0);
            HEAP32[$275>>2] = $270;
            $276 = (($270) + 24|0);
            HEAP32[$276>>2] = $R7$1;
            break;
           }
          }
         } while(0);
         $277 = $167 | 1;
         $278 = (($p$0) + 4|0);
         HEAP32[$278>>2] = $277;
         $279 = (($141) + ($167)|0);
         $280 = $279;
         HEAP32[$280>>2] = $167;
         $281 = HEAP32[(((54496) + 20|0))>>2]|0;
         $282 = ($p$0|0)==($281|0);
         if (!($282)) {
          $psize$1 = $167;
          break;
         }
         HEAP32[(((54496) + 8|0))>>2] = $167;
         STACKTOP = sp;return;
        } else {
         $283 = $145 & -2;
         HEAP32[$144>>2] = $283;
         $284 = $psize$0 | 1;
         $285 = (($p$0) + 4|0);
         HEAP32[$285>>2] = $284;
         $286 = (($141) + ($psize$0)|0);
         $287 = $286;
         HEAP32[$287>>2] = $psize$0;
         $psize$1 = $psize$0;
        }
       } while(0);
       $288 = $psize$1 >>> 3;
       $289 = ($psize$1>>>0)<(256);
       if ($289) {
        $290 = $288 << 1;
        $291 = (((54496) + ($290<<2)|0) + 40|0);
        $292 = $291;
        $293 = HEAP32[((54496))>>2]|0;
        $294 = 1 << $288;
        $295 = $293 & $294;
        $296 = ($295|0)==(0);
        do {
         if ($296) {
          $297 = $293 | $294;
          HEAP32[((54496))>>2] = $297;
          $$sum16$pre = (($290) + 2)|0;
          $$pre = (((54496) + ($$sum16$pre<<2)|0) + 40|0);
          $$pre$phiZ2D = $$pre;$F16$0 = $292;
         } else {
          $$sum17 = (($290) + 2)|0;
          $298 = (((54496) + ($$sum17<<2)|0) + 40|0);
          $299 = HEAP32[$298>>2]|0;
          $300 = $299;
          $301 = HEAP32[(((54496) + 16|0))>>2]|0;
          $302 = ($300>>>0)<($301>>>0);
          if (!($302)) {
           $$pre$phiZ2D = $298;$F16$0 = $299;
           break;
          }
          _abort();
          // unreachable;
         }
        } while(0);
        HEAP32[$$pre$phiZ2D>>2] = $p$0;
        $303 = (($F16$0) + 12|0);
        HEAP32[$303>>2] = $p$0;
        $304 = (($p$0) + 8|0);
        HEAP32[$304>>2] = $F16$0;
        $305 = (($p$0) + 12|0);
        HEAP32[$305>>2] = $292;
        STACKTOP = sp;return;
       }
       $306 = $p$0;
       $307 = $psize$1 >>> 8;
       $308 = ($307|0)==(0);
       do {
        if ($308) {
         $I18$0 = 0;
        } else {
         $309 = ($psize$1>>>0)>(16777215);
         if ($309) {
          $I18$0 = 31;
          break;
         }
         $310 = (($307) + 1048320)|0;
         $311 = $310 >>> 16;
         $312 = $311 & 8;
         $313 = $307 << $312;
         $314 = (($313) + 520192)|0;
         $315 = $314 >>> 16;
         $316 = $315 & 4;
         $317 = $316 | $312;
         $318 = $313 << $316;
         $319 = (($318) + 245760)|0;
         $320 = $319 >>> 16;
         $321 = $320 & 2;
         $322 = $317 | $321;
         $323 = (14 - ($322))|0;
         $324 = $318 << $321;
         $325 = $324 >>> 15;
         $326 = (($323) + ($325))|0;
         $327 = $326 << 1;
         $328 = (($326) + 7)|0;
         $329 = $psize$1 >>> $328;
         $330 = $329 & 1;
         $331 = $330 | $327;
         $I18$0 = $331;
        }
       } while(0);
       $332 = (((54496) + ($I18$0<<2)|0) + 304|0);
       $333 = (($p$0) + 28|0);
       $I18$0$c = $I18$0;
       HEAP32[$333>>2] = $I18$0$c;
       $334 = (($p$0) + 20|0);
       HEAP32[$334>>2] = 0;
       $335 = (($p$0) + 16|0);
       HEAP32[$335>>2] = 0;
       $336 = HEAP32[(((54496) + 4|0))>>2]|0;
       $337 = 1 << $I18$0;
       $338 = $336 & $337;
       $339 = ($338|0)==(0);
       L199: do {
        if ($339) {
         $340 = $336 | $337;
         HEAP32[(((54496) + 4|0))>>2] = $340;
         HEAP32[$332>>2] = $306;
         $341 = (($p$0) + 24|0);
         $$c = $332;
         HEAP32[$341>>2] = $$c;
         $342 = (($p$0) + 12|0);
         HEAP32[$342>>2] = $p$0;
         $343 = (($p$0) + 8|0);
         HEAP32[$343>>2] = $p$0;
        } else {
         $344 = HEAP32[$332>>2]|0;
         $345 = ($I18$0|0)==(31);
         if ($345) {
          $348 = 0;
         } else {
          $346 = $I18$0 >>> 1;
          $347 = (25 - ($346))|0;
          $348 = $347;
         }
         $349 = (($344) + 4|0);
         $350 = HEAP32[$349>>2]|0;
         $351 = $350 & -8;
         $352 = ($351|0)==($psize$1|0);
         L205: do {
          if ($352) {
           $T$0$lcssa = $344;
          } else {
           $353 = $psize$1 << $348;
           $K19$057 = $353;$T$056 = $344;
           while(1) {
            $359 = $K19$057 >>> 31;
            $360 = ((($T$056) + ($359<<2)|0) + 16|0);
            $361 = HEAP32[$360>>2]|0;
            $362 = ($361|0)==(0|0);
            if ($362) {
             break;
            }
            $354 = $K19$057 << 1;
            $355 = (($361) + 4|0);
            $356 = HEAP32[$355>>2]|0;
            $357 = $356 & -8;
            $358 = ($357|0)==($psize$1|0);
            if ($358) {
             $T$0$lcssa = $361;
             break L205;
            } else {
             $T$056$phi = $361;$K19$057 = $354;$T$056 = $T$056$phi;
            }
           }
           $363 = $360;
           $364 = HEAP32[(((54496) + 16|0))>>2]|0;
           $365 = ($363>>>0)<($364>>>0);
           if ($365) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$360>>2] = $306;
            $366 = (($p$0) + 24|0);
            $T$0$c13 = $T$056;
            HEAP32[$366>>2] = $T$0$c13;
            $367 = (($p$0) + 12|0);
            HEAP32[$367>>2] = $p$0;
            $368 = (($p$0) + 8|0);
            HEAP32[$368>>2] = $p$0;
            break L199;
           }
          }
         } while(0);
         $369 = (($T$0$lcssa) + 8|0);
         $370 = HEAP32[$369>>2]|0;
         $371 = $T$0$lcssa;
         $372 = HEAP32[(((54496) + 16|0))>>2]|0;
         $373 = ($371>>>0)<($372>>>0);
         if ($373) {
          _abort();
          // unreachable;
         }
         $374 = $370;
         $375 = ($374>>>0)<($372>>>0);
         if ($375) {
          _abort();
          // unreachable;
         } else {
          $376 = (($370) + 12|0);
          HEAP32[$376>>2] = $306;
          HEAP32[$369>>2] = $306;
          $377 = (($p$0) + 8|0);
          $$c12 = $370;
          HEAP32[$377>>2] = $$c12;
          $378 = (($p$0) + 12|0);
          $T$0$c = $T$0$lcssa;
          HEAP32[$378>>2] = $T$0$c;
          $379 = (($p$0) + 24|0);
          HEAP32[$379>>2] = 0;
          break;
         }
        }
       } while(0);
       $380 = HEAP32[(((54496) + 32|0))>>2]|0;
       $381 = (($380) + -1)|0;
       HEAP32[(((54496) + 32|0))>>2] = $381;
       $382 = ($381|0)==(0);
       if ($382) {
        $sp$0$in$i = (((54496) + 456|0));
       } else {
        STACKTOP = sp;return;
       }
       while(1) {
        $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
        $383 = ($sp$0$i|0)==(0|0);
        $384 = (($sp$0$i) + 8|0);
        if ($383) {
         break;
        } else {
         $sp$0$in$i$phi = $384;$sp$0$in$i = $sp$0$in$i$phi;
        }
       }
       HEAP32[(((54496) + 32|0))>>2] = -1;
       STACKTOP = sp;return;
      }
      function _realloc($oldmem,$bytes) {
       $oldmem = $oldmem|0;
       $bytes = $bytes|0;
       var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0;
       var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($oldmem|0)==(0|0);
       if ($1) {
        $2 = (_malloc($bytes)|0);
        $mem$0 = $2;
        STACKTOP = sp;return ($mem$0|0);
       }
       $3 = ($bytes>>>0)>(4294967231);
       if ($3) {
        $4 = (___errno_location()|0);
        HEAP32[$4>>2] = 12;
        $mem$0 = 0;
        STACKTOP = sp;return ($mem$0|0);
       }
       $5 = ($bytes>>>0)<(11);
       if ($5) {
        $8 = 16;
       } else {
        $6 = (($bytes) + 11)|0;
        $7 = $6 & -8;
        $8 = $7;
       }
       $9 = (($oldmem) + -8|0);
       $10 = $9;
       $11 = (_try_realloc_chunk($10,$8)|0);
       $12 = ($11|0)==(0|0);
       if (!($12)) {
        $13 = (($11) + 8|0);
        $14 = $13;
        $mem$0 = $14;
        STACKTOP = sp;return ($mem$0|0);
       }
       $15 = (_malloc($bytes)|0);
       $16 = ($15|0)==(0|0);
       if ($16) {
        $mem$0 = 0;
        STACKTOP = sp;return ($mem$0|0);
       }
       $17 = (($oldmem) + -4|0);
       $18 = $17;
       $19 = HEAP32[$18>>2]|0;
       $20 = $19 & -8;
       $21 = $19 & 3;
       $22 = ($21|0)==(0);
       $23 = $22 ? 8 : 4;
       $24 = (($20) - ($23))|0;
       $25 = ($24>>>0)<($bytes>>>0);
       $26 = $25 ? $24 : $bytes;
       _memcpy(($15|0),($oldmem|0),($26|0))|0;
       _free($oldmem);
       $mem$0 = $15;
       STACKTOP = sp;return ($mem$0|0);
      }
      function _try_realloc_chunk($p,$nb) {
       $p = $p|0;
       $nb = $nb|0;
       var $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum2728 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum78 = 0;
       var $$sum910 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
       var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
       var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
       var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
       var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
       var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
       var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
       var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
       var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
       var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
       var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0 = 0, $R$0$phi = 0, $R$1 = 0, $RP$0 = 0, $RP$0$phi = 0, $cond = 0, $newp$0 = 0;
       var $or$cond = 0, $storemerge = 0, $storemerge21 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = (($p) + 4|0);
       $2 = HEAP32[$1>>2]|0;
       $3 = $2 & -8;
       $4 = $p;
       $5 = (($4) + ($3)|0);
       $6 = $5;
       $7 = HEAP32[(((54496) + 16|0))>>2]|0;
       $8 = ($4>>>0)<($7>>>0);
       if ($8) {
        _abort();
        // unreachable;
       }
       $9 = $2 & 3;
       $10 = ($9|0)!=(1);
       $11 = ($4>>>0)<($5>>>0);
       $or$cond = $10 & $11;
       if (!($or$cond)) {
        _abort();
        // unreachable;
       }
       $$sum2728 = $3 | 4;
       $12 = (($4) + ($$sum2728)|0);
       $13 = $12;
       $14 = HEAP32[$13>>2]|0;
       $15 = $14 & 1;
       $16 = ($15|0)==(0);
       if ($16) {
        _abort();
        // unreachable;
       }
       $17 = ($9|0)==(0);
       if ($17) {
        $18 = ($nb>>>0)<(256);
        if ($18) {
         $newp$0 = 0;
         STACKTOP = sp;return ($newp$0|0);
        }
        $19 = (($nb) + 4)|0;
        $20 = ($3>>>0)<($19>>>0);
        do {
         if (!($20)) {
          $21 = (($3) - ($nb))|0;
          $22 = HEAP32[(((54968) + 8|0))>>2]|0;
          $23 = $22 << 1;
          $24 = ($21>>>0)>($23>>>0);
          if ($24) {
           break;
          } else {
           $newp$0 = $p;
          }
          STACKTOP = sp;return ($newp$0|0);
         }
        } while(0);
        $newp$0 = 0;
        STACKTOP = sp;return ($newp$0|0);
       }
       $25 = ($3>>>0)<($nb>>>0);
       if (!($25)) {
        $26 = (($3) - ($nb))|0;
        $27 = ($26>>>0)>(15);
        if (!($27)) {
         $newp$0 = $p;
         STACKTOP = sp;return ($newp$0|0);
        }
        $28 = (($4) + ($nb)|0);
        $29 = $28;
        $30 = $2 & 1;
        $31 = $30 | $nb;
        $32 = $31 | 2;
        HEAP32[$1>>2] = $32;
        $$sum23 = (($nb) + 4)|0;
        $33 = (($4) + ($$sum23)|0);
        $34 = $33;
        $35 = $26 | 3;
        HEAP32[$34>>2] = $35;
        $36 = HEAP32[$13>>2]|0;
        $37 = $36 | 1;
        HEAP32[$13>>2] = $37;
        _dispose_chunk($29,$26);
        $newp$0 = $p;
        STACKTOP = sp;return ($newp$0|0);
       }
       $38 = HEAP32[(((54496) + 24|0))>>2]|0;
       $39 = ($6|0)==($38|0);
       if ($39) {
        $40 = HEAP32[(((54496) + 12|0))>>2]|0;
        $41 = (($40) + ($3))|0;
        $42 = ($41>>>0)>($nb>>>0);
        if (!($42)) {
         $newp$0 = 0;
         STACKTOP = sp;return ($newp$0|0);
        }
        $43 = (($41) - ($nb))|0;
        $44 = (($4) + ($nb)|0);
        $45 = $44;
        $46 = $2 & 1;
        $47 = $46 | $nb;
        $48 = $47 | 2;
        HEAP32[$1>>2] = $48;
        $$sum22 = (($nb) + 4)|0;
        $49 = (($4) + ($$sum22)|0);
        $50 = $49;
        $51 = $43 | 1;
        HEAP32[$50>>2] = $51;
        HEAP32[(((54496) + 24|0))>>2] = $45;
        HEAP32[(((54496) + 12|0))>>2] = $43;
        $newp$0 = $p;
        STACKTOP = sp;return ($newp$0|0);
       }
       $52 = HEAP32[(((54496) + 20|0))>>2]|0;
       $53 = ($6|0)==($52|0);
       if ($53) {
        $54 = HEAP32[(((54496) + 8|0))>>2]|0;
        $55 = (($54) + ($3))|0;
        $56 = ($55>>>0)<($nb>>>0);
        if ($56) {
         $newp$0 = 0;
         STACKTOP = sp;return ($newp$0|0);
        }
        $57 = (($55) - ($nb))|0;
        $58 = ($57>>>0)>(15);
        if ($58) {
         $59 = (($4) + ($nb)|0);
         $60 = $59;
         $61 = (($4) + ($55)|0);
         $62 = $2 & 1;
         $63 = $62 | $nb;
         $64 = $63 | 2;
         HEAP32[$1>>2] = $64;
         $$sum19 = (($nb) + 4)|0;
         $65 = (($4) + ($$sum19)|0);
         $66 = $65;
         $67 = $57 | 1;
         HEAP32[$66>>2] = $67;
         $68 = $61;
         HEAP32[$68>>2] = $57;
         $$sum20 = (($55) + 4)|0;
         $69 = (($4) + ($$sum20)|0);
         $70 = $69;
         $71 = HEAP32[$70>>2]|0;
         $72 = $71 & -2;
         HEAP32[$70>>2] = $72;
         $storemerge = $60;$storemerge21 = $57;
        } else {
         $73 = $2 & 1;
         $74 = $73 | $55;
         $75 = $74 | 2;
         HEAP32[$1>>2] = $75;
         $$sum17 = (($55) + 4)|0;
         $76 = (($4) + ($$sum17)|0);
         $77 = $76;
         $78 = HEAP32[$77>>2]|0;
         $79 = $78 | 1;
         HEAP32[$77>>2] = $79;
         $storemerge = 0;$storemerge21 = 0;
        }
        HEAP32[(((54496) + 8|0))>>2] = $storemerge21;
        HEAP32[(((54496) + 20|0))>>2] = $storemerge;
        $newp$0 = $p;
        STACKTOP = sp;return ($newp$0|0);
       }
       $80 = $14 & 2;
       $81 = ($80|0)==(0);
       if (!($81)) {
        $newp$0 = 0;
        STACKTOP = sp;return ($newp$0|0);
       }
       $82 = $14 & -8;
       $83 = (($82) + ($3))|0;
       $84 = ($83>>>0)<($nb>>>0);
       if ($84) {
        $newp$0 = 0;
        STACKTOP = sp;return ($newp$0|0);
       }
       $85 = (($83) - ($nb))|0;
       $86 = $14 >>> 3;
       $87 = ($14>>>0)<(256);
       L52: do {
        if ($87) {
         $$sum15 = (($3) + 8)|0;
         $88 = (($4) + ($$sum15)|0);
         $89 = $88;
         $90 = HEAP32[$89>>2]|0;
         $$sum16 = (($3) + 12)|0;
         $91 = (($4) + ($$sum16)|0);
         $92 = $91;
         $93 = HEAP32[$92>>2]|0;
         $94 = $86 << 1;
         $95 = (((54496) + ($94<<2)|0) + 40|0);
         $96 = $95;
         $97 = ($90|0)==($96|0);
         do {
          if (!($97)) {
           $98 = $90;
           $99 = ($98>>>0)<($7>>>0);
           if ($99) {
            _abort();
            // unreachable;
           }
           $100 = (($90) + 12|0);
           $101 = HEAP32[$100>>2]|0;
           $102 = ($101|0)==($6|0);
           if ($102) {
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         $103 = ($93|0)==($90|0);
         if ($103) {
          $104 = 1 << $86;
          $105 = $104 ^ -1;
          $106 = HEAP32[((54496))>>2]|0;
          $107 = $106 & $105;
          HEAP32[((54496))>>2] = $107;
          break;
         }
         $108 = ($93|0)==($96|0);
         do {
          if ($108) {
           $$pre = (($93) + 8|0);
           $$pre$phiZ2D = $$pre;
          } else {
           $109 = $93;
           $110 = ($109>>>0)<($7>>>0);
           if ($110) {
            _abort();
            // unreachable;
           }
           $111 = (($93) + 8|0);
           $112 = HEAP32[$111>>2]|0;
           $113 = ($112|0)==($6|0);
           if ($113) {
            $$pre$phiZ2D = $111;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         $114 = (($90) + 12|0);
         HEAP32[$114>>2] = $93;
         HEAP32[$$pre$phiZ2D>>2] = $90;
        } else {
         $115 = $5;
         $$sum = (($3) + 24)|0;
         $116 = (($4) + ($$sum)|0);
         $117 = $116;
         $118 = HEAP32[$117>>2]|0;
         $$sum2 = (($3) + 12)|0;
         $119 = (($4) + ($$sum2)|0);
         $120 = $119;
         $121 = HEAP32[$120>>2]|0;
         $122 = ($121|0)==($115|0);
         do {
          if ($122) {
           $$sum4 = (($3) + 20)|0;
           $134 = (($4) + ($$sum4)|0);
           $135 = $134;
           $136 = HEAP32[$135>>2]|0;
           $137 = ($136|0)==(0|0);
           if ($137) {
            $$sum3 = (($3) + 16)|0;
            $138 = (($4) + ($$sum3)|0);
            $139 = $138;
            $140 = HEAP32[$139>>2]|0;
            $141 = ($140|0)==(0|0);
            if ($141) {
             $R$1 = 0;
             break;
            } else {
             $R$0 = $140;$RP$0 = $139;
            }
           } else {
            $R$0 = $136;$RP$0 = $135;
           }
           while(1) {
            $142 = (($R$0) + 20|0);
            $143 = HEAP32[$142>>2]|0;
            $144 = ($143|0)==(0|0);
            if (!($144)) {
             $RP$0$phi = $142;$R$0$phi = $143;$RP$0 = $RP$0$phi;$R$0 = $R$0$phi;
             continue;
            }
            $145 = (($R$0) + 16|0);
            $146 = HEAP32[$145>>2]|0;
            $147 = ($146|0)==(0|0);
            if ($147) {
             break;
            } else {
             $R$0 = $146;$RP$0 = $145;
            }
           }
           $148 = $RP$0;
           $149 = ($148>>>0)<($7>>>0);
           if ($149) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$RP$0>>2] = 0;
            $R$1 = $R$0;
            break;
           }
          } else {
           $$sum14 = (($3) + 8)|0;
           $123 = (($4) + ($$sum14)|0);
           $124 = $123;
           $125 = HEAP32[$124>>2]|0;
           $126 = $125;
           $127 = ($126>>>0)<($7>>>0);
           if ($127) {
            _abort();
            // unreachable;
           }
           $128 = (($125) + 12|0);
           $129 = HEAP32[$128>>2]|0;
           $130 = ($129|0)==($115|0);
           if (!($130)) {
            _abort();
            // unreachable;
           }
           $131 = (($121) + 8|0);
           $132 = HEAP32[$131>>2]|0;
           $133 = ($132|0)==($115|0);
           if ($133) {
            HEAP32[$128>>2] = $121;
            HEAP32[$131>>2] = $125;
            $R$1 = $121;
            break;
           } else {
            _abort();
            // unreachable;
           }
          }
         } while(0);
         $150 = ($118|0)==(0|0);
         if ($150) {
          break;
         }
         $$sum11 = (($3) + 28)|0;
         $151 = (($4) + ($$sum11)|0);
         $152 = $151;
         $153 = HEAP32[$152>>2]|0;
         $154 = (((54496) + ($153<<2)|0) + 304|0);
         $155 = HEAP32[$154>>2]|0;
         $156 = ($115|0)==($155|0);
         do {
          if ($156) {
           HEAP32[$154>>2] = $R$1;
           $cond = ($R$1|0)==(0|0);
           if (!($cond)) {
            break;
           }
           $157 = 1 << $153;
           $158 = $157 ^ -1;
           $159 = HEAP32[(((54496) + 4|0))>>2]|0;
           $160 = $159 & $158;
           HEAP32[(((54496) + 4|0))>>2] = $160;
           break L52;
          } else {
           $161 = $118;
           $162 = HEAP32[(((54496) + 16|0))>>2]|0;
           $163 = ($161>>>0)<($162>>>0);
           if ($163) {
            _abort();
            // unreachable;
           }
           $164 = (($118) + 16|0);
           $165 = HEAP32[$164>>2]|0;
           $166 = ($165|0)==($115|0);
           if ($166) {
            HEAP32[$164>>2] = $R$1;
           } else {
            $167 = (($118) + 20|0);
            HEAP32[$167>>2] = $R$1;
           }
           $168 = ($R$1|0)==(0|0);
           if ($168) {
            break L52;
           }
          }
         } while(0);
         $169 = $R$1;
         $170 = HEAP32[(((54496) + 16|0))>>2]|0;
         $171 = ($169>>>0)<($170>>>0);
         if ($171) {
          _abort();
          // unreachable;
         }
         $172 = (($R$1) + 24|0);
         HEAP32[$172>>2] = $118;
         $$sum12 = (($3) + 16)|0;
         $173 = (($4) + ($$sum12)|0);
         $174 = $173;
         $175 = HEAP32[$174>>2]|0;
         $176 = ($175|0)==(0|0);
         do {
          if (!($176)) {
           $177 = $175;
           $178 = HEAP32[(((54496) + 16|0))>>2]|0;
           $179 = ($177>>>0)<($178>>>0);
           if ($179) {
            _abort();
            // unreachable;
           } else {
            $180 = (($R$1) + 16|0);
            HEAP32[$180>>2] = $175;
            $181 = (($175) + 24|0);
            HEAP32[$181>>2] = $R$1;
            break;
           }
          }
         } while(0);
         $$sum13 = (($3) + 20)|0;
         $182 = (($4) + ($$sum13)|0);
         $183 = $182;
         $184 = HEAP32[$183>>2]|0;
         $185 = ($184|0)==(0|0);
         if ($185) {
          break;
         }
         $186 = $184;
         $187 = HEAP32[(((54496) + 16|0))>>2]|0;
         $188 = ($186>>>0)<($187>>>0);
         if ($188) {
          _abort();
          // unreachable;
         } else {
          $189 = (($R$1) + 20|0);
          HEAP32[$189>>2] = $184;
          $190 = (($184) + 24|0);
          HEAP32[$190>>2] = $R$1;
          break;
         }
        }
       } while(0);
       $191 = ($85>>>0)<(16);
       if ($191) {
        $192 = HEAP32[$1>>2]|0;
        $193 = $192 & 1;
        $194 = $83 | $193;
        $195 = $194 | 2;
        HEAP32[$1>>2] = $195;
        $$sum910 = $83 | 4;
        $196 = (($4) + ($$sum910)|0);
        $197 = $196;
        $198 = HEAP32[$197>>2]|0;
        $199 = $198 | 1;
        HEAP32[$197>>2] = $199;
        $newp$0 = $p;
        STACKTOP = sp;return ($newp$0|0);
       } else {
        $200 = (($4) + ($nb)|0);
        $201 = $200;
        $202 = HEAP32[$1>>2]|0;
        $203 = $202 & 1;
        $204 = $203 | $nb;
        $205 = $204 | 2;
        HEAP32[$1>>2] = $205;
        $$sum5 = (($nb) + 4)|0;
        $206 = (($4) + ($$sum5)|0);
        $207 = $206;
        $208 = $85 | 3;
        HEAP32[$207>>2] = $208;
        $$sum78 = $83 | 4;
        $209 = (($4) + ($$sum78)|0);
        $210 = $209;
        $211 = HEAP32[$210>>2]|0;
        $212 = $211 | 1;
        HEAP32[$210>>2] = $212;
        _dispose_chunk($201,$85);
        $newp$0 = $p;
        STACKTOP = sp;return ($newp$0|0);
       }
       return 0|0;
      }
      function _dispose_chunk($p,$psize) {
       $p = $p|0;
       $psize = $psize|0;
       var $$0 = 0, $$02 = 0, $$1 = 0, $$c = 0, $$c8 = 0, $$pre = 0, $$pre$phi63Z2D = 0, $$pre$phi65Z2D = 0, $$pre$phiZ2D = 0, $$pre62 = 0, $$pre64 = 0, $$sum = 0, $$sum1 = 0, $$sum12$pre = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0;
       var $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum4 = 0, $$sum5 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
       var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
       var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
       var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
       var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
       var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
       var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
       var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
       var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
       var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
       var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
       var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
       var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
       var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
       var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
       var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $38 = 0;
       var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
       var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
       var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
       var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $I19$0$c = 0, $K20$049 = 0, $R$0 = 0, $R$0$phi = 0, $R$1 = 0, $R7$0 = 0, $R7$0$phi = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$phi = 0, $RP9$0 = 0;
       var $RP9$0$phi = 0, $T$0$c = 0, $T$0$c9 = 0, $T$0$lcssa = 0, $T$048 = 0, $T$048$phi = 0, $cond = 0, $cond46 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = $p;
       $2 = (($1) + ($psize)|0);
       $3 = $2;
       $4 = (($p) + 4|0);
       $5 = HEAP32[$4>>2]|0;
       $6 = $5 & 1;
       $7 = ($6|0)==(0);
       L1: do {
        if ($7) {
         $8 = ($p);
         $9 = HEAP32[$8>>2]|0;
         $10 = $5 & 3;
         $11 = ($10|0)==(0);
         if ($11) {
          STACKTOP = sp;return;
         }
         $12 = (0 - ($9))|0;
         $13 = (($1) + ($12)|0);
         $14 = $13;
         $15 = (($9) + ($psize))|0;
         $16 = HEAP32[(((54496) + 16|0))>>2]|0;
         $17 = ($13>>>0)<($16>>>0);
         if ($17) {
          _abort();
          // unreachable;
         }
         $18 = HEAP32[(((54496) + 20|0))>>2]|0;
         $19 = ($14|0)==($18|0);
         if ($19) {
          $$sum = (($psize) + 4)|0;
          $125 = (($1) + ($$sum)|0);
          $126 = $125;
          $127 = HEAP32[$126>>2]|0;
          $128 = $127 & 3;
          $129 = ($128|0)==(3);
          if (!($129)) {
           $$0 = $14;$$02 = $15;
           break;
          }
          HEAP32[(((54496) + 8|0))>>2] = $15;
          $130 = HEAP32[$126>>2]|0;
          $131 = $130 & -2;
          HEAP32[$126>>2] = $131;
          $132 = $15 | 1;
          $$sum20 = (4 - ($9))|0;
          $133 = (($1) + ($$sum20)|0);
          $134 = $133;
          HEAP32[$134>>2] = $132;
          $135 = $2;
          HEAP32[$135>>2] = $15;
          STACKTOP = sp;return;
         }
         $20 = $9 >>> 3;
         $21 = ($9>>>0)<(256);
         if ($21) {
          $$sum30 = (8 - ($9))|0;
          $22 = (($1) + ($$sum30)|0);
          $23 = $22;
          $24 = HEAP32[$23>>2]|0;
          $$sum31 = (12 - ($9))|0;
          $25 = (($1) + ($$sum31)|0);
          $26 = $25;
          $27 = HEAP32[$26>>2]|0;
          $28 = $20 << 1;
          $29 = (((54496) + ($28<<2)|0) + 40|0);
          $30 = $29;
          $31 = ($24|0)==($30|0);
          do {
           if (!($31)) {
            $32 = $24;
            $33 = ($32>>>0)<($16>>>0);
            if ($33) {
             _abort();
             // unreachable;
            }
            $34 = (($24) + 12|0);
            $35 = HEAP32[$34>>2]|0;
            $36 = ($35|0)==($14|0);
            if ($36) {
             break;
            }
            _abort();
            // unreachable;
           }
          } while(0);
          $37 = ($27|0)==($24|0);
          if ($37) {
           $38 = 1 << $20;
           $39 = $38 ^ -1;
           $40 = HEAP32[((54496))>>2]|0;
           $41 = $40 & $39;
           HEAP32[((54496))>>2] = $41;
           $$0 = $14;$$02 = $15;
           break;
          }
          $42 = ($27|0)==($30|0);
          do {
           if ($42) {
            $$pre64 = (($27) + 8|0);
            $$pre$phi65Z2D = $$pre64;
           } else {
            $43 = $27;
            $44 = ($43>>>0)<($16>>>0);
            if ($44) {
             _abort();
             // unreachable;
            }
            $45 = (($27) + 8|0);
            $46 = HEAP32[$45>>2]|0;
            $47 = ($46|0)==($14|0);
            if ($47) {
             $$pre$phi65Z2D = $45;
             break;
            }
            _abort();
            // unreachable;
           }
          } while(0);
          $48 = (($24) + 12|0);
          HEAP32[$48>>2] = $27;
          HEAP32[$$pre$phi65Z2D>>2] = $24;
          $$0 = $14;$$02 = $15;
          break;
         }
         $49 = $13;
         $$sum22 = (24 - ($9))|0;
         $50 = (($1) + ($$sum22)|0);
         $51 = $50;
         $52 = HEAP32[$51>>2]|0;
         $$sum23 = (12 - ($9))|0;
         $53 = (($1) + ($$sum23)|0);
         $54 = $53;
         $55 = HEAP32[$54>>2]|0;
         $56 = ($55|0)==($49|0);
         do {
          if ($56) {
           $$sum24 = (16 - ($9))|0;
           $$sum25 = (($$sum24) + 4)|0;
           $68 = (($1) + ($$sum25)|0);
           $69 = $68;
           $70 = HEAP32[$69>>2]|0;
           $71 = ($70|0)==(0|0);
           if ($71) {
            $72 = (($1) + ($$sum24)|0);
            $73 = $72;
            $74 = HEAP32[$73>>2]|0;
            $75 = ($74|0)==(0|0);
            if ($75) {
             $R$1 = 0;
             break;
            } else {
             $R$0 = $74;$RP$0 = $73;
            }
           } else {
            $R$0 = $70;$RP$0 = $69;
           }
           while(1) {
            $76 = (($R$0) + 20|0);
            $77 = HEAP32[$76>>2]|0;
            $78 = ($77|0)==(0|0);
            if (!($78)) {
             $RP$0$phi = $76;$R$0$phi = $77;$RP$0 = $RP$0$phi;$R$0 = $R$0$phi;
             continue;
            }
            $79 = (($R$0) + 16|0);
            $80 = HEAP32[$79>>2]|0;
            $81 = ($80|0)==(0|0);
            if ($81) {
             break;
            } else {
             $R$0 = $80;$RP$0 = $79;
            }
           }
           $82 = $RP$0;
           $83 = ($82>>>0)<($16>>>0);
           if ($83) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$RP$0>>2] = 0;
            $R$1 = $R$0;
            break;
           }
          } else {
           $$sum29 = (8 - ($9))|0;
           $57 = (($1) + ($$sum29)|0);
           $58 = $57;
           $59 = HEAP32[$58>>2]|0;
           $60 = $59;
           $61 = ($60>>>0)<($16>>>0);
           if ($61) {
            _abort();
            // unreachable;
           }
           $62 = (($59) + 12|0);
           $63 = HEAP32[$62>>2]|0;
           $64 = ($63|0)==($49|0);
           if (!($64)) {
            _abort();
            // unreachable;
           }
           $65 = (($55) + 8|0);
           $66 = HEAP32[$65>>2]|0;
           $67 = ($66|0)==($49|0);
           if ($67) {
            HEAP32[$62>>2] = $55;
            HEAP32[$65>>2] = $59;
            $R$1 = $55;
            break;
           } else {
            _abort();
            // unreachable;
           }
          }
         } while(0);
         $84 = ($52|0)==(0|0);
         if ($84) {
          $$0 = $14;$$02 = $15;
          break;
         }
         $$sum26 = (28 - ($9))|0;
         $85 = (($1) + ($$sum26)|0);
         $86 = $85;
         $87 = HEAP32[$86>>2]|0;
         $88 = (((54496) + ($87<<2)|0) + 304|0);
         $89 = HEAP32[$88>>2]|0;
         $90 = ($49|0)==($89|0);
         do {
          if ($90) {
           HEAP32[$88>>2] = $R$1;
           $cond = ($R$1|0)==(0|0);
           if (!($cond)) {
            break;
           }
           $91 = 1 << $87;
           $92 = $91 ^ -1;
           $93 = HEAP32[(((54496) + 4|0))>>2]|0;
           $94 = $93 & $92;
           HEAP32[(((54496) + 4|0))>>2] = $94;
           $$0 = $14;$$02 = $15;
           break L1;
          } else {
           $95 = $52;
           $96 = HEAP32[(((54496) + 16|0))>>2]|0;
           $97 = ($95>>>0)<($96>>>0);
           if ($97) {
            _abort();
            // unreachable;
           }
           $98 = (($52) + 16|0);
           $99 = HEAP32[$98>>2]|0;
           $100 = ($99|0)==($49|0);
           if ($100) {
            HEAP32[$98>>2] = $R$1;
           } else {
            $101 = (($52) + 20|0);
            HEAP32[$101>>2] = $R$1;
           }
           $102 = ($R$1|0)==(0|0);
           if ($102) {
            $$0 = $14;$$02 = $15;
            break L1;
           }
          }
         } while(0);
         $103 = $R$1;
         $104 = HEAP32[(((54496) + 16|0))>>2]|0;
         $105 = ($103>>>0)<($104>>>0);
         if ($105) {
          _abort();
          // unreachable;
         }
         $106 = (($R$1) + 24|0);
         HEAP32[$106>>2] = $52;
         $$sum27 = (16 - ($9))|0;
         $107 = (($1) + ($$sum27)|0);
         $108 = $107;
         $109 = HEAP32[$108>>2]|0;
         $110 = ($109|0)==(0|0);
         do {
          if (!($110)) {
           $111 = $109;
           $112 = HEAP32[(((54496) + 16|0))>>2]|0;
           $113 = ($111>>>0)<($112>>>0);
           if ($113) {
            _abort();
            // unreachable;
           } else {
            $114 = (($R$1) + 16|0);
            HEAP32[$114>>2] = $109;
            $115 = (($109) + 24|0);
            HEAP32[$115>>2] = $R$1;
            break;
           }
          }
         } while(0);
         $$sum28 = (($$sum27) + 4)|0;
         $116 = (($1) + ($$sum28)|0);
         $117 = $116;
         $118 = HEAP32[$117>>2]|0;
         $119 = ($118|0)==(0|0);
         if ($119) {
          $$0 = $14;$$02 = $15;
          break;
         }
         $120 = $118;
         $121 = HEAP32[(((54496) + 16|0))>>2]|0;
         $122 = ($120>>>0)<($121>>>0);
         if ($122) {
          _abort();
          // unreachable;
         } else {
          $123 = (($R$1) + 20|0);
          HEAP32[$123>>2] = $118;
          $124 = (($118) + 24|0);
          HEAP32[$124>>2] = $R$1;
          $$0 = $14;$$02 = $15;
          break;
         }
        } else {
         $$0 = $p;$$02 = $psize;
        }
       } while(0);
       $136 = HEAP32[(((54496) + 16|0))>>2]|0;
       $137 = ($2>>>0)<($136>>>0);
       if ($137) {
        _abort();
        // unreachable;
       }
       $$sum1 = (($psize) + 4)|0;
       $138 = (($1) + ($$sum1)|0);
       $139 = $138;
       $140 = HEAP32[$139>>2]|0;
       $141 = $140 & 2;
       $142 = ($141|0)==(0);
       do {
        if ($142) {
         $143 = HEAP32[(((54496) + 24|0))>>2]|0;
         $144 = ($3|0)==($143|0);
         if ($144) {
          $145 = HEAP32[(((54496) + 12|0))>>2]|0;
          $146 = (($145) + ($$02))|0;
          HEAP32[(((54496) + 12|0))>>2] = $146;
          HEAP32[(((54496) + 24|0))>>2] = $$0;
          $147 = $146 | 1;
          $148 = (($$0) + 4|0);
          HEAP32[$148>>2] = $147;
          $149 = HEAP32[(((54496) + 20|0))>>2]|0;
          $150 = ($$0|0)==($149|0);
          if (!($150)) {
           STACKTOP = sp;return;
          }
          HEAP32[(((54496) + 20|0))>>2] = 0;
          HEAP32[(((54496) + 8|0))>>2] = 0;
          STACKTOP = sp;return;
         }
         $151 = HEAP32[(((54496) + 20|0))>>2]|0;
         $152 = ($3|0)==($151|0);
         if ($152) {
          $153 = HEAP32[(((54496) + 8|0))>>2]|0;
          $154 = (($153) + ($$02))|0;
          HEAP32[(((54496) + 8|0))>>2] = $154;
          HEAP32[(((54496) + 20|0))>>2] = $$0;
          $155 = $154 | 1;
          $156 = (($$0) + 4|0);
          HEAP32[$156>>2] = $155;
          $157 = $$0;
          $158 = (($157) + ($154)|0);
          $159 = $158;
          HEAP32[$159>>2] = $154;
          STACKTOP = sp;return;
         }
         $160 = $140 & -8;
         $161 = (($160) + ($$02))|0;
         $162 = $140 >>> 3;
         $163 = ($140>>>0)<(256);
         L101: do {
          if ($163) {
           $$sum18 = (($psize) + 8)|0;
           $164 = (($1) + ($$sum18)|0);
           $165 = $164;
           $166 = HEAP32[$165>>2]|0;
           $$sum19 = (($psize) + 12)|0;
           $167 = (($1) + ($$sum19)|0);
           $168 = $167;
           $169 = HEAP32[$168>>2]|0;
           $170 = $162 << 1;
           $171 = (((54496) + ($170<<2)|0) + 40|0);
           $172 = $171;
           $173 = ($166|0)==($172|0);
           do {
            if (!($173)) {
             $174 = $166;
             $175 = ($174>>>0)<($136>>>0);
             if ($175) {
              _abort();
              // unreachable;
             }
             $176 = (($166) + 12|0);
             $177 = HEAP32[$176>>2]|0;
             $178 = ($177|0)==($3|0);
             if ($178) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $179 = ($169|0)==($166|0);
           if ($179) {
            $180 = 1 << $162;
            $181 = $180 ^ -1;
            $182 = HEAP32[((54496))>>2]|0;
            $183 = $182 & $181;
            HEAP32[((54496))>>2] = $183;
            break;
           }
           $184 = ($169|0)==($172|0);
           do {
            if ($184) {
             $$pre62 = (($169) + 8|0);
             $$pre$phi63Z2D = $$pre62;
            } else {
             $185 = $169;
             $186 = ($185>>>0)<($136>>>0);
             if ($186) {
              _abort();
              // unreachable;
             }
             $187 = (($169) + 8|0);
             $188 = HEAP32[$187>>2]|0;
             $189 = ($188|0)==($3|0);
             if ($189) {
              $$pre$phi63Z2D = $187;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $190 = (($166) + 12|0);
           HEAP32[$190>>2] = $169;
           HEAP32[$$pre$phi63Z2D>>2] = $166;
          } else {
           $191 = $2;
           $$sum2 = (($psize) + 24)|0;
           $192 = (($1) + ($$sum2)|0);
           $193 = $192;
           $194 = HEAP32[$193>>2]|0;
           $$sum3 = (($psize) + 12)|0;
           $195 = (($1) + ($$sum3)|0);
           $196 = $195;
           $197 = HEAP32[$196>>2]|0;
           $198 = ($197|0)==($191|0);
           do {
            if ($198) {
             $$sum5 = (($psize) + 20)|0;
             $210 = (($1) + ($$sum5)|0);
             $211 = $210;
             $212 = HEAP32[$211>>2]|0;
             $213 = ($212|0)==(0|0);
             if ($213) {
              $$sum4 = (($psize) + 16)|0;
              $214 = (($1) + ($$sum4)|0);
              $215 = $214;
              $216 = HEAP32[$215>>2]|0;
              $217 = ($216|0)==(0|0);
              if ($217) {
               $R7$1 = 0;
               break;
              } else {
               $R7$0 = $216;$RP9$0 = $215;
              }
             } else {
              $R7$0 = $212;$RP9$0 = $211;
             }
             while(1) {
              $218 = (($R7$0) + 20|0);
              $219 = HEAP32[$218>>2]|0;
              $220 = ($219|0)==(0|0);
              if (!($220)) {
               $RP9$0$phi = $218;$R7$0$phi = $219;$RP9$0 = $RP9$0$phi;$R7$0 = $R7$0$phi;
               continue;
              }
              $221 = (($R7$0) + 16|0);
              $222 = HEAP32[$221>>2]|0;
              $223 = ($222|0)==(0|0);
              if ($223) {
               break;
              } else {
               $R7$0 = $222;$RP9$0 = $221;
              }
             }
             $224 = $RP9$0;
             $225 = ($224>>>0)<($136>>>0);
             if ($225) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP9$0>>2] = 0;
              $R7$1 = $R7$0;
              break;
             }
            } else {
             $$sum17 = (($psize) + 8)|0;
             $199 = (($1) + ($$sum17)|0);
             $200 = $199;
             $201 = HEAP32[$200>>2]|0;
             $202 = $201;
             $203 = ($202>>>0)<($136>>>0);
             if ($203) {
              _abort();
              // unreachable;
             }
             $204 = (($201) + 12|0);
             $205 = HEAP32[$204>>2]|0;
             $206 = ($205|0)==($191|0);
             if (!($206)) {
              _abort();
              // unreachable;
             }
             $207 = (($197) + 8|0);
             $208 = HEAP32[$207>>2]|0;
             $209 = ($208|0)==($191|0);
             if ($209) {
              HEAP32[$204>>2] = $197;
              HEAP32[$207>>2] = $201;
              $R7$1 = $197;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $226 = ($194|0)==(0|0);
           if ($226) {
            break;
           }
           $$sum14 = (($psize) + 28)|0;
           $227 = (($1) + ($$sum14)|0);
           $228 = $227;
           $229 = HEAP32[$228>>2]|0;
           $230 = (((54496) + ($229<<2)|0) + 304|0);
           $231 = HEAP32[$230>>2]|0;
           $232 = ($191|0)==($231|0);
           do {
            if ($232) {
             HEAP32[$230>>2] = $R7$1;
             $cond46 = ($R7$1|0)==(0|0);
             if (!($cond46)) {
              break;
             }
             $233 = 1 << $229;
             $234 = $233 ^ -1;
             $235 = HEAP32[(((54496) + 4|0))>>2]|0;
             $236 = $235 & $234;
             HEAP32[(((54496) + 4|0))>>2] = $236;
             break L101;
            } else {
             $237 = $194;
             $238 = HEAP32[(((54496) + 16|0))>>2]|0;
             $239 = ($237>>>0)<($238>>>0);
             if ($239) {
              _abort();
              // unreachable;
             }
             $240 = (($194) + 16|0);
             $241 = HEAP32[$240>>2]|0;
             $242 = ($241|0)==($191|0);
             if ($242) {
              HEAP32[$240>>2] = $R7$1;
             } else {
              $243 = (($194) + 20|0);
              HEAP32[$243>>2] = $R7$1;
             }
             $244 = ($R7$1|0)==(0|0);
             if ($244) {
              break L101;
             }
            }
           } while(0);
           $245 = $R7$1;
           $246 = HEAP32[(((54496) + 16|0))>>2]|0;
           $247 = ($245>>>0)<($246>>>0);
           if ($247) {
            _abort();
            // unreachable;
           }
           $248 = (($R7$1) + 24|0);
           HEAP32[$248>>2] = $194;
           $$sum15 = (($psize) + 16)|0;
           $249 = (($1) + ($$sum15)|0);
           $250 = $249;
           $251 = HEAP32[$250>>2]|0;
           $252 = ($251|0)==(0|0);
           do {
            if (!($252)) {
             $253 = $251;
             $254 = HEAP32[(((54496) + 16|0))>>2]|0;
             $255 = ($253>>>0)<($254>>>0);
             if ($255) {
              _abort();
              // unreachable;
             } else {
              $256 = (($R7$1) + 16|0);
              HEAP32[$256>>2] = $251;
              $257 = (($251) + 24|0);
              HEAP32[$257>>2] = $R7$1;
              break;
             }
            }
           } while(0);
           $$sum16 = (($psize) + 20)|0;
           $258 = (($1) + ($$sum16)|0);
           $259 = $258;
           $260 = HEAP32[$259>>2]|0;
           $261 = ($260|0)==(0|0);
           if ($261) {
            break;
           }
           $262 = $260;
           $263 = HEAP32[(((54496) + 16|0))>>2]|0;
           $264 = ($262>>>0)<($263>>>0);
           if ($264) {
            _abort();
            // unreachable;
           } else {
            $265 = (($R7$1) + 20|0);
            HEAP32[$265>>2] = $260;
            $266 = (($260) + 24|0);
            HEAP32[$266>>2] = $R7$1;
            break;
           }
          }
         } while(0);
         $267 = $161 | 1;
         $268 = (($$0) + 4|0);
         HEAP32[$268>>2] = $267;
         $269 = $$0;
         $270 = (($269) + ($161)|0);
         $271 = $270;
         HEAP32[$271>>2] = $161;
         $272 = HEAP32[(((54496) + 20|0))>>2]|0;
         $273 = ($$0|0)==($272|0);
         if (!($273)) {
          $$1 = $161;
          break;
         }
         HEAP32[(((54496) + 8|0))>>2] = $161;
         STACKTOP = sp;return;
        } else {
         $274 = $140 & -2;
         HEAP32[$139>>2] = $274;
         $275 = $$02 | 1;
         $276 = (($$0) + 4|0);
         HEAP32[$276>>2] = $275;
         $277 = $$0;
         $278 = (($277) + ($$02)|0);
         $279 = $278;
         HEAP32[$279>>2] = $$02;
         $$1 = $$02;
        }
       } while(0);
       $280 = $$1 >>> 3;
       $281 = ($$1>>>0)<(256);
       if ($281) {
        $282 = $280 << 1;
        $283 = (((54496) + ($282<<2)|0) + 40|0);
        $284 = $283;
        $285 = HEAP32[((54496))>>2]|0;
        $286 = 1 << $280;
        $287 = $285 & $286;
        $288 = ($287|0)==(0);
        do {
         if ($288) {
          $289 = $285 | $286;
          HEAP32[((54496))>>2] = $289;
          $$sum12$pre = (($282) + 2)|0;
          $$pre = (((54496) + ($$sum12$pre<<2)|0) + 40|0);
          $$pre$phiZ2D = $$pre;$F16$0 = $284;
         } else {
          $$sum13 = (($282) + 2)|0;
          $290 = (((54496) + ($$sum13<<2)|0) + 40|0);
          $291 = HEAP32[$290>>2]|0;
          $292 = $291;
          $293 = HEAP32[(((54496) + 16|0))>>2]|0;
          $294 = ($292>>>0)<($293>>>0);
          if (!($294)) {
           $$pre$phiZ2D = $290;$F16$0 = $291;
           break;
          }
          _abort();
          // unreachable;
         }
        } while(0);
        HEAP32[$$pre$phiZ2D>>2] = $$0;
        $295 = (($F16$0) + 12|0);
        HEAP32[$295>>2] = $$0;
        $296 = (($$0) + 8|0);
        HEAP32[$296>>2] = $F16$0;
        $297 = (($$0) + 12|0);
        HEAP32[$297>>2] = $284;
        STACKTOP = sp;return;
       }
       $298 = $$0;
       $299 = $$1 >>> 8;
       $300 = ($299|0)==(0);
       do {
        if ($300) {
         $I19$0 = 0;
        } else {
         $301 = ($$1>>>0)>(16777215);
         if ($301) {
          $I19$0 = 31;
          break;
         }
         $302 = (($299) + 1048320)|0;
         $303 = $302 >>> 16;
         $304 = $303 & 8;
         $305 = $299 << $304;
         $306 = (($305) + 520192)|0;
         $307 = $306 >>> 16;
         $308 = $307 & 4;
         $309 = $308 | $304;
         $310 = $305 << $308;
         $311 = (($310) + 245760)|0;
         $312 = $311 >>> 16;
         $313 = $312 & 2;
         $314 = $309 | $313;
         $315 = (14 - ($314))|0;
         $316 = $310 << $313;
         $317 = $316 >>> 15;
         $318 = (($315) + ($317))|0;
         $319 = $318 << 1;
         $320 = (($318) + 7)|0;
         $321 = $$1 >>> $320;
         $322 = $321 & 1;
         $323 = $322 | $319;
         $I19$0 = $323;
        }
       } while(0);
       $324 = (((54496) + ($I19$0<<2)|0) + 304|0);
       $325 = (($$0) + 28|0);
       $I19$0$c = $I19$0;
       HEAP32[$325>>2] = $I19$0$c;
       $326 = (($$0) + 20|0);
       HEAP32[$326>>2] = 0;
       $327 = (($$0) + 16|0);
       HEAP32[$327>>2] = 0;
       $328 = HEAP32[(((54496) + 4|0))>>2]|0;
       $329 = 1 << $I19$0;
       $330 = $328 & $329;
       $331 = ($330|0)==(0);
       if ($331) {
        $332 = $328 | $329;
        HEAP32[(((54496) + 4|0))>>2] = $332;
        HEAP32[$324>>2] = $298;
        $333 = (($$0) + 24|0);
        $$c = $324;
        HEAP32[$333>>2] = $$c;
        $334 = (($$0) + 12|0);
        HEAP32[$334>>2] = $$0;
        $335 = (($$0) + 8|0);
        HEAP32[$335>>2] = $$0;
        STACKTOP = sp;return;
       }
       $336 = HEAP32[$324>>2]|0;
       $337 = ($I19$0|0)==(31);
       if ($337) {
        $340 = 0;
       } else {
        $338 = $I19$0 >>> 1;
        $339 = (25 - ($338))|0;
        $340 = $339;
       }
       $341 = (($336) + 4|0);
       $342 = HEAP32[$341>>2]|0;
       $343 = $342 & -8;
       $344 = ($343|0)==($$1|0);
       L194: do {
        if ($344) {
         $T$0$lcssa = $336;
        } else {
         $345 = $$1 << $340;
         $K20$049 = $345;$T$048 = $336;
         while(1) {
          $351 = $K20$049 >>> 31;
          $352 = ((($T$048) + ($351<<2)|0) + 16|0);
          $353 = HEAP32[$352>>2]|0;
          $354 = ($353|0)==(0|0);
          if ($354) {
           break;
          }
          $346 = $K20$049 << 1;
          $347 = (($353) + 4|0);
          $348 = HEAP32[$347>>2]|0;
          $349 = $348 & -8;
          $350 = ($349|0)==($$1|0);
          if ($350) {
           $T$0$lcssa = $353;
           break L194;
          } else {
           $T$048$phi = $353;$K20$049 = $346;$T$048 = $T$048$phi;
          }
         }
         $355 = $352;
         $356 = HEAP32[(((54496) + 16|0))>>2]|0;
         $357 = ($355>>>0)<($356>>>0);
         if ($357) {
          _abort();
          // unreachable;
         }
         HEAP32[$352>>2] = $298;
         $358 = (($$0) + 24|0);
         $T$0$c9 = $T$048;
         HEAP32[$358>>2] = $T$0$c9;
         $359 = (($$0) + 12|0);
         HEAP32[$359>>2] = $$0;
         $360 = (($$0) + 8|0);
         HEAP32[$360>>2] = $$0;
         STACKTOP = sp;return;
        }
       } while(0);
       $361 = (($T$0$lcssa) + 8|0);
       $362 = HEAP32[$361>>2]|0;
       $363 = $T$0$lcssa;
       $364 = HEAP32[(((54496) + 16|0))>>2]|0;
       $365 = ($363>>>0)<($364>>>0);
       if ($365) {
        _abort();
        // unreachable;
       }
       $366 = $362;
       $367 = ($366>>>0)<($364>>>0);
       if ($367) {
        _abort();
        // unreachable;
       }
       $368 = (($362) + 12|0);
       HEAP32[$368>>2] = $298;
       HEAP32[$361>>2] = $298;
       $369 = (($$0) + 8|0);
       $$c8 = $362;
       HEAP32[$369>>2] = $$c8;
       $370 = (($$0) + 12|0);
       $T$0$c = $T$0$lcssa;
       HEAP32[$370>>2] = $T$0$c;
       $371 = (($$0) + 24|0);
       HEAP32[$371>>2] = 0;
       STACKTOP = sp;return;
      }
      function __Znwj($size) {
       $size = $size|0;
       var $$size = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($size|0)==(0);
       $$size = $1 ? 1 : $size;
       while(1) {
        $2 = (_malloc($$size)|0);
        $3 = ($2|0)==(0|0);
        if (!($3)) {
         label = 6;
         break;
        }
        $4 = HEAP32[(54992)>>2]|0;HEAP32[(54992)>>2] = (($4+0)|0);
        $5 = ($4|0)==(0);
        if ($5) {
         label = 5;
         break;
        }
        $6 = $4;
        FUNCTION_TABLE_v[$6 & 1]();
       }
       if ((label|0) == 5) {
        $7 = (___cxa_allocate_exception(4)|0);
        $8 = $7;
        HEAP32[$8>>2] = ((((55000) + 8|0)));
        ___cxa_throw(($7|0),((55056)|0),((98)|0));
        // unreachable;
       }
       else if ((label|0) == 6) {
        STACKTOP = sp;return ($2|0);
       }
       return 0|0;
      }
      function __ZdlPv($ptr) {
       $ptr = $ptr|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($ptr|0)==(0|0);
       if (!($1)) {
        _free($ptr);
       }
       STACKTOP = sp;return;
      }
      function __ZNSt9bad_allocD0Ev($this) {
       $this = $this|0;
       var $1 = 0, $2 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       __ZNSt9exceptionD2Ev(($1|0));
       $2 = $this;
       __ZdlPv($2);
       STACKTOP = sp;return;
      }
      function __ZNSt9bad_allocD2Ev($this) {
       $this = $this|0;
       var $1 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($this);
       __ZNSt9exceptionD2Ev(($1|0));
       STACKTOP = sp;return;
      }
      function __ZNKSt9bad_alloc4whatEv($this) {
       $this = $this|0;
       var label = 0, sp = 0;
       sp = STACKTOP;
       STACKTOP = sp;return ((55024)|0);
      }
      function _memcmp($vl,$vr,$n) {
       $vl = $vl|0;
       $vr = $vr|0;
       $n = $n|0;
       var $$03 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$04 = 0, $r$05 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($n|0)==(0);
       L1: do {
        if ($1) {
         $12 = 0;
        } else {
         $$03 = $n;$l$04 = $vl;$r$05 = $vr;
         while(1) {
          $2 = HEAP8[$l$04]|0;
          $3 = HEAP8[$r$05]|0;
          $4 = ($2<<24>>24)==($3<<24>>24);
          if (!($4)) {
           break;
          }
          $5 = (($$03) + -1)|0;
          $6 = (($l$04) + 1|0);
          $7 = (($r$05) + 1|0);
          $8 = ($5|0)==(0);
          if ($8) {
           $12 = 0;
           break L1;
          } else {
           $$03 = $5;$l$04 = $6;$r$05 = $7;
          }
         }
         $9 = $2&255;
         $10 = $3&255;
         $11 = (($9) - ($10))|0;
         $12 = $11;
        }
       } while(0);
       STACKTOP = sp;return ($12|0);
      }
      function _strcmp($l,$r) {
       $l = $l|0;
       $r = $r|0;
       var $$027 = 0, $$027$phi = 0, $$08 = 0, $$08$phi = 0, $$lcssa = 0, $$lcssa4 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
       var $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond36 = 0, $or$cond5 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = HEAP8[$l]|0;
       $2 = HEAP8[$r]|0;
       $3 = ($1<<24>>24)!=($2<<24>>24);
       $4 = ($1<<24>>24)==(0);
       $or$cond5 = $3 | $4;
       $5 = ($2<<24>>24)==(0);
       $or$cond36 = $or$cond5 | $5;
       if ($or$cond36) {
        $$lcssa = $1;$$lcssa4 = $2;
        $13 = $$lcssa&255;
        $14 = $$lcssa4&255;
        $15 = (($13) - ($14))|0;
        STACKTOP = sp;return ($15|0);
       } else {
        $$027 = $l;$$08 = $r;
       }
       while(1) {
        $6 = (($$027) + 1|0);
        $7 = (($$08) + 1|0);
        $8 = HEAP8[$6]|0;
        $9 = HEAP8[$7]|0;
        $10 = ($8<<24>>24)!=($9<<24>>24);
        $11 = ($8<<24>>24)==(0);
        $or$cond = $10 | $11;
        $12 = ($9<<24>>24)==(0);
        $or$cond3 = $or$cond | $12;
        if ($or$cond3) {
         $$lcssa = $8;$$lcssa4 = $9;
         break;
        } else {
         $$08$phi = $7;$$027$phi = $6;$$08 = $$08$phi;$$027 = $$027$phi;
        }
       }
       $13 = $$lcssa&255;
       $14 = $$lcssa4&255;
       $15 = (($13) - ($14))|0;
       STACKTOP = sp;return ($15|0);
      }
      function _strncmp($_l,$_r,$n) {
       $_l = $_l|0;
       $_r = $_r|0;
       $n = $n|0;
       var $$03 = 0, $$08 = 0, $$08$in = 0, $$08$in$phi = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$06 = 0;
       var $notlhs = 0, $notrhs = 0, $or$cond$not = 0, $or$cond4 = 0, $r$0$lcssa = 0, $r$07 = 0, label = 0, sp = 0;
       sp = STACKTOP;
       $1 = ($n|0)==(0);
       if ($1) {
        $$03 = 0;
        STACKTOP = sp;return ($$03|0);
       }
       $2 = HEAP8[$_l]|0;
       $3 = ($2<<24>>24)==(0);
       L4: do {
        if ($3) {
         $11 = 0;$r$0$lcssa = $_r;
        } else {
         $$08$in = $n;$4 = $2;$l$06 = $_l;$r$07 = $_r;
         while(1) {
          $$08 = (($$08$in) + -1)|0;
          $5 = HEAP8[$r$07]|0;
          $notlhs = ($5<<24>>24)!=(0);
          $notrhs = ($$08|0)!=(0);
          $or$cond$not = $notrhs & $notlhs;
          $6 = ($4<<24>>24)==($5<<24>>24);
          $or$cond4 = $or$cond$not & $6;
          if (!($or$cond4)) {
           $11 = $4;$r$0$lcssa = $r$07;
           break L4;
          }
          $7 = (($l$06) + 1|0);
          $8 = (($r$07) + 1|0);
          $9 = HEAP8[$7]|0;
          $10 = ($9<<24>>24)==(0);
          if ($10) {
           $11 = 0;$r$0$lcssa = $8;
           break;
          } else {
           $$08$in$phi = $$08;$4 = $9;$l$06 = $7;$r$07 = $8;$$08$in = $$08$in$phi;
          }
         }
        }
       } while(0);
       $12 = $11&255;
       $13 = HEAP8[$r$0$lcssa]|0;
       $14 = $13&255;
       $15 = (($12) - ($14))|0;
       $$03 = $15;
       STACKTOP = sp;return ($$03|0);
      }
      function runPostSets() {
       HEAP32[13766] = __ZTISt9exception;
      }
      function _memcpy(dest, src, num) {
          dest = dest|0; src = src|0; num = num|0;
          var ret = 0;
          if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
          ret = dest|0;
          if ((dest&3) == (src&3)) {
            while (dest & 3) {
              if ((num|0) == 0) return ret|0;
              HEAP8[(dest)]=((HEAP8[(src)])|0);
              dest = (dest+1)|0;
              src = (src+1)|0;
              num = (num-1)|0;
            }
            while ((num|0) >= 4) {
              HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
              dest = (dest+4)|0;
              src = (src+4)|0;
              num = (num-4)|0;
            }
          }
          while ((num|0) > 0) {
            HEAP8[(dest)]=((HEAP8[(src)])|0);
            dest = (dest+1)|0;
            src = (src+1)|0;
            num = (num-1)|0;
          }
          return ret|0;
      }
      function _memmove(dest, src, num) {
          dest = dest|0; src = src|0; num = num|0;
          var ret = 0;
          if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
            // Unlikely case: Copy backwards in a safe manner
            ret = dest;
            src = (src + num)|0;
            dest = (dest + num)|0;
            while ((num|0) > 0) {
              dest = (dest - 1)|0;
              src = (src - 1)|0;
              num = (num - 1)|0;
              HEAP8[(dest)]=((HEAP8[(src)])|0);
            }
            dest = ret;
          } else {
            _memcpy(dest, src, num) | 0;
          }
          return dest | 0;
      }
      function _memset(ptr, value, num) {
          ptr = ptr|0; value = value|0; num = num|0;
          var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
          stop = (ptr + num)|0;
          if ((num|0) >= 20) {
            // This is unaligned, but quite large, so work hard to get to aligned settings
            value = value & 0xff;
            unaligned = ptr & 3;
            value4 = value | (value << 8) | (value << 16) | (value << 24);
            stop4 = stop & ~3;
            if (unaligned) {
              unaligned = (ptr + 4 - unaligned)|0;
              while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
                HEAP8[(ptr)]=value;
                ptr = (ptr+1)|0;
              }
            }
            while ((ptr|0) < (stop4|0)) {
              HEAP32[((ptr)>>2)]=value4;
              ptr = (ptr+4)|0;
            }
          }
          while ((ptr|0) < (stop|0)) {
            HEAP8[(ptr)]=value;
            ptr = (ptr+1)|0;
          }
          return (ptr-num)|0;
      }
      function _strlen(ptr) {
          ptr = ptr|0;
          var curr = 0;
          curr = ptr;
          while (((HEAP8[(curr)])|0)) {
            curr = (curr + 1)|0;
          }
          return (curr - ptr)|0;
      }
      function _strncpy(pdest, psrc, num) {
          pdest = pdest|0; psrc = psrc|0; num = num|0;
          var padding = 0, curr = 0, i = 0;
          while ((i|0) < (num|0)) {
            curr = padding ? 0 : ((HEAP8[(((psrc)+(i))|0)])|0);
            HEAP8[(((pdest)+(i))|0)]=curr;
            padding = padding ? 1 : (((HEAP8[(((psrc)+(i))|0)])|0) == 0);
            i = (i+1)|0;
          }
          return pdest|0;
      }

      // EMSCRIPTEN_END_FUNCS

        
        function dynCall_iiii(index,a1,a2,a3) {
          index = index|0;
          a1=a1|0; a2=a2|0; a3=a3|0;
          return FUNCTION_TABLE_iiii[index&63](a1|0,a2|0,a3|0)|0;
        }


        function dynCall_vid(index,a1,a2) {
          index = index|0;
          a1=a1|0; a2=+a2;
          FUNCTION_TABLE_vid[index&15](a1|0,+a2);
        }


        function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
          index = index|0;
          a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
          FUNCTION_TABLE_viiiii[index&15](a1|0,a2|0,a3|0,a4|0,a5|0);
        }


        function dynCall_i(index) {
          index = index|0;
          
          return FUNCTION_TABLE_i[index&31]()|0;
        }


        function dynCall_vi(index,a1) {
          index = index|0;
          a1=a1|0;
          FUNCTION_TABLE_vi[index&127](a1|0);
        }


        function dynCall_vii(index,a1,a2) {
          index = index|0;
          a1=a1|0; a2=a2|0;
          FUNCTION_TABLE_vii[index&31](a1|0,a2|0);
        }


        function dynCall_ii(index,a1) {
          index = index|0;
          a1=a1|0;
          return FUNCTION_TABLE_ii[index&15](a1|0)|0;
        }


        function dynCall_v(index) {
          index = index|0;
          
          FUNCTION_TABLE_v[index&1]();
        }


        function dynCall_iiiii(index,a1,a2,a3,a4) {
          index = index|0;
          a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
          return FUNCTION_TABLE_iiiii[index&7](a1|0,a2|0,a3|0,a4|0)|0;
        }


        function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
          index = index|0;
          a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
          FUNCTION_TABLE_viiiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
        }


        function dynCall_iii(index,a1,a2) {
          index = index|0;
          a1=a1|0; a2=a2|0;
          return FUNCTION_TABLE_iii[index&63](a1|0,a2|0)|0;
        }


        function dynCall_viiii(index,a1,a2,a3,a4) {
          index = index|0;
          a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
          FUNCTION_TABLE_viiii[index&15](a1|0,a2|0,a3|0,a4|0);
        }

      function b0(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; abort(0);return 0; }
        function b1(p0,p1) { p0 = p0|0;p1 = +p1; abort(1); }
        function b2(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; abort(2); }
        function b3() { ; abort(3);return 0; }
        function b4(p0) { p0 = p0|0; abort(4); }
        function b5(p0,p1) { p0 = p0|0;p1 = p1|0; abort(5); }
        function b6(p0) { p0 = p0|0; abort(6);return 0; }
        function b7() { ; abort(7); }
        function ___cxa_pure_virtual__wrapper() { ; ___cxa_pure_virtual(); }
        function b8(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; abort(8);return 0; }
        function b9(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; abort(9); }
        function b10(p0,p1) { p0 = p0|0;p1 = p1|0; abort(10);return 0; }
        function b11(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; abort(11); }
        // EMSCRIPTEN_END_FUNCS
        var FUNCTION_TABLE_iiii = [b0,__ZN6Ay_Emu9load_mem_EPKhl,__ZNK6Ay_Emu11track_info_EP12track_info_ti,__ZN11Classic_Emu5play_ElPs,__ZN6Ay_Emu10run_clocksERii,__ZN7Ay_File9load_mem_EPKhl,__ZNK7Ay_File11track_info_EP12track_info_ti,__ZN9Gme_Info_5play_ElPs,__ZN8Gme_File9load_mem_EPKhl,__ZN13Subset_Reader10read_availEPvl,__ZN11Data_Reader4readEPvl,__ZN16Remaining_Reader10read_availEPvl,__ZN16Remaining_Reader4readEPvl,__ZN15Mem_File_Reader10read_availEPvl,__ZN14Effects_Buffer15set_sample_rateEli,__ZN14Effects_Buffer12read_samplesEPsl,__ZNK7Gbs_Emu11track_info_EP12track_info_ti,__ZN7Gbs_Emu10run_clocksERii,__ZNK8Gbs_File11track_info_EP12track_info_ti,__ZN7Gym_Emu9load_mem_EPKhl,__ZNK7Gym_Emu11track_info_EP12track_info_ti,__ZN7Gym_Emu5play_ElPs,__ZN8Gym_File9load_mem_EPKhl,__ZNK8Gym_File11track_info_EP12track_info_ti,__ZNK7Hes_Emu11track_info_EP12track_info_ti,__ZN7Hes_Emu10run_clocksERii,__ZNK8Hes_File11track_info_EP12track_info_ti,__ZNK7Kss_Emu11track_info_EP12track_info_ti,__ZN7Kss_Emu10run_clocksERii
        ,__ZNK8Kss_File11track_info_EP12track_info_ti,__ZN13Stereo_Buffer15set_sample_rateEli,__ZN13Stereo_Buffer12read_samplesEPsl,__ZNK7Nsf_Emu11track_info_EP12track_info_ti,__ZN7Nsf_Emu10run_clocksERii,__ZNK8Nsf_File11track_info_EP12track_info_ti,__ZNK8Nsfe_Emu11track_info_EP12track_info_ti,__ZNK9Nsfe_File11track_info_EP12track_info_ti,__ZN7Sap_Emu9load_mem_EPKhl,__ZNK7Sap_Emu11track_info_EP12track_info_ti,__ZN7Sap_Emu10run_clocksERii,__ZN8Sap_File9load_mem_EPKhl,__ZNK8Sap_File11track_info_EP12track_info_ti,__ZN7Spc_Emu9load_mem_EPKhl,__ZNK7Spc_Emu11track_info_EP12track_info_ti,__ZN7Spc_Emu5play_ElPs,__ZNK8Spc_File11track_info_EP12track_info_ti,__ZN7Vgm_Emu9load_mem_EPKhl,__ZNK7Vgm_Emu11track_info_EP12track_info_ti,__ZN7Vgm_Emu5play_ElPs,__ZN7Vgm_Emu10run_clocksERii,__ZNK8Vgm_File11track_info_EP12track_info_ti,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b0,b0,b0,b0,b0,b0,b0
        ,b0,b0,b0,b0,b0];
        var FUNCTION_TABLE_vid = [b1,__ZN6Ay_Emu10set_tempo_Ed,__ZN9Gme_Info_10set_tempo_Ed,__ZN7Gbs_Emu10set_tempo_Ed,__ZN7Gym_Emu10set_tempo_Ed,__ZN7Hes_Emu10set_tempo_Ed,__ZN7Kss_Emu10set_tempo_Ed,__ZN7Nsf_Emu10set_tempo_Ed,__ZN7Sap_Emu10set_tempo_Ed,__ZN7Spc_Emu10set_tempo_Ed,__ZN7Vgm_Emu10set_tempo_Ed,b1,b1,b1,b1,b1];
        var FUNCTION_TABLE_viiiii = [b2,__ZN6Ay_Emu9set_voiceEiP11Blip_BufferS1_S1_,__ZN7Gbs_Emu9set_voiceEiP11Blip_BufferS1_S1_,__ZN7Hes_Emu9set_voiceEiP11Blip_BufferS1_S1_,__ZN7Kss_Emu9set_voiceEiP11Blip_BufferS1_S1_,__ZN7Nsf_Emu9set_voiceEiP11Blip_BufferS1_S1_,__ZN7Sap_Emu9set_voiceEiP11Blip_BufferS1_S1_,__ZN7Vgm_Emu9set_voiceEiP11Blip_BufferS1_S1_,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b2,b2,b2,b2,b2];
        var FUNCTION_TABLE_i = [b3,__ZL10new_ay_emuv,__ZL11new_ay_filev,__ZL11new_gbs_emuv,__ZL12new_gbs_filev,__ZL11new_gym_emuv,__ZL12new_gym_filev,__ZL11new_hes_emuv,__ZL12new_hes_filev,__ZL11new_kss_emuv,__ZL12new_kss_filev,__ZL11new_nsf_emuv,__ZL12new_nsf_filev,__ZL12new_nsfe_emuv,__ZL13new_nsfe_filev,__ZL11new_sap_emuv,__ZL12new_sap_filev,__ZL11new_spc_emuv,__ZL12new_spc_filev,__ZL11new_vgm_emuv,__ZL12new_vgm_filev,b3,b3,b3,b3,b3,b3,b3,b3
        ,b3,b3,b3];
        var FUNCTION_TABLE_vi = [b4,__ZN6Ay_EmuD2Ev,__ZN6Ay_EmuD0Ev,__ZN9Music_Emu6unloadEv,__ZN9Music_Emu8pre_loadEv,__ZN9Music_Emu10post_load_Ev,__ZN8Gme_File15clear_playlist_Ev,__ZN7Ay_FileD1Ev,__ZN7Ay_FileD0Ev,__ZN9Gme_Info_8pre_loadEv,__ZN9Gme_Info_10post_load_Ev,__ZN11Classic_EmuD2Ev,__ZN11Classic_EmuD0Ev,__ZN13Subset_ReaderD1Ev,__ZN13Subset_ReaderD0Ev,__ZN16Remaining_ReaderD1Ev,__ZN16Remaining_ReaderD0Ev,__ZN15Mem_File_ReaderD1Ev,__ZN15Mem_File_ReaderD0Ev,__ZN11Data_ReaderD1Ev,__ZN11Data_ReaderD0Ev,__ZN11File_ReaderD1Ev,__ZN11File_ReaderD0Ev,__ZN14Dual_ResamplerD2Ev,__ZN14Dual_ResamplerD0Ev,__ZN14Effects_BufferD2Ev,__ZN14Effects_BufferD0Ev,__ZN14Effects_Buffer5clearEv,__ZN7Gbs_EmuD2Ev
        ,__ZN7Gbs_EmuD0Ev,__ZN7Gbs_Emu6unloadEv,__ZN8Gbs_FileD1Ev,__ZN8Gbs_FileD0Ev,__ZN8Gme_FileD2Ev,__ZN8Gme_FileD0Ev,__ZN8Gme_File6unloadEv,__ZN8Gme_File8pre_loadEv,__ZN8Gme_File10post_load_Ev,__ZN7Gym_EmuD2Ev,__ZN7Gym_EmuD0Ev,__ZThn320_N7Gym_EmuD1Ev,__ZThn320_N7Gym_EmuD0Ev,__ZN8Gym_FileD1Ev,__ZN8Gym_FileD0Ev,__ZN7Hes_EmuD2Ev,__ZN7Hes_EmuD0Ev,__ZN7Hes_Emu6unloadEv,__ZN8Hes_FileD1Ev,__ZN8Hes_FileD0Ev,__ZN7Kss_EmuD2Ev,__ZN7Kss_EmuD0Ev,__ZN7Kss_Emu6unloadEv,__ZN8Kss_FileD1Ev,__ZN8Kss_FileD0Ev,__ZN12Multi_BufferD1Ev,__ZN12Multi_BufferD0Ev,__ZN13Stereo_BufferD2Ev,__ZN13Stereo_BufferD0Ev,__ZN13Stereo_Buffer5clearEv
        ,__ZN9Music_EmuD2Ev,__ZN9Music_EmuD0Ev,__ZN9Gme_Info_D1Ev,__ZN9Gme_Info_D0Ev,__ZN7Nsf_EmuD2Ev,__ZN7Nsf_EmuD0Ev,__ZN7Nsf_Emu6unloadEv,__ZN8Nsf_FileD1Ev,__ZN8Nsf_FileD0Ev,__ZN8Nsfe_EmuD2Ev,__ZN8Nsfe_EmuD0Ev,__ZN8Nsfe_Emu6unloadEv,__ZN8Nsfe_Emu15clear_playlist_Ev,__ZN9Nsfe_FileD1Ev,__ZN9Nsfe_FileD0Ev,__ZN7Sap_EmuD2Ev,__ZN7Sap_EmuD0Ev,__ZN8Sap_FileD1Ev,__ZN8Sap_FileD0Ev,__ZN7Spc_EmuD2Ev,__ZN7Spc_EmuD0Ev,__ZN8Spc_FileD1Ev,__ZN8Spc_FileD0Ev,__ZN7Vgm_EmuD2Ev,__ZN7Vgm_EmuD0Ev,__ZThn336_N7Vgm_EmuD1Ev,__ZThn336_N7Vgm_EmuD0Ev,__ZN8Vgm_FileD1Ev,__ZN8Vgm_FileD0Ev,__ZN12Vgm_Emu_ImplD1Ev
        ,__ZN12Vgm_Emu_ImplD0Ev,__ZThn336_N12Vgm_Emu_ImplD1Ev,__ZThn336_N12Vgm_Emu_ImplD0Ev,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
        ,b4,b4,b4,b4,b4,b4,b4,b4,b4];
        var FUNCTION_TABLE_vii = [b5,__ZN11Classic_Emu10set_bufferEP12Multi_Buffer,__ZN11Classic_Emu14set_equalizer_ERK15gme_equalizer_t,__ZN9Music_Emu16enable_accuracy_Eb,__ZN11Classic_Emu12mute_voices_Ei,__ZN6Ay_Emu9update_eqERK9blip_eq_t,__ZN9Music_Emu10set_bufferEP12Multi_Buffer,__ZN9Gme_Info_14set_equalizer_ERK15gme_equalizer_t,__ZN9Gme_Info_16enable_accuracy_Eb,__ZN9Gme_Info_12mute_voices_Ei,__ZN14Effects_Buffer10clock_rateEl,__ZN14Effects_Buffer9bass_freqEi,__ZN14Effects_Buffer9end_frameEi,__ZN14Effects_Buffer6configERKNS_8config_tE,__ZN7Gbs_Emu9update_eqERK9blip_eq_t,__ZN9Music_Emu14set_equalizer_ERK15gme_equalizer_t,__ZN7Gym_Emu12mute_voices_Ei,__ZN7Hes_Emu9update_eqERK9blip_eq_t,__ZN7Kss_Emu9update_eqERK9blip_eq_t,__ZN13Stereo_Buffer10clock_rateEl,__ZN13Stereo_Buffer9bass_freqEi,__ZN13Stereo_Buffer9end_frameEi,__ZN7Nsf_Emu9update_eqERK9blip_eq_t,__ZN7Sap_Emu9update_eqERK9blip_eq_t,__ZN7Spc_Emu16enable_accuracy_Eb,__ZN7Spc_Emu12mute_voices_Ei,__ZN7Vgm_Emu12mute_voices_Ei,__ZN7Vgm_Emu9update_eqERK9blip_eq_t,b5
        ,b5,b5,b5];
        var FUNCTION_TABLE_ii = [b6,__ZNK13Subset_Reader6remainEv,__ZNK16Remaining_Reader6remainEv,__ZNK11File_Reader6remainEv,__ZNK15Mem_File_Reader4sizeEv,__ZNK15Mem_File_Reader4tellEv,__ZNK14Effects_Buffer13samples_availEv,__ZNK13Stereo_Buffer13samples_availEv,__ZNKSt9bad_alloc4whatEv,b6,b6,b6,b6,b6,b6,b6];
        var FUNCTION_TABLE_v = [b7,___cxa_pure_virtual__wrapper];
        var FUNCTION_TABLE_iiiii = [b8,__ZN7Gym_Emu10play_frameEiiPs,__ZThn320_N7Gym_Emu10play_frameEiiPs,__ZN12Vgm_Emu_Impl10play_frameEiiPs,__ZThn336_N12Vgm_Emu_Impl10play_frameEiiPs,b8,b8,b8];
        var FUNCTION_TABLE_viiiiii = [b9,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib];
        var FUNCTION_TABLE_iii = [b10,__ZN8Gme_File5load_ER11Data_Reader,__ZN11Classic_Emu16set_sample_rate_El,__ZN6Ay_Emu12start_track_Ei,__ZN9Music_Emu5skip_El,__ZN9Gme_Info_16set_sample_rate_El,__ZN9Gme_Info_12start_track_Ei,__ZN11Data_Reader4skipEl,__ZN11File_Reader4skipEl,__ZN15Mem_File_Reader4seekEl,__ZN12Multi_Buffer17set_channel_countEi,__ZN7Gbs_Emu5load_ER11Data_Reader,__ZN7Gbs_Emu12start_track_Ei,__ZN8Gbs_File5load_ER11Data_Reader,__ZN7Gym_Emu16set_sample_rate_El,__ZN7Gym_Emu12start_track_Ei,__ZN7Hes_Emu5load_ER11Data_Reader,__ZN7Hes_Emu12start_track_Ei,__ZN8Hes_File5load_ER11Data_Reader,__ZN7Kss_Emu5load_ER11Data_Reader,__ZN7Kss_Emu12start_track_Ei,__ZN8Kss_File5load_ER11Data_Reader,__ZN7Nsf_Emu5load_ER11Data_Reader,__ZN7Nsf_Emu12start_track_Ei,__ZN8Nsf_File5load_ER11Data_Reader,__ZN8Nsfe_Emu5load_ER11Data_Reader,__ZN8Nsfe_Emu12start_track_Ei,__ZN9Nsfe_File5load_ER11Data_Reader,__ZN7Sap_Emu12start_track_Ei
        ,__ZN7Spc_Emu16set_sample_rate_El,__ZN7Spc_Emu12start_track_Ei,__ZN7Spc_Emu5skip_El,__ZN8Spc_File5load_ER11Data_Reader,__ZN7Vgm_Emu16set_sample_rate_El,__ZN7Vgm_Emu12start_track_Ei,__ZN8Vgm_File5load_ER11Data_Reader,__ZN7Nsf_Emu8pcm_readEPvj,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
        ,b10,b10,b10,b10,b10];
        var FUNCTION_TABLE_viiii = [b11,__ZN14Effects_Buffer7channelEii,__ZN13Stereo_Buffer7channelEii,__ZN18ym2612_update_chanILi0EE4funcER8tables_tR9channel_tPsi,__ZN18ym2612_update_chanILi1EE4funcER8tables_tR9channel_tPsi,__ZN18ym2612_update_chanILi2EE4funcER8tables_tR9channel_tPsi,__ZN18ym2612_update_chanILi3EE4funcER8tables_tR9channel_tPsi,__ZN18ym2612_update_chanILi4EE4funcER8tables_tR9channel_tPsi,__ZN18ym2612_update_chanILi5EE4funcER8tables_tR9channel_tPsi,__ZN18ym2612_update_chanILi6EE4funcER8tables_tR9channel_tPsi,__ZN18ym2612_update_chanILi7EE4funcER8tables_tR9channel_tPsi,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b11,b11];

        return { _strlen: _strlen, _open_data: _open_data, _generate_sound_data: _generate_sound_data, _realloc: _realloc, _open_track: _open_track, _memmove: _memmove, _initialize: _initialize, _memset: _memset, _malloc: _malloc, _free: _free, _memcpy: _memcpy, _strncpy: _strncpy, _track_info: _track_info, _track_count: _track_count, _gmemujs_test: _gmemujs_test, _track_start: _track_start, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, setTempRet1: setTempRet1, setTempRet2: setTempRet2, setTempRet3: setTempRet3, setTempRet4: setTempRet4, setTempRet5: setTempRet5, setTempRet6: setTempRet6, setTempRet7: setTempRet7, setTempRet8: setTempRet8, setTempRet9: setTempRet9, dynCall_iiii: dynCall_iiii, dynCall_vid: dynCall_vid, dynCall_viiiii: dynCall_viiiii, dynCall_i: dynCall_i, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_ii: dynCall_ii, dynCall_v: dynCall_v, dynCall_iiiii: dynCall_iiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_iii: dynCall_iii, dynCall_viiii: dynCall_viiii };
      })
      // EMSCRIPTEN_END_ASM
      ({ "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array }, { "abort": abort, "assert": assert, "asmPrintInt": asmPrintInt, "asmPrintFloat": asmPrintFloat, "min": Math_min, "invoke_iiii": invoke_iiii, "invoke_vid": invoke_vid, "invoke_viiiii": invoke_viiiii, "invoke_i": invoke_i, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_v": invoke_v, "invoke_iiiii": invoke_iiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_iii": invoke_iii, "invoke_viiii": invoke_viiii, "_fabs": _fabs, "_sin": _sin, "_strrchr": _strrchr, "__ZSt9terminatev": __ZSt9terminatev, "_fmod": _fmod, "___cxa_guard_acquire": ___cxa_guard_acquire, "_llvm_lifetime_start": _llvm_lifetime_start, "__reallyNegative": __reallyNegative, "___cxa_is_number_type": ___cxa_is_number_type, "___assert_fail": ___assert_fail, "_llvm_invariant_start": _llvm_invariant_start, "___cxa_allocate_exception": ___cxa_allocate_exception, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "_floor": _floor, "_fflush": _fflush, "___cxa_guard_release": ___cxa_guard_release, "_llvm_pow_f64": _llvm_pow_f64, "___setErrNo": ___setErrNo, "_sbrk": _sbrk, "_snprintf": _snprintf, "___cxa_begin_catch": ___cxa_begin_catch, "_emscripten_memcpy_big": _emscripten_memcpy_big, "___resumeException": ___resumeException, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "_sysconf": _sysconf, "___cxa_throw": ___cxa_throw, "_cos": _cos, "_sprintf": _sprintf, "_llvm_lifetime_end": _llvm_lifetime_end, "_toupper": _toupper, "___errno_location": ___errno_location, "__ZNSt9exceptionD2Ev": __ZNSt9exceptionD2Ev, "___cxa_does_inherit": ___cxa_does_inherit, "__exit": __exit, "_abort": _abort, "_time": _time, "__formatString": __formatString, "_log10": _log10, "_exit": _exit, "___cxa_pure_virtual": ___cxa_pure_virtual, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "NaN": NaN, "Infinity": Infinity, "__ZTISt9exception": __ZTISt9exception }, buffer);
      var _strlen = Module["_strlen"] = asm["_strlen"];
      var _open_data = Module["_open_data"] = asm["_open_data"];
      var _generate_sound_data = Module["_generate_sound_data"] = asm["_generate_sound_data"];
      var _realloc = Module["_realloc"] = asm["_realloc"];
      var _open_track = Module["_open_track"] = asm["_open_track"];
      var _memmove = Module["_memmove"] = asm["_memmove"];
      var _initialize = Module["_initialize"] = asm["_initialize"];
      var _memset = Module["_memset"] = asm["_memset"];
      var _malloc = Module["_malloc"] = asm["_malloc"];
      var _free = Module["_free"] = asm["_free"];
      var _memcpy = Module["_memcpy"] = asm["_memcpy"];
      var _strncpy = Module["_strncpy"] = asm["_strncpy"];
      var _track_info = Module["_track_info"] = asm["_track_info"];
      var _track_count = Module["_track_count"] = asm["_track_count"];
      var _gmemujs_test = Module["_gmemujs_test"] = asm["_gmemujs_test"];
      var _track_start = Module["_track_start"] = asm["_track_start"];
      var runPostSets = Module["runPostSets"] = asm["runPostSets"];
      var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
      var dynCall_vid = Module["dynCall_vid"] = asm["dynCall_vid"];
      var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
      var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
      var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
      var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
      var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
      var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
      var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
      var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
      var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
      var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];

      Runtime.stackAlloc = function(size) { return asm['stackAlloc'](size) };
      Runtime.stackSave = function() { return asm['stackSave']() };
      Runtime.stackRestore = function(top) { asm['stackRestore'](top) };


      // Warning: printing of i64 values may be slightly rounded! No deep i64 math used, so precise i64 code not included
      var i64Math = null;

      // === Auto-generated postamble setup entry stuff ===

      if (memoryInitializer) {
        if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
          var data = Module['readBinary'](memoryInitializer);
          HEAPU8.set(data, STATIC_BASE);
        } else {
          addRunDependency('memory initializer');
          Browser.asyncLoad(memoryInitializer, function(data) {
            HEAPU8.set(data, STATIC_BASE);
            removeRunDependency('memory initializer');
          }, function(data) {
            throw 'could not load memory initializer ' + memoryInitializer;
          });
        }
      }

      function ExitStatus(status) {
        this.name = "ExitStatus";
        this.message = "Program terminated with exit(" + status + ")";
        this.status = status;
      };
      ExitStatus.prototype = new Error();
      ExitStatus.prototype.constructor = ExitStatus;

      var initialStackTop;
      var preloadStartTime = null;
      var calledMain = false;

      dependenciesFulfilled = function runCaller() {
        // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
        if (!Module['calledRun'] && shouldRunNow) run();
        if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
      }

      Module['callMain'] = Module.callMain = function callMain(args) {
        assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
        assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

        args = args || [];

        if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
          Module.printErr('preload time: ' + (Date.now() - preloadStartTime) + ' ms');
        }

        ensureInitRuntime();

        var argc = args.length+1;
        function pad() {
          for (var i = 0; i < 4-1; i++) {
            argv.push(0);
          }
        }
        var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_NORMAL) ];
        pad();
        for (var i = 0; i < argc-1; i = i + 1) {
          argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
          pad();
        }
        argv.push(0);
        argv = allocate(argv, 'i32', ALLOC_NORMAL);

        initialStackTop = STACKTOP;

        try {

          var ret = Module['_main'](argc, argv, 0);


          // if we're not running an evented main loop, it's time to exit
          if (!Module['noExitRuntime']) {
            exit(ret);
          }
        }
        catch(e) {
          if (e instanceof ExitStatus) {
            // exit() throws this once it's done to make sure execution
            // has been stopped completely
            return;
          } else if (e == 'SimulateInfiniteLoop') {
            // running an evented main loop, don't immediately exit
            Module['noExitRuntime'] = true;
            return;
          } else {
            if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
            throw e;
          }
        } finally {
          calledMain = true;
        }
      }




      function run(args) {
        args = args || Module['arguments'];

        if (preloadStartTime === null) preloadStartTime = Date.now();

        if (runDependencies > 0) {
          Module.printErr('run() called, but dependencies remain, so not running');
          return;
        }

        preRun();

        if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
        if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

        function doRun() {
          if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
          Module['calledRun'] = true;

          ensureInitRuntime();

          preMain();

          if (Module['_main'] && shouldRunNow) {
            Module['callMain'](args);
          }

          postRun();
        }

        if (Module['setStatus']) {
          Module['setStatus']('Running...');
          setTimeout(function() {
            setTimeout(function() {
              Module['setStatus']('');
            }, 1);
            if (!ABORT) doRun();
          }, 1);
        } else {
          doRun();
        }
      }
      Module['run'] = Module.run = run;

      function exit(status) {
        ABORT = true;
        EXITSTATUS = status;
        STACKTOP = initialStackTop;

        // exit the runtime
        exitRuntime();

        // TODO We should handle this differently based on environment.
        // In the browser, the best we can do is throw an exception
        // to halt execution, but in node we could process.exit and
        // I'd imagine SM shell would have something equivalent.
        // This would let us set a proper exit status (which
        // would be great for checking test exit statuses).
        // https://github.com/kripken/emscripten/issues/1371

        // throw an exception to halt the current execution
        throw new ExitStatus(status);
      }
      Module['exit'] = Module.exit = exit;

      function abort(text) {
        if (text) {
          Module.print(text);
          Module.printErr(text);
        }

        ABORT = true;
        EXITSTATUS = 1;

        var extra = '\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.';

        throw 'abort() at ' + stackTrace() + extra;
      }
      Module['abort'] = Module.abort = abort;

      // {{PRE_RUN_ADDITIONS}}

      if (Module['preInit']) {
        if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
        while (Module['preInit'].length > 0) {
          Module['preInit'].pop()();
        }
      }

      // shouldRunNow refers to calling main(), not run().
      var shouldRunNow = true;
      if (Module['noInitialRun']) {
        shouldRunNow = false;
      }


      run();

      // {{POST_RUN_ADDITIONS}}






      // {{MODULE_ADDITIONS}}




      return Module;
    }();
    

    return {
      helloWorld : _Module.cwrap('gmemujs_test', "string", []),
      initialize : _Module.cwrap('initialize', "number", ["number", "number"]),
      openData : _Module.cwrap('open_data', "number", ["number","array","number"]),
      trackCount : _Module.cwrap('track_count', "number", ["number"]),
      openTrack : _Module.cwrap('open_track', "number", ["number", "number"]),
      trackInfo : _Module.cwrap('track_info', "string", ["number"]),
      trackStart : _Module.cwrap('track_start', "number", ["number"]),
      generateSoundData : _Module.cwrap('generate_sound_data', "number", ["number"]),
      getValue : _Module.getValue.bind(_Module)
    };
  }();
  
  var audioContext = new AudioContext();
  var scriptProcessor = audioContext.createScriptProcessor(8192, 2, 2);
  scriptProcessor.connect(audioContext.destination);
    
  var gmemujs = function () {
    this.audioContext = audioContext;
    this.scriptProcessor = scriptProcessor;
    this.scriptProcessor.onaudioprocess = this._onaudioprocess.bind(this);
      this.scriptProcessor.connect(this.audioContext.destination);
    this._c_albumBuilder = Module.initialize(this.audioContext.sampleRate, this.scriptProcessor.bufferSize);
  };

  gmemujs.prototype = {
    _c_albumBuilder : undefined,
    _c_playInfo : undefined,
    audioContext : undefined,
    scriptProcessor : undefined,

    _onaudioprocess : function (e) {
      if (this._c_playInfo) {
        var bufferSize = 8192;
        var buffer = Module.generateSoundData(bufferSize);
        var channels = [e.outputBuffer.getChannelData(0), e.outputBuffer.getChannelData(1)];
        //console.log(buffer);
              //  var left = e.outputBuffer.getChannelData(0);
                //var right = e.outputBuffer.getChannelData(1);
        //console.log(e.outputBuffer.numberOfChannels);
         for (var i = 0; i < bufferSize; i++) {
          for (var n = 0; n < e.outputBuffer.numberOfChannels; n++) {
         channels[n][i] = Module.getValue(buffer + i * e.outputBuffer.numberOfChannels * 2 + n * 4, "i32") / INT16_MAX;
            //left[i] = Module.getValue(buffer + (i * 4), 'i16');
            //right[i] = Module.getValue(buffer + (i * 4) + 2, 'i16');
            //if (left[i] + right[1]) {
            //console.log(i + ": " + left[i] + ", " + right[i]);
          }
          }
      }
    },
    read : function (data) {
      return new Album (this, data);
    },
    play : function (track) {
      this._c_playInfo = Module.trackStart(track._c_track);
      console.log('play begin');
    }
  };

  gmemujs.load = function (file, cb) {
    var _instance = new gmemujs();
    var xhr = new XMLHttpRequest();
    xhr.open("GET", file, true);
    xhr.responseType = "arraybuffer";
    xhr.onload = function(e) {
      var payload = new Uint8Array(this.response);
      var file = gmemujs.read(payload);
      cb.call(file, e, _instance, xhr);
    };
    xhr.send();
    return xhr;
  };

  gmemujs.helloWorld = function () {
    return Module.helloWorld();
  };

  gmemujs.read = function (data) {
    var _instance = new gmemujs ();
    return _instance.read(data);
  };

  gmemujs.init = function () {

  };

  var Album = function (gme, data) {
    // Module here
    this._c_album = Module.openData(gme._c_albumBuilder, data, data.length);
    this.gme = gme;
  };

  Album.prototype = {
    _c_album : undefined,
    gme : undefined,
    _trackCount : undefined,
    trackCount : function () {
      return this._trackCount || (this._trackCount = Module.trackCount(this._c_album));
    },
    track : function (trackNumber) {
      if (trackNumber > this.trackCount() || trackNumber < 0) {
        // do something
        return undefined;
      } 

      return new Track (this, trackNumber);
    }
  };

  var Track = function (album, number) {
    this.album = album;
    this.number = number;
    this._c_track = Module.openTrack(album, number);
  };

  Track.prototype = {
    _c_track : undefined,
    _info : undefined,
    info : function (field) {
      this._info =  this._info || JSON.parse(Module.trackInfo(this._c_track));
      return field ? this._info[field] : {
        "length": this._info.length,
        "system": this._info.system,
        "game": this._info.game,
        "song": this._info.song,
        "author": this._info.author,
        "copyright": this._info.copyright,
        "comment": this._info.comment,
        "dumper": this._info.dumper
      };
    },
    play : function () {
      this.album.gme.play(this);
    }
  };

  return gmemujs;
});